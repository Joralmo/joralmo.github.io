!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n(7);var r=function(t){return t&&"object"==typeof t&&"default"in t?t.default:t}(n(4));t.exports=r},function(t,e,n){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,i){"use strict";var o=[],a=n.document,s=Object.getPrototypeOf,u=o.slice,c=o.concat,h=o.push,l=o.indexOf,f={},d=f.toString,p=f.hasOwnProperty,y=p.toString,m=y.call(Object),g={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},b=function(t){return null!=t&&t===t.window},w={type:!0,src:!0,noModule:!0};function T(t,e,n){var r,i=(e=e||a).createElement("script");if(i.text=t,n)for(r in w)n[r]&&(i[r]=n[r]);e.head.appendChild(i).parentNode.removeChild(i)}function E(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?f[d.call(t)]||"object":typeof t}var S=function(t,e){return new S.fn.init(t,e)},C=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function I(t){var e=!!t&&"length"in t&&t.length,n=E(t);return!v(t)&&!b(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}S.fn=S.prototype={jquery:"3.3.1",constructor:S,length:0,toArray:function(){return u.call(this)},get:function(t){return null==t?u.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=S.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return S.each(this,t)},map:function(t){return this.pushStack(S.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:o.sort,splice:o.splice},S.extend=S.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(t=arguments[s]))for(e in t)n=a[e],a!==(r=t[e])&&(c&&r&&(S.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&S.isPlainObject(n)?n:{},a[e]=S.extend(c,o,r)):void 0!==r&&(a[e]=r));return a},S.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==d.call(t))&&(!(e=s(t))||"function"==typeof(n=p.call(e,"constructor")&&e.constructor)&&y.call(n)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){T(t)},each:function(t,e){var n,r=0;if(I(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(C,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(I(Object(t))?S.merge(n,"string"==typeof t?[t]:t):h.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:l.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,a=[];if(I(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&a.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&a.push(i);return c.apply([],a)},guid:1,support:g}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=o[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){f["[object "+e+"]"]=e.toLowerCase()});var _=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(t){var e,n,r,i,o,a,s,u,c,h,l,f,d,p,y,m,g,v,b,w="sizzle"+1*new Date,T=t.document,E=0,S=0,C=at(),I=at(),_=at(),D=function(t,e){return t===e&&(l=!0),0},A={}.hasOwnProperty,N=[],k=N.pop,x=N.push,O=N.push,R=N.slice,P=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+L+"*("+q+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+L+"*\\]",B=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",V=new RegExp(L+"+","g"),U=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),j=new RegExp("^"+L+"*,"+L+"*"),W=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),K=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),Q=new RegExp(B),H=new RegExp("^"+q+"$"),G={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},z=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),tt=function(t,e,n){var r="0x"+e-65536;return r!=r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){f()},it=vt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{O.apply(N=R.call(T.childNodes),T.childNodes),N[T.childNodes.length].nodeType}catch(t){O={apply:N.length?function(t,e){x.apply(t,R.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function ot(t,e,r,i){var o,s,c,h,l,p,g,v=e&&e.ownerDocument,E=e?e.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==E&&9!==E&&11!==E)return r;if(!i&&((e?e.ownerDocument||e:T)!==d&&f(e),e=e||d,y)){if(11!==E&&(l=J.exec(t)))if(o=l[1]){if(9===E){if(!(c=e.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(v&&(c=v.getElementById(o))&&b(e,c)&&c.id===o)return r.push(c),r}else{if(l[2])return O.apply(r,e.getElementsByTagName(t)),r;if((o=l[3])&&n.getElementsByClassName&&e.getElementsByClassName)return O.apply(r,e.getElementsByClassName(o)),r}if(n.qsa&&!_[t+" "]&&(!m||!m.test(t))){if(1!==E)v=e,g=t;else if("object"!==e.nodeName.toLowerCase()){for((h=e.getAttribute("id"))?h=h.replace(et,nt):e.setAttribute("id",h=w),s=(p=a(t)).length;s--;)p[s]="#"+h+" "+gt(p[s]);g=p.join(","),v=$.test(t)&&yt(e.parentNode)||e}if(g)try{return O.apply(r,v.querySelectorAll(g)),r}catch(t){}finally{h===w&&e.removeAttribute("id")}}}return u(t.replace(U,"$1"),e,r,i)}function at(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function st(t){return t[w]=!0,t}function ut(t){var e=d.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var n=t.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=e}function ht(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function lt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function dt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&it(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function pt(t){return st(function(e){return e=+e,st(function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function yt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=ot.support={},o=ot.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},f=ot.setDocument=function(t){var e,i,a=t?t.ownerDocument||t:T;return a!==d&&9===a.nodeType&&a.documentElement?(p=(d=a).documentElement,y=!o(d),T!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",rt,!1):i.attachEvent&&i.attachEvent("onunload",rt)),n.attributes=ut(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=ut(function(t){return t.appendChild(d.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(d.getElementsByClassName),n.getById=ut(function(t){return p.appendChild(t).id=w,!d.getElementsByName||!d.getElementsByName(w).length}),n.getById?(r.filter.ID=function(t){var e=t.replace(Z,tt);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&y){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(Z,tt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&y){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&y)return e.getElementsByClassName(t)},g=[],m=[],(n.qsa=Y.test(d.querySelectorAll))&&(ut(function(t){p.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+L+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+L+"*(?:value|"+M+")"),t.querySelectorAll("[id~="+w+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||m.push(".#.+[+~]")}),ut(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=d.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+L+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),p.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=Y.test(v=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ut(function(t){n.disconnectedMatch=v.call(t,"*"),v.call(t,"[s!='']:x"),g.push("!=",B)}),m=m.length&&new RegExp(m.join("|")),g=g.length&&new RegExp(g.join("|")),e=Y.test(p.compareDocumentPosition),b=e||Y.test(p.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},D=e?function(t,e){if(t===e)return l=!0,0;var r=!t.compareDocumentPosition-!e.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===r?t===d||t.ownerDocument===T&&b(T,t)?-1:e===d||e.ownerDocument===T&&b(T,e)?1:h?P(h,t)-P(h,e):0:4&r?-1:1)}:function(t,e){if(t===e)return l=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,a=[t],s=[e];if(!i||!o)return t===d?-1:e===d?1:i?-1:o?1:h?P(h,t)-P(h,e):0;if(i===o)return ht(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?ht(a[r],s[r]):a[r]===T?-1:s[r]===T?1:0},d):d},ot.matches=function(t,e){return ot(t,null,null,e)},ot.matchesSelector=function(t,e){if((t.ownerDocument||t)!==d&&f(t),e=e.replace(K,"='$1']"),n.matchesSelector&&y&&!_[e+" "]&&(!g||!g.test(e))&&(!m||!m.test(e)))try{var r=v.call(t,e);if(r||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){}return ot(e,d,null,[t]).length>0},ot.contains=function(t,e){return(t.ownerDocument||t)!==d&&f(t),b(t,e)},ot.attr=function(t,e){(t.ownerDocument||t)!==d&&f(t);var i=r.attrHandle[e.toLowerCase()],o=i&&A.call(r.attrHandle,e.toLowerCase())?i(t,e,!y):void 0;return void 0!==o?o:n.attributes||!y?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},ot.escape=function(t){return(t+"").replace(et,nt)},ot.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ot.uniqueSort=function(t){var e,r=[],i=0,o=0;if(l=!n.detectDuplicates,h=!n.sortStable&&t.slice(0),t.sort(D),l){for(;e=t[o++];)e===t[o]&&(i=r.push(o));for(;i--;)t.splice(r[i],1)}return h=null,t},i=ot.getText=function(t){var e,n="",r=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=i(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[r++];)n+=i(e);return n},(r=ot.selectors={cacheLength:50,createPseudo:st,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Z,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(Z,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ot.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ot.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return G.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&Q.test(n)&&(e=a(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Z,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=C[t+" "];return e||(e=new RegExp("(^|"+L+")"+t+"("+L+"|$)"))&&C(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(r){var i=ot.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(V," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var c,h,l,f,d,p,y=o!==a?"nextSibling":"previousSibling",m=e.parentNode,g=s&&e.nodeName.toLowerCase(),v=!u&&!s,b=!1;if(m){if(o){for(;y;){for(f=e;f=f[y];)if(s?f.nodeName.toLowerCase()===g:1===f.nodeType)return!1;p=y="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&v){for(b=(d=(c=(h=(l=(f=m)[w]||(f[w]={}))[f.uniqueID]||(l[f.uniqueID]={}))[t]||[])[0]===E&&c[1])&&c[2],f=d&&m.childNodes[d];f=++d&&f&&f[y]||(b=d=0)||p.pop();)if(1===f.nodeType&&++b&&f===e){h[t]=[E,d,b];break}}else if(v&&(b=d=(c=(h=(l=(f=e)[w]||(f[w]={}))[f.uniqueID]||(l[f.uniqueID]={}))[t]||[])[0]===E&&c[1]),!1===b)for(;(f=++d&&f&&f[y]||(b=d=0)||p.pop())&&((s?f.nodeName.toLowerCase()!==g:1!==f.nodeType)||!++b||(v&&((h=(l=f[w]||(f[w]={}))[f.uniqueID]||(l[f.uniqueID]={}))[t]=[E,b]),f!==e)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||ot.error("unsupported pseudo: "+t);return i[w]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?st(function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=P(t,o[a])]=!(n[r]=o[a])}):function(t){return i(t,0,n)}):i}},pseudos:{not:st(function(t){var e=[],n=[],r=s(t.replace(U,"$1"));return r[w]?st(function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:st(function(t){return function(e){return ot(t,e).length>0}}),contains:st(function(t){return t=t.replace(Z,tt),function(e){return(e.textContent||e.innerText||i(e)).indexOf(t)>-1}}),lang:st(function(t){return H.test(t||"")||ot.error("unsupported lang: "+t),t=t.replace(Z,tt).toLowerCase(),function(e){var n;do{if(n=y?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===p},focus:function(t){return t===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:dt(!1),disabled:dt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return z.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:pt(function(){return[0]}),last:pt(function(t,e){return[e-1]}),eq:pt(function(t,e,n){return[n<0?n+e:n]}),even:pt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:pt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:pt(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:pt(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=lt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=ft(e);function mt(){}function gt(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function vt(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=S++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,u){var c,h,l,f=[E,s];if(u){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,u))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(h=(l=e[w]||(e[w]={}))[e.uniqueID]||(l[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((c=h[o])&&c[0]===E&&c[1]===s)return f[2]=c[2];if(h[o]=f,f[2]=t(e,n,u))return!0}return!1}}function bt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function wt(t,e,n,r,i){for(var o,a=[],s=0,u=t.length,c=null!=e;s<u;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),c&&e.push(s)));return a}function Tt(t,e,n,r,i,o){return r&&!r[w]&&(r=Tt(r)),i&&!i[w]&&(i=Tt(i,o)),st(function(o,a,s,u){var c,h,l,f=[],d=[],p=a.length,y=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)ot(t,e[r],n);return n}(e||"*",s.nodeType?[s]:s,[]),m=!t||!o&&e?y:wt(y,f,t,s,u),g=n?i||(o?t:p||r)?[]:a:m;if(n&&n(m,g,s,u),r)for(c=wt(g,d),r(c,[],s,u),h=c.length;h--;)(l=c[h])&&(g[d[h]]=!(m[d[h]]=l));if(o){if(i||t){if(i){for(c=[],h=g.length;h--;)(l=g[h])&&c.push(m[h]=l);i(null,g=[],c,u)}for(h=g.length;h--;)(l=g[h])&&(c=i?P(o,l):f[h])>-1&&(o[c]=!(a[c]=l))}}else g=wt(g===a?g.splice(p,g.length):g),i?i(null,a,g,u):O.apply(a,g)})}function Et(t){for(var e,n,i,o=t.length,a=r.relative[t[0].type],s=a||r.relative[" "],u=a?1:0,h=vt(function(t){return t===e},s,!0),l=vt(function(t){return P(e,t)>-1},s,!0),f=[function(t,n,r){var i=!a&&(r||n!==c)||((e=n).nodeType?h(t,n,r):l(t,n,r));return e=null,i}];u<o;u++)if(n=r.relative[t[u].type])f=[vt(bt(f),n)];else{if((n=r.filter[t[u].type].apply(null,t[u].matches))[w]){for(i=++u;i<o&&!r.relative[t[i].type];i++);return Tt(u>1&&bt(f),u>1&&gt(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(U,"$1"),n,u<i&&Et(t.slice(u,i)),i<o&&Et(t=t.slice(i)),i<o&&gt(t))}f.push(n)}return bt(f)}return mt.prototype=r.filters=r.pseudos,r.setFilters=new mt,a=ot.tokenize=function(t,e){var n,i,o,a,s,u,c,h=I[t+" "];if(h)return e?0:h.slice(0);for(s=t,u=[],c=r.preFilter;s;){for(a in n&&!(i=j.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=W.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(U," ")}),s=s.slice(n.length)),r.filter)!(i=G[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?ot.error(t):I(t,u).slice(0)},s=ot.compile=function(t,e){var n,i=[],o=[],s=_[t+" "];if(!s){for(e||(e=a(t)),n=e.length;n--;)(s=Et(e[n]))[w]?i.push(s):o.push(s);(s=_(t,function(t,e){var n=e.length>0,i=t.length>0,o=function(o,a,s,u,h){var l,p,m,g=0,v="0",b=o&&[],w=[],T=c,S=o||i&&r.find.TAG("*",h),C=E+=null==T?1:Math.random()||.1,I=S.length;for(h&&(c=a===d||a||h);v!==I&&null!=(l=S[v]);v++){if(i&&l){for(p=0,a||l.ownerDocument===d||(f(l),s=!y);m=t[p++];)if(m(l,a||d,s)){u.push(l);break}h&&(E=C)}n&&((l=!m&&l)&&g--,o&&b.push(l))}if(g+=v,n&&v!==g){for(p=0;m=e[p++];)m(b,w,a,s);if(o){if(g>0)for(;v--;)b[v]||w[v]||(w[v]=k.call(u));w=wt(w)}O.apply(u,w),h&&!o&&w.length>0&&g+e.length>1&&ot.uniqueSort(u)}return h&&(E=C,c=T),b};return n?st(o):o}(o,i))).selector=t}return s},u=ot.select=function(t,e,n,i){var o,u,c,h,l,f="function"==typeof t&&t,d=!i&&a(t=f.selector||t);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===e.nodeType&&y&&r.relative[u[1].type]){if(!(e=(r.find.ID(c.matches[0].replace(Z,tt),e)||[])[0]))return n;f&&(e=e.parentNode),t=t.slice(u.shift().value.length)}for(o=G.needsContext.test(t)?0:u.length;o--&&(c=u[o],!r.relative[h=c.type]);)if((l=r.find[h])&&(i=l(c.matches[0].replace(Z,tt),$.test(u[0].type)&&yt(e.parentNode)||e))){if(u.splice(o,1),!(t=i.length&&gt(u)))return O.apply(n,i),n;break}}return(f||s(t,d))(i,e,!y,n,!e||$.test(t)&&yt(e.parentNode)||e),n},n.sortStable=w.split("").sort(D).join("")===w,n.detectDuplicates=!!l,f(),n.sortDetached=ut(function(t){return 1&t.compareDocumentPosition(d.createElement("fieldset"))}),ut(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ct("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&ut(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ct("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ut(function(t){return null==t.getAttribute("disabled")})||ct(M,function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),ot}(n);S.find=_,S.expr=_.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=_.uniqueSort,S.text=_.getText,S.isXMLDoc=_.isXML,S.contains=_.contains,S.escapeSelector=_.escape;var D=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&S(t).is(n))break;r.push(t)}return r},A=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},N=S.expr.match.needsContext;function k(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var x=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(t,e,n){return v(e)?S.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?S.grep(t,function(t){return t===e!==n}):"string"!=typeof e?S.grep(t,function(t){return l.call(e,t)>-1!==n}):S.filter(e,t,n)}S.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?S.find.matchesSelector(r,t)?[r]:[]:S.find.matches(t,S.grep(e,function(t){return 1===t.nodeType}))},S.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(S(t).filter(function(){for(e=0;e<r;e++)if(S.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)S.find(t,i[e],n);return r>1?S.uniqueSort(n):n},filter:function(t){return this.pushStack(O(this,t||[],!1))},not:function(t){return this.pushStack(O(this,t||[],!0))},is:function(t){return!!O(this,"string"==typeof t&&N.test(t)?S(t):t||[],!1).length}});var R,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||R,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:P.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof S?e[0]:e,S.merge(this,S.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:a,!0)),x.test(r[1])&&S.isPlainObject(e))for(r in e)v(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==n.ready?n.ready(t):t(S):S.makeArray(t,this)}).prototype=S.fn,R=S(a);var M=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function q(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}S.fn.extend({has:function(t){var e=S(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(S.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&S(t);if(!N.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&S.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?S.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?l.call(S(t),this[0]):l.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),S.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return D(t,"parentNode")},parentsUntil:function(t,e,n){return D(t,"parentNode",n)},next:function(t){return q(t,"nextSibling")},prev:function(t){return q(t,"previousSibling")},nextAll:function(t){return D(t,"nextSibling")},prevAll:function(t){return D(t,"previousSibling")},nextUntil:function(t,e,n){return D(t,"nextSibling",n)},prevUntil:function(t,e,n){return D(t,"previousSibling",n)},siblings:function(t){return A((t.parentNode||{}).firstChild,t)},children:function(t){return A(t.firstChild)},contents:function(t){return k(t,"iframe")?t.contentDocument:(k(t,"template")&&(t=t.content||t),S.merge([],t.childNodes))}},function(t,e){S.fn[t]=function(n,r){var i=S.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=S.filter(r,i)),this.length>1&&(L[t]||S.uniqueSort(i),M.test(t)&&i.reverse()),this.pushStack(i)}});var F=/[^\x20\t\r\n\f]+/g;function B(t){return t}function V(t){throw t}function U(t,e,n,r){var i;try{t&&v(i=t.promise)?i.call(t).done(e).fail(n):t&&v(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}S.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return S.each(t.match(F)||[],function(t,n){e[n]=!0}),e}(t):S.extend({},t);var e,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){S.each(n,function(n,r){v(r)?t.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==E(r)&&e(r)})}(arguments),n&&!e&&u()),this},remove:function(){return S.each(arguments,function(t,e){for(var n;(n=S.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(t){return t?S.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},S.extend({Deferred:function(t){var e=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return S.Deferred(function(n){S.each(e,function(e,r){var i=v(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&v(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(t,r,i){var o=0;function a(t,e,r,i){return function(){var s=this,u=arguments,c=function(){var n,c;if(!(t<o)){if((n=r.apply(s,u))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(c)?i?c.call(n,a(o,e,B,i),a(o,e,V,i)):(o++,c.call(n,a(o,e,B,i),a(o,e,V,i),a(o,e,B,e.notifyWith))):(r!==B&&(s=void 0,u=[n]),(i||e.resolveWith)(s,u))}},h=i?c:function(){try{c()}catch(n){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(n,h.stackTrace),t+1>=o&&(r!==V&&(s=void 0,u=[n]),e.rejectWith(s,u))}};t?h():(S.Deferred.getStackHook&&(h.stackTrace=S.Deferred.getStackHook()),n.setTimeout(h))}}return S.Deferred(function(n){e[0][3].add(a(0,n,v(i)?i:B,n.notifyWith)),e[1][3].add(a(0,n,v(t)?t:B)),e[2][3].add(a(0,n,v(r)?r:V))}).promise()},promise:function(t){return null!=t?S.extend(t,i):i}},o={};return S.each(e,function(t,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add(function(){r=s},e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=u.call(arguments),o=S.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?u.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(U(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||v(i[n]&&i[n].then)))return o.then();for(;n--;)U(i[n],a(n),o.reject);return o.promise()}});var j=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&j.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},S.readyException=function(t){n.setTimeout(function(){throw t})};var W=S.Deferred();function K(){a.removeEventListener("DOMContentLoaded",K),n.removeEventListener("load",K),S.ready()}S.fn.ready=function(t){return W.then(t).catch(function(t){S.readyException(t)}),this},S.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==t&&--S.readyWait>0||W.resolveWith(a,[S]))}}),S.ready.then=W.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(S.ready):(a.addEventListener("DOMContentLoaded",K),n.addEventListener("load",K));var Q=function(t,e,n,r,i,o,a){var s=0,u=t.length,c=null==n;if("object"===E(n))for(s in i=!0,n)Q(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(S(t),n)})),e))for(;s<u;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:c?e.call(t):u?e(t[0],n):o},H=/^-ms-/,G=/-([a-z])/g;function z(t,e){return e.toUpperCase()}function X(t){return t.replace(H,"ms-").replace(G,z)}var Y=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function J(){this.expando=S.expando+J.uid++}J.uid=1,J.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[X(e)]=n;else for(r in e)i[X(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in r?[e]:e.match(F)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||S.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!S.isEmptyObject(e)}};var $=new J,Z=new J,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}S.extend({hasData:function(t){return Z.hasData(t)||$.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return $.access(t,e,n)},_removeData:function(t,e){$.remove(t,e)}}),S.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=Z.get(o),1===o.nodeType&&!$.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=X(r.slice(5)),nt(o,r,i[r]));$.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){Z.set(this,t)}):Q(this,function(e){var n;if(o&&void 0===e)return void 0!==(n=Z.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each(function(){Z.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Z.remove(this,t)})}}),S.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=$.get(t,e),n&&(!r||Array.isArray(n)?r=$.access(t,e,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=S.queue(t,e),r=n.length,i=n.shift(),o=S._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,function(){S.dequeue(t,e)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return $.get(t,n)||$.access(t,n,{empty:S.Callbacks("once memory").add(function(){$.remove(t,[e+"queue",n])})})}}),S.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?S.queue(this[0],t):void 0===e?this:this.each(function(){var n=S.queue(this,t,e);S._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&S.dequeue(this,t)})},dequeue:function(t){return this.each(function(){S.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=S.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=$.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],at=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&S.contains(t.ownerDocument,t)&&"none"===S.css(t,"display")},st=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];for(o in i=n.apply(t,r||[]),e)t.style[o]=a[o];return i};function ut(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return S.css(t,e,"")},u=s(),c=n&&n[3]||(S.cssNumber[e]?"":"px"),h=(S.cssNumber[e]||"px"!==c&&+u)&&it.exec(S.css(t,e));if(h&&h[3]!==c){for(u/=2,c=c||h[3],h=+u||1;a--;)S.style(t,e,h+c),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),h/=o;h*=2,S.style(t,e,h+c),n=n||[]}return n&&(h=+h||+u||0,i=n[1]?h+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=h,r.end=i)),i}var ct={};function ht(t){var e,n=t.ownerDocument,r=t.nodeName,i=ct[r];return i||(e=n.body.appendChild(n.createElement(r)),i=S.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),ct[r]=i,i)}function lt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=$.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&at(r)&&(i[o]=ht(r))):"none"!==n&&(i[o]="none",$.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}S.fn.extend({show:function(){return lt(this,!0)},hide:function(){return lt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){at(this)?S(this).show():S(this).hide()})}});var ft=/^(?:checkbox|radio)$/i,dt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,pt=/^$|^module$|\/(?:java|ecma)script/i,yt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function mt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&k(t,e)?S.merge([t],n):n}function gt(t,e){for(var n=0,r=t.length;n<r;n++)$.set(t[n],"globalEval",!e||$.get(e[n],"globalEval"))}yt.optgroup=yt.option,yt.tbody=yt.tfoot=yt.colgroup=yt.caption=yt.thead,yt.th=yt.td;var vt=/<|&#?\w+;/;function bt(t,e,n,r,i){for(var o,a,s,u,c,h,l=e.createDocumentFragment(),f=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===E(o))S.merge(f,o.nodeType?[o]:o);else if(vt.test(o)){for(a=a||l.appendChild(e.createElement("div")),s=(dt.exec(o)||["",""])[1].toLowerCase(),u=yt[s]||yt._default,a.innerHTML=u[1]+S.htmlPrefilter(o)+u[2],h=u[0];h--;)a=a.lastChild;S.merge(f,a.childNodes),(a=l.firstChild).textContent=""}else f.push(e.createTextNode(o));for(l.textContent="",d=0;o=f[d++];)if(r&&S.inArray(o,r)>-1)i&&i.push(o);else if(c=S.contains(o.ownerDocument,o),a=mt(l.appendChild(o),"script"),c&&gt(a),n)for(h=0;o=a[h++];)pt.test(o.type||"")&&n.push(o);return l}!function(){var t=a.createDocumentFragment().appendChild(a.createElement("div")),e=a.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),g.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var wt=a.documentElement,Tt=/^key/,Et=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,St=/^([^.]*)(?:\.(.+)|)/;function Ct(){return!0}function It(){return!1}function _t(){try{return a.activeElement}catch(t){}}function Dt(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Dt(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=It;else if(!i)return t;return 1===o&&(a=i,(i=function(t){return S().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=S.guid++)),t.each(function(){S.event.add(this,e,i,r,n)})}S.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,c,h,l,f,d,p,y,m=$.get(t);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&S.find.matchesSelector(wt,i),n.guid||(n.guid=S.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(F)||[""]).length;c--;)d=y=(s=St.exec(e[c])||[])[1],p=(s[2]||"").split(".").sort(),d&&(l=S.event.special[d]||{},d=(i?l.delegateType:l.bindType)||d,l=S.event.special[d]||{},h=S.extend({type:d,origType:y,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&S.expr.match.needsContext.test(i),namespace:p.join(".")},o),(f=u[d])||((f=u[d]=[]).delegateCount=0,l.setup&&!1!==l.setup.call(t,r,p,a)||t.addEventListener&&t.addEventListener(d,a)),l.add&&(l.add.call(t,h),h.handler.guid||(h.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,h):f.push(h),S.event.global[d]=!0)},remove:function(t,e,n,r,i){var o,a,s,u,c,h,l,f,d,p,y,m=$.hasData(t)&&$.get(t);if(m&&(u=m.events)){for(c=(e=(e||"").match(F)||[""]).length;c--;)if(d=y=(s=St.exec(e[c])||[])[1],p=(s[2]||"").split(".").sort(),d){for(l=S.event.special[d]||{},f=u[d=(r?l.delegateType:l.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)h=f[o],!i&&y!==h.origType||n&&n.guid!==h.guid||s&&!s.test(h.namespace)||r&&r!==h.selector&&("**"!==r||!h.selector)||(f.splice(o,1),h.selector&&f.delegateCount--,l.remove&&l.remove.call(t,h));a&&!f.length&&(l.teardown&&!1!==l.teardown.call(t,p,m.handle)||S.removeEvent(t,d,m.handle),delete u[d])}else for(d in u)S.event.remove(t,d+e[c],n,r,!0);S.isEmptyObject(u)&&$.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=S.event.fix(t),u=new Array(arguments.length),c=($.get(this,"events")||{})[s.type]||[],h=S.event.special[s.type]||{};for(u[0]=s,e=1;e<arguments.length;e++)u[e]=arguments[e];if(s.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,s)){for(a=S.event.handlers.call(this,s,c),e=0;(i=a[e++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((S.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,s),s.result}},handlers:function(t,e){var n,r,i,o,a,s=[],u=e.delegateCount,c=t.target;if(u&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?S(i,this).index(c)>-1:S.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<e.length&&s.push({elem:c,handlers:e.slice(u)}),s},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[S.expando]?t:new S.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==_t()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===_t()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&k(this,"input"))return this.click(),!1},_default:function(t){return k(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},S.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},S.Event=function(t,e){if(!(this instanceof S.Event))return new S.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Ct:It,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&S.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:It,isPropagationStopped:It,isImmediatePropagationStopped:It,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Ct,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Ct,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Ct,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Tt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Et.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},S.event.addProp),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){S.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||S.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}}),S.fn.extend({on:function(t,e,n,r){return Dt(this,t,e,n,r)},one:function(t,e,n,r){return Dt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,S(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=It),this.each(function(){S.event.remove(this,t,n,e)})}});var At=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Nt=/<script|<style|<link/i,kt=/checked\s*(?:[^=]|=\s*.checked.)/i,xt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ot(t,e){return k(t,"table")&&k(11!==e.nodeType?e:e.firstChild,"tr")&&S(t).children("tbody")[0]||t}function Rt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Pt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Mt(t,e){var n,r,i,o,a,s,u,c;if(1===e.nodeType){if($.hasData(t)&&(o=$.access(t),a=$.set(e,o),c=o.events))for(i in delete a.handle,a.events={},c)for(n=0,r=c[i].length;n<r;n++)S.event.add(e,i,c[i][n]);Z.hasData(t)&&(s=Z.access(t),u=S.extend({},s),Z.set(e,u))}}function Lt(t,e){var n=e.nodeName.toLowerCase();"input"===n&&ft.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function qt(t,e,n,r){e=c.apply([],e);var i,o,a,s,u,h,l=0,f=t.length,d=f-1,p=e[0],y=v(p);if(y||f>1&&"string"==typeof p&&!g.checkClone&&kt.test(p))return t.each(function(i){var o=t.eq(i);y&&(e[0]=p.call(this,i,o.html())),qt(o,e,n,r)});if(f&&(o=(i=bt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=S.map(mt(i,"script"),Rt)).length;l<f;l++)u=i,l!==d&&(u=S.clone(u,!0,!0),s&&S.merge(a,mt(u,"script"))),n.call(t[l],u,l);if(s)for(h=a[a.length-1].ownerDocument,S.map(a,Pt),l=0;l<s;l++)u=a[l],pt.test(u.type||"")&&!$.access(u,"globalEval")&&S.contains(h,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?S._evalUrl&&S._evalUrl(u.src):T(u.textContent.replace(xt,""),h,u))}return t}function Ft(t,e,n){for(var r,i=e?S.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||S.cleanData(mt(r)),r.parentNode&&(n&&S.contains(r.ownerDocument,r)&&gt(mt(r,"script")),r.parentNode.removeChild(r));return t}S.extend({htmlPrefilter:function(t){return t.replace(At,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),u=S.contains(t.ownerDocument,t);if(!(g.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||S.isXMLDoc(t)))for(a=mt(s),r=0,i=(o=mt(t)).length;r<i;r++)Lt(o[r],a[r]);if(e)if(n)for(o=o||mt(t),a=a||mt(s),r=0,i=o.length;r<i;r++)Mt(o[r],a[r]);else Mt(t,s);return(a=mt(s,"script")).length>0&&gt(a,!u&&mt(t,"script")),s},cleanData:function(t){for(var e,n,r,i=S.event.special,o=0;void 0!==(n=t[o]);o++)if(Y(n)){if(e=n[$.expando]){if(e.events)for(r in e.events)i[r]?S.event.remove(n,r):S.removeEvent(n,r,e.handle);n[$.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),S.fn.extend({detach:function(t){return Ft(this,t,!0)},remove:function(t){return Ft(this,t)},text:function(t){return Q(this,function(t){return void 0===t?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return qt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ot(this,t).appendChild(t)})},prepend:function(){return qt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ot(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return qt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return qt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(S.cleanData(mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return S.clone(this,t,e)})},html:function(t){return Q(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Nt.test(t)&&!yt[(dt.exec(t)||["",""])[1].toLowerCase()]){t=S.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(S.cleanData(mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return qt(this,arguments,function(e){var n=this.parentNode;S.inArray(this,t)<0&&(S.cleanData(mt(this)),n&&n.replaceChild(e,this))},t)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){S.fn[t]=function(t){for(var n,r=[],i=S(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),S(i[a])[e](n),h.apply(r,n.get());return this.pushStack(r)}});var Bt=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Vt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Ut=new RegExp(ot.join("|"),"i");function jt(t,e,n){var r,i,o,a,s=t.style;return(n=n||Vt(t))&&(""!==(a=n.getPropertyValue(e)||n[e])||S.contains(t.ownerDocument,t)||(a=S.style(t,e)),!g.pixelBoxStyles()&&Bt.test(a)&&Ut.test(e)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Wt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(h){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",h.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",wt.appendChild(c).appendChild(h);var t=n.getComputedStyle(h);r="1%"!==t.top,u=12===e(t.marginLeft),h.style.right="60%",s=36===e(t.right),i=36===e(t.width),h.style.position="absolute",o=36===h.offsetWidth||"absolute",wt.removeChild(c),h=null}}function e(t){return Math.round(parseFloat(t))}var r,i,o,s,u,c=a.createElement("div"),h=a.createElement("div");h.style&&(h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===h.style.backgroundClip,S.extend(g,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),o}}))}();var Kt=/^(none|table(?!-c[ea]).+)/,Qt=/^--/,Ht={position:"absolute",visibility:"hidden",display:"block"},Gt={letterSpacing:"0",fontWeight:"400"},zt=["Webkit","Moz","ms"],Xt=a.createElement("div").style;function Yt(t){var e=S.cssProps[t];return e||(e=S.cssProps[t]=function(t){if(t in Xt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=zt.length;n--;)if((t=zt[n]+e)in Xt)return t}(t)||t),e}function Jt(t,e,n){var r=it.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function $t(t,e,n,r,i,o){var a="width"===e?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=S.css(t,n+ot[a],!0,i)),r?("content"===n&&(u-=S.css(t,"padding"+ot[a],!0,i)),"margin"!==n&&(u-=S.css(t,"border"+ot[a]+"Width",!0,i))):(u+=S.css(t,"padding"+ot[a],!0,i),"padding"!==n?u+=S.css(t,"border"+ot[a]+"Width",!0,i):s+=S.css(t,"border"+ot[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-u-s-.5))),u}function Zt(t,e,n){var r=Vt(t),i=jt(t,e,r),o="border-box"===S.css(t,"boxSizing",!1,r),a=o;if(Bt.test(i)){if(!n)return i;i="auto"}return a=a&&(g.boxSizingReliable()||i===t.style[e]),("auto"===i||!parseFloat(i)&&"inline"===S.css(t,"display",!1,r))&&(i=t["offset"+e[0].toUpperCase()+e.slice(1)],a=!0),(i=parseFloat(i)||0)+$t(t,e,n||(o?"border":"content"),a,r,i)+"px"}function te(t,e,n,r,i){return new te.prototype.init(t,e,n,r,i)}S.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=jt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=X(e),u=Qt.test(e),c=t.style;if(u||(e=Yt(s)),a=S.cssHooks[e]||S.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:c[e];"string"===(o=typeof n)&&(i=it.exec(n))&&i[1]&&(n=ut(t,e,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(S.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(u?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,r){var i,o,a,s=X(e);return Qt.test(e)||(e=Yt(s)),(a=S.cssHooks[e]||S.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=jt(t,e,r)),"normal"===i&&e in Gt&&(i=Gt[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),S.each(["height","width"],function(t,e){S.cssHooks[e]={get:function(t,n,r){if(n)return!Kt.test(S.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?Zt(t,e,r):st(t,Ht,function(){return Zt(t,e,r)})},set:function(t,n,r){var i,o=Vt(t),a="border-box"===S.css(t,"boxSizing",!1,o),s=r&&$t(t,e,r,a,o);return a&&g.scrollboxSize()===o.position&&(s-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-$t(t,e,"border",!1,o)-.5)),s&&(i=it.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=S.css(t,e)),Jt(0,n,s)}}}),S.cssHooks.marginLeft=Wt(g.reliableMarginLeft,function(t,e){if(e)return(parseFloat(jt(t,"marginLeft"))||t.getBoundingClientRect().left-st(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(t,e){S.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ot[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(S.cssHooks[t+e].set=Jt)}),S.fn.extend({css:function(t,e){return Q(this,function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Vt(t),i=e.length;a<i;a++)o[e[a]]=S.css(t,e[a],!1,r);return o}return void 0!==n?S.style(t,e,n):S.css(t,e)},t,e,arguments.length>1)}}),S.Tween=te,te.prototype={constructor:te,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||S.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(S.cssNumber[n]?"":"px")},cur:function(){var t=te.propHooks[this.prop];return t&&t.get?t.get(this):te.propHooks._default.get(this)},run:function(t){var e,n=te.propHooks[this.prop];return this.options.duration?this.pos=e=S.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):te.propHooks._default.set(this),this}},te.prototype.init.prototype=te.prototype,te.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=S.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){S.fx.step[t.prop]?S.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[S.cssProps[t.prop]]&&!S.cssHooks[t.prop]?t.elem[t.prop]=t.now:S.style(t.elem,t.prop,t.now+t.unit)}}},te.propHooks.scrollTop=te.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},S.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},S.fx=te.prototype.init,S.fx.step={};var ee,ne,re=/^(?:toggle|show|hide)$/,ie=/queueHooks$/;function oe(){ne&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(oe):n.setTimeout(oe,S.fx.interval),S.fx.tick())}function ae(){return n.setTimeout(function(){ee=void 0}),ee=Date.now()}function se(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ot[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function ue(t,e,n){for(var r,i=(ce.tweeners[e]||[]).concat(ce.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function ce(t,e,n){var r,i,o=0,a=ce.prefilters.length,s=S.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var e=ee||ae(),n=Math.max(0,c.startTime+c.duration-e),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(t,[c,r,n]),r<1&&a?n:(a||s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:e,originalOptions:n,startTime:ee||ae(),duration:n.duration,tweens:[],createTween:function(e,n){var r=S.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return e?(s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c,e])):s.rejectWith(t,[c,e]),this}}),h=c.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=X(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=S.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(h,c.opts.specialEasing);o<a;o++)if(r=ce.prefilters[o].call(c,t,h,c.opts))return v(r.stop)&&(S._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return S.map(h,ue,c),v(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),S.fx.timer(S.extend(u,{elem:t,anim:c,queue:c.opts.queue})),c}S.Animation=S.extend(ce,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ut(n.elem,t,it.exec(e),n),n}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(F);for(var n,r=0,i=t.length;r<i;r++)n=t[r],ce.tweeners[n]=ce.tweeners[n]||[],ce.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,u,c,h,l="width"in e||"height"in e,f=this,d={},p=t.style,y=t.nodeType&&at(t),m=$.get(t,"fxshow");for(r in n.queue||(null==(a=S._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,S.queue(t,"fx").length||a.empty.fire()})})),e)if(i=e[r],re.test(i)){if(delete e[r],o=o||"toggle"===i,i===(y?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;y=!0}d[r]=m&&m[r]||S.style(t,r)}if((u=!S.isEmptyObject(e))||!S.isEmptyObject(d))for(r in l&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=$.get(t,"display")),"none"===(h=S.css(t,"display"))&&(c?h=c:(lt([t],!0),c=t.style.display||c,h=S.css(t,"display"),lt([t]))),("inline"===h||"inline-block"===h&&null!=c)&&"none"===S.css(t,"float")&&(u||(f.done(function(){p.display=c}),null==c&&(h=p.display,c="none"===h?"":h)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),u=!1,d)u||(m?"hidden"in m&&(y=m.hidden):m=$.access(t,"fxshow",{display:c}),o&&(m.hidden=!y),y&&lt([t],!0),f.done(function(){for(r in y||lt([t]),$.remove(t,"fxshow"),d)S.style(t,r,d[r])})),u=ue(y?m[r]:0,r,f),r in m||(m[r]=u.start,y&&(u.end=u.start,u.start=0))}],prefilter:function(t,e){e?ce.prefilters.unshift(t):ce.prefilters.push(t)}}),S.speed=function(t,e,n){var r=t&&"object"==typeof t?S.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};return S.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(t,e,n,r){return this.filter(at).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=S.isEmptyObject(t),o=S.speed(e,n,r),a=function(){var e=ce(this,S.extend({},t),o);(i||$.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=S.timers,a=$.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ie.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||S.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=$.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=S.timers,a=r?r.length:0;for(n.finish=!0,S.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),S.each(["toggle","show","hide"],function(t,e){var n=S.fn[e];S.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(se(e,!0),t,r,i)}}),S.each({slideDown:se("show"),slideUp:se("hide"),slideToggle:se("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){S.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),S.timers=[],S.fx.tick=function(){var t,e=0,n=S.timers;for(ee=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||S.fx.stop(),ee=void 0},S.fx.timer=function(t){S.timers.push(t),S.fx.start()},S.fx.interval=13,S.fx.start=function(){ne||(ne=!0,oe())},S.fx.stop=function(){ne=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(t,e){return t=S.fx&&S.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}})},function(){var t=a.createElement("input"),e=a.createElement("select").appendChild(a.createElement("option"));t.type="checkbox",g.checkOn=""!==t.value,g.optSelected=e.selected,(t=a.createElement("input")).value="t",t.type="radio",g.radioValue="t"===t.value}();var he,le=S.expr.attrHandle;S.fn.extend({attr:function(t,e){return Q(this,S.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){S.removeAttr(this,t)})}}),S.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?S.prop(t,e,n):(1===o&&S.isXMLDoc(t)||(i=S.attrHooks[e.toLowerCase()]||(S.expr.match.bool.test(e)?he:void 0)),void 0!==n?null===n?void S.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=S.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!g.radioValue&&"radio"===e&&k(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(F);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),he={set:function(t,e,n){return!1===e?S.removeAttr(t,n):t.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(t,e){var n=le[e]||S.find.attr;le[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=le[a],le[a]=i,i=null!=n(t,e,r)?a:null,le[a]=o),i}});var fe=/^(?:input|select|textarea|button)$/i,de=/^(?:a|area)$/i;function pe(t){return(t.match(F)||[]).join(" ")}function ye(t){return t.getAttribute&&t.getAttribute("class")||""}function me(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(F)||[]}S.fn.extend({prop:function(t,e){return Q(this,S.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[S.propFix[t]||t]})}}),S.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(t)||(e=S.propFix[e]||e,i=S.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=S.find.attr(t,"tabindex");return e?parseInt(e,10):fe.test(t.nodeName)||de.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(S.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(v(t))return this.each(function(e){S(this).addClass(t.call(this,e,ye(this)))});if((e=me(t)).length)for(;n=this[u++];)if(i=ye(n),r=1===n.nodeType&&" "+pe(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=pe(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(v(t))return this.each(function(e){S(this).removeClass(t.call(this,e,ye(this)))});if(!arguments.length)return this.attr("class","");if((e=me(t)).length)for(;n=this[u++];)if(i=ye(n),r=1===n.nodeType&&" "+pe(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=pe(r))&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t,r="string"===n||Array.isArray(t);return"boolean"==typeof e&&r?e?this.addClass(t):this.removeClass(t):v(t)?this.each(function(n){S(this).toggleClass(t.call(this,n,ye(this),e),e)}):this.each(function(){var e,i,o,a;if(r)for(i=0,o=S(this),a=me(t);e=a[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=ye(this))&&$.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":$.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+pe(ye(n))+" ").indexOf(e)>-1)return!0;return!1}});var ge=/\r/g;S.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=v(t),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,S(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=S.map(i,function(t){return null==t?"":t+""})),(e=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))})):i?(e=S.valHooks[i.type]||S.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(ge,""):null==n?"":n:void 0}}),S.extend({valHooks:{option:{get:function(t){var e=S.find.attr(t,"value");return null!=e?e:pe(S.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(e=S(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=S.makeArray(e),a=i.length;a--;)((r=i[a]).selected=S.inArray(S.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=S.inArray(S(t).val(),e)>-1}},g.checkOn||(S.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),g.focusin="onfocusin"in n;var ve=/^(?:focusinfocus|focusoutblur)$/,be=function(t){t.stopPropagation()};S.extend(S.event,{trigger:function(t,e,r,i){var o,s,u,c,h,l,f,d,y=[r||a],m=p.call(t,"type")?t.type:t,g=p.call(t,"namespace")?t.namespace.split("."):[];if(s=d=u=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!ve.test(m+S.event.triggered)&&(m.indexOf(".")>-1&&(m=(g=m.split(".")).shift(),g.sort()),h=m.indexOf(":")<0&&"on"+m,(t=t[S.expando]?t:new S.Event(m,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:S.makeArray(e,[t]),f=S.event.special[m]||{},i||!f.trigger||!1!==f.trigger.apply(r,e))){if(!i&&!f.noBubble&&!b(r)){for(c=f.delegateType||m,ve.test(c+m)||(s=s.parentNode);s;s=s.parentNode)y.push(s),u=s;u===(r.ownerDocument||a)&&y.push(u.defaultView||u.parentWindow||n)}for(o=0;(s=y[o++])&&!t.isPropagationStopped();)d=s,t.type=o>1?c:f.bindType||m,(l=($.get(s,"events")||{})[t.type]&&$.get(s,"handle"))&&l.apply(s,e),(l=h&&s[h])&&l.apply&&Y(s)&&(t.result=l.apply(s,e),!1===t.result&&t.preventDefault());return t.type=m,i||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(y.pop(),e)||!Y(r)||h&&v(r[m])&&!b(r)&&((u=r[h])&&(r[h]=null),S.event.triggered=m,t.isPropagationStopped()&&d.addEventListener(m,be),r[m](),t.isPropagationStopped()&&d.removeEventListener(m,be),S.event.triggered=void 0,u&&(r[h]=u)),t.result}},simulate:function(t,e,n){var r=S.extend(new S.Event,n,{type:t,isSimulated:!0});S.event.trigger(r,null,e)}}),S.fn.extend({trigger:function(t,e){return this.each(function(){S.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return S.event.trigger(t,e,n,!0)}}),g.focusin||S.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){S.event.simulate(e,t.target,S.event.fix(t))};S.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=$.access(r,e);i||r.addEventListener(t,n,!0),$.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=$.access(r,e)-1;i?$.access(r,e,i):(r.removeEventListener(t,n,!0),$.remove(r,e))}}});var we=n.location,Te=Date.now(),Ee=/\?/;S.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+t),e};var Se=/\[\]$/,Ce=/\r?\n/g,Ie=/^(?:submit|button|image|reset|file)$/i,_e=/^(?:input|select|textarea|keygen)/i;function De(t,e,n,r){var i;if(Array.isArray(e))S.each(e,function(e,i){n||Se.test(t)?r(t,i):De(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==E(e))r(t,e);else for(i in e)De(t+"["+i+"]",e[i],n,r)}S.param=function(t,e){var n,r=[],i=function(t,e){var n=v(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!S.isPlainObject(t))S.each(t,function(){i(this.name,this.value)});else for(n in t)De(n,t[n],e,i);return r.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=S.prop(this,"elements");return t?S.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!S(this).is(":disabled")&&_e.test(this.nodeName)&&!Ie.test(t)&&(this.checked||!ft.test(t))}).map(function(t,e){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(t){return{name:e.name,value:t.replace(Ce,"\r\n")}}):{name:e.name,value:n.replace(Ce,"\r\n")}}).get()}});var Ae=/%20/g,Ne=/#.*$/,ke=/([?&])_=[^&]*/,xe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Oe=/^(?:GET|HEAD)$/,Re=/^\/\//,Pe={},Me={},Le="*/".concat("*"),qe=a.createElement("a");function Fe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(F)||[];if(v(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Be(t,e,n,r){var i={},o=t===Me;function a(s){var u;return i[s]=!0,S.each(t[s]||[],function(t,s){var c=s(e,n,r);return"string"!=typeof c||o||i[c]?o?!(u=c):void 0:(e.dataTypes.unshift(c),a(c),!1)}),u}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ve(t,e){var n,r,i=S.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&S.extend(!0,t,r),t}qe.href=we.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:we.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(we.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Le,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ve(Ve(t,S.ajaxSettings),e):Ve(S.ajaxSettings,t)},ajaxPrefilter:Fe(Pe),ajaxTransport:Fe(Me),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i,o,s,u,c,h,l,f,d,p=S.ajaxSetup({},e),y=p.context||p,m=p.context&&(y.nodeType||y.jquery)?S(y):S.event,g=S.Deferred(),v=S.Callbacks("once memory"),b=p.statusCode||{},w={},T={},E="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(h){if(!s)for(s={};e=xe.exec(o);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return h?o:null},setRequestHeader:function(t,e){return null==h&&(t=T[t.toLowerCase()]=T[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==h&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(h)C.always(t[C.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||E;return r&&r.abort(e),I(0,e),this}};if(g.promise(C),p.url=((t||p.url||we.href)+"").replace(Re,we.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(F)||[""],null==p.crossDomain){c=a.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=qe.protocol+"//"+qe.host!=c.protocol+"//"+c.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=S.param(p.data,p.traditional)),Be(Pe,p,e,C),h)return C;for(f in(l=S.event&&p.global)&&0==S.active++&&S.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Oe.test(p.type),i=p.url.replace(Ne,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Ae,"+")):(d=p.url.slice(i.length),p.data&&(p.processData||"string"==typeof p.data)&&(i+=(Ee.test(i)?"&":"?")+p.data,delete p.data),!1===p.cache&&(i=i.replace(ke,"$1"),d=(Ee.test(i)?"&":"?")+"_="+Te+++d),p.url=i+d),p.ifModified&&(S.lastModified[i]&&C.setRequestHeader("If-Modified-Since",S.lastModified[i]),S.etag[i]&&C.setRequestHeader("If-None-Match",S.etag[i])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Le+"; q=0.01":""):p.accepts["*"]),p.headers)C.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(y,C,p)||h))return C.abort();if(E="abort",v.add(p.complete),C.done(p.success),C.fail(p.error),r=Be(Me,p,e,C)){if(C.readyState=1,l&&m.trigger("ajaxSend",[C,p]),h)return C;p.async&&p.timeout>0&&(u=n.setTimeout(function(){C.abort("timeout")},p.timeout));try{h=!1,r.send(w,I)}catch(t){if(h)throw t;I(-1,t)}}else I(-1,"No Transport");function I(t,e,a,s){var c,f,d,w,T,E=e;h||(h=!0,u&&n.clearTimeout(u),r=void 0,o=s||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,a&&(w=function(t,e,n){for(var r,i,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(p,C,a)),w=function(t,e,n,r){var i,o,a,s,u,c={},h=t.dataTypes.slice();if(h[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=h.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=h.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=c[u+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],h.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}(p,w,C,c),c?(p.ifModified&&((T=C.getResponseHeader("Last-Modified"))&&(S.lastModified[i]=T),(T=C.getResponseHeader("etag"))&&(S.etag[i]=T)),204===t||"HEAD"===p.type?E="nocontent":304===t?E="notmodified":(E=w.state,f=w.data,c=!(d=w.error))):(d=E,!t&&E||(E="error",t<0&&(t=0))),C.status=t,C.statusText=(e||E)+"",c?g.resolveWith(y,[f,E,C]):g.rejectWith(y,[C,E,d]),C.statusCode(b),b=void 0,l&&m.trigger(c?"ajaxSuccess":"ajaxError",[C,p,c?f:d]),v.fireWith(y,[C,E]),l&&(m.trigger("ajaxComplete",[C,p]),--S.active||S.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,n){return S.get(t,e,n,"json")},getScript:function(t,e){return S.get(t,void 0,e,"script")}}),S.each(["get","post"],function(t,e){S[e]=function(t,n,r,i){return v(n)&&(i=i||r,r=n,n=void 0),S.ajax(S.extend({url:t,type:e,dataType:i,data:n,success:r},S.isPlainObject(t)&&t))}}),S._evalUrl=function(t){return S.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},S.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=S(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return v(t)?this.each(function(e){S(this).wrapInner(t.call(this,e))}):this.each(function(){var e=S(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=v(t);return this.each(function(n){S(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(t){return!S.expr.pseudos.visible(t)},S.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Ue={0:200,1223:204},je=S.ajaxSettings.xhr();g.cors=!!je&&"withCredentials"in je,g.ajax=je=!!je,S.ajaxTransport(function(t){var e,r;if(g.cors||je&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ue[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),r=s.onerror=s.ontimeout=e("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout(function(){e&&r()})},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),S.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return S.globalEval(t),t}}}),S.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),S.ajaxTransport("script",function(t){var e,n;if(t.crossDomain)return{send:function(r,i){e=S("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),a.head.appendChild(e[0])},abort:function(){n&&n()}}});var We=[],Ke=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=We.pop()||S.expando+"_"+Te++;return this[t]=!0,t}}),S.ajaxPrefilter("json jsonp",function(t,e,r){var i,o,a,s=!1!==t.jsonp&&(Ke.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ke.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ke,"$1"+i):!1!==t.jsonp&&(t.url+=(Ee.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||S.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?S(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,We.push(i)),a&&v(o)&&o(a[0]),a=o=void 0}),"script"}),g.createHTMLDocument=function(){var t=a.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),S.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(g.createHTMLDocument?((r=(e=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,e.head.appendChild(r)):e=a),i=x.exec(t),o=!n&&[],i?[e.createElement(i[1])]:(i=bt([t],e,o),o&&o.length&&S(o).remove(),S.merge([],i.childNodes)));var r,i,o},S.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=pe(t.slice(s)),t=t.slice(0,s)),v(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&S.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,a.html(r?S("<div>").append(S.parseHTML(t)).find(r):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){S.fn[e]=function(t){return this.on(e,t)}}),S.expr.pseudos.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(t,e,n){var r,i,o,a,s,u,c=S.css(t,"position"),h=S(t),l={};"static"===c&&(t.style.position="relative"),s=h.offset(),o=S.css(t,"top"),u=S.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(a=(r=h.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),v(e)&&(e=e.call(t,n,S.extend({},s))),null!=e.top&&(l.top=e.top-s.top+a),null!=e.left&&(l.left=e.left-s.left+i),"using"in e?e.using.call(t,l):h.css(l)}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===S.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===S.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=S(t).offset()).top+=S.css(t,"borderTopWidth",!0),i.left+=S.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-S.css(r,"marginTop",!0),left:e.left-i.left-S.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===S.css(t,"position");)t=t.offsetParent;return t||wt})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;S.fn[t]=function(r){return Q(this,function(t,r,i){var o;if(b(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i},t,r,arguments.length)}}),S.each(["top","left"],function(t,e){S.cssHooks[e]=Wt(g.pixelPosition,function(t,n){if(n)return n=jt(t,e),Bt.test(n)?S(t).position()[e]+"px":n})}),S.each({Height:"height",Width:"width"},function(t,e){S.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){S.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Q(this,function(e,n,i){var o;return b(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?S.css(e,n,s):S.style(e,n,i,s)},e,a?i:void 0,a)}})}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){S.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),S.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),S.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),S.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),v(t))return r=u.call(arguments,2),(i=function(){return t.apply(e||this,r.concat(u.call(arguments)))}).guid=t.guid=t.guid||S.guid++,i},S.holdReady=function(t){t?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=k,S.isFunction=v,S.isWindow=b,S.camelCase=X,S.type=E,S.now=Date.now,S.isNumeric=function(t){var e=S.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return S}.apply(e,[]))||(t.exports=r);var Qe=n.jQuery,He=n.$;return S.noConflict=function(t){return n.$===S&&(n.$=He),t&&n.jQuery===S&&(n.jQuery=Qe),S},i||(n.jQuery=n.$=S),S})},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],h=!1,l=-1;function f(){h&&u&&(h=!1,u.length?c=u.concat(c):l=-1,c.length&&d())}function d(){if(!h){var t=s(f);h=!0;for(var e=c.length;e;){for(u=c,c=[];++l<e;)u&&u[l].run();l=-1,e=c.length}u=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||h||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(11),i=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o="[DEFAULT]",a=[],s=function(){function t(t,e,n){this.firebase_=n,this.isDeleted_=!1,this.services_={},this.name_=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled||!1,this.options_=r.deepCopy(t),this.INTERNAL={getUid:function(){return null},getToken:function(){return Promise.resolve(null)},addAuthTokenListener:function(t){a.push(t),setTimeout(function(){return t(null)},0)},removeAuthTokenListener:function(t){a=a.filter(function(e){return e!==t})}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this._automaticDataCollectionEnabled},set:function(t){this.checkDestroyed_(),this._automaticDataCollectionEnabled=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise(function(e){t.checkDestroyed_(),e()}).then(function(){t.firebase_.INTERNAL.removeApp(t.name_);var e=[];return Object.keys(t.services_).forEach(function(n){Object.keys(t.services_[n]).forEach(function(r){e.push(t.services_[n][r])})}),Promise.all(e.map(function(t){return t.INTERNAL.delete()}))}).then(function(){t.isDeleted_=!0,t.services_={}})},t.prototype._getService=function(t,e){if(void 0===e&&(e=o),this.checkDestroyed_(),this.services_[t]||(this.services_[t]={}),!this.services_[t][e]){var n=e!==o?e:void 0,r=this.firebase_.INTERNAL.factories[t](this,this.extendApp.bind(this),n);this.services_[t][e]=r}return this.services_[t][e]},t.prototype.extendApp=function(t){var e=this;r.deepExtend(this,t),t.INTERNAL&&t.INTERNAL.addAuthTokenListener&&(a.forEach(function(t){e.INTERNAL.addAuthTokenListener(t)}),a=[])},t.prototype.checkDestroyed_=function(){this.isDeleted_&&u("app-deleted",{name:this.name_})},t}();function u(t,e){throw c.create(t,e)}s.prototype.name&&s.prototype.options||s.prototype.delete||console.log("dc");var c=new r.ErrorFactory("app","Firebase",{"no-app":"No Firebase App '{$name}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$name}","duplicate-app":"Firebase App named '{$name}' already exists","app-deleted":"Firebase App named '{$name}' already deleted","duplicate-service":"Firebase service named '{$name}' already registered","sa-not-supported":"Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain","invalid-app-argument":"firebase.{$name}() takes either no argument or a Firebase App instance."}),h=function t(){var e={},n={},a={},c={__esModule:!0,initializeApp:function(t,n){if(void 0===n&&(n={}),"object"!=typeof n||null===n){var r=n;n={name:r}}var a=n;void 0===a.name&&(a.name=o);var h=a.name;"string"==typeof h&&h||u("bad-app-name",{name:h+""}),i(e,h)&&u("duplicate-app",{name:h});var l=new s(t,a,c);return e[h]=l,f(l,"create"),l},app:h,apps:null,Promise:Promise,SDK_VERSION:"5.5.0",INTERNAL:{registerService:function(t,e,i,o,f){n[t]&&u("duplicate-service",{name:t}),n[t]=e,o&&(a[t]=o,l().forEach(function(t){o("create",t)}));var d=function(e){return void 0===e&&(e=h()),"function"!=typeof e[t]&&u("invalid-app-argument",{name:t}),e[t]()};return void 0!==i&&r.deepExtend(d,i),c[t]=d,s.prototype[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return this._getService.bind(this,t).apply(this,f?e:[])},d},createFirebaseNamespace:t,extendNamespace:function(t){r.deepExtend(c,t)},createSubscribe:r.createSubscribe,ErrorFactory:r.ErrorFactory,removeApp:function(t){f(e[t],"delete"),delete e[t]},factories:n,useAsService:d,Promise:Promise,deepExtend:r.deepExtend}};function h(t){return i(e,t=t||o)||u("no-app",{name:t}),e[t]}function l(){return Object.keys(e).map(function(t){return e[t]})}function f(t,e){Object.keys(n).forEach(function(n){var r=d(t,n);null!==r&&a[r]&&a[r](e,t)})}function d(t,e){if("serverAuth"===e)return null;var n=e;return t.options,n}return r.patchProperty(c,"default",c),Object.defineProperty(c,"apps",{get:l}),r.patchProperty(h,"App",s),c}();e.firebase=h,e.default=h},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",function(){return i}),n.d(e,"__assign",function(){return o}),n.d(e,"__rest",function(){return a}),n.d(e,"__decorate",function(){return s}),n.d(e,"__param",function(){return u}),n.d(e,"__metadata",function(){return c}),n.d(e,"__awaiter",function(){return h}),n.d(e,"__generator",function(){return l}),n.d(e,"__exportStar",function(){return f}),n.d(e,"__values",function(){return d}),n.d(e,"__read",function(){return p}),n.d(e,"__spread",function(){return y}),n.d(e,"__await",function(){return m}),n.d(e,"__asyncGenerator",function(){return g}),n.d(e,"__asyncDelegator",function(){return v}),n.d(e,"__asyncValues",function(){return b}),n.d(e,"__makeTemplateObject",function(){return w}),n.d(e,"__importStar",function(){return T}),n.d(e,"__importDefault",function(){return E});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&(n[r[i]]=t[r[i]])}return n}function s(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,n,r){return new(n||(n=Promise))(function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(a,s)}u((r=r.apply(t,e||[])).next())})}function l(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=r[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function d(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function p(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(p(arguments[e]));return t}function m(t){return this instanceof m?(this.v=t,this):new m(t)}function g(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise(function(n,r){o.push([t,e,n,r])>1||s(t,e)})})}function s(t,e){try{!function(t){t.value instanceof m?Promise.resolve(t.value.v).then(u,c):h(o[0][2],t)}(i[t](e))}catch(t){h(o[0][3],t)}}function u(t){s("next",t)}function c(t){s("throw",t)}function h(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function v(t){var e,n;return e={},r("next"),r("throw",function(t){throw t}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){t[r]&&(e[r]=function(e){return(n=!n)?{value:m(t[r](e)),done:"return"===r}:i?i(e):e})}}function b(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=t[Symbol.asyncIterator];return e?e.call(t):d(t)}function w(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function T(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function E(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){t.exports=n(15)},function(t,e,n){"use strict";n.r(e),function(t,e){n(10);var r=setTimeout;function i(){}function o(t){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],h(t,this)}function a(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,o._immediateFn(function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null!==n){var r;try{r=n(t._value)}catch(t){return void u(e.promise,t)}s(e.promise,r)}else(1===t._state?s:u)(e.promise,t._value)})):t._deferreds.push(e)}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof o)return t._state=3,t._value=e,void c(t);if("function"==typeof n)return void h(function(t,e){return function(){t.apply(e,arguments)}}(n,e),t)}t._state=1,t._value=e,c(t)}catch(e){u(t,e)}}function u(t,e){t._state=2,t._value=e,c(t)}function c(t){2===t._state&&0===t._deferreds.length&&o._immediateFn(function(){t._handled||o._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)a(t,t._deferreds[e]);t._deferreds=null}function h(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,u(e,t))})}catch(t){if(n)return;n=!0,u(e,t)}}o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){var n=new this.constructor(i);return a(this,new function(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}(t,e,n)),n},o.prototype.finally=function(t){var e=this.constructor;return this.then(function(n){return e.resolve(t()).then(function(){return n})},function(n){return e.resolve(t()).then(function(){return e.reject(n)})})},o.all=function(t){return new o(function(e,n){if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var r=Array.prototype.slice.call(t);if(0===r.length)return e([]);var i=r.length;function o(t,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(e){o(t,e)},n)}r[t]=a,0==--i&&e(r)}catch(t){n(t)}}for(var a=0;a<r.length;a++)o(a,r[a])})},o.resolve=function(t){return t&&"object"==typeof t&&t.constructor===o?t:new o(function(e){e(t)})},o.reject=function(t){return new o(function(e,n){n(t)})},o.race=function(t){return new o(function(e,n){for(var r=0,i=t.length;r<i;r++)t[r].then(e,n)})},o._immediateFn="function"==typeof t&&function(e){t(e)}||function(t){r(t,0)},o._unhandledRejectionFn=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)};var l=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;throw new Error("unable to locate global object")}();function f(t,e){return t(e={exports:{}},e.exports),e.exports}l.Promise||(l.Promise=o);var d=f(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),p=f(function(t){var e=t.exports={version:"2.5.5"};"number"==typeof __e&&(__e=e)}),y=(p.version,function(t){return"object"==typeof t?null!==t:"function"==typeof t}),m=function(t){if(!y(t))throw TypeError(t+" is not an object!");return t},g=function(t){try{return!!t()}catch(t){return!0}},v=!g(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),b=d.document,w=y(b)&&y(b.createElement),T=function(t){return w?b.createElement(t):{}},E=!v&&!g(function(){return 7!=Object.defineProperty(T("div"),"a",{get:function(){return 7}}).a}),S=function(t,e){if(!y(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!y(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!y(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!y(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")},C=Object.defineProperty,I={f:v?Object.defineProperty:function(t,e,n){if(m(t),e=S(e,!0),m(n),E)try{return C(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},_=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},D=v?function(t,e,n){return I.f(t,e,_(1,n))}:function(t,e,n){return t[e]=n,t},A={}.hasOwnProperty,N=function(t,e){return A.call(t,e)},k=0,x=Math.random(),O=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++k+x).toString(36))},R=f(function(t){var e=O("src"),n=Function.toString,r=(""+n).split("toString");p.inspectSource=function(t){return n.call(t)},(t.exports=function(t,n,i,o){var a="function"==typeof i;a&&(N(i,"name")||D(i,"name",n)),t[n]!==i&&(a&&(N(i,e)||D(i,e,t[n]?""+t[n]:r.join(String(n)))),t===d?t[n]=i:o?t[n]?t[n]=i:D(t,n,i):(delete t[n],D(t,n,i)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[e]||n.call(this)})}),P=function(t,e,n){if(function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!")}(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}},M=function(t,e,n){var r,i,o,a,s=t&M.F,u=t&M.G,c=t&M.S,h=t&M.P,l=t&M.B,f=u?d:c?d[e]||(d[e]={}):(d[e]||{}).prototype,y=u?p:p[e]||(p[e]={}),m=y.prototype||(y.prototype={});for(r in u&&(n=e),n)o=((i=!s&&f&&void 0!==f[r])?f:n)[r],a=l&&i?P(o,d):h&&"function"==typeof o?P(Function.call,o):o,f&&R(f,r,o,t&M.U),y[r]!=o&&D(y,r,a),h&&m[r]!=o&&(m[r]=o)};d.core=p,M.F=1,M.G=2,M.S=4,M.P=8,M.B=16,M.W=32,M.U=64,M.R=128;var L=M,q={}.toString,F=function(t){return q.call(t).slice(8,-1)},B=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==F(t)?t.split(""):Object(t)},V=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t},U=function(t){return Object(V(t))},j=Math.ceil,W=Math.floor,K=function(t){return isNaN(t=+t)?0:(t>0?W:j)(t)},Q=Math.min,H=function(t){return t>0?Q(K(t),9007199254740991):0},G=Array.isArray||function(t){return"Array"==F(t)},z=d["__core-js_shared__"]||(d["__core-js_shared__"]={}),X=function(t){return z[t]||(z[t]={})},Y=f(function(t){var e=X("wks"),n=d.Symbol,r="function"==typeof n;(t.exports=function(t){return e[t]||(e[t]=r&&n[t]||(r?n:O)("Symbol."+t))}).store=e}),J=Y("species"),$=function(t,e){return new(function(t){var e;return G(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!G(e.prototype)||(e=void 0),y(e)&&null===(e=e[J])&&(e=void 0)),void 0===e?Array:e}(t))(e)},Z=function(t,e){var n=1==t,r=2==t,i=3==t,o=4==t,a=6==t,s=5==t||a,u=e||$;return function(e,c,h){for(var l,f,d=U(e),p=B(d),y=P(c,h,3),m=H(p.length),g=0,v=n?u(e,m):r?u(e,0):void 0;m>g;g++)if((s||g in p)&&(f=y(l=p[g],g,d),t))if(n)v[g]=f;else if(f)switch(t){case 3:return!0;case 5:return l;case 6:return g;case 2:v.push(l)}else if(o)return!1;return a?-1:i||o?o:v}},tt=Y("unscopables"),et=Array.prototype;void 0==et[tt]&&D(et,tt,{});var nt=function(t){et[tt][t]=!0},rt=Z(5),it=!0;"find"in[]&&Array(1).find(function(){it=!1}),L(L.P+L.F*it,"Array",{find:function(t){return rt(this,t,arguments.length>1?arguments[1]:void 0)}}),nt("find");p.Array.find;var ot=Z(6),at=!0;"findIndex"in[]&&Array(1).findIndex(function(){at=!1}),L(L.P+L.F*at,"Array",{findIndex:function(t){return ot(this,t,arguments.length>1?arguments[1]:void 0)}}),nt("findIndex");p.Array.findIndex;var st=function(t){return B(V(t))},ut=Math.max,ct=Math.min,ht=X("keys"),lt=function(t){return ht[t]||(ht[t]=O(t))},ft=function(t){return function(e,n,r){var i,o=st(e),a=H(o.length),s=function(t,e){return(t=K(t))<0?ut(t+e,0):ct(t,e)}(r,a);if(t&&n!=n){for(;a>s;)if((i=o[s++])!=i)return!0}else for(;a>s;s++)if((t||s in o)&&o[s]===n)return t||s||0;return!t&&-1}}(!1),dt=lt("IE_PROTO"),pt=function(t,e){var n,r=st(t),i=0,o=[];for(n in r)n!=dt&&N(r,n)&&o.push(n);for(;e.length>i;)N(r,n=e[i++])&&(~ft(o,n)||o.push(n));return o},yt="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),mt=Object.keys||function(t){return pt(t,yt)},gt={f:Object.getOwnPropertySymbols},vt={f:{}.propertyIsEnumerable},bt=Object.assign,wt=!bt||g(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=bt({},t)[n]||Object.keys(bt({},e)).join("")!=r})?function(t,e){for(var n=U(t),r=arguments.length,i=1,o=gt.f,a=vt.f;r>i;)for(var s,u=B(arguments[i++]),c=o?mt(u).concat(o(u)):mt(u),h=c.length,l=0;h>l;)a.call(u,s=c[l++])&&(n[s]=u[s]);return n}:bt;L(L.S+L.F,"Object",{assign:wt});p.Object.assign;var Tt=Y("match"),Et=function(t,e,n){if(function(t){var e;return y(t)&&(void 0!==(e=t[Tt])?!!e:"RegExp"==F(t))}(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(V(t))},St=Y("match"),Ct="".startsWith;L(L.P+L.F*function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[St]=!1,!"/./"[t](e)}catch(t){}}return!0}("startsWith"),"String",{startsWith:function(t){var e=Et(this,t,"startsWith"),n=H(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return Ct?Ct.call(e,r,n):e.slice(n,n+r.length)===r}});p.String.startsWith;L(L.P,"String",{repeat:function(t){var e=String(V(this)),n="",r=K(t);if(r<0||r==1/0)throw RangeError("Count can't be negative");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(n+=e);return n}});p.String.repeat;var It=f(function(t){var e=O("meta"),n=I.f,r=0,i=Object.isExtensible||function(){return!0},o=!g(function(){return i(Object.preventExtensions({}))}),a=function(t){n(t,e,{value:{i:"O"+ ++r,w:{}}})},s=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!y(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!N(t,e)){if(!i(t))return"F";if(!n)return"E";a(t)}return t[e].i},getWeak:function(t,n){if(!N(t,e)){if(!i(t))return!0;if(!n)return!1;a(t)}return t[e].w},onFreeze:function(t){return o&&s.NEED&&i(t)&&!N(t,e)&&a(t),t}}}),_t=(It.KEY,It.NEED,It.fastKey,It.getWeak,It.onFreeze,I.f),Dt=Y("toStringTag"),At=function(t,e,n){t&&!N(t=n?t:t.prototype,Dt)&&_t(t,Dt,{configurable:!0,value:e})},Nt={f:Y},kt=I.f,xt=function(t){var e=p.Symbol||(p.Symbol=d.Symbol||{});"_"==t.charAt(0)||t in e||kt(e,t,{value:Nt.f(t)})},Ot=v?Object.defineProperties:function(t,e){m(t);for(var n,r=mt(e),i=r.length,o=0;i>o;)I.f(t,n=r[o++],e[n]);return t},Rt=d.document,Pt=Rt&&Rt.documentElement,Mt=lt("IE_PROTO"),Lt=function(){},qt=function(){var t,e=T("iframe"),n=yt.length;for(e.style.display="none",Pt.appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),qt=t.F;n--;)delete qt.prototype[yt[n]];return qt()},Ft=Object.create||function(t,e){var n;return null!==t?(Lt.prototype=m(t),n=new Lt,Lt.prototype=null,n[Mt]=t):n=qt(),void 0===e?n:Ot(n,e)},Bt=yt.concat("length","prototype"),Vt={f:Object.getOwnPropertyNames||function(t){return pt(t,Bt)}},Ut=Vt.f,jt={}.toString,Wt="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Kt={f:function(t){return Wt&&"[object Window]"==jt.call(t)?function(t){try{return Ut(t)}catch(t){return Wt.slice()}}(t):Ut(st(t))}},Qt=Object.getOwnPropertyDescriptor,Ht={f:v?Qt:function(t,e){if(t=st(t),e=S(e,!0),E)try{return Qt(t,e)}catch(t){}if(N(t,e))return _(!vt.f.call(t,e),t[e])}},Gt=It.KEY,zt=Ht.f,Xt=I.f,Yt=Kt.f,Jt=d.Symbol,$t=d.JSON,Zt=$t&&$t.stringify,te=Y("_hidden"),ee=Y("toPrimitive"),ne={}.propertyIsEnumerable,re=X("symbol-registry"),ie=X("symbols"),oe=X("op-symbols"),ae=Object.prototype,se="function"==typeof Jt,ue=d.QObject,ce=!ue||!ue.prototype||!ue.prototype.findChild,he=v&&g(function(){return 7!=Ft(Xt({},"a",{get:function(){return Xt(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=zt(ae,e);r&&delete ae[e],Xt(t,e,n),r&&t!==ae&&Xt(ae,e,r)}:Xt,le=function(t){var e=ie[t]=Ft(Jt.prototype);return e._k=t,e},fe=se&&"symbol"==typeof Jt.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof Jt},de=function(t,e,n){return t===ae&&de(oe,e,n),m(t),e=S(e,!0),m(n),N(ie,e)?(n.enumerable?(N(t,te)&&t[te][e]&&(t[te][e]=!1),n=Ft(n,{enumerable:_(0,!1)})):(N(t,te)||Xt(t,te,_(1,{})),t[te][e]=!0),he(t,e,n)):Xt(t,e,n)},pe=function(t,e){m(t);for(var n,r=function(t){var e=mt(t),n=gt.f;if(n)for(var r,i=n(t),o=vt.f,a=0;i.length>a;)o.call(t,r=i[a++])&&e.push(r);return e}(e=st(e)),i=0,o=r.length;o>i;)de(t,n=r[i++],e[n]);return t},ye=function(t){var e=ne.call(this,t=S(t,!0));return!(this===ae&&N(ie,t)&&!N(oe,t))&&(!(e||!N(this,t)||!N(ie,t)||N(this,te)&&this[te][t])||e)},me=function(t,e){if(t=st(t),e=S(e,!0),t!==ae||!N(ie,e)||N(oe,e)){var n=zt(t,e);return!n||!N(ie,e)||N(t,te)&&t[te][e]||(n.enumerable=!0),n}},ge=function(t){for(var e,n=Yt(st(t)),r=[],i=0;n.length>i;)N(ie,e=n[i++])||e==te||e==Gt||r.push(e);return r},ve=function(t){for(var e,n=t===ae,r=Yt(n?oe:st(t)),i=[],o=0;r.length>o;)!N(ie,e=r[o++])||n&&!N(ae,e)||i.push(ie[e]);return i};se||(R((Jt=function(){if(this instanceof Jt)throw TypeError("Symbol is not a constructor!");var t=O(arguments.length>0?arguments[0]:void 0),e=function(n){this===ae&&e.call(oe,n),N(this,te)&&N(this[te],t)&&(this[te][t]=!1),he(this,t,_(1,n))};return v&&ce&&he(ae,t,{configurable:!0,set:e}),le(t)}).prototype,"toString",function(){return this._k}),Ht.f=me,I.f=de,Vt.f=Kt.f=ge,vt.f=ye,gt.f=ve,v&&R(ae,"propertyIsEnumerable",ye,!0),Nt.f=function(t){return le(Y(t))}),L(L.G+L.W+L.F*!se,{Symbol:Jt});for(var be="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),we=0;be.length>we;)Y(be[we++]);for(var Te=mt(Y.store),Ee=0;Te.length>Ee;)xt(Te[Ee++]);L(L.S+L.F*!se,"Symbol",{for:function(t){return N(re,t+="")?re[t]:re[t]=Jt(t)},keyFor:function(t){if(!fe(t))throw TypeError(t+" is not a symbol!");for(var e in re)if(re[e]===t)return e},useSetter:function(){ce=!0},useSimple:function(){ce=!1}}),L(L.S+L.F*!se,"Object",{create:function(t,e){return void 0===e?Ft(t):pe(Ft(t),e)},defineProperty:de,defineProperties:pe,getOwnPropertyDescriptor:me,getOwnPropertyNames:ge,getOwnPropertySymbols:ve}),$t&&L(L.S+L.F*(!se||g(function(){var t=Jt();return"[null]"!=Zt([t])||"{}"!=Zt({a:t})||"{}"!=Zt(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(y(e)||void 0!==t)&&!fe(t))return G(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!fe(e))return e}),r[1]=e,Zt.apply($t,r)}}),Jt.prototype[ee]||D(Jt.prototype,ee,Jt.prototype.valueOf),At(Jt,"Symbol"),At(Math,"Math",!0),At(d.JSON,"JSON",!0);var Se=Y("toStringTag"),Ce="Arguments"==F(function(){return arguments}()),Ie={};Ie[Y("toStringTag")]="z",Ie+""!="[object z]"&&R(Object.prototype,"toString",function(){return"[object "+function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),Se))?n:Ce?F(e):"Object"==(r=F(e))&&"function"==typeof e.callee?"Arguments":r}(this)+"]"},!0),xt("asyncIterator"),xt("observable");p.Symbol;var _e={},De={};D(De,Y("iterator"),function(){return this});var Ae=function(t,e,n){t.prototype=Ft(De,{next:_(1,n)}),At(t,e+" Iterator")},Ne=lt("IE_PROTO"),ke=Object.prototype,xe=Object.getPrototypeOf||function(t){return t=U(t),N(t,Ne)?t[Ne]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?ke:null},Oe=Y("iterator"),Re=!([].keys&&"next"in[].keys()),Pe=function(){return this},Me=function(t,e,n,r,i,o,a){Ae(n,e,r);var s,u,c,h=function(t){if(!Re&&t in p)return p[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},l=e+" Iterator",f="values"==i,d=!1,p=t.prototype,y=p[Oe]||p["@@iterator"]||i&&p[i],m=y||h(i),g=i?f?h("entries"):m:void 0,v="Array"==e&&p.entries||y;if(v&&(c=xe(v.call(new t)))!==Object.prototype&&c.next&&(At(c,l,!0),"function"!=typeof c[Oe]&&D(c,Oe,Pe)),f&&y&&"values"!==y.name&&(d=!0,m=function(){return y.call(this)}),(Re||d||!p[Oe])&&D(p,Oe,m),_e[e]=m,_e[l]=Pe,i)if(s={values:f?m:h("values"),keys:o?m:h("keys"),entries:g},a)for(u in s)u in p||R(p,u,s[u]);else L(L.P+L.F*(Re||d),e,s);return s},Le=function(t){return function(e,n){var r,i,o=String(V(e)),a=K(n),s=o.length;return a<0||a>=s?t?"":void 0:(r=o.charCodeAt(a))<55296||r>56319||a+1===s||(i=o.charCodeAt(a+1))<56320||i>57343?t?o.charAt(a):r:t?o.slice(a,a+2):i-56320+(r-55296<<10)+65536}}(!0);Me(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=Le(e,n),this._i+=t.length,{value:t,done:!1})});var qe=function(t,e){return{value:e,done:!!t}},Fe=Me(Array,"Array",function(t,e){this._t=st(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,qe(1)):qe(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values");_e.Arguments=_e.Array,nt("keys"),nt("values"),nt("entries");for(var Be=Y("iterator"),Ve=Y("toStringTag"),Ue=_e.Array,je={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},We=mt(je),Ke=0;Ke<We.length;Ke++){var Qe,He=We[Ke],Ge=je[He],ze=d[He],Xe=ze&&ze.prototype;if(Xe&&(Xe[Be]||D(Xe,Be,Ue),Xe[Ve]||D(Xe,Ve,He),_e[He]=Ue,Ge))for(Qe in Fe)Xe[Qe]||R(Xe,Qe,Fe[Qe],!0)}Nt.f("iterator")}.call(this,n(8).setImmediate,n(0))},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(9),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,o={},a=!1,s=t.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(t);u=u&&u.setTimeout?u:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){h(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&h(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){h(t.data)},r=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;r=function(e){var n=s.createElement("script");n.onreadystatechange=function(){h(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(h,0,t)},u.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var a={callback:t,args:e};return o[i]=a,r(i),i++},u.clearImmediate=c}function c(t){delete o[t]}function h(t){if(a)setTimeout(h,0,t);else{var e=o[t];if(e){a=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{c(t),a=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(0),n(3))},function(t,e){!function(t){"use strict";if(!t.fetch){var e={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(e.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],r=function(t){return t&&DataView.prototype.isPrototypeOf(t)},i=ArrayBuffer.isView||function(t){return t&&n.indexOf(Object.prototype.toString.call(t))>-1};h.prototype.append=function(t,e){t=s(t),e=u(e);var n=this.map[t];this.map[t]=n?n+","+e:e},h.prototype.delete=function(t){delete this.map[s(t)]},h.prototype.get=function(t){return t=s(t),this.has(t)?this.map[t]:null},h.prototype.has=function(t){return this.map.hasOwnProperty(s(t))},h.prototype.set=function(t,e){this.map[s(t)]=u(e)},h.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},h.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),c(t)},h.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),c(t)},h.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),c(t)},e.iterable&&(h.prototype[Symbol.iterator]=h.prototype.entries);var o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];m.prototype.clone=function(){return new m(this,{body:this._bodyInit})},y.call(m.prototype),y.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var a=[301,302,303,307,308];v.redirect=function(t,e){if(-1===a.indexOf(e))throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})},t.Headers=h,t.Request=m,t.Response=v,t.fetch=function(t,n){return new Promise(function(r,i){var o=new m(t,n),a=new XMLHttpRequest;a.onload=function(){var t={status:a.status,statusText:a.statusText,headers:function(t){var e=new h;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}}),e}(a.getAllResponseHeaders()||"")};t.url="responseURL"in a?a.responseURL:t.headers.get("X-Request-URL");var e="response"in a?a.response:a.responseText;r(new v(e,t))},a.onerror=function(){i(new TypeError("Network request failed"))},a.ontimeout=function(){i(new TypeError("Network request failed"))},a.open(o.method,o.url,!0),"include"===o.credentials?a.withCredentials=!0:"omit"===o.credentials&&(a.withCredentials=!1),"responseType"in a&&e.blob&&(a.responseType="blob"),o.headers.forEach(function(t,e){a.setRequestHeader(e,t)}),a.send(void 0===o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}function s(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function u(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){var n={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return e.iterable&&(n[Symbol.iterator]=function(){return n}),n}function h(t){this.map={},t instanceof h?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function l(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function f(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function d(t){var e=new FileReader,n=f(e);return e.readAsArrayBuffer(t),n}function p(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(e.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(e.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(e.arrayBuffer&&e.blob&&r(t))this._bodyArrayBuffer=p(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!e.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!i(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=p(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},e.blob&&(this.blob=function(){var t=l(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?l(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(d)}),this.text=function(){var t=l(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,n=f(e);return e.readAsText(t),n}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},e.formData&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}function m(t,e){var n=(e=e||{}).body;if(t instanceof m){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new h(t.headers)),this.method=t.method,this.mode=t.mode,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new h(e.headers)),this.method=function(t){var e=t.toUpperCase();return o.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function g(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function v(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new h(e.headers),this.url=e.url||"",this._initBody(t)}}("undefined"!=typeof self?self:this)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(5),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},s=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var o=t[i],a=i+1<t.length,s=a?t[i+1]:0,u=i+2<t.length,c=u?t[i+2]:0,h=o>>2,l=(3&o)<<4|s>>4,f=(15&s)<<2|c>>6,d=63&c;u||(d=64,a||(f=64)),r.push(n[h],n[l],n[f],n[d])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=t[n++]))<<12|(63&(s=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(a>>10)),e[r++]=String.fromCharCode(56320+(1023&a))}else{o=t[n++];var s=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],a=i<t.length?n[t.charAt(i)]:0,s=++i<t.length?n[t.charAt(i)]:64,u=++i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(r.push(c),64!=s){var h=a<<4&240|s>>2;if(r.push(h),64!=u){var l=s<<6&192|u;r.push(l)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},c=function(t){try{return u.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function h(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&(t[n]=h(t[n],e[n]));return t}var l=function(){function t(){var t=this;this.promise=new Promise(function(e,n){t.resolve=e,t.reject=n})}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch(function(){}),1===t.length?t(n):t(n,r))}},t}(),f=function(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""},d="FirebaseError",p=Error.captureStackTrace;var y=function(){return function(t,e){if(this.code=t,this.message=e,p)p(this,m.prototype.create);else try{throw Error.apply(this,arguments)}catch(t){this.name=d,Object.defineProperty(this,"stack",{get:function(){return t.stack}})}}}();y.prototype=Object.create(Error.prototype),y.prototype.constructor=y,y.prototype.name=d;var m=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n,this.pattern=/\{\$([^}]+)}/g}return t.prototype.create=function(t,e){void 0===e&&(e={});var n,r=this.errors[t],i=this.service+"/"+t;n=void 0===r?"Error":r.replace(this.pattern,function(t,n){var r=e[n];return void 0!==r?r.toString():"<"+n+"?>"}),n=this.serviceName+": "+n+" ("+i+").";var o=new y(i,n);for(var a in e)e.hasOwnProperty(a)&&"_"!==a.slice(-1)&&(o[a]=e[a]);return o},t}();function g(t){return JSON.parse(t)}var v=function(t){var e={},n={},r={},i="";try{var o=t.split(".");e=g(c(o[0])||""),n=g(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:r,signature:i}},b=function(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])},w=function(t,e){return b(e,function(e,n){t[e]=n}),t},T=function(t,e,n){for(var r in t)if(e.call(n,t[r],r,t))return r},E=function(t){function e(){var e=t.call(this)||this;e.chain_=[],e.buf_=[],e.W_=[],e.pad_=[],e.inbuf_=0,e.total_=0,e.blockSize=64,e.pad_[0]=128;for(var n=1;n<e.blockSize;++n)e.pad_[n]=0;return e.reset(),e}return r.__extends(e,t),e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=h^u&(c^h),a=1518500249):(o=u^c^h,a=1859775393):r<60?(o=u&c|h&(u|c),a=2400959708):(o=u^c^h,a=3395469782);i=(s<<5|s>>>27)+o+l+a+n[r]&4294967295;l=h,h=c,c=4294967295&(u<<30|u>>>2),u=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},e.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0==o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o==this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o==this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},e.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t},e}(function(){return function(){this.blockSize=-1}}());var S=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then(function(){t(n)}).catch(function(t){n.error(t)})}return t.prototype.next=function(t){this.forEachObserver(function(e){e.next(t)})},t.prototype.error=function(t){this.forEachObserver(function(e){e.error(t)}),this.close(t)},t.prototype.complete=function(){this.forEachObserver(function(t){t.complete()}),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=e;n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:n}).next&&(r.next=C),void 0===r.error&&(r.error=C),void 0===r.complete&&(r.complete=C);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then(function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}}),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then(function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}})},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then(function(){e.observers=void 0,e.onNoObservers=void 0}))},t}();function C(){}function I(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=t+" failed: ";return i+=r+" argument "}e.assert=o,e.assertionError=a,e.base64=u,e.base64Decode=c,e.base64Encode=function(t){var e=s(t);return u.encodeByteArray(e,!0)},e.CONSTANTS=i,e.deepCopy=function(t){return h(void 0,t)},e.deepExtend=h,e.patchProperty=function(t,e,n){t[e]=n},e.Deferred=l,e.getUA=f,e.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(f())},e.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},e.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},e.ErrorFactory=m,e.FirebaseError=y,e.patchCapture=function(t){var e=p;return p=t,e},e.jsonEval=g,e.stringify=function(t){return JSON.stringify(t)},e.decode=v,e.isAdmin=function(t){var e=v(t).claims;return"object"==typeof e&&!0===e.admin},e.issuedAtTime=function(t){var e=v(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},e.isValidFormat=function(t){var e=v(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},e.isValidTimestamp=function(t){var e,n,r=v(t).claims,i=Math.floor((new Date).getTime()/1e3);return"object"==typeof r&&(r.hasOwnProperty("nbf")?e=r.nbf:r.hasOwnProperty("iat")&&(e=r.iat),n=r.hasOwnProperty("exp")?r.exp:e+86400),i&&e&&n&&i>=e&&i<=n},e.clone=function(t){return w({},t)},e.contains=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.every=function(t,e){for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&!e(n,t[n]))return!1;return!0},e.extend=w,e.findKey=T,e.findValue=function(t,e,n){var r=T(t,e,n);return r&&t[r]},e.forEach=b,e.getAnyKey=function(t){for(var e in t)return e},e.getCount=function(t){var e=0;for(var n in t)e++;return e},e.getValues=function(t){var e=[],n=0;for(var r in t)e[n++]=t[r];return e},e.isEmpty=function(t){for(var e in t)return!1;return!0},e.isNonNullObject=function(t){return"object"==typeof t&&null!==t},e.map=function(t,e,n){var r={};for(var i in t)r[i]=e.call(n,t[i],i,t);return r},e.safeGet=function(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]},e.querystring=function(t){var e=[];return b(t,function(t,n){Array.isArray(n)?n.forEach(function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}),e.length?"&"+e.join("&"):""},e.querystringDecode=function(t){var e={};return t.replace(/^\?/,"").split("&").forEach(function(t){if(t){var n=t.split("=");e[n[0]]=n[1]}}),e},e.Sha1=E,e.async=function(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then(function(){t.apply(void 0,n)}).catch(function(t){e&&e(t)})}},e.createSubscribe=function(t,e){var n=new S(t,e);return n.subscribe.bind(n)},e.errorPrefix=I,e.validateArgCount=function(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},e.validateCallback=function(t,e,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(I(t,e,r)+"must be a valid function.")},e.validateContextObject=function(t,e,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(I(t,e,r)+"must be a valid context object.")},e.validateNamespace=function(t,e,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(I(t,e,r)+"must be a valid firebase namespace.")},e.stringLength=function(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e++:r<2048?e+=2:r>=55296&&r<=56319?(e+=4,n++):e+=3}return e},e.stringToByteArray=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;o(++r<t.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(t.charCodeAt(r)-56320)}i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):i<65536?(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e}},function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var r,i=function(t){return t&&"object"==typeof t&&"default"in t?t.default:t}(n(4)),o=n(13),a=n(5),s=n(14),u=i.SDK_VERSION,c=new o.Logger("@firebase/firestore");function h(){return c.logLevel===o.LogLevel.DEBUG?r.DEBUG:c.logLevel===o.LogLevel.SILENT?r.SILENT:r.ERROR}function l(t){switch(t){case r.DEBUG:c.logLevel=o.LogLevel.DEBUG;break;case r.ERROR:c.logLevel=o.LogLevel.ERROR;break;case r.SILENT:c.logLevel=o.LogLevel.SILENT;break;default:c.error("Firestore ("+u+"): Invalid value passed to `setLogLevel`")}}function f(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(c.logLevel<=o.LogLevel.DEBUG){var i=n.map(p);c.debug.apply(c,["Firestore ("+u+") ["+t+"]: "+e].concat(i))}}function d(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(c.logLevel<=o.LogLevel.ERROR){var r=e.map(p);c.error.apply(c,["Firestore ("+u+"): "+t].concat(r))}}function p(t){if("string"==typeof t)return t;var e=g.getPlatform();try{return e.formatJSON(t)}catch(e){return t}}function y(t){var e="FIRESTORE ("+u+") INTERNAL ASSERTION FAILED: "+t;throw d(e),new Error(e)}function m(t,e){t||y(e)}!function(t){t[t.DEBUG=0]="DEBUG",t[t.ERROR=1]="ERROR",t[t.SILENT=2]="SILENT"}(r||(r={}));var g=function(){function t(){}return t.setPlatform=function(e){t.platform&&y("Platform already defined"),t.platform=e},t.getPlatform=function(){return t.platform||y("Platform not set"),t.platform},t}();function v(){return g.getPlatform().emptyByteString}var b={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"},w=function(t){function e(e,n){var r=t.call(this,n)||this;return r.code=e,r.message=n,r.name="FirebaseError",r.toString=function(){return r.name+": [code="+r.code+"]: "+r.message},r}return a.__extends(e,t),e}(Error);function T(t,e){function n(){var t="This constructor is private.";throw e&&(t+=" ",t+=e),new w(b.INVALID_ARGUMENT,t)}for(var r in n.prototype=t.prototype,t)t.hasOwnProperty(r)&&(n[r]=t[r]);return n}function E(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function S(t,e){return void 0!==t?t:e}function C(t,e){for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Number(n);isNaN(r)||e(r,t[n])}}function I(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function _(t){for(var e in m(null!=t&&"object"==typeof t,"isEmpty() expects object parameter."),t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function D(t,e,n){if(e.length!==n)throw new w(b.INVALID_ARGUMENT,"Function "+t+"() requires "+W(n,"argument")+", but was called with "+W(e.length,"argument")+".")}function A(t,e,n){if(e.length<n)throw new w(b.INVALID_ARGUMENT,"Function "+t+"() requires at least "+W(n,"argument")+", but was called with "+W(e.length,"argument")+".")}function N(t,e,n,r){if(e.length<n||e.length>r)throw new w(b.INVALID_ARGUMENT,"Function "+t+"() requires between "+n+" and "+r+" arguments, but was called with "+W(e.length,"argument")+".")}function k(t,e,n,r){L(t,e,j(n)+" argument",r)}function x(t,e,n,r){void 0!==r&&k(t,e,n,r)}function O(t,e,n,r){L(t,e,n+" option",r)}function R(t,e,n,r){void 0!==r&&O(t,e,n,r)}function P(t,e,n,r,i){void 0!==r&&function(t,e,n,r,i){if(!(r instanceof Array))throw new w(b.INVALID_ARGUMENT,"Function "+t+"() requires its "+e+" option to be an array, but it was: "+F(r));for(var o=0;o<r.length;++o)if(!i(r[o]))throw new w(b.INVALID_ARGUMENT,"Function "+t+"() requires all "+e+" elements to be "+n+", but the value at index "+o+" was: "+F(r[o]))}(t,e,n,r,i)}function M(t,e,n,r,i){void 0!==r&&function(t,e,n,r,i){for(var o=[],a=0,s=i;a<s.length;a++){var u=s[a];if(u===r)return;o.push(F(u))}var c=F(r);throw new w(b.INVALID_ARGUMENT,"Invalid value "+c+" provided to function "+t+'() for option "'+n+'". Acceptable values: '+o.join(", "))}(t,0,n,r,i)}function L(t,e,n,r){if(!("object"===e?q(r):"non-empty string"===e?"string"==typeof r&&""!==r:typeof r===e)){var i=F(r);throw new w(b.INVALID_ARGUMENT,"Function "+t+"() requires its "+n+" to be of type "+e+", but it was: "+i)}}function q(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}function F(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=t.substring(0,20)+"..."),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";var e=function(t){if(t.constructor){var e=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(e&&e.length>1)return e[1]}return null}(t);return e?"a custom "+e+" object":"an object"}return"function"==typeof t?"a function":y("Unknown wrong type: "+typeof t)}function B(t,e,n){if(void 0===n)throw new w(b.INVALID_ARGUMENT,"Function "+t+"() requires a valid "+j(e)+" argument, but it was undefined.")}function V(t,e,n){I(e,function(e,r){if(n.indexOf(e)<0)throw new w(b.INVALID_ARGUMENT,"Unknown option '"+e+"' passed to function "+t+"(). Available options: "+n.join(", "))})}function U(t,e,n,r){var i=F(r);return new w(b.INVALID_ARGUMENT,"Function "+t+"() requires its "+j(n)+" argument to be a "+e+", but it was: "+i)}function j(t){switch(t){case 1:return"first";case 2:return"second";case 3:return"third";default:return t+"th"}}function W(t,e){return t+" "+e+(1===t?"":"s")}var K=function(){function t(){}return t.newId=function(){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e="",n=0;n<20;n++)e+=t.charAt(Math.floor(Math.random()*t.length));return m(20===e.length,"Invalid auto ID: "+e),e},t}();function Q(t,e){return t<e?-1:t>e?1:0}function H(t,e){if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].isEqual(e[n]))return!1;return!0}function G(){if("undefined"==typeof Uint8Array)throw new w(b.UNIMPLEMENTED,"Uint8Arrays are not available in this environment.")}function z(){if(!g.getPlatform().base64Available)throw new w(b.UNIMPLEMENTED,"Blobs are unavailable in Firestore in this environment.")}var X,Y,J=function(){function t(t){z(),this._binaryString=t}return t.fromBase64String=function(e){D("Blob.fromBase64String",arguments,1),k("Blob.fromBase64String","string",1,e),z();try{return new t(g.getPlatform().atob(e))}catch(t){throw new w(b.INVALID_ARGUMENT,"Failed to construct Blob from Base64 string: "+t)}},t.fromUint8Array=function(e){if(D("Blob.fromUint8Array",arguments,1),G(),!(e instanceof Uint8Array))throw U("Blob.fromUint8Array","Uint8Array",1,e);return new t(Array.prototype.map.call(e,function(t){return String.fromCharCode(t)}).join(""))},t.prototype.toBase64=function(){return D("Blob.toBase64",arguments,0),z(),g.getPlatform().btoa(this._binaryString)},t.prototype.toUint8Array=function(){D("Blob.toUint8Array",arguments,0),G();for(var t=new Uint8Array(this._binaryString.length),e=0;e<this._binaryString.length;e++)t[e]=this._binaryString.charCodeAt(e);return t},t.prototype.toString=function(){return"Blob(base64: "+this.toBase64()+")"},t.prototype.isEqual=function(t){return this._binaryString===t._binaryString},t.prototype._compareTo=function(t){return Q(this._binaryString,t._binaryString)},t}(),$=T(J,"Use Blob.fromUint8Array() or Blob.fromBase64String() instead."),Z=function(){function t(t,e){if(D("GeoPoint",arguments,2),k("GeoPoint","number",1,t),k("GeoPoint","number",2,e),!isFinite(t)||t<-90||t>90)throw new w(b.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new w(b.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}return Object.defineProperty(t.prototype,"latitude",{get:function(){return this._lat},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"longitude",{get:function(){return this._long},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(t){return this._lat===t._lat&&this._long===t._long},t.prototype._compareTo=function(t){return Q(this._lat,t._lat)||Q(this._long,t._long)},t}(),tt=function(){function t(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new w(b.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new w(b.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new w(b.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new w(b.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}return t.now=function(){return t.fromMillis(Date.now())},t.fromDate=function(e){return t.fromMillis(e.getTime())},t.fromMillis=function(e){var n=Math.floor(e/1e3);return new t(n,1e6*(e-1e3*n))},t.prototype.toDate=function(){return new Date(this.toMillis())},t.prototype.toMillis=function(){return 1e3*this.seconds+this.nanoseconds/1e6},t.prototype._compareTo=function(t){return this.seconds===t.seconds?Q(this.nanoseconds,t.nanoseconds):Q(this.seconds,t.seconds)},t.prototype.isEqual=function(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds},t.prototype.toString=function(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"},t}(),et=function(){return function(t,e,n,r){this.databaseId=t,this.persistenceKey=e,this.host=n,this.ssl=r}}(),nt="(default)",rt=function(){function t(t,e){this.projectId=t,this.database=e||nt}return Object.defineProperty(t.prototype,"isDefaultDatabase",{get:function(){return this.database===nt},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(e){return e instanceof t&&e.projectId===this.projectId&&e.database===this.database},t.prototype.compareTo=function(t){return Q(this.projectId,t.projectId)||Q(this.database,t.database)},t}(),it=function(){function t(t,e,n){this.init(t,e,n)}return t.prototype.init=function(t,e,n){void 0===e?e=0:e>t.length&&y("offset "+e+" out of range "+t.length),void 0===n?n=t.length-e:n>t.length-e&&y("length "+n+" out of range "+(t.length-e)),this.segments=t,this.offset=e,this.len=n},t.prototype.construct=function(t,e,n){var r=Object.create(Object.getPrototypeOf(this));return r.init(t,e,n),r},Object.defineProperty(t.prototype,"length",{get:function(){return this.len},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(e){return 0===t.comparator(this,e)},t.prototype.child=function(e){var n=this.segments.slice(this.offset,this.limit());return e instanceof t?e.forEach(function(t){n.push(t)}):"string"==typeof e?n.push(e):y("Unknown parameter type for Path.child(): "+e),this.construct(n)},t.prototype.limit=function(){return this.offset+this.length},t.prototype.popFirst=function(t){return t=void 0===t?1:t,m(this.length>=t,"Can't call popFirst() with less segments"),this.construct(this.segments,this.offset+t,this.length-t)},t.prototype.popLast=function(){return m(!this.isEmpty(),"Can't call popLast() on empty path"),this.construct(this.segments,this.offset,this.length-1)},t.prototype.firstSegment=function(){return m(!this.isEmpty(),"Can't call firstSegment() on empty path"),this.segments[this.offset]},t.prototype.lastSegment=function(){return m(!this.isEmpty(),"Can't call lastSegment() on empty path"),this.segments[this.limit()-1]},t.prototype.get=function(t){return m(t<this.length,"Index out of range"),this.segments[this.offset+t]},t.prototype.isEmpty=function(){return 0===this.length},t.prototype.isPrefixOf=function(t){if(t.length<this.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.isImmediateParentOf=function(t){if(this.length+1!==t.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.forEach=function(t){for(var e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])},t.prototype.toArray=function(){return this.segments.slice(this.offset,this.limit())},t.comparator=function(t,e){for(var n=Math.min(t.length,e.length),r=0;r<n;r++){var i=t.get(r),o=e.get(r);if(i<o)return-1;if(i>o)return 1}return t.length<e.length?-1:t.length>e.length?1:0},t}(),ot=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.__extends(e,t),e.prototype.canonicalString=function(){return this.toArray().join("/")},e.prototype.toString=function(){return this.canonicalString()},e.fromString=function(t){if(t.indexOf("//")>=0)throw new w(b.INVALID_ARGUMENT,"Invalid path ("+t+"). Paths must not contain // in them.");return new e(t.split("/").filter(function(t){return t.length>0}))},e.EMPTY_PATH=new e([]),e}(it),at=/^[_a-zA-Z][_a-zA-Z0-9]*$/,st=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.__extends(e,t),e.isValidIdentifier=function(t){return at.test(t)},e.prototype.canonicalString=function(){return this.toArray().map(function(t){return t=t.replace("\\","\\\\").replace("`","\\`"),e.isValidIdentifier(t)||(t="`"+t+"`"),t}).join(".")},e.prototype.toString=function(){return this.canonicalString()},e.prototype.isKeyField=function(){return 1===this.length&&"__name__"===this.get(0)},e.keyField=function(){return new e(["__name__"])},e.fromServerFormat=function(t){for(var n=[],r="",i=0,o=function(){if(0===r.length)throw new w(b.INVALID_ARGUMENT,"Invalid field path ("+t+"). Paths must not be empty, begin with '.', end with '.', or contain '..'");n.push(r),r=""},a=!1;i<t.length;){var s=t[i];if("\\"===s){if(i+1===t.length)throw new w(b.INVALID_ARGUMENT,"Path has trailing escape character: "+t);var u=t[i+1];if("\\"!==u&&"."!==u&&"`"!==u)throw new w(b.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);r+=u,i+=2}else"`"===s?(a=!a,i++):"."!==s||a?(r+=s,i++):(o(),i++)}if(o(),a)throw new w(b.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new e(n)},e.EMPTY_PATH=new e([]),e}(it),ut=function(){function t(e){this.path=e,m(t.isDocumentKey(e),"Invalid DocumentKey with an odd number of segments: "+e.toArray().join("/"))}return t.prototype.isEqual=function(t){return null!==t&&0===ot.comparator(this.path,t.path)},t.prototype.toString=function(){return this.path.toString()},t.comparator=function(t,e){return ot.comparator(t.path,e.path)},t.isDocumentKey=function(t){return t.length%2==0},t.fromSegments=function(e){return new t(new ot(e.slice()))},t.fromPathString=function(e){return new t(ot.fromString(e))},t.EMPTY=new t(new ot([])),t}(),ct=function(){function t(t,e){this.key=t,this.version=e}return t.compareByKey=function(t,e){return ut.comparator(t.key,e.key)},t}(),ht=function(t){function e(e,n,r,i){var o=t.call(this,e,n)||this;return o.data=r,o.hasLocalMutations=!!i.hasLocalMutations,o.hasCommittedMutations=!!i.hasCommittedMutations,o}return a.__extends(e,t),e.prototype.field=function(t){return this.data.field(t)},e.prototype.fieldValue=function(t){var e=this.field(t);return e?e.value():void 0},e.prototype.value=function(){return this.data.value()},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.data.isEqual(t.data)&&this.hasLocalMutations===t.hasLocalMutations&&this.hasCommittedMutations===t.hasCommittedMutations},e.prototype.toString=function(){return"Document("+this.key+", "+this.version+", "+this.data.toString()+", {hasLocalMutations: "+this.hasLocalMutations+"}), {hasCommittedMutations: "+this.hasCommittedMutations+"})"},Object.defineProperty(e.prototype,"hasPendingWrites",{get:function(){return this.hasLocalMutations||this.hasCommittedMutations},enumerable:!0,configurable:!0}),e.compareByField=function(t,e,n){var r=e.field(t),i=n.field(t);return void 0!==r&&void 0!==i?r.compareTo(i):y("Trying to compare documents on fields that don't exist")},e}(ct),lt=function(t){function e(e,n,r){var i=t.call(this,e,n)||this;return i.hasCommittedMutations=!(!r||!r.hasCommittedMutations),i}return a.__extends(e,t),e.prototype.toString=function(){return"NoDocument("+this.key+", "+this.version+")"},Object.defineProperty(e.prototype,"hasPendingWrites",{get:function(){return this.hasCommittedMutations},enumerable:!0,configurable:!0}),e.prototype.isEqual=function(t){return t instanceof e&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},e}(ct),ft=function(t){function e(e,n){return t.call(this,e,n)||this}return a.__extends(e,t),e.prototype.toString=function(){return"UnknownDocument("+this.key+", "+this.version+")"},Object.defineProperty(e.prototype,"hasPendingWrites",{get:function(){return!0},enumerable:!0,configurable:!0}),e.prototype.isEqual=function(t){return t instanceof e&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},e}(ct),dt=function(){function t(t,e){this.comparator=t,this.root=e||yt.EMPTY}return t.prototype.insert=function(e,n){return new t(this.comparator,this.root.insert(e,n,this.comparator).copy(null,null,yt.BLACK,null,null))},t.prototype.remove=function(e){return new t(this.comparator,this.root.remove(e,this.comparator).copy(null,null,yt.BLACK,null,null))},t.prototype.get=function(t){for(var e=this.root;!e.isEmpty();){var n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null},t.prototype.indexOf=function(t){for(var e=0,n=this.root;!n.isEmpty();){var r=this.comparator(t,n.key);if(0===r)return e+n.left.size;r<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1},t.prototype.isEmpty=function(){return this.root.isEmpty()},Object.defineProperty(t.prototype,"size",{get:function(){return this.root.size},enumerable:!0,configurable:!0}),t.prototype.minKey=function(){return this.root.minKey()},t.prototype.maxKey=function(){return this.root.maxKey()},t.prototype.inorderTraversal=function(t){return this.root.inorderTraversal(t)},t.prototype.forEach=function(t){this.inorderTraversal(function(e,n){return t(e,n),!1})},t.prototype.reverseTraversal=function(t){return this.root.reverseTraversal(t)},t.prototype.getIterator=function(){return new pt(this.root,null,this.comparator,!1)},t.prototype.getIteratorFrom=function(t){return new pt(this.root,t,this.comparator,!1)},t.prototype.getReverseIterator=function(){return new pt(this.root,null,this.comparator,!0)},t.prototype.getReverseIteratorFrom=function(t){return new pt(this.root,t,this.comparator,!0)},t}(),pt=function(){function t(t,e,n,r){this.isReverse=r,this.nodeStack=[];for(var i=1;!t.isEmpty();)if(i=e?n(t.key,e):1,r&&(i*=-1),i<0)t=this.isReverse?t.left:t.right;else{if(0===i){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}return t.prototype.getNext=function(){m(this.nodeStack.length>0,"getNext() called on iterator when hasNext() is false.");var t=this.nodeStack.pop(),e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e},t.prototype.hasNext=function(){return this.nodeStack.length>0},t.prototype.peek=function(){if(0===this.nodeStack.length)return null;var t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}},t}(),yt=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:t.EMPTY,this.right=null!=o?o:t.EMPTY,this.size=this.left.size+1+this.right.size}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.isEmpty=function(){return!1},t.prototype.inorderTraversal=function(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)},t.prototype.min=function(){return this.left.isEmpty()?this:this.left.min()},t.prototype.minKey=function(){return this.min().key},t.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},t.prototype.insert=function(t,e,n){var r=this,i=n(t,r.key);return(r=i<0?r.copy(null,null,null,r.left.insert(t,e,n),null):0===i?r.copy(null,e,null,null,null):r.copy(null,null,null,null,r.right.insert(t,e,n))).fixUp()},t.prototype.removeMin=function(){if(this.left.isEmpty())return t.EMPTY;var e=this;return e.left.isRed()||e.left.left.isRed()||(e=e.moveRedLeft()),(e=e.copy(null,null,null,e.left.removeMin(),null)).fixUp()},t.prototype.remove=function(e,n){var r,i=this;if(n(e,i.key)<0)i.left.isEmpty()||i.left.isRed()||i.left.left.isRed()||(i=i.moveRedLeft()),i=i.copy(null,null,null,i.left.remove(e,n),null);else{if(i.left.isRed()&&(i=i.rotateRight()),i.right.isEmpty()||i.right.isRed()||i.right.left.isRed()||(i=i.moveRedRight()),0===n(e,i.key)){if(i.right.isEmpty())return t.EMPTY;r=i.right.min(),i=i.copy(r.key,r.value,null,null,i.right.removeMin())}i=i.copy(null,null,null,null,i.right.remove(e,n))}return i.fixUp()},t.prototype.isRed=function(){return this.color},t.prototype.fixUp=function(){var t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t},t.prototype.moveRedLeft=function(){var t=this.colorFlip();return t.right.left.isRed()&&(t=(t=(t=t.copy(null,null,null,null,t.right.rotateRight())).rotateLeft()).colorFlip()),t},t.prototype.moveRedRight=function(){var t=this.colorFlip();return t.left.left.isRed()&&(t=(t=t.rotateRight()).colorFlip()),t},t.prototype.rotateLeft=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.rotateRight=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.colorFlip=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.checkMaxDepth=function(){var t=this.check();return Math.pow(2,t)<=this.size+1},t.prototype.check=function(){if(this.isRed()&&this.left.isRed())throw y("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed())throw y("Right child of ("+this.key+","+this.value+") is red");var t=this.left.check();if(t!==this.right.check())throw y("Black depths differ");return t+(this.isRed()?0:1)},t.EMPTY=null,t.RED=!0,t.BLACK=!1,t}(),mt=function(){function t(){this.size=0}return t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.insert=function(t,e,n){return new yt(t,e)},t.prototype.remove=function(t,e){return this},t.prototype.isEmpty=function(){return!0},t.prototype.inorderTraversal=function(t){return!1},t.prototype.reverseTraversal=function(t){return!1},t.prototype.minKey=function(){return null},t.prototype.maxKey=function(){return null},t.prototype.isRed=function(){return!1},t.prototype.checkMaxDepth=function(){return!0},t.prototype.check=function(){return 0},t}();yt.EMPTY=new mt,function(t){t[t.NullValue=0]="NullValue",t[t.BooleanValue=1]="BooleanValue",t[t.NumberValue=2]="NumberValue",t[t.TimestampValue=3]="TimestampValue",t[t.StringValue=4]="StringValue",t[t.BlobValue=5]="BlobValue",t[t.RefValue=6]="RefValue",t[t.GeoPointValue=7]="GeoPointValue",t[t.ArrayValue=8]="ArrayValue",t[t.ObjectValue=9]="ObjectValue"}(X||(X={})),function(t){t[t.Default=0]="Default",t[t.Estimate=1]="Estimate",t[t.Previous=2]="Previous"}(Y||(Y={}));var gt=function(){function t(t,e){this.serverTimestampBehavior=t,this.timestampsInSnapshots=e}return t.fromSnapshotOptions=function(e,n){switch(e.serverTimestamps){case"estimate":return new t(Y.Estimate,n);case"previous":return new t(Y.Previous,n);case"none":case void 0:return new t(Y.Default,n);default:return y("fromSnapshotOptions() called with invalid options.")}},t}(),vt=function(){function t(){}return t.prototype.toString=function(){var t=this.value();return null===t?"null":t.toString()},t.prototype.defaultCompareTo=function(t){return m(this.typeOrder!==t.typeOrder,"Default compareTo should not be used for values of same type."),Q(this.typeOrder,t.typeOrder)},t}(),bt=function(t){function e(){var e=t.call(this)||this;return e.typeOrder=X.NullValue,e.internalValue=null,e}return a.__extends(e,t),e.prototype.value=function(t){return null},e.prototype.isEqual=function(t){return t instanceof e},e.prototype.compareTo=function(t){return t instanceof e?0:this.defaultCompareTo(t)},e.INSTANCE=new e,e}(vt),wt=function(t){function e(e){var n=t.call(this)||this;return n.internalValue=e,n.typeOrder=X.BooleanValue,n}return a.__extends(e,t),e.prototype.value=function(t){return this.internalValue},e.prototype.isEqual=function(t){return t instanceof e&&this.internalValue===t.internalValue},e.prototype.compareTo=function(t){return t instanceof e?Q(this,t):this.defaultCompareTo(t)},e.of=function(t){return t?e.TRUE:e.FALSE},e.TRUE=new e(!0),e.FALSE=new e(!1),e}(vt),Tt=function(t){function e(e){var n=t.call(this)||this;return n.internalValue=e,n.typeOrder=X.NumberValue,n}return a.__extends(e,t),e.prototype.value=function(t){return this.internalValue},e.prototype.compareTo=function(t){return t instanceof e?function(t,e){return t<e?-1:t>e?1:t===e?0:isNaN(t)?isNaN(e)?0:-1:1}(this.internalValue,t.internalValue):this.defaultCompareTo(t)},e}(vt);function Et(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}var St=function(t){function e(e){return t.call(this,e)||this}return a.__extends(e,t),e.prototype.isEqual=function(t){return t instanceof e&&Et(this.internalValue,t.internalValue)},e}(Tt),Ct=function(t){function e(e){var n=t.call(this,e)||this;return n.internalValue=e,n}return a.__extends(e,t),e.prototype.isEqual=function(t){return t instanceof e&&Et(this.internalValue,t.internalValue)},e.NAN=new e(NaN),e.POSITIVE_INFINITY=new e(1/0),e.NEGATIVE_INFINITY=new e(-1/0),e}(Tt),It=function(t){function e(e){var n=t.call(this)||this;return n.internalValue=e,n.typeOrder=X.StringValue,n}return a.__extends(e,t),e.prototype.value=function(t){return this.internalValue},e.prototype.isEqual=function(t){return t instanceof e&&this.internalValue===t.internalValue},e.prototype.compareTo=function(t){return t instanceof e?Q(this.internalValue,t.internalValue):this.defaultCompareTo(t)},e}(vt),_t=function(t){function e(e){var n=t.call(this)||this;return n.internalValue=e,n.typeOrder=X.TimestampValue,n}return a.__extends(e,t),e.prototype.value=function(t){return t&&t.timestampsInSnapshots?this.internalValue:this.internalValue.toDate()},e.prototype.isEqual=function(t){return t instanceof e&&this.internalValue.isEqual(t.internalValue)},e.prototype.compareTo=function(t){return t instanceof e?this.internalValue._compareTo(t.internalValue):t instanceof Dt?-1:this.defaultCompareTo(t)},e}(vt),Dt=function(t){function e(e,n){var r=t.call(this)||this;return r.localWriteTime=e,r.previousValue=n,r.typeOrder=X.TimestampValue,r}return a.__extends(e,t),e.prototype.value=function(t){return t&&t.serverTimestampBehavior===Y.Estimate?new _t(this.localWriteTime).value(t):t&&t.serverTimestampBehavior===Y.Previous&&this.previousValue?this.previousValue.value(t):null},e.prototype.isEqual=function(t){return t instanceof e&&this.localWriteTime.isEqual(t.localWriteTime)},e.prototype.compareTo=function(t){return t instanceof e?this.localWriteTime._compareTo(t.localWriteTime):t instanceof _t?1:this.defaultCompareTo(t)},e.prototype.toString=function(){return"<ServerTimestamp localTime="+this.localWriteTime.toString()+">"},e}(vt),At=function(t){function e(e){var n=t.call(this)||this;return n.internalValue=e,n.typeOrder=X.BlobValue,n}return a.__extends(e,t),e.prototype.value=function(t){return this.internalValue},e.prototype.isEqual=function(t){return t instanceof e&&this.internalValue.isEqual(t.internalValue)},e.prototype.compareTo=function(t){return t instanceof e?this.internalValue._compareTo(t.internalValue):this.defaultCompareTo(t)},e}(vt),Nt=function(t){function e(e,n){var r=t.call(this)||this;return r.databaseId=e,r.key=n,r.typeOrder=X.RefValue,r}return a.__extends(e,t),e.prototype.value=function(t){return this.key},e.prototype.isEqual=function(t){return t instanceof e&&(this.key.isEqual(t.key)&&this.databaseId.isEqual(t.databaseId))},e.prototype.compareTo=function(t){if(t instanceof e){var n=this.databaseId.compareTo(t.databaseId);return 0!==n?n:ut.comparator(this.key,t.key)}return this.defaultCompareTo(t)},e}(vt),kt=function(t){function e(e){var n=t.call(this)||this;return n.internalValue=e,n.typeOrder=X.GeoPointValue,n}return a.__extends(e,t),e.prototype.value=function(t){return this.internalValue},e.prototype.isEqual=function(t){return t instanceof e&&this.internalValue.isEqual(t.internalValue)},e.prototype.compareTo=function(t){return t instanceof e?this.internalValue._compareTo(t.internalValue):this.defaultCompareTo(t)},e}(vt),xt=function(t){function e(e){var n=t.call(this)||this;return n.internalValue=e,n.typeOrder=X.ObjectValue,n}return a.__extends(e,t),e.prototype.value=function(t){var e={};return this.internalValue.inorderTraversal(function(n,r){e[n]=r.value(t)}),e},e.prototype.forEach=function(t){this.internalValue.inorderTraversal(t)},e.prototype.isEqual=function(t){if(t instanceof e){for(var n=this.internalValue.getIterator(),r=t.internalValue.getIterator();n.hasNext()&&r.hasNext();){var i=n.getNext(),o=r.getNext();if(i.key!==o.key||!i.value.isEqual(o.value))return!1}return!n.hasNext()&&!r.hasNext()}return!1},e.prototype.compareTo=function(t){if(t instanceof e){for(var n=this.internalValue.getIterator(),r=t.internalValue.getIterator();n.hasNext()&&r.hasNext();){var i=n.getNext(),o=r.getNext(),a=Q(i.key,o.key)||i.value.compareTo(o.value);if(a)return a}return Q(n.hasNext(),r.hasNext())}return this.defaultCompareTo(t)},e.prototype.set=function(t,n){if(m(!t.isEmpty(),"Cannot set field for empty path on ObjectValue"),1===t.length)return this.setChild(t.firstSegment(),n);var r=this.child(t.firstSegment());r instanceof e||(r=e.EMPTY);var i=r.set(t.popFirst(),n);return this.setChild(t.firstSegment(),i)},e.prototype.delete=function(t){if(m(!t.isEmpty(),"Cannot delete field for empty path on ObjectValue"),1===t.length)return new e(this.internalValue.remove(t.firstSegment()));var n=this.child(t.firstSegment());if(n instanceof e){var r=n.delete(t.popFirst());return new e(this.internalValue.insert(t.firstSegment(),r))}return this},e.prototype.contains=function(t){return void 0!==this.field(t)},e.prototype.field=function(t){m(!t.isEmpty(),"Can't get field of empty path");var n=this;return t.forEach(function(t){n=n instanceof e&&n.internalValue.get(t)||void 0}),n},e.prototype.toString=function(){return JSON.stringify(this.value())},e.prototype.child=function(t){return this.internalValue.get(t)||void 0},e.prototype.setChild=function(t,n){return new e(this.internalValue.insert(t,n))},e.EMPTY=new e(new dt(Q)),e}(vt),Ot=function(t){function e(e){var n=t.call(this)||this;return n.internalValue=e,n.typeOrder=X.ArrayValue,n}return a.__extends(e,t),e.prototype.value=function(t){return this.internalValue.map(function(e){return e.value(t)})},e.prototype.forEach=function(t){this.internalValue.forEach(t)},e.prototype.isEqual=function(t){if(t instanceof e){if(this.internalValue.length!==t.internalValue.length)return!1;for(var n=0;n<this.internalValue.length;n++)if(!this.internalValue[n].isEqual(t.internalValue[n]))return!1;return!0}return!1},e.prototype.compareTo=function(t){if(t instanceof e){for(var n=Math.min(this.internalValue.length,t.internalValue.length),r=0;r<n;r++){var i=this.internalValue[r].compareTo(t.internalValue[r]);if(i)return i}return Q(this.internalValue.length,t.internalValue.length)}return this.defaultCompareTo(t)},e.prototype.toString=function(){return JSON.stringify(this.value())},e}(vt),Rt=Number,Pt=Rt.MIN_SAFE_INTEGER||-(Math.pow(2,53)-1),Mt=Rt.MAX_SAFE_INTEGER||Math.pow(2,53)-1,Lt=Rt.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t};function qt(t){return null===t||void 0===t}function Ft(t){return Lt(t)&&t<=Mt&&t>=Pt}var Bt,Vt=function(){function t(t,e,n,r,i,o){void 0===e&&(e=[]),void 0===n&&(n=[]),void 0===r&&(r=null),void 0===i&&(i=null),void 0===o&&(o=null),this.path=t,this.explicitOrderBy=e,this.filters=n,this.limit=r,this.startAt=i,this.endAt=o,this.memoizedCanonicalId=null,this.memoizedOrderBy=null,this.startAt&&this.assertValidBound(this.startAt),this.endAt&&this.assertValidBound(this.endAt)}return t.atPath=function(e){return new t(e)},Object.defineProperty(t.prototype,"orderBy",{get:function(){if(null===this.memoizedOrderBy){var t=this.getInequalityFilterField(),e=this.getFirstOrderByField();if(null!==t&&null===e)t.isKeyField()?this.memoizedOrderBy=[Xt]:this.memoizedOrderBy=[new zt(t),Xt];else{m(null===t||null!==e&&t.isEqual(e),"First orderBy should match inequality field."),this.memoizedOrderBy=[];for(var n=!1,r=0,i=this.explicitOrderBy;r<i.length;r++){var o=i[r];this.memoizedOrderBy.push(o),o.field.isKeyField()&&(n=!0)}if(!n){var a=this.explicitOrderBy.length>0?this.explicitOrderBy[this.explicitOrderBy.length-1].dir:Ht.ASCENDING;this.memoizedOrderBy.push(a===Ht.ASCENDING?Xt:Yt)}}}return this.memoizedOrderBy},enumerable:!0,configurable:!0}),t.prototype.addFilter=function(e){m(null==this.getInequalityFilterField()||!(e instanceof Wt)||!e.isInequality()||e.field.isEqual(this.getInequalityFilterField()),"Query must only have one inequality field."),m(!ut.isDocumentKey(this.path),"No filtering allowed for document query");var n=this.filters.concat([e]);return new t(this.path,this.explicitOrderBy.slice(),n,this.limit,this.startAt,this.endAt)},t.prototype.addOrderBy=function(e){m(!ut.isDocumentKey(this.path),"No ordering allowed for document query"),m(!this.startAt&&!this.endAt,"Bounds must be set after orderBy");var n=this.explicitOrderBy.concat([e]);return new t(this.path,n,this.filters.slice(),this.limit,this.startAt,this.endAt)},t.prototype.withLimit=function(e){return new t(this.path,this.explicitOrderBy.slice(),this.filters.slice(),e,this.startAt,this.endAt)},t.prototype.withStartAt=function(e){return new t(this.path,this.explicitOrderBy.slice(),this.filters.slice(),this.limit,e,this.endAt)},t.prototype.withEndAt=function(e){return new t(this.path,this.explicitOrderBy.slice(),this.filters.slice(),this.limit,this.startAt,e)},t.prototype.canonicalId=function(){if(null===this.memoizedCanonicalId){var t=this.path.canonicalString();t+="|f:";for(var e=0,n=this.filters;e<n.length;e++){t+=n[e].canonicalId(),t+=","}t+="|ob:";for(var r=0,i=this.orderBy;r<i.length;r++){t+=i[r].canonicalId(),t+=","}qt(this.limit)||(t+="|l:",t+=this.limit),this.startAt&&(t+="|lb:",t+=this.startAt.canonicalId()),this.endAt&&(t+="|ub:",t+=this.endAt.canonicalId()),this.memoizedCanonicalId=t}return this.memoizedCanonicalId},t.prototype.toString=function(){var t="Query("+this.path.canonicalString();return this.filters.length>0&&(t+=", filters: ["+this.filters.join(", ")+"]"),qt(this.limit)||(t+=", limit: "+this.limit),this.explicitOrderBy.length>0&&(t+=", orderBy: ["+this.explicitOrderBy.join(", ")+"]"),this.startAt&&(t+=", startAt: "+this.startAt.canonicalId()),this.endAt&&(t+=", endAt: "+this.endAt.canonicalId()),t+")"},t.prototype.isEqual=function(t){if(this.limit!==t.limit)return!1;if(this.orderBy.length!==t.orderBy.length)return!1;for(var e=0;e<this.orderBy.length;e++)if(!this.orderBy[e].isEqual(t.orderBy[e]))return!1;if(this.filters.length!==t.filters.length)return!1;for(e=0;e<this.filters.length;e++)if(!this.filters[e].isEqual(t.filters[e]))return!1;return!!this.path.isEqual(t.path)&&(!(null!==this.startAt?!this.startAt.isEqual(t.startAt):null!==t.startAt)&&(null!==this.endAt?this.endAt.isEqual(t.endAt):null===t.endAt))},t.prototype.docComparator=function(t,e){for(var n=!1,r=0,i=this.orderBy;r<i.length;r++){var o=i[r],a=o.compare(t,e);if(0!==a)return a;n=n||o.field.isKeyField()}return m(n,"orderBy used that doesn't compare on key field"),0},t.prototype.matches=function(t){return this.matchesAncestor(t)&&this.matchesOrderBy(t)&&this.matchesFilters(t)&&this.matchesBounds(t)},t.prototype.hasLimit=function(){return!qt(this.limit)},t.prototype.getFirstOrderByField=function(){return this.explicitOrderBy.length>0?this.explicitOrderBy[0].field:null},t.prototype.getInequalityFilterField=function(){for(var t=0,e=this.filters;t<e.length;t++){var n=e[t];if(n instanceof Wt&&n.isInequality())return n.field}return null},t.prototype.hasArrayContainsFilter=function(){return void 0!==this.filters.find(function(t){return t instanceof Wt&&t.op===jt.ARRAY_CONTAINS})},t.prototype.isDocumentQuery=function(){return ut.isDocumentKey(this.path)&&0===this.filters.length},t.prototype.matchesAncestor=function(t){var e=t.key.path;return ut.isDocumentKey(this.path)?this.path.isEqual(e):this.path.isPrefixOf(e)&&this.path.length===e.length-1},t.prototype.matchesOrderBy=function(t){for(var e=0,n=this.explicitOrderBy;e<n.length;e++){var r=n[e];if(!r.field.isKeyField()&&void 0===t.field(r.field))return!1}return!0},t.prototype.matchesFilters=function(t){for(var e=0,n=this.filters;e<n.length;e++){if(!n[e].matches(t))return!1}return!0},t.prototype.matchesBounds=function(t){return!(this.startAt&&!this.startAt.sortsBeforeDocument(this.orderBy,t))&&(!this.endAt||!this.endAt.sortsBeforeDocument(this.orderBy,t))},t.prototype.assertValidBound=function(t){m(t.position.length<=this.orderBy.length,"Bound is longer than orderBy")},t}(),Ut=function(){function t(){}return t.create=function(t,e,n){if(n.isEqual(bt.INSTANCE)){if(e!==jt.EQUAL)throw new w(b.INVALID_ARGUMENT,"Invalid query. You can only perform equals comparisons on null.");return new Kt(t)}if(n.isEqual(Ct.NAN)){if(e!==jt.EQUAL)throw new w(b.INVALID_ARGUMENT,"Invalid query. You can only perform equals comparisons on NaN.");return new Qt(t)}return new Wt(t,e,n)},t}(),jt=function(){function t(t){this.name=t}return t.fromString=function(e){switch(e){case"<":return t.LESS_THAN;case"<=":return t.LESS_THAN_OR_EQUAL;case"==":return t.EQUAL;case">=":return t.GREATER_THAN_OR_EQUAL;case">":return t.GREATER_THAN;case"array-contains":return t.ARRAY_CONTAINS;default:return y("Unknown relation: "+e)}},t.prototype.toString=function(){return this.name},t.prototype.isEqual=function(t){return this.name===t.name},t.LESS_THAN=new t("<"),t.LESS_THAN_OR_EQUAL=new t("<="),t.EQUAL=new t("=="),t.GREATER_THAN=new t(">"),t.GREATER_THAN_OR_EQUAL=new t(">="),t.ARRAY_CONTAINS=new t("array-contains"),t}(),Wt=function(t){function e(e,n,r){var i=t.call(this)||this;return i.field=e,i.op=n,i.value=r,i}return a.__extends(e,t),e.prototype.matches=function(t){if(this.field.isKeyField()){m(this.value instanceof Nt,"Comparing on key, but filter value not a RefValue"),m(this.op!==jt.ARRAY_CONTAINS,"array-contains queries don't make sense on document keys.");var e=this.value,n=ut.comparator(t.key,e.key);return this.matchesComparison(n)}var r=t.field(this.field);return void 0!==r&&this.matchesValue(r)},e.prototype.matchesValue=function(t){var e=this;return this.op===jt.ARRAY_CONTAINS?t instanceof Ot&&void 0!==t.internalValue.find(function(t){return t.isEqual(e.value)}):this.value.typeOrder===t.typeOrder&&this.matchesComparison(t.compareTo(this.value))},e.prototype.matchesComparison=function(t){switch(this.op){case jt.LESS_THAN:return t<0;case jt.LESS_THAN_OR_EQUAL:return t<=0;case jt.EQUAL:return 0===t;case jt.GREATER_THAN:return t>0;case jt.GREATER_THAN_OR_EQUAL:return t>=0;default:return y("Unknown relation op"+this.op)}},e.prototype.isInequality=function(){return this.op!==jt.EQUAL&&this.op!==jt.ARRAY_CONTAINS},e.prototype.canonicalId=function(){return this.field.canonicalString()+this.op.toString()+this.value.toString()},e.prototype.isEqual=function(t){return t instanceof e&&(this.op.isEqual(t.op)&&this.field.isEqual(t.field)&&this.value.isEqual(t.value))},e.prototype.toString=function(){return this.field.canonicalString()+" "+this.op+" "+this.value.value()},e}(Ut),Kt=function(t){function e(e){var n=t.call(this)||this;return n.field=e,n}return a.__extends(e,t),e.prototype.matches=function(t){var e=t.field(this.field);return void 0!==e&&null===e.value()},e.prototype.canonicalId=function(){return this.field.canonicalString()+" IS null"},e.prototype.toString=function(){return this.field.canonicalString()+" IS null"},e.prototype.isEqual=function(t){return t instanceof e&&this.field.isEqual(t.field)},e}(Ut),Qt=function(t){function e(e){var n=t.call(this)||this;return n.field=e,n}return a.__extends(e,t),e.prototype.matches=function(t){var e=t.field(this.field),n=e&&e.value();return"number"==typeof n&&isNaN(n)},e.prototype.canonicalId=function(){return this.field.canonicalString()+" IS NaN"},e.prototype.toString=function(){return this.field.canonicalString()+" IS NaN"},e.prototype.isEqual=function(t){return t instanceof e&&this.field.isEqual(t.field)},e}(Ut),Ht=function(){function t(t){this.name=t}return t.prototype.toString=function(){return this.name},t.ASCENDING=new t("asc"),t.DESCENDING=new t("desc"),t}(),Gt=function(){function t(t,e){this.position=t,this.before=e}return t.prototype.canonicalId=function(){for(var t=this.before?"b:":"a:",e=0,n=this.position;e<n.length;e++){t+=n[e].toString()}return t},t.prototype.sortsBeforeDocument=function(t,e){m(this.position.length<=t.length,"Bound has more components than query's orderBy");for(var n=0,r=0;r<this.position.length;r++){var i=t[r],o=this.position[r];if(i.field.isKeyField())m(o instanceof Nt,"Bound has a non-key value where the key path is being used."),n=ut.comparator(o.key,e.key);else{var a=e.field(i.field);m(void 0!==a,"Field should exist since document matched the orderBy already."),n=o.compareTo(a)}if(i.dir===Ht.DESCENDING&&(n*=-1),0!==n)break}return this.before?n<=0:n<0},t.prototype.isEqual=function(t){if(null===t)return!1;if(this.before!==t.before||this.position.length!==t.position.length)return!1;for(var e=0;e<this.position.length;e++){var n=this.position[e],r=t.position[e];return n.isEqual(r)}return!0},t}(),zt=function(){function t(t,e){this.field=t,void 0===e&&(e=Ht.ASCENDING),this.dir=e,this.isKeyOrderBy=t.isKeyField()}return t.prototype.compare=function(t,e){var n=this.isKeyOrderBy?ht.compareByKey(t,e):ht.compareByField(this.field,t,e);switch(this.dir){case Ht.ASCENDING:return n;case Ht.DESCENDING:return-1*n;default:return y("Unknown direction: "+this.dir)}},t.prototype.canonicalId=function(){return this.field.canonicalString()+this.dir.toString()},t.prototype.toString=function(){return this.field.canonicalString()+" ("+this.dir+")"},t.prototype.isEqual=function(t){return this.dir===t.dir&&this.field.isEqual(t.field)},t}(),Xt=new zt(st.keyField(),Ht.ASCENDING),Yt=new zt(st.keyField(),Ht.DESCENDING),Jt=function(){function t(t){this.timestamp=t}return t.fromMicroseconds=function(e){var n=Math.floor(e/1e6);return new t(new tt(n,e%1e6*1e3))},t.fromTimestamp=function(e){return new t(e)},t.forDeletedDoc=function(){return t.MIN},t.prototype.compareTo=function(t){return this.timestamp._compareTo(t.timestamp)},t.prototype.isEqual=function(t){return this.timestamp.isEqual(t.timestamp)},t.prototype.toMicroseconds=function(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3},t.prototype.toString=function(){return"SnapshotVersion("+this.timestamp.toString()+")"},t.prototype.toTimestamp=function(){return this.timestamp},t.MIN=new t(new tt(0,0)),t}();!function(t){t[t.Listen=0]="Listen",t[t.ExistenceFilterMismatch=1]="ExistenceFilterMismatch",t[t.LimboResolution=2]="LimboResolution"}(Bt||(Bt={}));var $t,Zt=function(){function t(t,e,n,r,i,o){void 0===i&&(i=Jt.MIN),void 0===o&&(o=v()),this.query=t,this.targetId=e,this.purpose=n,this.sequenceNumber=r,this.snapshotVersion=i,this.resumeToken=o}return t.prototype.copy=function(e){return new t(this.query,this.targetId,this.purpose,void 0===e.sequenceNumber?this.sequenceNumber:e.sequenceNumber,void 0===e.snapshotVersion?this.snapshotVersion:e.snapshotVersion,void 0===e.resumeToken?this.resumeToken:e.resumeToken)},t.prototype.isEqual=function(t){return this.targetId===t.targetId&&this.purpose===t.purpose&&this.sequenceNumber===t.sequenceNumber&&this.snapshotVersion.isEqual(t.snapshotVersion)&&this.resumeToken===t.resumeToken&&this.query.isEqual(t.query)},t}(),te=function(){function t(t){this.fields=t}return t.prototype.covers=function(t){for(var e=0,n=this.fields;e<n.length;e++){if(n[e].isPrefixOf(t))return!0}return!1},t.prototype.isEqual=function(t){return H(this.fields,t.fields)},t}(),ee=function(){function t(t,e){this.field=t,this.transform=e}return t.prototype.isEqual=function(t){return this.field.isEqual(t.field)&&this.transform.isEqual(t.transform)},t}(),ne=function(){return function(t,e){this.version=t,this.transformResults=e}}();!function(t){t[t.Set=0]="Set",t[t.Patch=1]="Patch",t[t.Transform=2]="Transform",t[t.Delete=3]="Delete"}($t||($t={}));var re=function(){function t(t,e){this.updateTime=t,this.exists=e,m(void 0===t||void 0===e,'Precondition can specify "exists" or "updateTime" but not both')}return t.exists=function(e){return new t(void 0,e)},t.updateTime=function(e){return new t(e)},Object.defineProperty(t.prototype,"isNone",{get:function(){return void 0===this.updateTime&&void 0===this.exists},enumerable:!0,configurable:!0}),t.prototype.isValidFor=function(t){return void 0!==this.updateTime?t instanceof ht&&t.version.isEqual(this.updateTime):void 0!==this.exists?this.exists===t instanceof ht:(m(this.isNone,"Precondition should be empty"),!0)},t.prototype.isEqual=function(t){return function(t,e){return null!==t&&void 0!==t?!(!e||!t.isEqual(e)):t===e}(this.updateTime,t.updateTime)&&this.exists===t.exists},t.NONE=new t,t}(),ie=function(){function t(){}return t.prototype.verifyKeyMatches=function(t){null!=t&&m(t.key.isEqual(this.key),"Can only apply a mutation to a document with the same key")},t.getPostMutationVersion=function(t){return t instanceof ht?t.version:Jt.MIN},t}(),oe=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.value=n,i.precondition=r,i.type=$t.Set,i}return a.__extends(e,t),e.prototype.applyToRemoteDocument=function(t,e){this.verifyKeyMatches(t),m(null==e.transformResults,"Transform results received by SetMutation.");var n=e.version;return new ht(this.key,n,this.value,{hasCommittedMutations:!0})},e.prototype.applyToLocalView=function(t,e,n){if(this.verifyKeyMatches(t),!this.precondition.isValidFor(t))return t;var r=ie.getPostMutationVersion(t);return new ht(this.key,r,this.value,{hasLocalMutations:!0})},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.value.isEqual(t.value)&&this.precondition.isEqual(t.precondition)},e}(ie),ae=function(t){function e(e,n,r,i){var o=t.call(this)||this;return o.key=e,o.data=n,o.fieldMask=r,o.precondition=i,o.type=$t.Patch,o}return a.__extends(e,t),e.prototype.applyToRemoteDocument=function(t,e){if(this.verifyKeyMatches(t),m(null==e.transformResults,"Transform results received by PatchMutation."),!this.precondition.isValidFor(t))return new ft(this.key,e.version);var n=this.patchDocument(t);return new ht(this.key,e.version,n,{hasCommittedMutations:!0})},e.prototype.applyToLocalView=function(t,e,n){if(this.verifyKeyMatches(t),!this.precondition.isValidFor(t))return t;var r=ie.getPostMutationVersion(t),i=this.patchDocument(t);return new ht(this.key,r,i,{hasLocalMutations:!0})},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.fieldMask.isEqual(t.fieldMask)&&this.precondition.isEqual(t.precondition)},e.prototype.patchDocument=function(t){var e;return e=t instanceof ht?t.data:xt.EMPTY,this.patchObject(e)},e.prototype.patchObject=function(t){for(var e=0,n=this.fieldMask.fields;e<n.length;e++){var r=n[e];if(!r.isEmpty()){var i=this.data.field(r);t=void 0!==i?t.set(r,i):t.delete(r)}}return t},e}(ie),se=function(t){function e(e,n){var r=t.call(this)||this;return r.key=e,r.fieldTransforms=n,r.type=$t.Transform,r.precondition=re.exists(!0),r}return a.__extends(e,t),e.prototype.applyToRemoteDocument=function(t,e){if(this.verifyKeyMatches(t),m(null!=e.transformResults,"Transform results missing for TransformMutation."),!this.precondition.isValidFor(t))return new ft(this.key,e.version);var n=this.requireDocument(t),r=this.serverTransformResults(t,e.transformResults),i=e.version,o=this.transformObject(n.data,r);return new ht(this.key,i,o,{hasCommittedMutations:!0})},e.prototype.applyToLocalView=function(t,e,n){if(this.verifyKeyMatches(t),!this.precondition.isValidFor(t))return t;var r=this.requireDocument(t),i=this.localTransformResults(n,e),o=this.transformObject(r.data,i);return new ht(this.key,r.version,o,{hasLocalMutations:!0})},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&H(this.fieldTransforms,t.fieldTransforms)&&this.precondition.isEqual(t.precondition)},e.prototype.requireDocument=function(t){m(t instanceof ht,"Unknown MaybeDocument type "+t);var e=t;return m(e.key.isEqual(this.key),"Can only transform a document with the same key"),e},e.prototype.serverTransformResults=function(t,e){var n=[];m(this.fieldTransforms.length===e.length,"server transform result count ("+e.length+") should match field transform count ("+this.fieldTransforms.length+")");for(var r=0;r<e.length;r++){var i=this.fieldTransforms[r],o=i.transform,a=null;t instanceof ht&&(a=t.field(i.field)||null),n.push(o.applyToRemoteDocument(a,e[r]))}return n},e.prototype.localTransformResults=function(t,e){for(var n=[],r=0,i=this.fieldTransforms;r<i.length;r++){var o=i[r],a=o.transform,s=null;e instanceof ht&&(s=e.field(o.field)||null),n.push(a.applyToLocalView(s,t))}return n},e.prototype.transformObject=function(t,e){m(e.length===this.fieldTransforms.length,"TransformResults length mismatch.");for(var n=0;n<this.fieldTransforms.length;n++){var r=this.fieldTransforms[n].field;t=t.set(r,e[n])}return t},e}(ie),ue=function(t){function e(e,n){var r=t.call(this)||this;return r.key=e,r.precondition=n,r.type=$t.Delete,r}return a.__extends(e,t),e.prototype.applyToRemoteDocument=function(t,e){return this.verifyKeyMatches(t),m(null==e.transformResults,"Transform results received by DeleteMutation."),new lt(this.key,e.version,{hasCommittedMutations:!0})},e.prototype.applyToLocalView=function(t,e,n){return this.verifyKeyMatches(t),this.precondition.isValidFor(t)?(t&&m(t.key.isEqual(this.key),"Can only apply mutation to document with same key"),new lt(this.key,Jt.forDeletedDoc())):t},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.precondition.isEqual(t.precondition)},e}(ie),ce=function(){function t(){}return t.prototype.applyToLocalView=function(t,e){return new Dt(e,t)},t.prototype.applyToRemoteDocument=function(t,e){return e},t.prototype.isEqual=function(e){return e instanceof t},t.instance=new t,t}(),he=function(){function t(t){this.elements=t}return t.prototype.applyToLocalView=function(t,e){return this.apply(t)},t.prototype.applyToRemoteDocument=function(t,e){return this.apply(t)},t.prototype.apply=function(t){for(var e=fe(t),n=function(t){e.find(function(e){return e.isEqual(t)})||e.push(t)},r=0,i=this.elements;r<i.length;r++){n(i[r])}return new Ot(e)},t.prototype.isEqual=function(e){return e instanceof t&&H(e.elements,this.elements)},t}(),le=function(){function t(t){this.elements=t}return t.prototype.applyToLocalView=function(t,e){return this.apply(t)},t.prototype.applyToRemoteDocument=function(t,e){return this.apply(t)},t.prototype.apply=function(t){for(var e=fe(t),n=function(t){e=e.filter(function(e){return!e.isEqual(t)})},r=0,i=this.elements;r<i.length;r++){n(i[r])}return new Ot(e)},t.prototype.isEqual=function(e){return e instanceof t&&H(e.elements,this.elements)},t}();function fe(t){return t instanceof Ot?t.internalValue.slice():[]}var de,pe=function(){function t(t){this.count=t}return t.prototype.isEqual=function(t){return t&&t.count===this.count},t}();function ye(t){switch(t){case b.OK:return y("Treated status OK as error");case b.CANCELLED:case b.UNKNOWN:case b.DEADLINE_EXCEEDED:case b.RESOURCE_EXHAUSTED:case b.INTERNAL:case b.UNAVAILABLE:case b.UNAUTHENTICATED:return!1;case b.INVALID_ARGUMENT:case b.NOT_FOUND:case b.ALREADY_EXISTS:case b.PERMISSION_DENIED:case b.FAILED_PRECONDITION:case b.ABORTED:case b.OUT_OF_RANGE:case b.UNIMPLEMENTED:case b.DATA_LOSS:return!0;default:return y("Unknown status code: "+t)}}function me(t){if(void 0===t)return d("GRPC error has no .code"),b.UNKNOWN;switch(t){case de.OK:return b.OK;case de.CANCELLED:return b.CANCELLED;case de.UNKNOWN:return b.UNKNOWN;case de.DEADLINE_EXCEEDED:return b.DEADLINE_EXCEEDED;case de.RESOURCE_EXHAUSTED:return b.RESOURCE_EXHAUSTED;case de.INTERNAL:return b.INTERNAL;case de.UNAVAILABLE:return b.UNAVAILABLE;case de.UNAUTHENTICATED:return b.UNAUTHENTICATED;case de.INVALID_ARGUMENT:return b.INVALID_ARGUMENT;case de.NOT_FOUND:return b.NOT_FOUND;case de.ALREADY_EXISTS:return b.ALREADY_EXISTS;case de.PERMISSION_DENIED:return b.PERMISSION_DENIED;case de.FAILED_PRECONDITION:return b.FAILED_PRECONDITION;case de.ABORTED:return b.ABORTED;case de.OUT_OF_RANGE:return b.OUT_OF_RANGE;case de.UNIMPLEMENTED:return b.UNIMPLEMENTED;case de.DATA_LOSS:return b.DATA_LOSS;default:return y("Unknown status code: "+t)}}!function(t){t[t.OK=0]="OK",t[t.CANCELLED=1]="CANCELLED",t[t.UNKNOWN=2]="UNKNOWN",t[t.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",t[t.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",t[t.NOT_FOUND=5]="NOT_FOUND",t[t.ALREADY_EXISTS=6]="ALREADY_EXISTS",t[t.PERMISSION_DENIED=7]="PERMISSION_DENIED",t[t.UNAUTHENTICATED=16]="UNAUTHENTICATED",t[t.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",t[t.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",t[t.ABORTED=10]="ABORTED",t[t.OUT_OF_RANGE=11]="OUT_OF_RANGE",t[t.UNIMPLEMENTED=12]="UNIMPLEMENTED",t[t.INTERNAL=13]="INTERNAL",t[t.UNAVAILABLE=14]="UNAVAILABLE",t[t.DATA_LOSS=15]="DATA_LOSS"}(de||(de={}));var ge=function(){function t(t){this.comparator=t,this.data=new dt(this.comparator)}return t.fromMapKeys=function(e){var n=new t(e.comparator);return e.forEach(function(t){n=n.add(t)}),n},t.prototype.has=function(t){return null!==this.data.get(t)},t.prototype.first=function(){return this.data.minKey()},t.prototype.last=function(){return this.data.maxKey()},Object.defineProperty(t.prototype,"size",{get:function(){return this.data.size},enumerable:!0,configurable:!0}),t.prototype.indexOf=function(t){return this.data.indexOf(t)},t.prototype.forEach=function(t){this.data.inorderTraversal(function(e,n){return t(e),!1})},t.prototype.forEachInRange=function(t,e){for(var n=this.data.getIteratorFrom(t[0]);n.hasNext();){var r=n.getNext();if(this.comparator(r.key,t[1])>=0)return;e(r.key)}},t.prototype.forEachWhile=function(t,e){var n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();){if(!t(n.getNext().key))return}},t.prototype.firstAfterOrEqual=function(t){var e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null},t.prototype.add=function(t){return this.copy(this.data.remove(t).insert(t,!0))},t.prototype.delete=function(t){return this.has(t)?this.copy(this.data.remove(t)):this},t.prototype.isEmpty=function(){return this.data.isEmpty()},t.prototype.unionWith=function(t){var e=this;return t.forEach(function(t){e=e.add(t)}),e},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.data.getIterator(),r=e.data.getIterator();n.hasNext();){var i=n.getNext().key,o=r.getNext().key;if(0!==this.comparator(i,o))return!1}return!0},t.prototype.toArray=function(){var t=[];return this.forEach(function(e){t.push(e)}),t},t.prototype.toString=function(){var t=[];return this.forEach(function(e){return t.push(e)}),"SortedSet("+t.toString()+")"},t.prototype.copy=function(e){var n=new t(this.comparator);return n.data=e,n},t}(),ve=new dt(ut.comparator);function be(){return ve}var we=new dt(ut.comparator);function Te(){return we}var Ee=new dt(ut.comparator);function Se(){return Ee}var Ce=new ge(ut.comparator);function Ie(){return Ce}var _e=new ge(Q);function De(){return _e}var Ae,Ne,ke=function(){function t(t){this.comparator=t?function(e,n){return t(e,n)||ut.comparator(e.key,n.key)}:function(t,e){return ut.comparator(t.key,e.key)},this.keyedMap=Te(),this.sortedSet=new dt(this.comparator)}return t.emptySet=function(e){return new t(e.comparator)},t.prototype.has=function(t){return null!=this.keyedMap.get(t)},t.prototype.get=function(t){return this.keyedMap.get(t)},t.prototype.first=function(){return this.sortedSet.minKey()},t.prototype.last=function(){return this.sortedSet.maxKey()},t.prototype.isEmpty=function(){return this.sortedSet.isEmpty()},t.prototype.indexOf=function(t){var e=this.keyedMap.get(t);return e?this.sortedSet.indexOf(e):-1},Object.defineProperty(t.prototype,"size",{get:function(){return this.sortedSet.size},enumerable:!0,configurable:!0}),t.prototype.forEach=function(t){this.sortedSet.inorderTraversal(function(e,n){return t(e),!1})},t.prototype.add=function(t){var e=this.delete(t.key);return e.copy(e.keyedMap.insert(t.key,t),e.sortedSet.insert(t,null))},t.prototype.delete=function(t){var e=this.get(t);return e?this.copy(this.keyedMap.remove(t),this.sortedSet.remove(e)):this},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.sortedSet.getIterator(),r=e.sortedSet.getIterator();n.hasNext();){var i=n.getNext().key,o=r.getNext().key;if(!i.isEqual(o))return!1}return!0},t.prototype.toString=function(){var t=[];return this.forEach(function(e){t.push(e.toString())}),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"},t.prototype.copy=function(e,n){var r=new t;return r.comparator=this.comparator,r.keyedMap=e,r.sortedSet=n,r},t}();!function(t){t[t.Added=0]="Added",t[t.Removed=1]="Removed",t[t.Modified=2]="Modified",t[t.Metadata=3]="Metadata"}(Ae||(Ae={})),function(t){t[t.Local=0]="Local",t[t.Synced=1]="Synced"}(Ne||(Ne={}));var xe,Oe=function(){function t(){this.changeMap=new dt(ut.comparator)}return t.prototype.track=function(t){var e=t.doc.key,n=this.changeMap.get(e);n?t.type!==Ae.Added&&n.type===Ae.Metadata?this.changeMap=this.changeMap.insert(e,t):t.type===Ae.Metadata&&n.type!==Ae.Removed?this.changeMap=this.changeMap.insert(e,{type:n.type,doc:t.doc}):t.type===Ae.Modified&&n.type===Ae.Modified?this.changeMap=this.changeMap.insert(e,{type:Ae.Modified,doc:t.doc}):t.type===Ae.Modified&&n.type===Ae.Added?this.changeMap=this.changeMap.insert(e,{type:Ae.Added,doc:t.doc}):t.type===Ae.Removed&&n.type===Ae.Added?this.changeMap=this.changeMap.remove(e):t.type===Ae.Removed&&n.type===Ae.Modified?this.changeMap=this.changeMap.insert(e,{type:Ae.Removed,doc:n.doc}):t.type===Ae.Added&&n.type===Ae.Removed?this.changeMap=this.changeMap.insert(e,{type:Ae.Modified,doc:t.doc}):y("unsupported combination of changes: "+JSON.stringify(t)+" after "+JSON.stringify(n)):this.changeMap=this.changeMap.insert(e,t)},t.prototype.getChanges=function(){var t=[];return this.changeMap.inorderTraversal(function(e,n){t.push(n)}),t},t}(),Re=function(){function t(t,e,n,r,i,o,a,s){this.query=t,this.docs=e,this.oldDocs=n,this.docChanges=r,this.mutatedKeys=i,this.fromCache=o,this.syncStateChanged=a,this.excludesMetadataChanges=s}return t.fromInitialDocuments=function(e,n,r,i){var o=[];return n.forEach(function(t){o.push({type:Ae.Added,doc:t})}),new t(e,n,ke.emptySet(n),o,r,i,!0,!1)},Object.defineProperty(t.prototype,"hasPendingWrites",{get:function(){return!this.mutatedKeys.isEmpty()},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(t){if(!(this.fromCache===t.fromCache&&this.syncStateChanged===t.syncStateChanged&&this.mutatedKeys.isEqual(t.mutatedKeys)&&this.query.isEqual(t.query)&&this.docs.isEqual(t.docs)&&this.oldDocs.isEqual(t.oldDocs)))return!1;var e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(var r=0;r<e.length;r++)if(e[r].type!==n[r].type||!e[r].doc.isEqual(n[r].doc))return!1;return!0},t}(),Pe=function(){function t(t,e,n,r,i){this.snapshotVersion=t,this.targetChanges=e,this.targetMismatches=n,this.documentUpdates=r,this.resolvedLimboDocuments=i}return t.createSynthesizedRemoteEventForCurrentChange=function(e,n){var r,i=((r={})[e]=Me.createSynthesizedTargetChangeForCurrentChange(e,n),r);return new t(Jt.MIN,i,De(),be(),Ie())},t}(),Me=function(){function t(t,e,n,r,i){this.resumeToken=t,this.current=e,this.addedDocuments=n,this.modifiedDocuments=r,this.removedDocuments=i}return t.createSynthesizedTargetChangeForCurrentChange=function(e,n){return new t(v(),n,Ie(),Ie(),Ie())},t}(),Le=function(){return function(t,e,n,r){this.updatedTargetIds=t,this.removedTargetIds=e,this.key=n,this.newDoc=r}}(),qe=function(){return function(t,e){this.targetId=t,this.existenceFilter=e}}();!function(t){t[t.NoChange=0]="NoChange",t[t.Added=1]="Added",t[t.Removed=2]="Removed",t[t.Current=3]="Current",t[t.Reset=4]="Reset"}(xe||(xe={}));var Fe=function(){return function(t,e,n,r){void 0===n&&(n=v()),void 0===r&&(r=null),this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=r}}(),Be=function(){function t(){this.pendingResponses=0,this.documentChanges=je(),this._resumeToken=v(),this._current=!1,this._hasPendingChanges=!0}return Object.defineProperty(t.prototype,"current",{get:function(){return this._current},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"resumeToken",{get:function(){return this._resumeToken},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isPending",{get:function(){return 0!==this.pendingResponses},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"hasPendingChanges",{get:function(){return this._hasPendingChanges},enumerable:!0,configurable:!0}),t.prototype.updateResumeToken=function(t){t.length>0&&(this._hasPendingChanges=!0,this._resumeToken=t)},t.prototype.toTargetChange=function(){var t=Ie(),e=Ie(),n=Ie();return this.documentChanges.forEach(function(r,i){switch(i){case Ae.Added:t=t.add(r);break;case Ae.Modified:e=e.add(r);break;case Ae.Removed:n=n.add(r);break;default:y("Encountered invalid change type: "+i)}}),new Me(this._resumeToken,this._current,t,e,n)},t.prototype.clearPendingChanges=function(){this._hasPendingChanges=!1,this.documentChanges=je()},t.prototype.addDocumentChange=function(t,e){this._hasPendingChanges=!0,this.documentChanges=this.documentChanges.insert(t,e)},t.prototype.removeDocumentChange=function(t){this._hasPendingChanges=!0,this.documentChanges=this.documentChanges.remove(t)},t.prototype.recordPendingTargetRequest=function(){this.pendingResponses+=1},t.prototype.recordTargetResponse=function(){this.pendingResponses-=1},t.prototype.markCurrent=function(){this._hasPendingChanges=!0,this._current=!0},t}(),Ve=function(){function t(t){this.metadataProvider=t,this.targetStates={},this.pendingDocumentUpdates=be(),this.pendingDocumentTargetMapping=Ue(),this.pendingTargetResets=new ge(Q)}return t.prototype.handleDocumentChange=function(t){for(var e=0,n=t.updatedTargetIds;e<n.length;e++){var r=n[e];t.newDoc instanceof ht?this.addDocumentToTarget(r,t.newDoc):t.newDoc instanceof lt&&this.removeDocumentFromTarget(r,t.key,t.newDoc)}for(var i=0,o=t.removedTargetIds;i<o.length;i++){r=o[i];this.removeDocumentFromTarget(r,t.key,t.newDoc)}},t.prototype.handleTargetChange=function(t){var e=this;this.forEachTarget(t,function(n){var r=e.ensureTargetState(n);switch(t.state){case xe.NoChange:e.isActiveTarget(n)&&r.updateResumeToken(t.resumeToken);break;case xe.Added:r.recordTargetResponse(),r.isPending||r.clearPendingChanges(),r.updateResumeToken(t.resumeToken);break;case xe.Removed:r.recordTargetResponse(),r.isPending||e.removeTarget(n),m(!t.cause,"WatchChangeAggregator does not handle errored targets");break;case xe.Current:e.isActiveTarget(n)&&(r.markCurrent(),r.updateResumeToken(t.resumeToken));break;case xe.Reset:e.isActiveTarget(n)&&(e.resetTarget(n),r.updateResumeToken(t.resumeToken));break;default:y("Unknown target watch change state: "+t.state)}})},t.prototype.forEachTarget=function(t,e){t.targetIds.length>0?t.targetIds.forEach(e):C(this.targetStates,e)},t.prototype.handleExistenceFilter=function(t){var e=t.targetId,n=t.existenceFilter.count,r=this.queryDataForActiveTarget(e);if(r){var i=r.query;if(i.isDocumentQuery())if(0===n){var o=new ut(i.path);this.removeDocumentFromTarget(e,o,new lt(o,Jt.forDeletedDoc()))}else m(1===n,"Single document existence filter with count: "+n);else this.getCurrentDocumentCountForTarget(e)!==n&&(this.resetTarget(e),this.pendingTargetResets=this.pendingTargetResets.add(e))}},t.prototype.createRemoteEvent=function(t){var e=this,n={};C(this.targetStates,function(r,i){var o=e.queryDataForActiveTarget(r);if(o){if(i.current&&o.query.isDocumentQuery()){var a=new ut(o.query.path);null!==e.pendingDocumentUpdates.get(a)||e.targetContainsDocument(r,a)||e.removeDocumentFromTarget(r,a,new lt(a,t))}i.hasPendingChanges&&(n[r]=i.toTargetChange(),i.clearPendingChanges())}});var r=Ie();this.pendingDocumentTargetMapping.forEach(function(t,n){var i=!0;n.forEachWhile(function(t){var n=e.queryDataForActiveTarget(t);return!n||n.purpose===Bt.LimboResolution||(i=!1,!1)}),i&&(r=r.add(t))});var i=new Pe(t,n,this.pendingTargetResets,this.pendingDocumentUpdates,r);return this.pendingDocumentUpdates=be(),this.pendingDocumentTargetMapping=Ue(),this.pendingTargetResets=new ge(Q),i},t.prototype.addDocumentToTarget=function(t,e){if(this.isActiveTarget(t)){var n=this.targetContainsDocument(t,e.key)?Ae.Modified:Ae.Added;this.ensureTargetState(t).addDocumentChange(e.key,n),this.pendingDocumentUpdates=this.pendingDocumentUpdates.insert(e.key,e),this.pendingDocumentTargetMapping=this.pendingDocumentTargetMapping.insert(e.key,this.ensureDocumentTargetMapping(e.key).add(t))}},t.prototype.removeDocumentFromTarget=function(t,e,n){if(this.isActiveTarget(t)){var r=this.ensureTargetState(t);this.targetContainsDocument(t,e)?r.addDocumentChange(e,Ae.Removed):r.removeDocumentChange(e),this.pendingDocumentTargetMapping=this.pendingDocumentTargetMapping.insert(e,this.ensureDocumentTargetMapping(e).delete(t)),n&&(this.pendingDocumentUpdates=this.pendingDocumentUpdates.insert(e,n))}},t.prototype.removeTarget=function(t){delete this.targetStates[t]},t.prototype.getCurrentDocumentCountForTarget=function(t){var e=this.ensureTargetState(t).toTargetChange();return this.metadataProvider.getRemoteKeysForTarget(t).size+e.addedDocuments.size-e.removedDocuments.size},t.prototype.recordPendingTargetRequest=function(t){this.ensureTargetState(t).recordPendingTargetRequest()},t.prototype.ensureTargetState=function(t){return this.targetStates[t]||(this.targetStates[t]=new Be),this.targetStates[t]},t.prototype.ensureDocumentTargetMapping=function(t){var e=this.pendingDocumentTargetMapping.get(t);return e||(e=new ge(Q),this.pendingDocumentTargetMapping=this.pendingDocumentTargetMapping.insert(t,e)),e},t.prototype.isActiveTarget=function(t){return null!==this.queryDataForActiveTarget(t)},t.prototype.queryDataForActiveTarget=function(t){var e=this.targetStates[t];return e&&e.isPending?null:this.metadataProvider.getQueryDataForTarget(t)},t.prototype.resetTarget=function(t){var e=this;m(!this.targetStates[t].isPending,"Should only reset active targets"),this.targetStates[t]=new Be,this.metadataProvider.getRemoteKeysForTarget(t).forEach(function(n){e.removeDocumentFromTarget(t,n,null)})},t.prototype.targetContainsDocument=function(t,e){return this.metadataProvider.getRemoteKeysForTarget(t).has(e)},t}();function Ue(){return new dt(ut.comparator)}function je(){return new dt(ut.comparator)}var We=function(){var t={};return t[Ht.ASCENDING.name]="ASCENDING",t[Ht.DESCENDING.name]="DESCENDING",t}(),Ke=function(){var t={};return t[jt.LESS_THAN.name]="LESS_THAN",t[jt.LESS_THAN_OR_EQUAL.name]="LESS_THAN_OR_EQUAL",t[jt.GREATER_THAN.name]="GREATER_THAN",t[jt.GREATER_THAN_OR_EQUAL.name]="GREATER_THAN_OR_EQUAL",t[jt.EQUAL.name]="EQUAL",t[jt.ARRAY_CONTAINS.name]="ARRAY_CONTAINS",t}(),Qe=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function He(t,e){m(!qt(t),e+" is missing")}function Ge(t){return"number"==typeof t?t:"string"==typeof t?Number(t):y("can't parse "+t)}var ze=function(){function t(t,e){this.databaseId=t,this.options=e}return t.prototype.emptyByteString=function(){return this.options.useProto3Json?"":new Uint8Array(0)},t.prototype.unsafeCastProtoByteString=function(t){return t},t.prototype.fromRpcStatus=function(t){var e=void 0===t.code?b.UNKNOWN:me(t.code);return new w(e,t.message||"")},t.prototype.toInt32Value=function(t){return qt(t)?void 0:{value:t}},t.prototype.fromInt32Value=function(t){var e;return qt(e="object"==typeof t?t.value:t)?null:e},t.prototype.toTimestamp=function(t){return{seconds:t.seconds,nanos:t.nanoseconds}},t.prototype.fromTimestamp=function(t){if("string"==typeof t)return this.fromIso8601String(t);m(!!t,"Cannot deserialize null or undefined timestamp.");var e=Ge(t.seconds||"0"),n=t.nanos||0;return new tt(e,n)},t.prototype.fromIso8601String=function(t){var e=0,n=Qe.exec(t);if(m(!!n,"invalid timestamp: "+t),n[1]){var r=n[1];r=(r+"000000000").substr(0,9),e=Number(r)}var i=new Date(t),o=Math.floor(i.getTime()/1e3);return new tt(o,e)},t.prototype.toBytes=function(t){return this.options.useProto3Json?t.toBase64():this.unsafeCastProtoByteString(t.toUint8Array())},t.prototype.fromBlob=function(t){return"string"==typeof t?(m(this.options.useProto3Json,"Expected bytes to be passed in as Uint8Array, but got a string instead."),J.fromBase64String(t)):(m(!this.options.useProto3Json,"Expected bytes to be passed in as string, but got something else instead."),J.fromUint8Array(t))},t.prototype.toVersion=function(t){return this.toTimestamp(t.toTimestamp())},t.prototype.fromVersion=function(t){return m(!!t,"Trying to deserialize version that isn't set"),Jt.fromTimestamp(this.fromTimestamp(t))},t.prototype.toResourceName=function(t,e){return this.fullyQualifiedPrefixPath(t).child("documents").child(e).canonicalString()},t.prototype.fromResourceName=function(t){var e=ot.fromString(t);return m(this.isValidResourceName(e),"Tried to deserialize invalid key "+e.toString()),e},t.prototype.toName=function(t){return this.toResourceName(this.databaseId,t.path)},t.prototype.fromName=function(t){var e=this.fromResourceName(t);return m(e.get(1)===this.databaseId.projectId,"Tried to deserialize key from different project: "+e.get(1)+" vs "+this.databaseId.projectId),m(!e.get(3)&&!this.databaseId.database||e.get(3)===this.databaseId.database,"Tried to deserialize key from different database: "+e.get(3)+" vs "+this.databaseId.database),new ut(this.extractLocalPathFromResourceName(e))},t.prototype.toQueryPath=function(t){return 0===t.length?this.encodedDatabaseId:this.toResourceName(this.databaseId,t)},t.prototype.fromQueryPath=function(t){var e=this.fromResourceName(t);return 4===e.length?ot.EMPTY_PATH:this.extractLocalPathFromResourceName(e)},Object.defineProperty(t.prototype,"encodedDatabaseId",{get:function(){return new ot(["projects",this.databaseId.projectId,"databases",this.databaseId.database]).canonicalString()},enumerable:!0,configurable:!0}),t.prototype.fullyQualifiedPrefixPath=function(t){return new ot(["projects",t.projectId,"databases",t.database])},t.prototype.extractLocalPathFromResourceName=function(t){return m(t.length>4&&"documents"===t.get(4),"tried to deserialize invalid key "+t.toString()),t.popFirst(5)},t.prototype.isValidResourceName=function(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)},t.prototype.toValue=function(t){if(t instanceof bt)return{nullValue:"NULL_VALUE"};if(t instanceof wt)return{booleanValue:t.value()};if(t instanceof St)return{integerValue:""+t.value()};if(t instanceof Ct){var e=t.value();if(this.options.useProto3Json){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:t.value()}}return t instanceof It?{stringValue:t.value()}:t instanceof xt?{mapValue:this.toMapValue(t)}:t instanceof Ot?{arrayValue:this.toArrayValue(t)}:t instanceof _t?{timestampValue:this.toTimestamp(t.internalValue)}:t instanceof kt?{geoPointValue:{latitude:t.value().latitude,longitude:t.value().longitude}}:t instanceof At?{bytesValue:this.toBytes(t.value())}:t instanceof Nt?{referenceValue:this.toResourceName(t.databaseId,t.key.path)}:y("Unknown FieldValue "+JSON.stringify(t))},t.prototype.fromValue=function(t){var e=this,n=t.value_type;if(Xe(t,n,"nullValue"))return bt.INSTANCE;if(Xe(t,n,"booleanValue"))return wt.of(t.booleanValue);if(Xe(t,n,"integerValue"))return new St(Ge(t.integerValue));if(Xe(t,n,"doubleValue")){if(this.options.useProto3Json){if("NaN"===t.doubleValue)return Ct.NAN;if("Infinity"===t.doubleValue)return Ct.POSITIVE_INFINITY;if("-Infinity"===t.doubleValue)return Ct.NEGATIVE_INFINITY}return new Ct(t.doubleValue)}if(Xe(t,n,"stringValue"))return new It(t.stringValue);if(Xe(t,n,"mapValue"))return this.fromFields(t.mapValue.fields||{});if(Xe(t,n,"arrayValue")){He(t.arrayValue,"arrayValue");var r=t.arrayValue.values||[];return new Ot(r.map(function(t){return e.fromValue(t)}))}if(Xe(t,n,"timestampValue"))return He(t.timestampValue,"timestampValue"),new _t(this.fromTimestamp(t.timestampValue));if(Xe(t,n,"geoPointValue")){He(t.geoPointValue,"geoPointValue");var i=t.geoPointValue.latitude||0,o=t.geoPointValue.longitude||0;return new kt(new Z(i,o))}if(Xe(t,n,"bytesValue")){He(t.bytesValue,"bytesValue");var a=this.fromBlob(t.bytesValue);return new At(a)}if(Xe(t,n,"referenceValue")){He(t.referenceValue,"referenceValue");var s=this.fromResourceName(t.referenceValue),u=new rt(s.get(1),s.get(3)),c=new ut(this.extractLocalPathFromResourceName(s));return new Nt(u,c)}return y("Unknown Value proto "+JSON.stringify(t))},t.prototype.toMutationDocument=function(t,e){return{name:this.toName(t),fields:this.toFields(e)}},t.prototype.toDocument=function(t){return m(!t.hasLocalMutations,"Can't serialize documents with mutations."),{name:this.toName(t.key),fields:this.toFields(t.data),updateTime:this.toTimestamp(t.version.toTimestamp())}},t.prototype.fromDocument=function(t,e){return new ht(this.fromName(t.name),this.fromVersion(t.updateTime),this.fromFields(t.fields||{}),{hasCommittedMutations:!!e})},t.prototype.toFields=function(t){var e=this,n={};return t.forEach(function(t,r){n[t]=e.toValue(r)}),n},t.prototype.fromFields=function(t){var e=this,n=t,r=xt.EMPTY;return I(n,function(t,n){r=r.set(new st([t]),e.fromValue(n))}),r},t.prototype.toMapValue=function(t){return{fields:this.toFields(t)}},t.prototype.toArrayValue=function(t){var e=this,n=[];return t.forEach(function(t){n.push(e.toValue(t))}),{values:n}},t.prototype.fromFound=function(t){m(!!t.found,"Tried to deserialize a found document from a missing document."),He(t.found.name,"doc.found.name"),He(t.found.updateTime,"doc.found.updateTime");var e=this.fromName(t.found.name),n=this.fromVersion(t.found.updateTime),r=this.fromFields(t.found.fields||{});return new ht(e,n,r,{})},t.prototype.fromMissing=function(t){m(!!t.missing,"Tried to deserialize a missing document from a found document."),m(!!t.readTime,"Tried to deserialize a missing document without a read time.");var e=this.fromName(t.missing),n=this.fromVersion(t.readTime);return new lt(e,n)},t.prototype.fromMaybeDocument=function(t){var e=t.result;return Xe(t,e,"found")?this.fromFound(t):Xe(t,e,"missing")?this.fromMissing(t):y("invalid batch get response: "+JSON.stringify(t))},t.prototype.toWatchTargetChangeState=function(t){switch(t){case xe.Added:return"ADD";case xe.Current:return"CURRENT";case xe.NoChange:return"NO_CHANGE";case xe.Removed:return"REMOVE";case xe.Reset:return"RESET";default:return y("Unknown WatchTargetChangeState: "+t)}},t.prototype.toTestWatchChange=function(t){if(t instanceof qe)return{filter:{count:t.existenceFilter.count,targetId:t.targetId}};if(t instanceof Le){if(t.newDoc instanceof ht){var e=t.newDoc;return{documentChange:{document:{name:this.toName(e.key),fields:this.toFields(e.data),updateTime:this.toVersion(e.version)},targetIds:t.updatedTargetIds,removedTargetIds:t.removedTargetIds}}}if(t.newDoc instanceof lt){e=t.newDoc;return{documentDelete:{document:this.toName(e.key),readTime:this.toVersion(e.version),removedTargetIds:t.removedTargetIds}}}if(null===t.newDoc)return{documentRemove:{document:this.toName(t.key),removedTargetIds:t.removedTargetIds}}}if(t instanceof Fe){var n=void 0;return t.cause&&(n={code:function(t){if(void 0===t)return de.OK;switch(t){case b.OK:return de.OK;case b.CANCELLED:return de.CANCELLED;case b.UNKNOWN:return de.UNKNOWN;case b.DEADLINE_EXCEEDED:return de.DEADLINE_EXCEEDED;case b.RESOURCE_EXHAUSTED:return de.RESOURCE_EXHAUSTED;case b.INTERNAL:return de.INTERNAL;case b.UNAVAILABLE:return de.UNAVAILABLE;case b.UNAUTHENTICATED:return de.UNAUTHENTICATED;case b.INVALID_ARGUMENT:return de.INVALID_ARGUMENT;case b.NOT_FOUND:return de.NOT_FOUND;case b.ALREADY_EXISTS:return de.ALREADY_EXISTS;case b.PERMISSION_DENIED:return de.PERMISSION_DENIED;case b.FAILED_PRECONDITION:return de.FAILED_PRECONDITION;case b.ABORTED:return de.ABORTED;case b.OUT_OF_RANGE:return de.OUT_OF_RANGE;case b.UNIMPLEMENTED:return de.UNIMPLEMENTED;case b.DATA_LOSS:return de.DATA_LOSS;default:return y("Unknown status code: "+t)}}(t.cause.code),message:t.cause.message}),{targetChange:{targetChangeType:this.toWatchTargetChangeState(t.state),targetIds:t.targetIds,resumeToken:this.unsafeCastProtoByteString(t.resumeToken),cause:n}}}return y("Unrecognized watch change: "+JSON.stringify(t))},t.prototype.fromWatchChange=function(t){var e,n=t.response_type;if(Xe(t,n,"targetChange")){He(t.targetChange,"targetChange");var r=this.fromWatchTargetChangeState(t.targetChange.targetChangeType||"NO_CHANGE"),i=t.targetChange.targetIds||[],o=t.targetChange.resumeToken||this.emptyByteString(),a=t.targetChange.cause,s=a&&this.fromRpcStatus(a);e=new Fe(r,i,o,s||null)}else if(Xe(t,n,"documentChange")){He(t.documentChange,"documentChange"),He(t.documentChange.document,"documentChange.name"),He(t.documentChange.document.name,"documentChange.document.name"),He(t.documentChange.document.updateTime,"documentChange.document.updateTime");var u=t.documentChange,c=this.fromName(u.document.name),h=this.fromVersion(u.document.updateTime),l=this.fromFields(u.document.fields||{}),f=new ht(c,h,l,{}),d=u.targetIds||[],p=u.removedTargetIds||[];e=new Le(d,p,f.key,f)}else if(Xe(t,n,"documentDelete")){He(t.documentDelete,"documentDelete"),He(t.documentDelete.document,"documentDelete.document");var m=t.documentDelete;c=this.fromName(m.document),h=m.readTime?this.fromVersion(m.readTime):Jt.forDeletedDoc(),f=new lt(c,h),p=m.removedTargetIds||[];e=new Le([],p,f.key,f)}else if(Xe(t,n,"documentRemove")){He(t.documentRemove,"documentRemove"),He(t.documentRemove.document,"documentRemove");var g=t.documentRemove;c=this.fromName(g.document),p=g.removedTargetIds||[];e=new Le([],p,c,null)}else{if(!Xe(t,n,"filter"))return y("Unknown change type "+JSON.stringify(t));He(t.filter,"filter"),He(t.filter.targetId,"filter.targetId");var v=t.filter,b=v.count||0,w=new pe(b),T=v.targetId;e=new qe(T,w)}return e},t.prototype.fromWatchTargetChangeState=function(t){return"NO_CHANGE"===t?xe.NoChange:"ADD"===t?xe.Added:"REMOVE"===t?xe.Removed:"CURRENT"===t?xe.Current:"RESET"===t?xe.Reset:y("Got unexpected TargetChange.state: "+t)},t.prototype.versionFromListenResponse=function(t){if(!Xe(t,t.response_type,"targetChange"))return Jt.MIN;var e=t.targetChange;return e.targetIds&&e.targetIds.length?Jt.MIN:e.readTime?this.fromVersion(e.readTime):Jt.MIN},t.prototype.toMutation=function(t){var e,n=this;if(t instanceof oe)e={update:this.toMutationDocument(t.key,t.value)};else if(t instanceof ue)e={delete:this.toName(t.key)};else if(t instanceof ae)e={update:this.toMutationDocument(t.key,t.data),updateMask:this.toDocumentMask(t.fieldMask)};else{if(!(t instanceof se))return y("Unknown mutation type "+t.type);e={transform:{document:this.toName(t.key),fieldTransforms:t.fieldTransforms.map(function(t){return n.toFieldTransform(t)})}}}return t.precondition.isNone||(e.currentDocument=this.toPrecondition(t.precondition)),e},t.prototype.fromMutation=function(t){var e=this,n=t.currentDocument?this.fromPrecondition(t.currentDocument):re.NONE;if(t.update){He(t.update.name,"name");var r=this.fromName(t.update.name),i=this.fromFields(t.update.fields||{});if(t.updateMask){var o=this.fromDocumentMask(t.updateMask);return new ae(r,i,o,n)}return new oe(r,i,n)}if(t.delete){r=this.fromName(t.delete);return new ue(r,n)}if(t.transform){r=this.fromName(t.transform.document);var a=t.transform.fieldTransforms.map(function(t){return e.fromFieldTransform(t)});return m(!0===n.exists,'Transforms only support precondition "exists == true"'),new se(r,a)}return y("unknown mutation proto: "+JSON.stringify(t))},t.prototype.toPrecondition=function(t){return m(!t.isNone,"Can't serialize an empty precondition"),void 0!==t.updateTime?{updateTime:this.toVersion(t.updateTime)}:void 0!==t.exists?{exists:t.exists}:y("Unknown precondition")},t.prototype.fromPrecondition=function(t){return void 0!==t.updateTime?re.updateTime(this.fromVersion(t.updateTime)):void 0!==t.exists?re.exists(t.exists):re.NONE},t.prototype.fromWriteResult=function(t,e){var n=this,r=t.updateTime?this.fromVersion(t.updateTime):this.fromVersion(e),i=null;return t.transformResults&&t.transformResults.length>0&&(i=t.transformResults.map(function(t){return n.fromValue(t)})),new ne(r,i)},t.prototype.fromWriteResults=function(t,e){var n=this;return t&&t.length>0?(m(void 0!==e,"Received a write result without a commit time"),t.map(function(t){return n.fromWriteResult(t,e)})):[]},t.prototype.toFieldTransform=function(t){var e=this,n=t.transform;if(n instanceof ce)return{fieldPath:t.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof he)return{fieldPath:t.field.canonicalString(),appendMissingElements:{values:n.elements.map(function(t){return e.toValue(t)})}};if(n instanceof le)return{fieldPath:t.field.canonicalString(),removeAllFromArray:{values:n.elements.map(function(t){return e.toValue(t)})}};throw y("Unknown transform: "+t.transform)},t.prototype.fromFieldTransform=function(t){var e=this,n=t.transform_type,r=null;if(Xe(t,n,"setToServerValue"))m("REQUEST_TIME"===t.setToServerValue,"Unknown server value transform proto: "+JSON.stringify(t)),r=ce.instance;else if(Xe(t,n,"appendMissingElements")){var i=t.appendMissingElements.values||[];r=new he(i.map(function(t){return e.fromValue(t)}))}else if(Xe(t,n,"removeAllFromArray")){i=t.removeAllFromArray.values||[];r=new le(i.map(function(t){return e.fromValue(t)}))}else y("Unknown transform proto: "+JSON.stringify(t));var o=st.fromServerFormat(t.fieldPath);return new ee(o,r)},t.prototype.toDocumentsTarget=function(t){return{documents:[this.toQueryPath(t.path)]}},t.prototype.fromDocumentsTarget=function(t){var e=t.documents.length;m(1===e,"DocumentsTarget contained other than 1 document: "+e);var n=t.documents[0];return Vt.atPath(this.fromQueryPath(n))},t.prototype.toQueryTarget=function(t){var e={structuredQuery:{}};if(t.path.isEmpty())e.parent=this.toQueryPath(ot.EMPTY_PATH);else{var n=t.path;m(n.length%2!=0,"Document queries with filters are not supported."),e.parent=this.toQueryPath(n.popLast()),e.structuredQuery.from=[{collectionId:n.lastSegment()}]}var r=this.toFilter(t.filters);r&&(e.structuredQuery.where=r);var i=this.toOrder(t.orderBy);i&&(e.structuredQuery.orderBy=i);var o=this.toInt32Value(t.limit);return void 0!==o&&(e.structuredQuery.limit=o),t.startAt&&(e.structuredQuery.startAt=this.toCursor(t.startAt)),t.endAt&&(e.structuredQuery.endAt=this.toCursor(t.endAt)),e},t.prototype.fromQueryTarget=function(t){var e=this.fromQueryPath(t.parent),n=t.structuredQuery,r=n.from?n.from.length:0;if(r>0){m(1===r,"StructuredQuery.from with more than one collection is not supported.");var i=n.from[0];e=e.child(i.collectionId)}var o=[];n.where&&(o=this.fromFilter(n.where));var a=[];n.orderBy&&(a=this.fromOrder(n.orderBy));var s=null;n.limit&&(s=this.fromInt32Value(n.limit));var u=null;n.startAt&&(u=this.fromCursor(n.startAt));var c=null;return n.endAt&&(c=this.fromCursor(n.endAt)),new Vt(e,a,o,s,u,c)},t.prototype.toListenRequestLabels=function(t){var e=this.toLabel(t.purpose);return null==e?null:{"goog-listen-tags":e}},t.prototype.toLabel=function(t){switch(t){case Bt.Listen:return null;case Bt.ExistenceFilterMismatch:return"existence-filter-mismatch";case Bt.LimboResolution:return"limbo-document";default:return y("Unrecognized query purpose: "+t)}},t.prototype.toTarget=function(t){var e,n=t.query;return(e=n.isDocumentQuery()?{documents:this.toDocumentsTarget(n)}:{query:this.toQueryTarget(n)}).targetId=t.targetId,t.resumeToken.length>0&&(e.resumeToken=this.unsafeCastProtoByteString(t.resumeToken)),e},t.prototype.toFilter=function(t){var e=this;if(0!==t.length){var n=t.map(function(t){return t instanceof Wt?e.toRelationFilter(t):e.toUnaryFilter(t)});return 1===n.length?n[0]:{compositeFilter:{op:"AND",filters:n}}}},t.prototype.fromFilter=function(t){var e=this;return t?void 0!==t.unaryFilter?[this.fromUnaryFilter(t)]:void 0!==t.fieldFilter?[this.fromRelationFilter(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map(function(t){return e.fromFilter(t)}).reduce(function(t,e){return t.concat(e)}):y("Unknown filter: "+JSON.stringify(t)):[]},t.prototype.toOrder=function(t){var e=this;if(0!==t.length)return t.map(function(t){return e.toPropertyOrder(t)})},t.prototype.fromOrder=function(t){var e=this;return t.map(function(t){return e.fromPropertyOrder(t)})},t.prototype.toCursor=function(t){var e=this;return{before:t.before,values:t.position.map(function(t){return e.toValue(t)})}},t.prototype.fromCursor=function(t){var e=this,n=!!t.before,r=t.values.map(function(t){return e.fromValue(t)});return new Gt(r,n)},t.prototype.toDirection=function(t){return We[t.name]},t.prototype.fromDirection=function(t){switch(t){case"ASCENDING":return Ht.ASCENDING;case"DESCENDING":return Ht.DESCENDING;default:return}},t.prototype.toOperatorName=function(t){return Ke[t.name]},t.prototype.fromOperatorName=function(t){switch(t){case"EQUAL":return jt.EQUAL;case"GREATER_THAN":return jt.GREATER_THAN;case"GREATER_THAN_OR_EQUAL":return jt.GREATER_THAN_OR_EQUAL;case"LESS_THAN":return jt.LESS_THAN;case"LESS_THAN_OR_EQUAL":return jt.LESS_THAN_OR_EQUAL;case"ARRAY_CONTAINS":return jt.ARRAY_CONTAINS;case"OPERATOR_UNSPECIFIED":return y("Unspecified relation");default:return y("Unknown relation")}},t.prototype.toFieldPathReference=function(t){return{fieldPath:t.canonicalString()}},t.prototype.fromFieldPathReference=function(t){return st.fromServerFormat(t.fieldPath)},t.prototype.toPropertyOrder=function(t){return{field:this.toFieldPathReference(t.field),direction:this.toDirection(t.dir)}},t.prototype.fromPropertyOrder=function(t){return new zt(this.fromFieldPathReference(t.field),this.fromDirection(t.direction))},t.prototype.toRelationFilter=function(t){return t instanceof Wt?{fieldFilter:{field:this.toFieldPathReference(t.field),op:this.toOperatorName(t.op),value:this.toValue(t.value)}}:y("Unrecognized filter: "+JSON.stringify(t))},t.prototype.fromRelationFilter=function(t){return new Wt(this.fromFieldPathReference(t.fieldFilter.field),this.fromOperatorName(t.fieldFilter.op),this.fromValue(t.fieldFilter.value))},t.prototype.toUnaryFilter=function(t){return t instanceof Qt?{unaryFilter:{field:this.toFieldPathReference(t.field),op:"IS_NAN"}}:t instanceof Kt?{unaryFilter:{field:this.toFieldPathReference(t.field),op:"IS_NULL"}}:y("Unrecognized filter: "+JSON.stringify(t))},t.prototype.fromUnaryFilter=function(t){switch(t.unaryFilter.op){case"IS_NAN":var e=this.fromFieldPathReference(t.unaryFilter.field);return new Qt(e);case"IS_NULL":var n=this.fromFieldPathReference(t.unaryFilter.field);return new Kt(n);case"OPERATOR_UNSPECIFIED":return y("Unspecified filter");default:return y("Unknown filter")}},t.prototype.toDocumentMask=function(t){return{fieldPaths:t.fields.map(function(t){return t.canonicalString()})}},t.prototype.fromDocumentMask=function(t){var e=(t.fieldPaths||[]).map(function(t){return st.fromServerFormat(t)});return new te(e)},t}();function Xe(t,e,n){return e===n||!e&&n in t}var Ye="FirebaseError",Je=Error.captureStackTrace,$e=function(){return function(t,e){if(this.code=t,this.message=e,Je)Je(this,Ze.prototype.create);else try{throw Error.apply(this,arguments)}catch(t){this.name=Ye,Object.defineProperty(this,"stack",{get:function(){return t.stack}})}}}();$e.prototype=Object.create(Error.prototype),$e.prototype.constructor=$e,$e.prototype.name=Ye;var Ze=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n,this.pattern=/\{\$([^}]+)}/g}return t.prototype.create=function(t,e){void 0===e&&(e={});var n,r=this.errors[t],i=this.service+"/"+t;n=void 0===r?"Error":r.replace(this.pattern,function(t,n){var r=e[n];return void 0!==r?r.toString():"<"+n+"?>"}),n=this.serviceName+": "+n+" ("+i+").";var o=new $e(i,n);for(var a in e)e.hasOwnProperty(a)&&"_"!==a.slice(-1)&&(o[a]=e[a]);return o},t}(),tn=(function(t){function e(){var e=t.call(this)||this;e.chain_=[],e.buf_=[],e.W_=[],e.pad_=[],e.inbuf_=0,e.total_=0,e.blockSize=64,e.pad_[0]=128;for(var n=1;n<e.blockSize;++n)e.pad_[n]=0;return e.reset(),e}a.__extends(e,t),e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=h^u&(c^h),a=1518500249):(o=u^c^h,a=1859775393):r<60?(o=u&c|h&(u|c),a=2400959708):(o=u^c^h,a=3395469782);i=(s<<5|s>>>27)+o+l+a+n[r]&4294967295;l=h,h=c,c=4294967295&(u<<30|u>>>2),u=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},e.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0==o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o==this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o==this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},e.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t}}(function(){return function(){this.blockSize=-1}}()),function(){function t(t){this.sendFn=t.sendFn,this.closeFn=t.closeFn}return t.prototype.onOpen=function(t){m(!this.wrappedOnOpen,"Called onOpen on stream twice!"),this.wrappedOnOpen=t},t.prototype.onClose=function(t){m(!this.wrappedOnClose,"Called onClose on stream twice!"),this.wrappedOnClose=t},t.prototype.onMessage=function(t){m(!this.wrappedOnMessage,"Called onMessage on stream twice!"),this.wrappedOnMessage=t},t.prototype.close=function(){this.closeFn()},t.prototype.send=function(t){this.sendFn(t)},t.prototype.callOnOpen=function(){m(void 0!==this.wrappedOnOpen,"Cannot call onOpen because no callback was set"),this.wrappedOnOpen()},t.prototype.callOnClose=function(t){m(void 0!==this.wrappedOnClose,"Cannot call onClose because no callback was set"),this.wrappedOnClose(t)},t.prototype.callOnMessage=function(t){m(void 0!==this.wrappedOnMessage,"Cannot call onMessage because no callback was set"),this.wrappedOnMessage(t)},t}()),en="Connection",nn={BatchGetDocuments:"batchGet",Commit:"commit"},rn="gl-js/ fire/"+u,on=function(){function t(t){this.databaseId=t.databaseId,this.pool=new s.XhrIoPool;var e=t.ssl?"https":"http";this.baseUrl=e+"://"+t.host}return t.prototype.modifyHeadersForRequest=function(t,e){if(e)for(var n in e.authHeaders)e.authHeaders.hasOwnProperty(n)&&(t[n]=e.authHeaders[n]);t["X-Goog-Api-Client"]=rn},t.prototype.invokeRPC=function(t,e,n){var r=this,i=this.makeUrl(t);return new Promise(function(o,a){r.pool.getObject(function(u){u.listenOnce(s.EventType.COMPLETE,function(){try{switch(u.getLastErrorCode()){case s.ErrorCode.NO_ERROR:var e=u.getResponseJson();f(en,"XHR received:",JSON.stringify(e)),o(e);break;case s.ErrorCode.TIMEOUT:f(en,'RPC "'+t+'" timed out'),a(new w(b.DEADLINE_EXCEEDED,"Request time out"));break;case s.ErrorCode.HTTP_ERROR:var n=u.getStatus();f(en,'RPC "'+t+'" failed with status:',n,"response text:",u.getResponseText()),n>0?a(new w(function(t){switch(t){case 200:return b.OK;case 400:return b.INVALID_ARGUMENT;case 401:return b.UNAUTHENTICATED;case 403:return b.PERMISSION_DENIED;case 404:return b.NOT_FOUND;case 409:return b.ABORTED;case 416:return b.OUT_OF_RANGE;case 429:return b.RESOURCE_EXHAUSTED;case 499:return b.CANCELLED;case 500:return b.UNKNOWN;case 501:return b.UNIMPLEMENTED;case 503:return b.UNAVAILABLE;case 504:return b.DEADLINE_EXCEEDED;default:return t>=200&&t<300?b.OK:t>=400&&t<500?b.FAILED_PRECONDITION:t>=500&&t<600?b.INTERNAL:b.UNKNOWN}}(n),"Server responded with status "+u.getStatusText())):(f(en,'RPC "'+t+'" failed'),a(new w(b.UNAVAILABLE,"Connection failed.")));break;default:y('RPC "'+t+'" failed with unanticipated webchannel error '+u.getLastErrorCode()+": "+u.getLastError()+", giving up.")}}finally{f(en,'RPC "'+t+'" completed.'),r.pool.releaseObject(u)}});var c=JSON.stringify(e);f(en,"XHR sending: ",i+" "+c);var h={"Content-Type":"text/plain"};r.modifyHeadersForRequest(h,n),u.send(i,"POST",c,h,15)})})},t.prototype.invokeStreamingRPC=function(t,e,n){return this.invokeRPC(t,e,n)},t.prototype.openStream=function(t,e){var n=[this.baseUrl,"/","google.firestore.v1beta1.Firestore","/",t,"/channel"],r=s.createWebChannelTransport(),i={backgroundChannelTest:!0,httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:"projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database},sendRawJson:!0,supportsCrossDomainXhr:!0};this.modifyHeadersForRequest(i.initMessageHeaders,e),"object"==typeof navigator&&"ReactNative"===navigator.product||(i.httpHeadersOverwriteParam="$httpHeaders");var o=n.join("");f(en,"Creating WebChannel: "+o+" "+i);var a=r.createWebChannel(o,i),u=!1,c=!1,h=new tn({sendFn:function(t){c?f(en,"Not sending because WebChannel is closed:",t):(u||(f(en,"Opening WebChannel transport."),a.open(),u=!0),f(en,"WebChannel sending:",t),a.send(t))},closeFn:function(){return a.close()}}),l=function(t,e){a.listen(t,function(t){try{e(t)}catch(t){setTimeout(function(){throw t},0)}})};return l(s.WebChannel.EventType.OPEN,function(){c||f(en,"WebChannel transport opened.")}),l(s.WebChannel.EventType.CLOSE,function(){c||(c=!0,f(en,"WebChannel transport closed"),h.callOnClose())}),l(s.WebChannel.EventType.ERROR,function(t){c||(c=!0,f(en,"WebChannel transport errored:",t),h.callOnClose(new w(b.UNAVAILABLE,"The operation could not be completed")))}),l(s.WebChannel.EventType.MESSAGE,function(t){if(!c){var e=t.data[0];m(!!e,"Got a webchannel message without data.");var n=e.error||e[0]&&e[0].error;if(n){f(en,"WebChannel received error:",n);var r=n.status,i=function(t){var e=de[t];if(void 0!==e)return me(e)}(r),o=n.message;void 0===i&&(i=b.INTERNAL,o="Unknown error status: "+r+" with message "+n.message),c=!0,h.callOnClose(new w(i,o)),a.close()}else f(en,"WebChannel received:",e),h.callOnMessage(e)}}),setTimeout(function(){h.callOnOpen()},0),h},t.prototype.makeUrl=function(t){var e=nn[t];m(void 0!==e,"Unknown REST mapping for: "+t);var n=[this.baseUrl,"/","v1beta1"];return n.push("/projects/"),n.push(this.databaseId.projectId),n.push("/databases/"),n.push(this.databaseId.database),n.push("/documents"),n.push(":"),n.push(e),n.join("")},t}(),an=function(){function t(){this.emptyByteString="",this.base64Available="undefined"!=typeof atob}return Object.defineProperty(t.prototype,"document",{get:function(){return"undefined"!=typeof document?document:null},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"window",{get:function(){return"undefined"!=typeof window?window:null},enumerable:!0,configurable:!0}),t.prototype.loadConnection=function(t){return Promise.resolve(new on(t))},t.prototype.newSerializer=function(t){return new ze(t,{useProto3Json:!0})},t.prototype.formatJSON=function(t){return JSON.stringify(t)},t.prototype.atob=function(t){return atob(t)},t.prototype.btoa=function(t){return btoa(t)},t}();g.setPlatform(new an);var sn,un=function(){function t(t){var e=this;this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t(function(t){e.isDone=!0,e.result=t,e.nextCallback&&e.nextCallback(t)},function(t){e.isDone=!0,e.error=t,e.catchCallback&&e.catchCallback(t)})}return t.prototype.catch=function(t){return this.next(void 0,t)},t.prototype.next=function(e,n){var r=this;return this.callbackAttached&&y("Called next() or catch() twice for PersistencePromise"),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(n,this.error):this.wrapSuccess(e,this.result):new t(function(t,i){r.nextCallback=function(n){r.wrapSuccess(e,n).next(t,i)},r.catchCallback=function(e){r.wrapFailure(n,e).next(t,i)}})},t.prototype.toPromise=function(){var t=this;return new Promise(function(e,n){t.next(e,n)})},t.prototype.wrapUserFunction=function(e){try{var n=e();return n instanceof t?n:t.resolve(n)}catch(e){return t.reject(e)}},t.prototype.wrapSuccess=function(e,n){return e?this.wrapUserFunction(function(){return e(n)}):t.resolve(n)},t.prototype.wrapFailure=function(e,n){return e?this.wrapUserFunction(function(){return e(n)}):t.reject(n)},t.resolve=function(e){return new t(function(t,n){t(e)})},t.reject=function(e){return new t(function(t,n){n(e)})},t.waitFor=function(e){var n=e.length;if(0===n)return t.resolve();var r=0;return new t(function(t,i){for(var o=0,a=e;o<a.length;o++){a[o].next(function(){++r===n&&t()},function(t){return i(t)})}})},t.map=function(e){for(var n=[],r=[],i=function(t){r[t]=e[t].next(function(e){n[t]=e})},o=0;o<e.length;++o)i(o);return t.waitFor(r).next(function(){return n})},t.forEach=function(e,n){for(var r=t.resolve(),i=function(t){r=r.next(function(){return n(t)})},o=0,a=e;o<a.length;o++){i(a[o])}return r},t}(),cn=function(){function t(){this.isEager=!0,this.sources=[],this.potentialGarbage=Ie()}return t.prototype.addGarbageSource=function(t){this.sources.push(t),t.setGarbageCollector(this)},t.prototype.removeGarbageSource=function(t){this.sources.splice(this.sources.indexOf(t),1),t.setGarbageCollector(null)},t.prototype.addPotentialGarbageKey=function(t){this.potentialGarbage=this.potentialGarbage.add(t)},t.prototype.collectGarbage=function(t){var e=this,n=[],r=Ie();return this.potentialGarbage.forEach(function(i){var o=e.documentHasAnyReferences(t,i);n.push(o.next(function(t){return t||(r=r.add(i)),un.resolve()}))}),this.potentialGarbage=Ie(),un.waitFor(n).next(function(){return r})},t.prototype.documentHasAnyReferences=function(t,e){var n=un.resolve(!1);return this.sources.map(function(n){return function(){return n.containsKey(t,e)}}).reduce(function(t,e){return t.next(function(t){return t?un.resolve(!0):e()})},n)},t}(),hn=function(){function t(t,e){var n=this;this.previousValue=t,e&&(e.sequenceNumberHandler=function(t){return n.setPreviousValue(t)},this.writeNewSequenceNumber=function(t){return e.writeSequenceNumber(t)})}return t.prototype.setPreviousValue=function(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue},t.prototype.next=function(){var t=++this.previousValue;return this.writeNewSequenceNumber&&this.writeNewSequenceNumber(t),t},t.INVALID=-1,t}(),ln=function(){return function(){var t=this;this.promise=new Promise(function(e,n){t.resolve=e,t.reject=n})}}();!function(t){t.All="all",t.ListenStreamIdle="listen_stream_idle",t.ListenStreamConnectionBackoff="listen_stream_connection_backoff",t.WriteStreamIdle="write_stream_idle",t.WriteStreamConnectionBackoff="write_stream_connection_backoff",t.OnlineStateTimeout="online_state_timeout",t.ClientMetadataRefresh="client_metadata_refresh"}(sn||(sn={}));var fn=function(){function t(t,e,n,r,i){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=r,this.removalCallback=i,this.deferred=new ln,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.catch=this.deferred.promise.catch.bind(this.deferred.promise),this.deferred.promise.catch(function(t){})}return t.createAndSchedule=function(e,n,r,i,o){var a=new t(e,n,Date.now()+r,i,o);return a.start(r),a},t.prototype.start=function(t){var e=this;this.timerHandle=setTimeout(function(){return e.handleDelayElapsed()},t)},t.prototype.skipDelay=function(){return this.handleDelayElapsed()},t.prototype.cancel=function(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new w(b.CANCELLED,"Operation cancelled"+(t?": "+t:""))))},t.prototype.handleDelayElapsed=function(){var t=this;this.asyncQueue.enqueueAndForget(function(){return null!==t.timerHandle?(t.clearTimeout(),t.op().then(function(e){return t.deferred.resolve(e)})):Promise.resolve()})},t.prototype.clearTimeout=function(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)},t}(),dn=function(){function t(){this.tail=Promise.resolve(),this.delayedOperations=[],this.operationInProgress=!1}return t.prototype.enqueueAndForget=function(t){this.enqueue(t)},t.prototype.enqueue=function(t){var e=this;this.verifyNotFailed();var n=this.tail.then(function(){return e.operationInProgress=!0,t().catch(function(t){e.failure=t,e.operationInProgress=!1;var n=t.stack||t.message||"";throw d("INTERNAL UNHANDLED ERROR: ",n),n.indexOf("Firestore Test Simulated Error")<0&&setTimeout(function(){throw t},0),t}).then(function(t){return e.operationInProgress=!1,t})});return this.tail=n,n},t.prototype.enqueueAfterDelay=function(t,e,n){var r=this;this.verifyNotFailed(),m(e>=0,"Attempted to schedule an operation with a negative delay of "+e),m(!this.containsDelayedOperation(t),"Attempted to schedule multiple operations with timer id "+t+".");var i=fn.createAndSchedule(this,t,e,n,function(t){return r.removeDelayedOperation(t)});return this.delayedOperations.push(i),i},t.prototype.verifyNotFailed=function(){this.failure&&y("AsyncQueue is already failed: "+(this.failure.stack||this.failure.message))},t.prototype.verifyOperationInProgress=function(){m(this.operationInProgress,"verifyOpInProgress() called when no op in progress on this queue.")},t.prototype.drain=function(){return this.enqueue(function(){return Promise.resolve()})},t.prototype.containsDelayedOperation=function(t){return this.delayedOperations.findIndex(function(e){return e.timerId===t})>=0},t.prototype.runDelayedOperationsEarly=function(t){var e=this;return this.drain().then(function(){m(t===sn.All||e.containsDelayedOperation(t),"Attempted to drain to missing operation "+t),e.delayedOperations.sort(function(t,e){return t.targetTimeMs-e.targetTimeMs});for(var n=0,r=e.delayedOperations;n<r.length;n++){var i=r[n];if(i.skipDelay(),t!==sn.All&&i.timerId===t)break}return e.drain()})},t.prototype.removeDelayedOperation=function(t){var e=this.delayedOperations.indexOf(t);m(e>=0,"Delayed operation not found."),this.delayedOperations.splice(e,1)},t}(),pn=-1,yn=function(){function t(t,e,n){this.batchId=t,this.localWriteTime=e,this.mutations=n}return t.prototype.applyToRemoteDocument=function(t,e,n){e&&m(e.key.isEqual(t),"applyToRemoteDocument: key "+t+" should match maybeDoc key\n        "+e.key);var r=n.mutationResults;m(r.length===this.mutations.length,"Mismatch between mutations length\n      ("+this.mutations.length+") and mutation results length\n      ("+r.length+").");for(var i=0;i<this.mutations.length;i++){var o=this.mutations[i];if(o.key.isEqual(t)){var a=r[i];e=o.applyToRemoteDocument(e,a)}}return e},t.prototype.applyToLocalView=function(t,e){e&&m(e.key.isEqual(t),"applyToLocalDocument: key "+t+" should match maybeDoc key\n        "+e.key);for(var n=e,r=0;r<this.mutations.length;r++){var i=this.mutations[r];i.key.isEqual(t)&&(e=i.applyToLocalView(e,n,this.localWriteTime))}return e},t.prototype.keys=function(){for(var t=Ie(),e=0,n=this.mutations;e<n.length;e++){var r=n[e];t=t.add(r.key)}return t},t.prototype.isEqual=function(t){return this.batchId===t.batchId&&H(this.mutations,t.mutations)},t.prototype.isTombstone=function(){return 0===this.mutations.length},t.prototype.toTombstone=function(){return new t(this.batchId,this.localWriteTime,[])},t}(),mn=function(){function t(t,e,n,r,i){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.streamToken=r,this.docVersions=i}return t.from=function(e,n,r,i){m(e.mutations.length===r.length,"Mutations sent "+e.mutations.length+" must equal results received "+r.length);for(var o=Se(),a=e.mutations,s=0;s<a.length;s++)o=o.insert(a[s].key,r[s].version);return new t(e,n,r,i,o)},t}(),gn="",vn="",bn="",wn="";function Tn(t){for(var e="",n=0;n<t.length;n++)e.length>0&&(e=Sn(e)),e=En(t.get(n),e);return Sn(e)}function En(t,e){for(var n=e,r=t.length,i=0;i<r;i++){var o=t.charAt(i);switch(o){case"\0":n+=gn+bn;break;case gn:n+=gn+wn;break;default:n+=o}}return n}function Sn(t){return t+gn+vn}function Cn(t){var e=t.length;if(m(e>=2,"Invalid path "+t),2===e)return m(t.charAt(0)===gn&&t.charAt(1)===vn,"Non-empty path "+t+" had length 2"),ot.EMPTY_PATH;for(var n=e-2,r=[],i="",o=0;o<e;){var a=t.indexOf(gn,o);switch((a<0||a>n)&&y('Invalid encoded resource path: "'+t+'"'),t.charAt(a+1)){case vn:var s=t.substring(o,a),u=void 0;0===i.length?u=s:(u=i+=s,i=""),r.push(u);break;case bn:i+=t.substring(o,a),i+="\0";break;case wn:i+=t.substring(o,a+1);break;default:y('Invalid encoded resource path: "'+t+'"')}o=a+2}return new ot(r)}var In=function(){function t(t){this.serializer=t}return t.prototype.createOrUpgrade=function(t,e,n,r){var i=this;m(n<r&&n>=0&&r<=5,"Unexpected schema upgrade from v"+n+" to v{toVersion}."),n<1&&r>=1&&(function(t){t.createObjectStore(Dn.store)}(t),function(t){t.createObjectStore(An.store,{keyPath:An.keyPath}),t.createObjectStore(Nn.store,{keyPath:Nn.keyPath,autoIncrement:!0}).createIndex(Nn.userMutationsIndex,Nn.userMutationsKeyPath,{unique:!0}),t.createObjectStore(kn.store)}(t),qn(t),function(t){t.createObjectStore(Rn.store)}(t));var o=un.resolve();return n<3&&r>=3&&(0!==n&&(!function(t){t.deleteObjectStore(Mn.store),t.deleteObjectStore(Pn.store),t.deleteObjectStore(Ln.store)}(t),qn(t)),o=o.next(function(){return function(t){var e=t.store(Ln.store),n=new Ln(0,0,Jt.MIN.toTimestamp(),0);return e.put(Ln.key,n)}(e)})),n<4&&r>=4&&(0!==n&&(o=o.next(function(){return function(t,e){return e.store(Nn.store).loadAll().next(function(n){t.deleteObjectStore(Nn.store);var r=t.createObjectStore(Nn.store,{keyPath:Nn.keyPath,autoIncrement:!0});r.createIndex(Nn.userMutationsIndex,Nn.userMutationsKeyPath,{unique:!0});var i=e.store(Nn.store),o=n.map(function(t){return i.put(t)});return un.waitFor(o)})}(t,e)})),o=o.next(function(){!function(t){t.createObjectStore(Bn.store,{keyPath:Bn.keyPath})}(t),function(t){t.createObjectStore(Fn.store,{keyPath:"id",autoIncrement:!0})}(t)})),n<5&&r>=5&&(o=o.next(function(){return i.removeAcknowledgedMutations(e)})),o},t.prototype.removeAcknowledgedMutations=function(t){var e=this,n=t.store(An.store),r=t.store(Nn.store);return n.loadAll().next(function(n){return un.forEach(n,function(n){var i=IDBKeyRange.bound([n.userId,pn],[n.userId,n.lastAcknowledgedBatchId]);return r.loadAll(Nn.userMutationsIndex,i).next(function(r){return un.forEach(r,function(r){m(r.userId===n.userId,"Cannot process batch "+r.batchId+" from unexpected user");var i=e.serializer.fromDbMutationBatch(r);return jn(t,n.userId,i).next()})})})})},t}(),_n=function(){return function(t,e){this.seconds=t,this.nanoseconds=e}}(),Dn=function(){function t(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n}return t.store="owner",t.key="owner",t}();var An=function(){function t(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n}return t.store="mutationQueues",t.keyPath="userId",t}(),Nn=function(){function t(t,e,n,r){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.mutations=r}return t.store="mutations",t.keyPath="batchId",t.userMutationsIndex="userMutationsIndex",t.userMutationsKeyPath=["userId","batchId"],t}();var kn=function(){function t(){}return t.prefixForUser=function(t){return[t]},t.prefixForPath=function(t,e){return[t,Tn(e)]},t.key=function(t,e,n){return[t,Tn(e),n]},t.store="documentMutations",t.PLACEHOLDER=new t,t}();var xn=function(){return function(t,e){this.path=t,this.readTime=e}}(),On=function(){return function(t,e){this.path=t,this.version=e}}(),Rn=function(){function t(t,e,n,r){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=r}return t.store="remoteDocuments",t}(),Pn=function(){function t(t,e,n,r,i,o){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=r,this.lastListenSequenceNumber=i,this.query=o}return t.store="targets",t.keyPath="targetId",t.queryTargetsIndexName="queryTargetsIndex",t.queryTargetsKeyPath=["canonicalId","targetId"],t}(),Mn=function(){function t(t,e){this.targetId=t,this.path=e}return t.store="targetDocuments",t.keyPath=["targetId","path"],t.documentTargetsIndex="documentTargetsIndex",t.documentTargetsKeyPath=["path","targetId"],t}(),Ln=function(){function t(t,e,n,r){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=r}return t.key="targetGlobalKey",t.store="targetGlobal",t}();function qn(t){t.createObjectStore(Mn.store,{keyPath:Mn.keyPath}).createIndex(Mn.documentTargetsIndex,Mn.documentTargetsKeyPath,{unique:!0}),t.createObjectStore(Pn.store,{keyPath:Pn.keyPath}).createIndex(Pn.queryTargetsIndexName,Pn.queryTargetsKeyPath,{unique:!0}),t.createObjectStore(Ln.store)}var Fn=function(){function t(t){this.changes=t}return t.store="remoteDocumentChanges",t.keyPath="id",t}();var Bn=function(){function t(t,e,n,r,i){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=r,this.lastProcessedDocumentChangeId=i}return t.store="clientMetadata",t.keyPath="clientId",t}();var Vn=[An.store,Nn.store,kn.store,Rn.store,Pn.store,Dn.store,Ln.store,Mn.store].concat([Bn.store,Fn.store]),Un=function(){function t(t,e){this.userId=t,this.serializer=e,this.documentKeysByBatchId={},this.garbageCollector=null}return t.forUser=function(e,n){return m(""!==e.uid,"UserID must not be an empty string."),new t(e.isAuthenticated()?e.uid:"",n)},t.prototype.start=function(t){return un.resolve()},t.prototype.checkEmpty=function(t){var e=!0,n=IDBKeyRange.bound([this.userId,Number.NEGATIVE_INFINITY],[this.userId,Number.POSITIVE_INFINITY]);return Kn(t).iterate({index:Nn.userMutationsIndex,range:n},function(t,n,r){e=!1,r.done()}).next(function(){return e})},t.prototype.acknowledgeBatch=function(t,e,n){return this.getMutationQueueMetadata(t).next(function(r){var i=e.batchId;return m(i>r.lastAcknowledgedBatchId,"Mutation batchIDs must be acknowledged in order"),r.lastAcknowledgedBatchId=i,r.lastStreamToken=Wn(n),Hn(t).put(r)})},t.prototype.getLastStreamToken=function(t){return this.getMutationQueueMetadata(t).next(function(t){return t.lastStreamToken})},t.prototype.setLastStreamToken=function(t,e){return this.getMutationQueueMetadata(t).next(function(n){return n.lastStreamToken=Wn(e),Hn(t).put(n)})},t.prototype.addMutationBatch=function(t,e,n){var r=this,i=Qn(t),o=Kn(t);return o.add({}).next(function(t){m("number"==typeof t,"Auto-generated key is not a number");var a=new yn(t,e,n),s=r.serializer.toDbMutationBatch(r.userId,a);r.documentKeysByBatchId[t]=a.keys();for(var u=[],c=0,h=n;c<h.length;c++){var l=h[c],f=kn.key(r.userId,l.key.path,t);u.push(o.put(s)),u.push(i.put(f,kn.PLACEHOLDER))}return un.waitFor(u).next(function(){return a})})},t.prototype.lookupMutationBatch=function(t,e){var n=this;return Kn(t).get(e).next(function(t){return t?(m(t.userId===n.userId,"Unexpected user '"+t.userId+"' for mutation batch "+e),n.serializer.fromDbMutationBatch(t)):null})},t.prototype.lookupMutationKeys=function(t,e){var n=this;return this.documentKeysByBatchId[e]?un.resolve(this.documentKeysByBatchId[e]):this.lookupMutationBatch(t,e).next(function(t){if(t){var r=t.keys();return n.documentKeysByBatchId[e]=r,r}return null})},t.prototype.getNextMutationBatchAfterBatchId=function(t,e){var n=this;return this.getMutationQueueMetadata(t).next(function(r){var i=Math.max(e,r.lastAcknowledgedBatchId)+1,o=IDBKeyRange.lowerBound([n.userId,i]),a=null;return Kn(t).iterate({index:Nn.userMutationsIndex,range:o},function(t,e,r){e.userId===n.userId&&(m(e.batchId>=i,"Should have found mutation after "+i),a=n.serializer.fromDbMutationBatch(e)),r.done()}).next(function(){return a})})},t.prototype.getAllMutationBatches=function(t){var e=this,n=IDBKeyRange.bound([this.userId,pn],[this.userId,Number.POSITIVE_INFINITY]);return Kn(t).loadAll(Nn.userMutationsIndex,n).next(function(t){return t.map(function(t){return e.serializer.fromDbMutationBatch(t)})})},t.prototype.getAllMutationBatchesAffectingDocumentKey=function(t,e){var n=this,r=kn.prefixForPath(this.userId,e.path),i=IDBKeyRange.lowerBound(r),o=[];return Qn(t).iterate({range:i},function(r,i,a){var s=r[0],u=r[1],c=r[2],h=Cn(u);if(s===n.userId&&e.path.isEqual(h))return Kn(t).get(c).next(function(t){if(!t)throw y("Dangling document-mutation reference found: "+r+" which points to "+c);m(t.userId===n.userId,"Unexpected user '"+t.userId+"' for mutation batch "+c),o.push(n.serializer.fromDbMutationBatch(t))});a.done()}).next(function(){return o})},t.prototype.getAllMutationBatchesAffectingDocumentKeys=function(t,e){var n=this,r=new ge(Q),i=[];return e.forEach(function(e){var o=kn.prefixForPath(n.userId,e.path),a=IDBKeyRange.lowerBound(o),s=Qn(t).iterate({range:a},function(t,i,o){var a=t[0],s=t[1],u=t[2],c=Cn(s);a===n.userId&&e.path.isEqual(c)?r=r.add(u):o.done()});i.push(s)}),un.waitFor(i).next(function(){return n.lookupMutationBatches(t,r)})},t.prototype.getAllMutationBatchesAffectingQuery=function(t,e){var n=this;m(!e.isDocumentQuery(),"Document queries shouldn't go down this path");var r=e.path,i=r.length+1,o=kn.prefixForPath(this.userId,r),a=IDBKeyRange.lowerBound(o),s=new ge(Q);return Qn(t).iterate({range:a},function(t,e,o){var a=t[0],u=t[1],c=t[2],h=Cn(u);a===n.userId&&r.isPrefixOf(h)?h.length===i&&(s=s.add(c)):o.done()}).next(function(){return n.lookupMutationBatches(t,s)})},t.prototype.lookupMutationBatches=function(t,e){var n=this,r=[],i=[];return e.forEach(function(e){i.push(Kn(t).get(e).next(function(t){if(null===t)throw y("Dangling document-mutation reference found, which points to "+e);m(t.userId===n.userId,"Unexpected user '"+t.userId+"' for mutation batch "+e),r.push(n.serializer.fromDbMutationBatch(t))}))}),un.waitFor(i).next(function(){return r})},t.prototype.removeMutationBatch=function(t,e){var n=this;return jn(t.simpleDbTransaction,this.userId,e).next(function(t){if(n.removeCachedMutationKeys(e.batchId),null!==n.garbageCollector)for(var r=0,i=t;r<i.length;r++){var o=i[r];n.garbageCollector.addPotentialGarbageKey(o)}})},t.prototype.removeCachedMutationKeys=function(t){delete this.documentKeysByBatchId[t]},t.prototype.performConsistencyCheck=function(t){var e=this;return this.checkEmpty(t).next(function(n){if(!n)return un.resolve();var r=IDBKeyRange.lowerBound(kn.prefixForUser(e.userId)),i=[];return Qn(t).iterate({range:r},function(t,n,r){if(t[0]===e.userId){var o=Cn(t[1]);i.push(o)}else r.done()}).next(function(){m(0===i.length,"Document leak -- detected dangling mutation references when queue is empty. Dangling keys: "+i.map(function(t){return t.canonicalString()}))})})},t.prototype.setGarbageCollector=function(t){this.garbageCollector=t},t.prototype.containsKey=function(t,e){var n=this,r=kn.prefixForPath(this.userId,e.path),i=r[1],o=IDBKeyRange.lowerBound(r),a=!1;return Qn(t).iterate({range:o,keysOnly:!0},function(t,e,r){var o=t[0],s=t[1];t[2];o===n.userId&&s===i&&(a=!0),r.done()}).next(function(){return a})},t.prototype.getMutationQueueMetadata=function(t){var e=this;return Hn(t).get(this.userId).next(function(t){return t||new An(e.userId,pn,"")})},t}();function jn(t,e,n){var r=t.store(Nn.store),i=t.store(kn.store),o=[],a=IDBKeyRange.only(n.batchId),s=0,u=r.iterate({range:a},function(t,e,n){return s++,n.delete()});o.push(u.next(function(){m(1===s,"Dangling document-mutation reference found: Missing batch "+n.batchId)}));for(var c=[],h=0,l=n.mutations;h<l.length;h++){var f=l[h],d=kn.key(e,f.key.path,n.batchId);o.push(i.delete(d)),c.push(f.key)}return un.waitFor(o).next(function(){return c})}function Wn(e){return e instanceof Uint8Array?(m("YES"===t.env.USE_MOCK_PERSISTENCE,"Persisting non-string stream tokens is only supported with mock persistence."),e.toString()):e}function Kn(t){return mr.getStore(t,Nn.store)}function Qn(t){return mr.getStore(t,kn.store)}function Hn(t){return mr.getStore(t,An.store)}var Gn,zn=1;!function(t){t[t.QueryCache=0]="QueryCache",t[t.SyncEngine=1]="SyncEngine"}(Gn||(Gn={}));var Xn=function(){function t(t,e){this.generatorId=t,m((t&zn)===t,"Generator ID "+t+" contains more than "+zn+" reserved bits"),this.seek(void 0!==e?e:this.generatorId)}return t.prototype.next=function(){var t=this.nextId;return this.nextId+=1<<zn,t},t.prototype.after=function(t){return this.seek(t+(1<<zn)),this.next()},t.prototype.seek=function(t){m((t&zn)===this.generatorId,"Cannot supply target ID from different generator ID"),this.nextId=t},t.forQueryCache=function(){return new t(Gn.QueryCache,2)},t.forSyncEngine=function(){return new t(Gn.SyncEngine)},t}(),Yn=function(){function e(t){this.db=t}return e.openOrCreate=function(t,n,r){return m(e.isAvailable(),"IndexedDB not supported in current environment."),f("SimpleDb","Opening database:",t),new un(function(i,o){var a=window.indexedDB.open(t,n);a.onsuccess=function(t){var n=t.target.result;i(new e(n))},a.onblocked=function(){o(new w(b.FAILED_PRECONDITION,"Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."))},a.onerror=function(t){o(t.target.error)},a.onupgradeneeded=function(e){f("SimpleDb",'Database "'+t+'" requires upgrade from version:',e.oldVersion);var n=e.target.result,i=new $n(a.transaction);r.createOrUpgrade(n,i,e.oldVersion,5).next(function(){f("SimpleDb","Database upgrade to version 5 complete")})}}).toPromise()},e.delete=function(t){return f("SimpleDb","Removing database:",t),tr(window.indexedDB.deleteDatabase(t)).toPromise()},e.isAvailable=function(){if("undefined"==typeof window||null==window.indexedDB)return!1;if(void 0===window.navigator)return"YES"===t.env.USE_MOCK_PERSISTENCE;var e=window.navigator.userAgent;return!(e.indexOf("MSIE ")>0||e.indexOf("Trident/")>0||e.indexOf("Edge/")>0)},e.getStore=function(t,e){return t.store(e)},e.prototype.runTransaction=function(t,e,n){var r=$n.open(this.db,t,e),i=n(r).catch(function(t){r.abort(t)}).toPromise();return r.completionPromise.then(function(){return i})},e.prototype.close=function(){this.db.close()},e}(),Jn=function(){function t(t){this.dbCursor=t,this.shouldStop=!1,this.nextKey=null}return Object.defineProperty(t.prototype,"isDone",{get:function(){return this.shouldStop},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"skipToKey",{get:function(){return this.nextKey},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"cursor",{set:function(t){this.dbCursor=t},enumerable:!0,configurable:!0}),t.prototype.done=function(){this.shouldStop=!0},t.prototype.skip=function(t){this.nextKey=t},t.prototype.delete=function(){return tr(this.dbCursor.delete())},t}(),$n=function(){function t(t){var e=this;this.transaction=t,this.aborted=!1,this.completionDeferred=new ln,this.transaction.oncomplete=function(){e.completionDeferred.resolve()},this.transaction.onabort=function(){t.error?e.completionDeferred.reject(t.error):e.completionDeferred.resolve()},this.transaction.onerror=function(t){e.completionDeferred.reject(t.target.error)}}return t.open=function(e,n,r){return new t(e.transaction(r,n))},Object.defineProperty(t.prototype,"completionPromise",{get:function(){return this.completionDeferred.promise},enumerable:!0,configurable:!0}),t.prototype.abort=function(t){t&&this.completionDeferred.reject(t),this.aborted||(f("SimpleDb","Aborting transaction:",t?t.message:"Client-initiated abort"),this.aborted=!0,this.transaction.abort())},t.prototype.store=function(t){var e=this.transaction.objectStore(t);return m(!!e,"Object store not part of transaction: "+t),new Zn(e)},t}(),Zn=function(){function t(t){this.store=t}return t.prototype.put=function(t,e){var n;return void 0!==e?(f("SimpleDb","PUT",this.store.name,t,e),n=this.store.put(e,t)):(f("SimpleDb","PUT",this.store.name,"<auto-key>",t),n=this.store.put(t)),tr(n)},t.prototype.add=function(t){return f("SimpleDb","ADD",this.store.name,t,t),tr(this.store.add(t))},t.prototype.get=function(t){var e=this;return tr(this.store.get(t)).next(function(n){return void 0===n&&(n=null),f("SimpleDb","GET",e.store.name,t,n),n})},t.prototype.delete=function(t){return f("SimpleDb","DELETE",this.store.name,t),tr(this.store.delete(t))},t.prototype.count=function(){return f("SimpleDb","COUNT",this.store.name),tr(this.store.count())},t.prototype.loadAll=function(t,e){var n=this.cursor(this.options(t,e)),r=[];return this.iterateCursor(n,function(t,e){r.push(e)}).next(function(){return r})},t.prototype.deleteAll=function(t,e){f("SimpleDb","DELETE ALL",this.store.name);var n=this.options(t,e);n.keysOnly=!1;var r=this.cursor(n);return this.iterateCursor(r,function(t,e,n){return n.delete()})},t.prototype.iterate=function(t,e){var n;e?n=t:(n={},e=t);var r=this.cursor(n);return this.iterateCursor(r,e)},t.prototype.iterateCursor=function(t,e){var n=[];return new un(function(r,i){t.onerror=function(t){i(t.target.error)},t.onsuccess=function(t){var i=t.target.result;if(i){var o=new Jn(i),a=e(i.primaryKey,i.value,o);a instanceof un&&n.push(a),o.isDone?r():null===o.skipToKey?i.continue():i.continue(o.skipToKey)}else r()}}).next(function(){return un.waitFor(n)})},t.prototype.options=function(t,e){var n=void 0;return void 0!==t&&("string"==typeof t?n=t:(m(void 0===e,"3rd argument must not be defined if 2nd is a range."),e=t)),{index:n,range:e}},t.prototype.cursor=function(t){var e="next";if(t.reverse&&(e="prev"),t.index){var n=this.store.index(t.index);return t.keysOnly?n.openKeyCursor(t.range,e):n.openCursor(t.range,e)}return this.store.openCursor(t.range,e)},t}();function tr(t){return new un(function(e,n){t.onsuccess=function(t){var n=t.target.result;e(n)},t.onerror=function(t){n(t.target.error)}})}var er=function(){function t(t){this.serializer=t,this.garbageCollector=null,this.targetIdGenerator=Xn.forQueryCache()}return t.prototype.allocateTargetId=function(t){var e=this;return this.retrieveMetadata(t).next(function(n){return n.highestTargetId=e.targetIdGenerator.after(n.highestTargetId),e.saveMetadata(t,n).next(function(){return n.highestTargetId})})},t.prototype.getLastRemoteSnapshotVersion=function(t){return this.retrieveMetadata(t).next(function(t){return Jt.fromTimestamp(new tt(t.lastRemoteSnapshotVersion.seconds,t.lastRemoteSnapshotVersion.nanoseconds))})},t.prototype.getHighestSequenceNumber=function(t){return ir(t.simpleDbTransaction)},t.prototype.setTargetsMetadata=function(t,e,n){var r=this;return this.retrieveMetadata(t).next(function(i){return i.highestListenSequenceNumber=e,n&&(i.lastRemoteSnapshotVersion=n.toTimestamp()),e>i.highestListenSequenceNumber&&(i.highestListenSequenceNumber=e),r.saveMetadata(t,i)})},t.prototype.addQueryData=function(t,e){var n=this;return this.saveQueryData(t,e).next(function(){return n.retrieveMetadata(t).next(function(r){return r.targetCount+=1,n.updateMetadataFromQueryData(e,r),n.saveMetadata(t,r)})})},t.prototype.updateQueryData=function(t,e){return this.saveQueryData(t,e)},t.prototype.removeQueryData=function(t,e){var n=this;return this.removeMatchingKeysForTargetId(t,e.targetId).next(function(){return nr(t).delete(e.targetId)}).next(function(){return n.retrieveMetadata(t)}).next(function(e){return m(e.targetCount>0,"Removing from an empty query cache"),e.targetCount-=1,n.saveMetadata(t,e)})},t.prototype.retrieveMetadata=function(t){return rr(t.simpleDbTransaction)},t.prototype.saveMetadata=function(t,e){return function(t){return mr.getStore(t,Ln.store)}(t).put(Ln.key,e)},t.prototype.saveQueryData=function(t,e){return nr(t).put(this.serializer.toDbTarget(e))},t.prototype.updateMetadataFromQueryData=function(t,e){var n=!1;return t.targetId>e.highestTargetId&&(e.highestTargetId=t.targetId,n=!0),t.sequenceNumber>e.highestListenSequenceNumber&&(e.highestListenSequenceNumber=t.sequenceNumber,n=!0),n},t.prototype.getQueryCount=function(t){return this.retrieveMetadata(t).next(function(t){return t.targetCount})},t.prototype.getQueryData=function(t,e){var n=this,r=e.canonicalId(),i=IDBKeyRange.bound([r,Number.NEGATIVE_INFINITY],[r,Number.POSITIVE_INFINITY]),o=null;return nr(t).iterate({range:i,index:Pn.queryTargetsIndexName},function(t,r,i){var a=n.serializer.fromDbTarget(r);e.isEqual(a.query)&&(o=a,i.done())}).next(function(){return o})},t.prototype.addMatchingKeys=function(t,e,n){var r=[],i=or(t);return e.forEach(function(t){var e=Tn(t.path);r.push(i.put(new Mn(n,e)))}),un.waitFor(r)},t.prototype.removeMatchingKeys=function(t,e,n){var r=this,i=[],o=or(t);return e.forEach(function(t){var e=Tn(t.path);i.push(o.delete([n,e])),null!==r.garbageCollector&&r.garbageCollector.addPotentialGarbageKey(t)}),un.waitFor(i)},t.prototype.removeMatchingKeysForTargetId=function(t,e){var n=or(t),r=IDBKeyRange.bound([e],[e+1],!1,!0);return this.notifyGCForRemovedKeys(t,r).next(function(){return n.delete(r)})},t.prototype.notifyGCForRemovedKeys=function(t,e){var n=this,r=or(t);return null!==this.garbageCollector&&this.garbageCollector.isEager?r.iterate({range:e,keysOnly:!0},function(t,e,r){var i=Cn(t[1]),o=new ut(i);m(null!==n.garbageCollector,"GarbageCollector for query cache set to null during key removal."),n.garbageCollector.addPotentialGarbageKey(o)}):un.resolve()},t.prototype.getMatchingKeysForTargetId=function(t,e){var n=IDBKeyRange.bound([e],[e+1],!1,!0),r=or(t),i=Ie();return r.iterate({range:n,keysOnly:!0},function(t,e,n){var r=Cn(t[1]),o=new ut(r);i=i.add(o)}).next(function(){return i})},t.prototype.setGarbageCollector=function(t){this.garbageCollector=t},t.prototype.containsKey=function(t,e){m(null!==t,"Persistence Transaction cannot be null for query cache containsKey");var n=Tn(e.path),r=IDBKeyRange.bound([n],[function(t){return t+"\0"}(n)],!1,!0),i=0;return or(t).iterate({index:Mn.documentTargetsIndex,keysOnly:!0,range:r},function(t,e,n){i++,n.done()}).next(function(){return i>0})},t.prototype.getQueryDataForTarget=function(t,e){var n=this;return nr(t).get(e).next(function(t){return t?n.serializer.fromDbTarget(t):null})},t}();function nr(t){return mr.getStore(t,Pn.store)}function rr(t){return Yn.getStore(t,Ln.store).get(Ln.key).next(function(t){return m(null!==t,"Missing metadata row."),t})}function ir(t){return rr(t).next(function(t){return t.highestListenSequenceNumber})}function or(t){return mr.getStore(t,Mn.store)}var ar=function(){function t(t,e){this.serializer=t,this.keepDocumentChangeLog=e,this._lastProcessedDocumentChangeId=0}return Object.defineProperty(t.prototype,"lastProcessedDocumentChangeId",{get:function(){return this._lastProcessedDocumentChangeId},enumerable:!0,configurable:!0}),t.prototype.start=function(t){var e=this;return this._lastProcessedDocumentChangeId=0,Yn.getStore(t,Fn.store).iterate({keysOnly:!0,reverse:!0},function(t,n,r){e._lastProcessedDocumentChangeId=t,r.done()})},t.prototype.addEntries=function(t,e){var n=[];if(e.length>0){for(var r=sr(t),i=Ie(),o=0,a=e;o<a.length;o++){var s=a[o];n.push(r.put(cr(s.key),this.serializer.toDbRemoteDocument(s))),i=i.add(s.key)}this.keepDocumentChangeLog&&n.push(ur(t).put({changes:this.serializer.toDbResourcePaths(i)}))}return un.waitFor(n)},t.prototype.removeEntry=function(t,e){return sr(t).delete(cr(e))},t.prototype.getEntry=function(t,e){var n=this;return sr(t).get(cr(e)).next(function(t){return t?n.serializer.fromDbRemoteDocument(t):null})},t.prototype.getDocumentsMatchingQuery=function(t,e){var n=this,r=Te(),i=e.path.toArray(),o=IDBKeyRange.lowerBound(i);return sr(t).iterate({range:o},function(t,i,o){var a=n.serializer.fromDbRemoteDocument(i);e.path.isPrefixOf(a.key.path)?a instanceof ht&&e.matches(a)&&(r=r.insert(a.key,a)):o.done()}).next(function(){return r})},t.prototype.getNewDocumentChanges=function(t){var e=this;m(this.keepDocumentChangeLog,"Can only call getNewDocumentChanges() when document change log is enabled");var n=Ie(),r=be(),i=IDBKeyRange.lowerBound(this._lastProcessedDocumentChangeId,!0);return ur(t).iterate({range:i},function(t,r){n=n.unionWith(e.serializer.fromDbResourcePaths(r.changes)),e._lastProcessedDocumentChangeId=r.id}).next(function(){var i=[];return n.forEach(function(n){i.push(e.getEntry(t,n).next(function(t){r=r.insert(n,t||new lt(n,Jt.forDeletedDoc()))}))}),un.waitFor(i)}).next(function(){return r})},t.prototype.removeDocumentChangesThroughChangeId=function(t,e){var n=IDBKeyRange.upperBound(e);return ur(t).delete(n)},t}();function sr(t){return mr.getStore(t,Rn.store)}function ur(t){return mr.getStore(t,Fn.store)}function cr(t){return t.path.toArray()}var hr=function(){function e(t){this.remoteSerializer=t}return e.prototype.fromDbRemoteDocument=function(t){if(t.document)return this.remoteSerializer.fromDocument(t.document,!!t.hasCommittedMutations);if(t.noDocument){var e=ut.fromSegments(t.noDocument.path),n=this.fromDbTimestamp(t.noDocument.readTime);return new lt(e,n,{hasCommittedMutations:!!t.hasCommittedMutations})}if(t.unknownDocument){e=ut.fromSegments(t.unknownDocument.path),n=this.fromDbTimestamp(t.unknownDocument.version);return new ft(e,n)}return y("Unexpected DbRemoteDocument")},e.prototype.toDbRemoteDocument=function(t){if(t instanceof ht){var e=this.remoteSerializer.toDocument(t),n=t.hasCommittedMutations;return new Rn(null,null,e,n)}if(t instanceof lt){var r=t.key.path.toArray(),i=this.toDbTimestamp(t.version);n=t.hasCommittedMutations;return new Rn(null,new xn(r,i),null,n)}if(t instanceof ft){r=t.key.path.toArray(),i=this.toDbTimestamp(t.version);return new Rn(new On(r,i),null,null,!0)}return y("Unexpected MaybeDocumment")},e.prototype.toDbTimestamp=function(t){var e=t.toTimestamp();return new _n(e.seconds,e.nanoseconds)},e.prototype.fromDbTimestamp=function(t){var e=new tt(t.seconds,t.nanoseconds);return Jt.fromTimestamp(e)},e.prototype.toDbMutationBatch=function(t,e){var n=this,r=e.mutations.map(function(t){return n.remoteSerializer.toMutation(t)});return new Nn(t,e.batchId,e.localWriteTime.toMillis(),r)},e.prototype.fromDbMutationBatch=function(t){var e=this,n=t.mutations.map(function(t){return e.remoteSerializer.fromMutation(t)}),r=tt.fromMillis(t.localWriteTimeMs);return new yn(t.batchId,r,n)},e.prototype.toDbResourcePaths=function(t){var e=[];return t.forEach(function(t){e.push(Tn(t.path))}),e},e.prototype.fromDbResourcePaths=function(t){for(var e=Ie(),n=0,r=t;n<r.length;n++){var i=r[n];e=e.add(new ut(Cn(i)))}return e},e.prototype.fromDbTarget=function(t){var e,n=this.fromDbTimestamp(t.readTime);return e=function(t){return void 0!==t.documents}(t.query)?this.remoteSerializer.fromDocumentsTarget(t.query):this.remoteSerializer.fromQueryTarget(t.query),new Zt(e,t.targetId,Bt.Listen,t.lastListenSequenceNumber,n,t.resumeToken)},e.prototype.toDbTarget=function(e){m(Bt.Listen===e.purpose,"Only queries with purpose "+Bt.Listen+" may be stored, got "+e.purpose);var n,r,i=this.toDbTimestamp(e.snapshotVersion);return n=e.query.isDocumentQuery()?this.remoteSerializer.toDocumentsTarget(e.query):this.remoteSerializer.toQueryTarget(e.query),e.resumeToken instanceof Uint8Array?(m("YES"===t.env.USE_MOCK_PERSISTENCE,"Persisting non-string stream tokens is only supported with mock persistence ."),r=e.resumeToken.toString()):r=e.resumeToken,new Pn(e.targetId,e.query.canonicalId(),i,r,e.sequenceNumber,n)},e}();var lr="IndexedDbPersistence",fr="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.",dr="Another tab has exclusive access to the persistence layer. To allow shared access, make sure to invoke `enablePersistence()` with `experimentalTabSynchronization:true` in all tabs.",pr="This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.",yr=function(t){function e(e,n){var r=t.call(this)||this;return r.simpleDbTransaction=e,r.currentSequenceNumber=n,r}return a.__extends(e,t),e}(function(){return function(){}}()),mr=function(){function t(e,n,r,i,o,a){if(this.persistenceKey=e,this.clientId=n,this.queue=i,this.multiClientParams=a,this._started=!1,this.isPrimary=!1,this.networkEnabled=!0,this.inForeground=!1,this.lastGarbageCollectionTime=Number.NEGATIVE_INFINITY,this.primaryStateListener=function(t){return Promise.resolve()},!t.isAvailable())throw new w(b.UNIMPLEMENTED,pr);if(this.dbName=e+t.MAIN_DATABASE,this.serializer=new hr(o),this.document=r.document,this.allowTabSynchronization=void 0!==a,this.queryCache=new er(this.serializer),this.remoteDocumentCache=new ar(this.serializer,this.allowTabSynchronization),!r.window||!r.window.localStorage)throw new w(b.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");this.window=r.window,this.webStorage=this.window.localStorage}return t.getStore=function(t,e){if(t instanceof yr)return Yn.getStore(t.simpleDbTransaction,e);throw y("IndexedDbPersistence must use instances of IndexedDbTransaction")},t.createIndexedDbPersistence=function(e,n,r,i,o){return a.__awaiter(this,void 0,void 0,function(){var s;return a.__generator(this,function(a){switch(a.label){case 0:return[4,(s=new t(e,n,r,i,o)).start()];case 1:return a.sent(),[2,s]}})})},t.createMultiClientIndexedDbPersistence=function(e,n,r,i,o,s){return a.__awaiter(this,void 0,void 0,function(){var u;return a.__generator(this,function(a){switch(a.label){case 0:return[4,(u=new t(e,n,r,i,o,s)).start()];case 1:return a.sent(),[2,u]}})})},t.prototype.start=function(){var t=this;return m(!this.started,"IndexedDbPersistence double-started!"),m(null!==this.window,"Expected 'window' to be defined"),Yn.openOrCreate(this.dbName,5,new In(this.serializer)).then(function(e){t.simpleDb=e}).then(function(){return t.startRemoteDocumentCache()}).then(function(){return t.attachVisibilityHandler(),t.attachWindowUnloadHook(),t.updateClientMetadataAndTryBecomePrimary().then(function(){return t.scheduleClientMetadataAndPrimaryLeaseRefreshes()})}).then(function(){return t.simpleDb.runTransaction("readonly",[Ln.store],function(e){return ir(e).next(function(e){var n=t.multiClientParams?t.multiClientParams.sequenceNumberSyncer:void 0;t.listenSequence=new hn(e,n)})})}).then(function(){t._started=!0}).catch(function(e){return t.simpleDb&&t.simpleDb.close(),Promise.reject(e)})},t.prototype.startRemoteDocumentCache=function(){var t=this;return this.simpleDb.runTransaction("readonly",Vn,function(e){return t.remoteDocumentCache.start(e)})},t.prototype.setPrimaryStateListener=function(t){return this.primaryStateListener=t,t(this.isPrimary)},t.prototype.setNetworkEnabled=function(t){var e=this;this.networkEnabled!==t&&(this.networkEnabled=t,this.queue.enqueueAndForget(function(){return a.__awaiter(e,void 0,void 0,function(){return a.__generator(this,function(t){switch(t.label){case 0:return this.started?[4,this.updateClientMetadataAndTryBecomePrimary()]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}})})}))},t.prototype.updateClientMetadataAndTryBecomePrimary=function(){var t=this;return this.simpleDb.runTransaction("readwrite",Vn,function(e){return br(e).put(new Bn(t.clientId,Date.now(),t.networkEnabled,t.inForeground,t.remoteDocumentCache.lastProcessedDocumentChangeId)).next(function(){return t.canActAsPrimary(e)}).next(function(n){var r=t.isPrimary;return t.isPrimary=n,r!==t.isPrimary&&t.queue.enqueueAndForget(function(){return a.__awaiter(t,void 0,void 0,function(){return a.__generator(this,function(t){return this.started?[2,this.primaryStateListener(this.isPrimary)]:[2]})})}),r&&!t.isPrimary?t.releasePrimaryLeaseIfHeld(e):t.isPrimary?t.acquireOrExtendPrimaryLease(e):void 0})})},t.prototype.removeClientMetadata=function(t){return br(t).delete(this.clientId)},t.prototype.maybeGarbageCollectMultiClientState=function(){return a.__awaiter(this,void 0,void 0,function(){var e,n,r=this;return a.__generator(this,function(i){switch(i.label){case 0:return!this.isPrimary||this.isWithinAge(this.lastGarbageCollectionTime,18e5)?[3,2]:(this.lastGarbageCollectionTime=Date.now(),n=[],[4,this.runTransaction("maybeGarbageCollectMultiClientState","readwrite-primary",function(i){var o=t.getStore(i,Bn.store);return o.loadAll().next(function(t){e=r.filterActiveClients(t,18e5),n=t.filter(function(t){return-1===e.indexOf(t)})}).next(function(){return un.forEach(n,function(t){return o.delete(t.clientId)})}).next(function(){if((e=e.filter(function(t){return t.clientId!==r.clientId})).length>0){var t=e.map(function(t){return t.lastProcessedDocumentChangeId||0}),n=Math.min.apply(Math,t);return r.remoteDocumentCache.removeDocumentChangesThroughChangeId(i,n)}})})]);case 1:i.sent(),n.forEach(function(t){r.window.localStorage.removeItem(r.zombiedClientLocalStorageKey(t.clientId))}),i.label=2;case 2:return[2]}})})},t.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes=function(){var t=this;this.clientMetadataRefresher=this.queue.enqueueAfterDelay(sn.ClientMetadataRefresh,4e3,function(){return t.updateClientMetadataAndTryBecomePrimary().then(function(){return t.maybeGarbageCollectMultiClientState()}).then(function(){return t.scheduleClientMetadataAndPrimaryLeaseRefreshes()})})},t.prototype.isLocalClient=function(t){return!!t&&t.ownerId===this.clientId},t.prototype.canActAsPrimary=function(t){var e=this;return vr(t).get(Dn.key).next(function(n){if(null!==n&&e.isWithinAge(n.leaseTimestampMs,5e3)&&!e.isClientZombied(n.ownerId)){if(e.isLocalClient(n)&&e.networkEnabled)return!0;if(!e.isLocalClient(n)){if(!n.allowTabSynchronization)throw new w(b.FAILED_PRECONDITION,dr);return!1}}return!(!e.networkEnabled||!e.inForeground)||br(t).loadAll().next(function(t){return void 0===e.filterActiveClients(t,5e3).find(function(t){if(e.clientId!==t.clientId){var n=!e.networkEnabled&&t.networkEnabled,r=!e.inForeground&&t.inForeground,i=e.networkEnabled===t.networkEnabled;if(n||r&&i)return!0}return!1})})}).next(function(t){return e.isPrimary!==t&&f(lr,"Client "+(t?"is":"is not")+" eligible for a primary lease."),t})},t.prototype.shutdown=function(t){return a.__awaiter(this,void 0,void 0,function(){var e=this;return a.__generator(this,function(n){switch(n.label){case 0:return this._started=!1,this.markClientZombied(),this.clientMetadataRefresher&&this.clientMetadataRefresher.cancel(),this.detachVisibilityHandler(),this.detachWindowUnloadHook(),[4,this.simpleDb.runTransaction("readwrite",[Dn.store,Bn.store],function(t){return e.releasePrimaryLeaseIfHeld(t).next(function(){return e.removeClientMetadata(t)})})];case 1:return n.sent(),this.simpleDb.close(),this.removeClientZombiedEntry(),t?[4,Yn.delete(this.dbName)]:[3,3];case 2:n.sent(),n.label=3;case 3:return[2]}})})},t.prototype.filterActiveClients=function(t,e){var n=this;return t.filter(function(t){return n.isWithinAge(t.updateTimeMs,e)&&!n.isClientZombied(t.clientId)})},t.prototype.getActiveClients=function(){var t=this;return this.simpleDb.runTransaction("readonly",[Bn.store],function(e){return br(e).loadAll().next(function(e){return t.filterActiveClients(e,5e3).map(function(t){return t.clientId})})})},Object.defineProperty(t.prototype,"started",{get:function(){return this._started},enumerable:!0,configurable:!0}),t.prototype.getMutationQueue=function(t){return m(this.started,"Cannot initialize MutationQueue before persistence is started."),Un.forUser(t,this.serializer)},t.prototype.getQueryCache=function(){return m(this.started,"Cannot initialize QueryCache before persistence is started."),this.queryCache},t.prototype.getRemoteDocumentCache=function(){return m(this.started,"Cannot initialize RemoteDocumentCache before persistence is started."),this.remoteDocumentCache},t.prototype.runTransaction=function(t,e,n){var r=this;return f(lr,"Starting transaction:",t),this.simpleDb.runTransaction("readonly"===e?"readonly":"readwrite",Vn,function(i){return"readwrite-primary"===e?r.canActAsPrimary(i).next(function(e){if(!e)throw d("Failed to obtain primary lease for action '"+t+"'."),r.isPrimary=!1,r.queue.enqueueAndForget(function(){return r.primaryStateListener(!1)}),new w(b.FAILED_PRECONDITION,fr);return n(new yr(i,r.listenSequence.next()))}).next(function(t){return r.acquireOrExtendPrimaryLease(i).next(function(){return t})}):r.verifyAllowTabSynchronization(i).next(function(){return n(new yr(i,r.listenSequence.next()))})})},t.prototype.verifyAllowTabSynchronization=function(t){var e=this;return vr(t).get(Dn.key).next(function(t){if(null!==t&&e.isWithinAge(t.leaseTimestampMs,5e3)&&!e.isClientZombied(t.ownerId)&&!e.isLocalClient(t)&&!t.allowTabSynchronization)throw new w(b.FAILED_PRECONDITION,dr)})},t.prototype.acquireOrExtendPrimaryLease=function(t){var e=new Dn(this.clientId,this.allowTabSynchronization,Date.now());return vr(t).put(Dn.key,e)},t.isAvailable=function(){return Yn.isAvailable()},t.buildStoragePrefix=function(t){var e=t.databaseId.projectId;return t.databaseId.isDefaultDatabase||(e+="."+t.databaseId.database),"firestore/"+t.persistenceKey+"/"+e+"/"},t.prototype.releasePrimaryLeaseIfHeld=function(t){var e=this;this.isPrimary=!1;var n=vr(t);return n.get(Dn.key).next(function(t){return e.isLocalClient(t)?(f(lr,"Releasing primary lease."),n.delete(Dn.key)):un.resolve()})},t.prototype.isWithinAge=function(t,e){var n=Date.now();return!(t<n-e)&&(!(t>n)||(d("Detected an update time that is in the future: "+t+" > "+n),!1))},t.prototype.attachVisibilityHandler=function(){var t=this;null!==this.document&&"function"==typeof this.document.addEventListener&&(this.documentVisibilityHandler=function(){t.queue.enqueueAndForget(function(){return t.inForeground="visible"===t.document.visibilityState,t.updateClientMetadataAndTryBecomePrimary()})},this.document.addEventListener("visibilitychange",this.documentVisibilityHandler),this.inForeground="visible"===this.document.visibilityState)},t.prototype.detachVisibilityHandler=function(){this.documentVisibilityHandler&&(m(null!==this.document&&"function"==typeof this.document.addEventListener,"Expected 'document.addEventListener' to be a function"),this.document.removeEventListener("visibilitychange",this.documentVisibilityHandler),this.documentVisibilityHandler=null)},t.prototype.attachWindowUnloadHook=function(){var t=this;"function"==typeof this.window.addEventListener&&(this.windowUnloadHandler=function(){t.markClientZombied(),t.queue.enqueueAndForget(function(){return t.shutdown()})},this.window.addEventListener("unload",this.windowUnloadHandler))},t.prototype.detachWindowUnloadHook=function(){this.windowUnloadHandler&&(m("function"==typeof this.window.removeEventListener,"Expected 'window.removeEventListener' to be a function"),this.window.removeEventListener("unload",this.windowUnloadHandler),this.windowUnloadHandler=null)},t.prototype.isClientZombied=function(t){try{var e=null!==this.webStorage.getItem(this.zombiedClientLocalStorageKey(t));return f(lr,"Client '"+t+"' "+(e?"is":"is not")+" zombied in LocalStorage"),e}catch(t){return d(lr,"Failed to get zombied client id.",t),!1}},t.prototype.markClientZombied=function(){try{this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId),String(Date.now()))}catch(t){d("Failed to set zombie client id.",t)}},t.prototype.removeClientZombiedEntry=function(){try{this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId))}catch(t){}},t.prototype.zombiedClientLocalStorageKey=function(t){return"firestore_zombie_"+this.persistenceKey+"_"+t},t.MAIN_DATABASE="main",t}();function gr(t){return t.code===b.FAILED_PRECONDITION&&t.message===fr}function vr(t){return t.store(Dn.store)}function br(t){return t.store(Bn.store)}var wr,Tr=function(){function t(t,e){this.remoteDocumentCache=t,this.mutationQueue=e}return t.prototype.getDocument=function(t,e){var n=this;return this.mutationQueue.getAllMutationBatchesAffectingDocumentKey(t,e).next(function(r){return n.getDocumentInternal(t,e,r)})},t.prototype.getDocumentInternal=function(t,e,n){return this.remoteDocumentCache.getEntry(t,e).next(function(t){for(var r=0,i=n;r<i.length;r++){t=i[r].applyToLocalView(e,t)}return t})},t.prototype.getDocuments=function(t,e){var n=this;return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(t,e).next(function(r){var i=[],o=be();return e.forEach(function(e){i.push(n.getDocumentInternal(t,e,r).next(function(t){t||(t=new lt(e,Jt.forDeletedDoc())),o=o.insert(e,t)}))}),un.waitFor(i).next(function(){return o})})},t.prototype.getDocumentsMatchingQuery=function(t,e){return ut.isDocumentKey(e.path)?this.getDocumentsMatchingDocumentQuery(t,e.path):this.getDocumentsMatchingCollectionQuery(t,e)},t.prototype.getDocumentsMatchingDocumentQuery=function(t,e){return this.getDocument(t,new ut(e)).next(function(t){var e=Te();return t instanceof ht&&(e=e.insert(t.key,t)),e})},t.prototype.getDocumentsMatchingCollectionQuery=function(t,e){var n,r=this;return this.remoteDocumentCache.getDocumentsMatchingQuery(t,e).next(function(i){return n=i,r.mutationQueue.getAllMutationBatchesAffectingQuery(t,e)}).next(function(t){for(var r=0,i=t;r<i.length;r++)for(var o=i[r],a=0,s=o.mutations;a<s.length;a++){var u=s[a],c=u.key;if(e.path.isImmediateParentOf(c.path)){var h=n.get(c),l=u.applyToLocalView(h,h,o.localWriteTime);n=l instanceof ht?n.insert(c,l):n.remove(c)}}}).next(function(){return n.forEach(function(t,r){e.matches(r)||(n=n.remove(t))}),n})},t}(),Er=function(){function t(){this.refsByKey=new ge(Sr.compareByKey),this.refsByTarget=new ge(Sr.compareByTargetId),this.garbageCollector=null}return t.prototype.isEmpty=function(){return this.refsByKey.isEmpty()},t.prototype.addReference=function(t,e){var n=new Sr(t,e);this.refsByKey=this.refsByKey.add(n),this.refsByTarget=this.refsByTarget.add(n)},t.prototype.addReferences=function(t,e){var n=this;t.forEach(function(t){return n.addReference(t,e)})},t.prototype.removeReference=function(t,e){this.removeRef(new Sr(t,e))},t.prototype.removeReferences=function(t,e){var n=this;t.forEach(function(t){return n.removeReference(t,e)})},t.prototype.removeReferencesForId=function(t){var e=this,n=ut.EMPTY,r=new Sr(n,t),i=new Sr(n,t+1);this.refsByTarget.forEachInRange([r,i],function(t){e.removeRef(t)})},t.prototype.removeAllReferences=function(){var t=this;this.refsByKey.forEach(function(e){return t.removeRef(e)})},t.prototype.removeRef=function(t){this.refsByKey=this.refsByKey.delete(t),this.refsByTarget=this.refsByTarget.delete(t),null!==this.garbageCollector&&this.garbageCollector.addPotentialGarbageKey(t.key)},t.prototype.referencesForId=function(t){var e=ut.EMPTY,n=new Sr(e,t),r=new Sr(e,t+1),i=Ie();return this.refsByTarget.forEachInRange([n,r],function(t){i=i.add(t.key)}),i},t.prototype.setGarbageCollector=function(t){this.garbageCollector=t},t.prototype.containsKey=function(t,e){var n=new Sr(e,0),r=this.refsByKey.firstAfterOrEqual(n);return un.resolve(null!==r&&e.isEqual(r.key))},t}(),Sr=function(){function t(t,e){this.key=t,this.targetOrBatchId=e}return t.compareByKey=function(t,e){return ut.comparator(t.key,e.key)||Q(t.targetOrBatchId,e.targetOrBatchId)},t.compareByTargetId=function(t,e){return Q(t.targetOrBatchId,e.targetOrBatchId)||ut.comparator(t.key,e.key)},t}(),Cr=function(){function t(t){this.remoteDocumentCache=t,this.changes=be()}return t.prototype.addEntry=function(t){var e=this.assertChanges();this.changes=e.insert(t.key,t)},t.prototype.getEntry=function(t,e){var n=this.assertChanges().get(e);return n?un.resolve(n):this.remoteDocumentCache.getEntry(t,e)},t.prototype.apply=function(t){var e=[];return this.assertChanges().forEach(function(t,n){e.push(n)}),this.changes=null,this.remoteDocumentCache.addEntries(t,e)},t.prototype.assertChanges=function(){return m(null!==this.changes,"Changes have already been applied."),this.changes},t}(),Ir=function(){function t(t,e,n){this.persistence=t,this.garbageCollector=n,this.localViewReferences=new Er,this.queryDataByTarget={},m(t.started,"LocalStore was passed an unstarted persistence implementation"),this.mutationQueue=t.getMutationQueue(e),this.remoteDocuments=t.getRemoteDocumentCache(),this.queryCache=t.getQueryCache(),this.localDocuments=new Tr(this.remoteDocuments,this.mutationQueue),this.garbageCollector.addGarbageSource(this.localViewReferences),this.garbageCollector.addGarbageSource(this.queryCache),this.garbageCollector.addGarbageSource(this.mutationQueue)}return t.prototype.start=function(){var t=this;return this.persistence.runTransaction("Start LocalStore","readonly",function(e){return t.startMutationQueue(e)})},t.prototype.handleUserChange=function(t){var e=this;return this.persistence.runTransaction("Handle user change","readonly",function(n){var r;return e.mutationQueue.getAllMutationBatches(n).next(function(i){return r=i,e.garbageCollector.removeGarbageSource(e.mutationQueue),e.mutationQueue=e.persistence.getMutationQueue(t),e.garbageCollector.addGarbageSource(e.mutationQueue),e.startMutationQueue(n)}).next(function(){return e.localDocuments=new Tr(e.remoteDocuments,e.mutationQueue),e.mutationQueue.getAllMutationBatches(n)}).next(function(t){for(var i=[],o=[],a=Ie(),s=0,u=r;s<u.length;s++){var c=u[s];i.push(c.batchId);for(var h=0,l=c.mutations;h<l.length;h++){var f=l[h];a=a.add(f.key)}}for(var d=0,p=t;d<p.length;d++){c=p[d];o.push(c.batchId);for(var y=0,m=c.mutations;y<m.length;y++){f=m[y];a=a.add(f.key)}}return e.localDocuments.getDocuments(n,a).next(function(t){return{affectedDocuments:t,removedBatchIds:i,addedBatchIds:o}})})})},t.prototype.startMutationQueue=function(t){return this.mutationQueue.start(t)},t.prototype.localWrite=function(t){var e=this;return this.persistence.runTransaction("Locally write mutations","readwrite",function(n){var r,i=tt.now();return e.mutationQueue.addMutationBatch(n,i,t).next(function(t){var i=(r=t).keys();return e.localDocuments.getDocuments(n,i)}).next(function(t){return{batchId:r.batchId,changes:t}})})},t.prototype.lookupMutationDocuments=function(t){var e=this;return this.persistence.runTransaction("Lookup mutation documents","readonly",function(n){return e.mutationQueue.lookupMutationKeys(n,t).next(function(t){return t?e.localDocuments.getDocuments(n,t):un.resolve(null)})})},t.prototype.acknowledgeBatch=function(t){var e=this;return this.persistence.runTransaction("Acknowledge batch","readwrite-primary",function(n){var r=t.batch.keys(),i=new Cr(e.remoteDocuments);return e.mutationQueue.acknowledgeBatch(n,t.batch,t.streamToken).next(function(){return e.applyWriteToRemoteDocuments(n,t,i)}).next(function(){return i.apply(n)}).next(function(){return e.mutationQueue.performConsistencyCheck(n)}).next(function(){return e.localDocuments.getDocuments(n,r)})})},t.prototype.rejectBatch=function(t){var e=this;return this.persistence.runTransaction("Reject batch","readwrite-primary",function(n){var r;return e.mutationQueue.lookupMutationBatch(n,t).next(function(t){return m(null!==t,"Attempt to reject nonexistent batch!"),r=t.keys(),e.mutationQueue.removeMutationBatch(n,t)}).next(function(){return e.mutationQueue.performConsistencyCheck(n)}).next(function(){return e.localDocuments.getDocuments(n,r)})})},t.prototype.getLastStreamToken=function(){var t=this;return this.persistence.runTransaction("Get last stream token","readonly",function(e){return t.mutationQueue.getLastStreamToken(e)})},t.prototype.setLastStreamToken=function(t){var e=this;return this.persistence.runTransaction("Set last stream token","readwrite-primary",function(n){return e.mutationQueue.setLastStreamToken(n,t)})},t.prototype.getLastRemoteSnapshotVersion=function(){var t=this;return this.persistence.runTransaction("Get last remote snapshot version","readonly",function(e){return t.queryCache.getLastRemoteSnapshotVersion(e)})},t.prototype.applyRemoteEvent=function(e){var n=this,r=new Cr(this.remoteDocuments);return this.persistence.runTransaction("Apply remote event","readwrite-primary",function(i){var o=[],a=Ie();C(e.targetChanges,function(r,s){var u=n.queryDataByTarget[r];if(u){s.addedDocuments.forEach(function(t){a=a.add(t)}),s.modifiedDocuments.forEach(function(t){a=a.add(t)}),o.push(n.queryCache.removeMatchingKeys(i,s.removedDocuments,r).next(function(){return n.queryCache.addMatchingKeys(i,s.addedDocuments,r)}));var c=s.resumeToken;if(c.length>0){var h=u;u=u.copy({resumeToken:c,snapshotVersion:e.snapshotVersion}),n.queryDataByTarget[r]=u,t.shouldPersistQueryData(h,u,s)&&o.push(n.queryCache.updateQueryData(i,u))}}});var s=Ie();e.documentUpdates.forEach(function(t,e){s=s.add(t),o.push(r.getEntry(i,t).next(function(i){null==i||e.version.isEqual(Jt.MIN)||a.has(e.key)&&!i.hasPendingWrites||e.version.compareTo(i.version)>=0?r.addEntry(e):f("LocalStore","Ignoring outdated watch update for ",t,". Current version:",i.version," Watch version:",e.version),n.garbageCollector.addPotentialGarbageKey(t)}))});var u=e.snapshotVersion;if(!u.isEqual(Jt.MIN)){var c=n.queryCache.getLastRemoteSnapshotVersion(i).next(function(t){return m(u.compareTo(t)>=0,"Watch stream reverted to previous snapshot?? "+u+" < "+t),n.queryCache.setTargetsMetadata(i,i.currentSequenceNumber,u)});o.push(c)}return un.waitFor(o).next(function(){return r.apply(i)}).next(function(){return n.localDocuments.getDocuments(i,s)})})},t.shouldPersistQueryData=function(t,e,n){return 0!==e.resumeToken.length&&(0===t.resumeToken.length||(e.snapshotVersion.toMicroseconds()-t.snapshotVersion.toMicroseconds()>=this.RESUME_TOKEN_MAX_AGE_MICROS||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0))},t.prototype.notifyLocalViewChanges=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e];this.localViewReferences.addReferences(r.addedKeys,r.targetId),this.localViewReferences.removeReferences(r.removedKeys,r.targetId)}},t.prototype.nextMutationBatch=function(t){var e=this;return this.persistence.runTransaction("Get next mutation batch","readonly",function(n){return void 0===t&&(t=pn),e.mutationQueue.getNextMutationBatchAfterBatchId(n,t)})},t.prototype.readDocument=function(t){var e=this;return this.persistence.runTransaction("read document","readonly",function(n){return e.localDocuments.getDocument(n,t)})},t.prototype.allocateQuery=function(t){var e=this;return this.persistence.runTransaction("Allocate query","readwrite",function(n){var r;return e.queryCache.getQueryData(n,t).next(function(i){return i?(r=i,un.resolve()):e.queryCache.allocateTargetId(n).next(function(i){return r=new Zt(t,i,Bt.Listen,n.currentSequenceNumber),e.queryCache.addQueryData(n,r)})}).next(function(){return m(!e.queryDataByTarget[r.targetId],"Tried to allocate an already allocated query: "+t),e.queryDataByTarget[r.targetId]=r,r})})},t.prototype.releaseQuery=function(t,e){var n=this,r=e?"readonly":"readwrite-primary";return this.persistence.runTransaction("Release query",r,function(r){return n.queryCache.getQueryData(r,t).next(function(i){m(null!=i,"Tried to release nonexistent query: "+t);var o=i.targetId,a=n.queryDataByTarget[o];return n.localViewReferences.removeReferencesForId(o),delete n.queryDataByTarget[o],!e&&n.garbageCollector.isEager?n.queryCache.removeQueryData(r,i):a.snapshotVersion>i.snapshotVersion?n.queryCache.updateQueryData(r,a):un.resolve()})})},t.prototype.executeQuery=function(t){var e=this;return this.persistence.runTransaction("Execute query","readonly",function(n){return e.localDocuments.getDocumentsMatchingQuery(n,t)})},t.prototype.remoteDocumentKeys=function(t){var e=this;return this.persistence.runTransaction("Remote document keys","readonly",function(n){return e.queryCache.getMatchingKeysForTargetId(n,t)})},t.prototype.collectGarbage=function(){var t=this;return this.persistence.runTransaction("Garbage collection","readwrite-primary",function(e){return t.garbageCollector.collectGarbage(e).next(function(n){var r=[];return n.forEach(function(n){r.push(t.remoteDocuments.removeEntry(e,n))}),un.waitFor(r)})})},t.prototype.getActiveClients=function(){return this.persistence.getActiveClients()},t.prototype.removeCachedMutationBatchMetadata=function(t){this.mutationQueue.removeCachedMutationKeys(t)},t.prototype.setNetworkEnabled=function(t){this.persistence.setNetworkEnabled(t)},t.prototype.applyWriteToRemoteDocuments=function(t,e,n){var r=this,i=e.batch,o=i.keys(),a=un.resolve();return o.forEach(function(r){a=a.next(function(){return n.getEntry(t,r)}).next(function(t){var o=t,a=e.docVersions.get(r);m(null!==a,"ackVersions should contain every doc in the write."),(!o||o.version.compareTo(a)<0)&&((o=i.applyToRemoteDocument(r,o,e))?n.addEntry(o):m(!t,"Mutation batch "+i+" applied to document "+t+" resulted in null"))})}),a.next(function(){return r.mutationQueue.removeMutationBatch(t,i)})},t.prototype.getQueryForTarget=function(t){var e=this;return this.queryDataByTarget[t]?Promise.resolve(this.queryDataByTarget[t].query):this.persistence.runTransaction("Get query data","readonly",function(n){return e.queryCache.getQueryDataForTarget(n,t).next(function(t){return t?t.query:null})})},t.prototype.getNewDocumentChanges=function(){var t=this;return this.persistence.runTransaction("Get new document changes","readonly",function(e){return t.remoteDocuments.getNewDocumentChanges(e)})},t.RESUME_TOKEN_MAX_AGE_MICROS=3e8,t}(),_r=function(){function t(){this.mutationQueue=[],this.nextBatchId=1,this.highestAcknowledgedBatchId=pn,this.lastStreamToken=v(),this.garbageCollector=null,this.batchesByDocumentKey=new ge(Sr.compareByKey)}return t.prototype.start=function(t){return m(this.highestAcknowledgedBatchId<this.nextBatchId,"highestAcknowledgedBatchId must be less than the nextBatchId"),un.resolve()},t.prototype.checkEmpty=function(t){return un.resolve(0===this.mutationQueue.length)},t.prototype.acknowledgeBatch=function(t,e,n){var r=e.batchId;m(r>this.highestAcknowledgedBatchId,"Mutation batchIDs must be acknowledged in order");var i=this.indexOfExistingBatchId(r,"acknowledged"),o=this.mutationQueue[i];return m(r===o.batchId,"Queue ordering failure: expected batch "+r+", got batch "+o.batchId),m(!o.isTombstone(),"Can't acknowledge a previously removed batch"),this.highestAcknowledgedBatchId=r,this.lastStreamToken=n,un.resolve()},t.prototype.getLastStreamToken=function(t){return un.resolve(this.lastStreamToken)},t.prototype.setLastStreamToken=function(t,e){return this.lastStreamToken=e,un.resolve()},t.prototype.addMutationBatch=function(t,e,n){m(0!==n.length,"Mutation batches should not be empty");var r=this.nextBatchId;(this.nextBatchId++,this.mutationQueue.length>0)&&m(this.mutationQueue[this.mutationQueue.length-1].batchId<r,"Mutation batchIDs must be monotonically increasing order");var i=new yn(r,e,n);this.mutationQueue.push(i);for(var o=0,a=n;o<a.length;o++){var s=a[o];this.batchesByDocumentKey=this.batchesByDocumentKey.add(new Sr(s.key,r))}return un.resolve(i)},t.prototype.lookupMutationBatch=function(t,e){return un.resolve(this.findMutationBatch(e))},t.prototype.lookupMutationKeys=function(t,e){var n=this.findMutationBatch(e);return m(null!=n,"Failed to find local mutation batch."),un.resolve(n.isTombstone()?null:n.keys())},t.prototype.getNextMutationBatchAfterBatchId=function(t,e){for(var n=this.mutationQueue.length,r=Math.max(e,this.highestAcknowledgedBatchId)+1,i=this.indexOfBatchId(r),o=i<0?0:i;o<n;o++){var a=this.mutationQueue[o];if(!a.isTombstone())return un.resolve(a)}return un.resolve(null)},t.prototype.getAllMutationBatches=function(t){return un.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length))},t.prototype.getAllMutationBatchesAffectingDocumentKey=function(t,e){var n=this,r=new Sr(e,0),i=new Sr(e,Number.POSITIVE_INFINITY),o=[];return this.batchesByDocumentKey.forEachInRange([r,i],function(t){m(e.isEqual(t.key),"Should only iterate over a single key's batches");var r=n.findMutationBatch(t.targetOrBatchId);m(null!==r,"Batches in the index must exist in the main table"),o.push(r)}),un.resolve(o)},t.prototype.getAllMutationBatchesAffectingDocumentKeys=function(t,e){var n=this,r=new ge(Q);return e.forEach(function(t){var e=new Sr(t,0),i=new Sr(t,Number.POSITIVE_INFINITY);n.batchesByDocumentKey.forEachInRange([e,i],function(e){m(t.isEqual(e.key),"For each key, should only iterate over a single key's batches"),r=r.add(e.targetOrBatchId)})}),un.resolve(this.findMutationBatches(r))},t.prototype.getAllMutationBatchesAffectingQuery=function(t,e){var n=e.path,r=n.length+1,i=n;ut.isDocumentKey(i)||(i=i.child(""));var o=new Sr(new ut(i),0),a=new ge(Q);return this.batchesByDocumentKey.forEachWhile(function(t){var e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===r&&(a=a.add(t.targetOrBatchId)),!0)},o),un.resolve(this.findMutationBatches(a))},t.prototype.findMutationBatches=function(t){var e=this,n=[];return t.forEach(function(t){var r=e.findMutationBatch(t);null!==r&&n.push(r)}),n},t.prototype.removeMutationBatch=function(t,e){var n=this.indexOfExistingBatchId(e.batchId,"removed");if(m(this.mutationQueue[n].batchId===e.batchId,"Removed batches must exist in the queue"),0===n){for(var r=1;r<this.mutationQueue.length;r++){if(!this.mutationQueue[r].isTombstone())break}this.mutationQueue.splice(0,r)}else this.mutationQueue[n]=this.mutationQueue[n].toTombstone();for(var i=this.batchesByDocumentKey,o=0,a=e.mutations;o<a.length;o++){var s=a[o].key;null!==this.garbageCollector&&this.garbageCollector.addPotentialGarbageKey(s);var u=new Sr(s,e.batchId);i=i.delete(u)}return this.batchesByDocumentKey=i,un.resolve()},t.prototype.removeCachedMutationKeys=function(t){},t.prototype.setGarbageCollector=function(t){this.garbageCollector=t},t.prototype.containsKey=function(t,e){var n=new Sr(e,0),r=this.batchesByDocumentKey.firstAfterOrEqual(n);return un.resolve(e.isEqual(r&&r.key))},t.prototype.performConsistencyCheck=function(t){return 0===this.mutationQueue.length&&m(this.batchesByDocumentKey.isEmpty(),"Document leak -- detected dangling mutation references when queue is empty."),un.resolve()},t.prototype.getAllLiveMutationBatchesBeforeIndex=function(t){for(var e=[],n=0;n<t;n++){var r=this.mutationQueue[n];r.isTombstone()||e.push(r)}return e},t.prototype.indexOfExistingBatchId=function(t,e){var n=this.indexOfBatchId(t);return m(n>=0&&n<this.mutationQueue.length,"Batches must exist to be "+e),n},t.prototype.indexOfBatchId=function(t){return 0===this.mutationQueue.length?0:t-this.mutationQueue[0].batchId},t.prototype.findMutationBatch=function(t){var e=this.indexOfBatchId(t);if(e<0||e>=this.mutationQueue.length)return null;var n=this.mutationQueue[e];return m(n.batchId===t,"If found batch must match"),n.isTombstone()?null:n},t}(),Dr=function(){function t(t){this.mapKeyFn=t,this.inner={}}return t.prototype.get=function(t){var e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(var r=0,i=n;r<i.length;r++){var o=i[r],a=o[0],s=o[1];if(a.isEqual(t))return s}},t.prototype.has=function(t){return void 0!==this.get(t)},t.prototype.set=function(t,e){var n=this.mapKeyFn(t),r=this.inner[n];if(void 0!==r){for(var i=0;i<r.length;i++)if(r[i][0].isEqual(t))return void(r[i]=[t,e]);r.push([t,e])}else this.inner[n]=[[t,e]]},t.prototype.delete=function(t){var e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(var r=0;r<n.length;r++)if(n[r][0].isEqual(t))return 1===n.length?delete this.inner[e]:n.splice(r,1),!0;return!1},t.prototype.forEach=function(t){I(this.inner,function(e,n){for(var r=0,i=n;r<i.length;r++){var o=i[r],a=o[0],s=o[1];t(a,s)}})},t.prototype.isEmpty=function(){return _(this.inner)},t}(),Ar=function(){function t(){this.queries=new Dr(function(t){return t.canonicalId()}),this.lastRemoteSnapshotVersion=Jt.MIN,this.highestTargetId=0,this.highestSequenceNumber=0,this.references=new Er,this.targetCount=0,this.targetIdGenerator=Xn.forQueryCache()}return t.prototype.getLastRemoteSnapshotVersion=function(t){return un.resolve(this.lastRemoteSnapshotVersion)},t.prototype.getHighestSequenceNumber=function(t){return un.resolve(this.highestSequenceNumber)},t.prototype.allocateTargetId=function(t){var e=this.targetIdGenerator.after(this.highestTargetId);return this.highestTargetId=e,un.resolve(e)},t.prototype.setTargetsMetadata=function(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.highestSequenceNumber&&(this.highestSequenceNumber=e),un.resolve()},t.prototype.saveQueryData=function(t){this.queries.set(t.query,t);var e=t.targetId;e>this.highestTargetId&&(this.highestTargetId=e),t.sequenceNumber>this.highestSequenceNumber&&(this.highestSequenceNumber=t.sequenceNumber)},t.prototype.addQueryData=function(t,e){return m(!this.queries.has(e.query),"Adding a query that already exists"),this.saveQueryData(e),this.targetCount+=1,un.resolve()},t.prototype.updateQueryData=function(t,e){return m(this.queries.has(e.query),"Updating a non-existent query"),this.saveQueryData(e),un.resolve()},t.prototype.removeQueryData=function(t,e){return m(this.targetCount>0,"Removing a target from an empty cache"),m(this.queries.has(e.query),"Removing a non-existent target from the cache"),this.queries.delete(e.query),this.references.removeReferencesForId(e.targetId),this.targetCount-=1,un.resolve()},t.prototype.getQueryCount=function(t){return un.resolve(this.targetCount)},t.prototype.getQueryData=function(t,e){var n=this.queries.get(e)||null;return un.resolve(n)},t.prototype.getQueryDataForTarget=function(t,e){return y("Not yet implemented.")},t.prototype.addMatchingKeys=function(t,e,n){return this.references.addReferences(e,n),un.resolve()},t.prototype.removeMatchingKeys=function(t,e,n){return this.references.removeReferences(e,n),un.resolve()},t.prototype.removeMatchingKeysForTargetId=function(t,e){return this.references.removeReferencesForId(e),un.resolve()},t.prototype.getMatchingKeysForTargetId=function(t,e){var n=this.references.referencesForId(e);return un.resolve(n)},t.prototype.setGarbageCollector=function(t){this.references.setGarbageCollector(t)},t.prototype.containsKey=function(t,e){return this.references.containsKey(t,e)},t}(),Nr=function(){function t(){this.docs=be(),this.newDocumentChanges=Ie()}return t.prototype.addEntries=function(t,e){for(var n=0,r=e;n<r.length;n++){var i=r[n];this.docs=this.docs.insert(i.key,i),this.newDocumentChanges=this.newDocumentChanges.add(i.key)}return un.resolve()},t.prototype.removeEntry=function(t,e){return this.docs=this.docs.remove(e),un.resolve()},t.prototype.getEntry=function(t,e){return un.resolve(this.docs.get(e))},t.prototype.getDocumentsMatchingQuery=function(t,e){for(var n=Te(),r=new ut(e.path.child("")),i=this.docs.getIteratorFrom(r);i.hasNext();){var o=i.getNext(),a=o.key,s=o.value;if(!e.path.isPrefixOf(a.path))break;s instanceof ht&&e.matches(s)&&(n=n.insert(s.key,s))}return un.resolve(n)},t.prototype.getNewDocumentChanges=function(t){var e=this,n=be();return this.newDocumentChanges.forEach(function(t){n=n.insert(t,e.docs.get(t)||new lt(t,Jt.forDeletedDoc()))}),this.newDocumentChanges=Ie(),un.resolve(n)},t}(),kr=function(){function t(t){this.clientId=t,this.mutationQueues={},this.remoteDocumentCache=new Nr,this.queryCache=new Ar,this._started=!1,this._started=!0}return t.prototype.shutdown=function(t){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){return this._started=!1,[2]})})},Object.defineProperty(t.prototype,"started",{get:function(){return this._started},enumerable:!0,configurable:!0}),t.prototype.getActiveClients=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){return[2,[this.clientId]]})})},t.prototype.setPrimaryStateListener=function(t){return t(!0)},t.prototype.setNetworkEnabled=function(t){},t.prototype.getMutationQueue=function(t){var e=this.mutationQueues[t.toKey()];return e||(e=new _r,this.mutationQueues[t.toKey()]=e),e},t.prototype.getQueryCache=function(){return this.queryCache},t.prototype.getRemoteDocumentCache=function(){return this.remoteDocumentCache},t.prototype.runTransaction=function(t,e,n){return f("MemoryPersistence","Starting transaction:",t),n(new xr(hn.INVALID)).toPromise()},t}(),xr=function(){return function(t){this.currentSequenceNumber=t}}(),Or=function(){function t(){this.isEager=!1}return t.prototype.addGarbageSource=function(t){},t.prototype.removeGarbageSource=function(t){},t.prototype.addPotentialGarbageKey=function(t){},t.prototype.collectGarbage=function(t){return un.resolve(Ie())},t}(),Rr=function(){function t(t,e,n,r,i){this.queue=t,this.timerId=e,this.initialDelayMs=n,this.backoffFactor=r,this.maxDelayMs=i,this.timerPromise=null,this.lastAttemptTime=Date.now(),this.reset()}return t.prototype.reset=function(){this.currentBaseMs=0},t.prototype.resetToMax=function(){this.currentBaseMs=this.maxDelayMs},t.prototype.backoffAndRun=function(t){var e=this;this.cancel();var n=Math.floor(this.currentBaseMs+this.jitterDelayMs()),r=Math.max(0,Date.now()-this.lastAttemptTime),i=Math.max(0,n-r);this.currentBaseMs>0&&f("ExponentialBackoff","Backing off for "+i+" ms (base delay: "+this.currentBaseMs+" ms, delay with jitter: "+n+" ms, last attempt: "+r+" ms ago)"),this.timerPromise=this.queue.enqueueAfterDelay(this.timerId,i,function(){return e.lastAttemptTime=Date.now(),t()}),this.currentBaseMs*=this.backoffFactor,this.currentBaseMs<this.initialDelayMs&&(this.currentBaseMs=this.initialDelayMs),this.currentBaseMs>this.maxDelayMs&&(this.currentBaseMs=this.maxDelayMs)},t.prototype.cancel=function(){null!==this.timerPromise&&(this.timerPromise.cancel(),this.timerPromise=null)},t.prototype.jitterDelayMs=function(){return(Math.random()-.5)*this.currentBaseMs},t}();!function(t){t[t.Initial=0]="Initial",t[t.Starting=1]="Starting",t[t.Open=2]="Open",t[t.Error=3]="Error",t[t.Backoff=4]="Backoff"}(wr||(wr={}));var Pr,Mr,Lr=1e3,qr=6e4,Fr=1.5,Br=function(){function t(t,e,n,r,i,o){this.queue=t,this.idleTimerId=n,this.connection=r,this.credentialsProvider=i,this.listener=o,this.state=wr.Initial,this.closeCount=0,this.idleTimer=null,this.stream=null,this.backoff=new Rr(t,e,Lr,Fr,qr)}return t.prototype.isStarted=function(){return this.state===wr.Starting||this.state===wr.Open||this.state===wr.Backoff},t.prototype.isOpen=function(){return this.state===wr.Open},t.prototype.start=function(){this.state!==wr.Error?(m(this.state===wr.Initial,"Already started"),this.auth()):this.performBackoff()},t.prototype.stop=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){switch(t.label){case 0:return this.isStarted()?[4,this.close(wr.Initial)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}})})},t.prototype.inhibitBackoff=function(){m(!this.isStarted(),"Can only inhibit backoff in a stopped state"),this.state=wr.Initial,this.backoff.reset()},t.prototype.markIdle=function(){var t=this;this.isOpen()&&null===this.idleTimer&&(this.idleTimer=this.queue.enqueueAfterDelay(this.idleTimerId,6e4,function(){return t.handleIdleCloseTimer()}))},t.prototype.sendRequest=function(t){this.cancelIdleCheck(),this.stream.send(t)},t.prototype.handleIdleCloseTimer=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){return this.isOpen()?[2,this.close(wr.Initial)]:[2]})})},t.prototype.cancelIdleCheck=function(){this.idleTimer&&(this.idleTimer.cancel(),this.idleTimer=null)},t.prototype.close=function(t,e){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(n){switch(n.label){case 0:return m(this.isStarted(),"Only started streams should be closed."),m(t===wr.Error||qt(e),"Can't provide an error when not in an error state."),this.cancelIdleCheck(),this.backoff.cancel(),this.closeCount++,t!==wr.Error?this.backoff.reset():e&&e.code===b.RESOURCE_EXHAUSTED?(d(e.toString()),d("Using maximum backoff delay to prevent overloading the backend."),this.backoff.resetToMax()):e&&e.code===b.UNAUTHENTICATED&&this.credentialsProvider.invalidateToken(),null!==this.stream&&(this.tearDown(),this.stream.close(),this.stream=null),this.state=t,[4,this.listener.onClose(e)];case 1:return n.sent(),[2]}})})},t.prototype.tearDown=function(){},t.prototype.auth=function(){var t=this;m(this.state===wr.Initial,"Must be in initial state to auth"),this.state=wr.Starting;var e=this.getCloseGuardedDispatcher(this.closeCount),n=this.closeCount;this.credentialsProvider.getToken().then(function(e){t.closeCount===n&&t.startStream(e)},function(n){e(function(){var e=new w(b.UNKNOWN,"Fetching auth token failed: "+n.message);return t.handleStreamClose(e)})})},t.prototype.startStream=function(t){var e=this;m(this.state===wr.Starting,"Trying to start stream in a non-starting state");var n=this.getCloseGuardedDispatcher(this.closeCount);this.stream=this.startRpc(t),this.stream.onOpen(function(){n(function(){return m(e.state===wr.Starting,"Expected stream to be in state Starting, but was "+e.state),e.state=wr.Open,e.listener.onOpen()})}),this.stream.onClose(function(t){n(function(){return e.handleStreamClose(t)})}),this.stream.onMessage(function(t){n(function(){return e.onMessage(t)})})},t.prototype.performBackoff=function(){var t=this;m(this.state===wr.Error,"Should only perform backoff when in Error state"),this.state=wr.Backoff,this.backoff.backoffAndRun(function(){return a.__awaiter(t,void 0,void 0,function(){return a.__generator(this,function(t){return m(this.state===wr.Backoff,"Backoff elapsed but state is now: "+this.state),this.state=wr.Initial,this.start(),m(this.isStarted(),"PersistentStream should have started"),[2]})})})},t.prototype.handleStreamClose=function(t){return m(this.isStarted(),"Can't handle server close on non-started stream"),f("PersistentStream","close with error: "+t),this.stream=null,this.close(wr.Error,t)},t.prototype.getCloseGuardedDispatcher=function(t){var e=this;return function(n){e.queue.enqueueAndForget(function(){return e.closeCount===t?n():(f("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())})}},t}(),Vr=function(t){function e(e,n,r,i,o){var a=t.call(this,e,sn.ListenStreamConnectionBackoff,sn.ListenStreamIdle,n,r,o)||this;return a.serializer=i,a}return a.__extends(e,t),e.prototype.startRpc=function(t){return this.connection.openStream("Listen",t)},e.prototype.onMessage=function(t){this.backoff.reset();var e=this.serializer.fromWatchChange(t),n=this.serializer.versionFromListenResponse(t);return this.listener.onWatchChange(e,n)},e.prototype.watch=function(t){var e={};e.database=this.serializer.encodedDatabaseId,e.addTarget=this.serializer.toTarget(t);var n=this.serializer.toListenRequestLabels(t);n&&(e.labels=n),this.sendRequest(e)},e.prototype.unwatch=function(t){var e={};e.database=this.serializer.encodedDatabaseId,e.removeTarget=t,this.sendRequest(e)},e}(Br),Ur=function(t){function e(e,n,r,i,o){var a=t.call(this,e,sn.WriteStreamConnectionBackoff,sn.WriteStreamIdle,n,r,o)||this;return a.serializer=i,a.handshakeComplete_=!1,a}return a.__extends(e,t),Object.defineProperty(e.prototype,"handshakeComplete",{get:function(){return this.handshakeComplete_},enumerable:!0,configurable:!0}),e.prototype.start=function(){this.handshakeComplete_=!1,t.prototype.start.call(this)},e.prototype.tearDown=function(){this.handshakeComplete_&&this.writeMutations([])},e.prototype.startRpc=function(t){return this.connection.openStream("Write",t)},e.prototype.onMessage=function(t){if(m(!!t.streamToken,"Got a write response without a stream token"),this.lastStreamToken=t.streamToken,this.handshakeComplete_){this.backoff.reset();var e=this.serializer.fromWriteResults(t.writeResults,t.commitTime),n=this.serializer.fromVersion(t.commitTime);return this.listener.onMutationResult(n,e)}return m(!t.writeResults||0===t.writeResults.length,"Got mutation results for handshake"),this.handshakeComplete_=!0,this.listener.onHandshakeComplete()},e.prototype.writeHandshake=function(){m(this.isOpen(),"Writing handshake requires an opened stream"),m(!this.handshakeComplete_,"Handshake already completed");var t={};t.database=this.serializer.encodedDatabaseId,this.sendRequest(t)},e.prototype.writeMutations=function(t){var e=this;m(this.isOpen(),"Writing mutations requires an opened stream"),m(this.handshakeComplete_,"Handshake must be complete before writing mutations"),m(this.lastStreamToken.length>0,"Trying to write mutation without a token");var n={streamToken:this.lastStreamToken,writes:t.map(function(t){return e.serializer.toMutation(t)})};this.sendRequest(n)},e}(Br),jr=function(){function t(t,e,n,r){this.queue=t,this.connection=e,this.credentials=n,this.serializer=r}return t.prototype.newPersistentWriteStream=function(t){return new Ur(this.queue,this.connection,this.credentials,this.serializer,t)},t.prototype.newPersistentWatchStream=function(t){return new Vr(this.queue,this.connection,this.credentials,this.serializer,t)},t.prototype.commit=function(t){var e=this,n={database:this.serializer.encodedDatabaseId,writes:t.map(function(t){return e.serializer.toMutation(t)})};return this.invokeRPC("Commit",n).then(function(t){return e.serializer.fromWriteResults(t.writeResults,t.commitTime)})},t.prototype.lookup=function(t){var e=this,n={database:this.serializer.encodedDatabaseId,documents:t.map(function(t){return e.serializer.toName(t)})};return this.invokeStreamingRPC("BatchGetDocuments",n).then(function(n){var r=be();n.forEach(function(t){var n=e.serializer.fromMaybeDocument(t);r=r.insert(n.key,n)});var i=[];return t.forEach(function(t){var e=r.get(t);m(!!e,"Missing entity in write response for "+t),i.push(e)}),i})},t.prototype.invokeRPC=function(t,e){var n=this;return this.credentials.getToken().then(function(r){return n.connection.invokeRPC(t,e,r)}).catch(function(t){throw t.code===b.UNAUTHENTICATED&&n.credentials.invalidateToken(),t})},t.prototype.invokeStreamingRPC=function(t,e){var n=this;return this.credentials.getToken().then(function(r){return n.connection.invokeStreamingRPC(t,e,r)}).catch(function(t){throw t.code===b.UNAUTHENTICATED&&n.credentials.invalidateToken(),t})},t}(),Wr=function(){function t(t){this.datastore=t,this.readVersions=Se(),this.mutations=[],this.committed=!1}return t.prototype.recordVersion=function(t){var e;if(t instanceof ht)e=t.version;else{if(!(t instanceof lt))throw y("Document in a transaction was a "+t.constructor.name);e=Jt.forDeletedDoc()}var n=this.readVersions.get(t.key);if(null!==n){if(!e.isEqual(n))throw new w(b.ABORTED,"Document version changed between two reads.")}else this.readVersions=this.readVersions.insert(t.key,e)},t.prototype.lookup=function(t){var e=this;return this.committed?Promise.reject("Transaction has already completed."):this.mutations.length>0?Promise.reject("Transactions lookups are invalid after writes."):this.datastore.lookup(t).then(function(t){return t.forEach(function(t){t instanceof lt||t instanceof ht?e.recordVersion(t):y("Document in a transaction was a "+t.constructor.name)}),t})},t.prototype.write=function(t){if(this.committed)throw new w(b.FAILED_PRECONDITION,"Transaction has already completed.");this.mutations=this.mutations.concat(t)},t.prototype.precondition=function(t){var e=this.readVersions.get(t);return e?re.updateTime(e):re.NONE},t.prototype.preconditionForUpdate=function(t){var e=this.readVersions.get(t);if(e&&e.isEqual(Jt.forDeletedDoc()))throw new w(b.FAILED_PRECONDITION,"Can't update a document that doesn't exist.");return e?re.updateTime(e):re.exists(!0)},t.prototype.set=function(t,e){this.write(e.toMutations(t,this.precondition(t)))},t.prototype.update=function(t,e){this.write(e.toMutations(t,this.preconditionForUpdate(t)))},t.prototype.delete=function(t){this.write([new ue(t,this.precondition(t))]),this.readVersions=this.readVersions.insert(t,Jt.forDeletedDoc())},t.prototype.commit=function(){var t=this,e=this.readVersions;return this.mutations.forEach(function(t){e=e.remove(t.key)}),e.isEmpty()?this.datastore.commit(this.mutations).then(function(){t.committed=!0}):Promise.reject(Error("Every document read in a transaction must also be written."))},t}();!function(t){t[t.Unknown=0]="Unknown",t[t.Online=1]="Online",t[t.Offline=2]="Offline"}(Pr||(Pr={})),function(t){t[t.RemoteStore=0]="RemoteStore",t[t.SharedClientState=1]="SharedClientState"}(Mr||(Mr={}));var Kr=function(){function t(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state=Pr.Unknown,this.watchStreamFailures=0,this.onlineStateTimer=null,this.shouldWarnClientIsOffline=!0}return t.prototype.handleWatchStreamStart=function(){var t=this;0===this.watchStreamFailures&&(this.setAndBroadcast(Pr.Unknown),m(null===this.onlineStateTimer,"onlineStateTimer shouldn't be started yet"),this.onlineStateTimer=this.asyncQueue.enqueueAfterDelay(sn.OnlineStateTimeout,1e4,function(){return t.onlineStateTimer=null,m(t.state===Pr.Unknown,"Timer should be canceled if we transitioned to a different state."),t.logClientOfflineWarningIfNecessary("Backend didn't respond within 10 seconds."),t.setAndBroadcast(Pr.Offline),Promise.resolve()}))},t.prototype.handleWatchStreamFailure=function(t){this.state===Pr.Online?(this.setAndBroadcast(Pr.Unknown),m(0===this.watchStreamFailures,"watchStreamFailures must be 0"),m(null===this.onlineStateTimer,"onlineStateTimer must be null")):(this.watchStreamFailures++,this.watchStreamFailures>=1&&(this.clearOnlineStateTimer(),this.logClientOfflineWarningIfNecessary("Connection failed 1 times. Most recent error: "+t.toString()),this.setAndBroadcast(Pr.Offline)))},t.prototype.set=function(t){this.clearOnlineStateTimer(),this.watchStreamFailures=0,t===Pr.Online&&(this.shouldWarnClientIsOffline=!1),this.setAndBroadcast(t)},t.prototype.setAndBroadcast=function(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))},t.prototype.logClientOfflineWarningIfNecessary=function(t){var e="Could not reach Cloud Firestore backend. "+t+"\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";this.shouldWarnClientIsOffline?(d(e),this.shouldWarnClientIsOffline=!1):f("OnlineStateTracker",e)},t.prototype.clearOnlineStateTimer=function(){null!==this.onlineStateTimer&&(this.onlineStateTimer.cancel(),this.onlineStateTimer=null)},t}(),Qr=function(){function t(t,e,n,r){this.localStore=t,this.datastore=e,this.writePipeline=[],this.listenTargets={},this.watchChangeAggregator=null,this.networkEnabled=!1,this.isPrimary=!1,this.onlineStateTracker=new Kr(n,r),this.watchStream=this.datastore.newPersistentWatchStream({onOpen:this.onWatchStreamOpen.bind(this),onClose:this.onWatchStreamClose.bind(this),onWatchChange:this.onWatchStreamChange.bind(this)}),this.writeStream=this.datastore.newPersistentWriteStream({onOpen:this.onWriteStreamOpen.bind(this),onClose:this.onWriteStreamClose.bind(this),onHandshakeComplete:this.onWriteHandshakeComplete.bind(this),onMutationResult:this.onMutationResult.bind(this)})}return t.prototype.start=function(){return this.enableNetwork()},t.prototype.enableNetwork=function(){return a.__awaiter(this,void 0,void 0,function(){var t;return a.__generator(this,function(e){switch(e.label){case 0:return this.networkEnabled=!0,this.canUseNetwork()?(t=this.writeStream,[4,this.localStore.getLastStreamToken()]):[3,3];case 1:return t.lastStreamToken=e.sent(),this.shouldStartWatchStream()?this.startWatchStream():this.onlineStateTracker.set(Pr.Unknown),[4,this.fillWritePipeline()];case 2:e.sent(),e.label=3;case 3:return[2]}})})},t.prototype.disableNetwork=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){switch(t.label){case 0:return this.networkEnabled=!1,[4,this.disableNetworkInternal()];case 1:return t.sent(),this.onlineStateTracker.set(Pr.Offline),[2]}})})},t.prototype.disableNetworkInternal=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){switch(t.label){case 0:return[4,this.writeStream.stop()];case 1:return t.sent(),[4,this.watchStream.stop()];case 2:return t.sent(),this.writePipeline.length>0&&(f("RemoteStore","Stopping write stream with "+this.writePipeline.length+" pending writes"),this.writePipeline=[]),this.cleanUpWatchStreamState(),[2]}})})},t.prototype.shutdown=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){switch(t.label){case 0:return f("RemoteStore","RemoteStore shutting down."),this.networkEnabled=!1,[4,this.disableNetworkInternal()];case 1:return t.sent(),this.onlineStateTracker.set(Pr.Unknown),[2]}})})},t.prototype.listen=function(t){m(!E(this.listenTargets,t.targetId),"listen called with duplicate targetId!"),this.listenTargets[t.targetId]=t,this.shouldStartWatchStream()?this.startWatchStream():this.watchStream.isOpen()&&this.sendWatchRequest(t)},t.prototype.unlisten=function(t){m(E(this.listenTargets,t),"unlisten called without assigned target ID!"),delete this.listenTargets[t],this.watchStream.isOpen()&&this.sendUnwatchRequest(t),_(this.listenTargets)&&(this.watchStream.isOpen()?this.watchStream.markIdle():this.canUseNetwork()&&this.onlineStateTracker.set(Pr.Unknown))},t.prototype.getQueryDataForTarget=function(t){return this.listenTargets[t]||null},t.prototype.getRemoteKeysForTarget=function(t){return this.syncEngine.getRemoteKeysForTarget(t)},t.prototype.sendWatchRequest=function(t){this.watchChangeAggregator.recordPendingTargetRequest(t.targetId),this.watchStream.watch(t)},t.prototype.sendUnwatchRequest=function(t){this.watchChangeAggregator.recordPendingTargetRequest(t),this.watchStream.unwatch(t)},t.prototype.startWatchStream=function(){m(this.shouldStartWatchStream(),"startWatchStream() called when shouldStartWatchStream() is false."),this.watchChangeAggregator=new Ve(this),this.watchStream.start(),this.onlineStateTracker.handleWatchStreamStart()},t.prototype.shouldStartWatchStream=function(){return this.canUseNetwork()&&!this.watchStream.isStarted()&&!_(this.listenTargets)},t.prototype.canUseNetwork=function(){return this.isPrimary&&this.networkEnabled},t.prototype.cleanUpWatchStreamState=function(){this.watchChangeAggregator=null},t.prototype.onWatchStreamOpen=function(){return a.__awaiter(this,void 0,void 0,function(){var t=this;return a.__generator(this,function(e){return C(this.listenTargets,function(e,n){t.sendWatchRequest(n)}),[2]})})},t.prototype.onWatchStreamClose=function(t){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(e){return void 0===t&&m(!this.shouldStartWatchStream(),"Watch stream was stopped gracefully while still needed."),this.cleanUpWatchStreamState(),this.shouldStartWatchStream()?(this.onlineStateTracker.handleWatchStreamFailure(t),this.startWatchStream()):this.onlineStateTracker.set(Pr.Unknown),[2]})})},t.prototype.onWatchStreamChange=function(t,e){return a.__awaiter(this,void 0,void 0,function(){var n;return a.__generator(this,function(r){switch(r.label){case 0:return this.onlineStateTracker.set(Pr.Online),t instanceof Fe&&t.state===xe.Removed&&t.cause?[2,this.handleTargetError(t)]:(t instanceof Le?this.watchChangeAggregator.handleDocumentChange(t):t instanceof qe?this.watchChangeAggregator.handleExistenceFilter(t):(m(t instanceof Fe,"Expected watchChange to be an instance of WatchTargetChange"),this.watchChangeAggregator.handleTargetChange(t)),e.isEqual(Jt.MIN)?[3,3]:[4,this.localStore.getLastRemoteSnapshotVersion()]);case 1:return n=r.sent(),e.compareTo(n)>=0?[4,this.raiseWatchSnapshot(e)]:[3,3];case 2:r.sent(),r.label=3;case 3:return[2]}})})},t.prototype.raiseWatchSnapshot=function(t){var e=this;m(!t.isEqual(Jt.MIN),"Can't raise event for unknown SnapshotVersion");var n=this.watchChangeAggregator.createRemoteEvent(t);return C(n.targetChanges,function(n,r){if(r.resumeToken.length>0){var i=e.listenTargets[n];i&&(e.listenTargets[n]=i.copy({resumeToken:r.resumeToken,snapshotVersion:t}))}}),n.targetMismatches.forEach(function(t){var n=e.listenTargets[t];if(n){e.listenTargets[t]=n.copy({resumeToken:v()}),e.sendUnwatchRequest(t);var r=new Zt(n.query,t,Bt.ExistenceFilterMismatch,n.sequenceNumber);e.sendWatchRequest(r)}}),this.syncEngine.applyRemoteEvent(n)},t.prototype.handleTargetError=function(t){var e=this;m(!!t.cause,"Handling target error without a cause");var n=t.cause,r=Promise.resolve();return t.targetIds.forEach(function(t){r=r.then(function(){return a.__awaiter(e,void 0,void 0,function(){return a.__generator(this,function(e){return E(this.listenTargets,t)?(delete this.listenTargets[t],this.watchChangeAggregator.removeTarget(t),[2,this.syncEngine.rejectListen(t,n)]):[2]})})})}),r},t.prototype.fillWritePipeline=function(){return a.__awaiter(this,void 0,void 0,function(){var t,e;return a.__generator(this,function(n){switch(n.label){case 0:return this.canAddToWritePipeline()?(t=this.writePipeline.length>0?this.writePipeline[this.writePipeline.length-1].batchId:pn,[4,this.localStore.nextMutationBatch(t)]):[3,4];case 1:return null!==(e=n.sent())?[3,2]:(0===this.writePipeline.length&&this.writeStream.markIdle(),[3,4]);case 2:return this.addToWritePipeline(e),[4,this.fillWritePipeline()];case 3:n.sent(),n.label=4;case 4:return this.shouldStartWriteStream()&&this.startWriteStream(),[2]}})})},t.prototype.canAddToWritePipeline=function(){return this.canUseNetwork()&&this.writePipeline.length<10},t.prototype.outstandingWrites=function(){return this.writePipeline.length},t.prototype.addToWritePipeline=function(t){m(this.canAddToWritePipeline(),"addToWritePipeline called when pipeline is full"),this.writePipeline.push(t),this.writeStream.isOpen()&&this.writeStream.handshakeComplete&&this.writeStream.writeMutations(t.mutations)},t.prototype.shouldStartWriteStream=function(){return this.canUseNetwork()&&!this.writeStream.isStarted()&&this.writePipeline.length>0},t.prototype.startWriteStream=function(){m(this.shouldStartWriteStream(),"startWriteStream() called when shouldStartWriteStream() is false."),this.writeStream.start()},t.prototype.onWriteStreamOpen=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){return this.writeStream.writeHandshake(),[2]})})},t.prototype.onWriteHandshakeComplete=function(){var t=this;return this.localStore.setLastStreamToken(this.writeStream.lastStreamToken).then(function(){for(var e=0,n=t.writePipeline;e<n.length;e++){var r=n[e];t.writeStream.writeMutations(r.mutations)}}).catch(function(e){return t.ignoreIfPrimaryLeaseLoss(e)})},t.prototype.ignoreIfPrimaryLeaseLoss=function(t){if(!gr(t))throw t;f("RemoteStore","Unexpectedly lost primary lease")},t.prototype.onMutationResult=function(t,e){var n=this;m(this.writePipeline.length>0,"Got result for empty write pipeline");var r=this.writePipeline.shift(),i=mn.from(r,t,e,this.writeStream.lastStreamToken);return this.syncEngine.applySuccessfulWrite(i).then(function(){return n.fillWritePipeline()})},t.prototype.onWriteStreamClose=function(t){return a.__awaiter(this,void 0,void 0,function(){var e=this;return a.__generator(this,function(n){return void 0===t&&m(!this.shouldStartWriteStream(),"Write stream was stopped gracefully while still needed."),t&&this.writePipeline.length>0?(void 0,[2,(this.writeStream.handshakeComplete?this.handleWriteError(t):this.handleHandshakeError(t)).then(function(){e.shouldStartWriteStream()&&e.startWriteStream()})]):[2]})})},t.prototype.handleHandshakeError=function(t){return a.__awaiter(this,void 0,void 0,function(){var e=this;return a.__generator(this,function(n){return ye(t.code)||t.code===b.ABORTED?(f("RemoteStore","RemoteStore error before completed handshake; resetting stream token: ",this.writeStream.lastStreamToken),this.writeStream.lastStreamToken=v(),[2,this.localStore.setLastStreamToken(v()).catch(function(t){return e.ignoreIfPrimaryLeaseLoss(t)})]):[2]})})},t.prototype.handleWriteError=function(t){return a.__awaiter(this,void 0,void 0,function(){var e,n=this;return a.__generator(this,function(r){return ye(t.code)?(e=this.writePipeline.shift(),this.writeStream.inhibitBackoff(),[2,this.syncEngine.rejectFailedWrite(e.batchId,t).then(function(){return n.fillWritePipeline()})]):[2]})})},t.prototype.createTransaction=function(){return new Wr(this.datastore)},t.prototype.handleCredentialChange=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){switch(t.label){case 0:return this.canUseNetwork()?(f("RemoteStore","RemoteStore restarting streams for new credential"),this.networkEnabled=!1,[4,this.disableNetworkInternal()]):[3,3];case 1:return t.sent(),this.onlineStateTracker.set(Pr.Unknown),[4,this.enableNetwork()];case 2:t.sent(),t.label=3;case 3:return[2]}})})},t.prototype.applyPrimaryState=function(t){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(e){switch(e.label){case 0:return this.isPrimary=t,t&&this.networkEnabled?[4,this.enableNetwork()]:[3,2];case 1:return e.sent(),[3,4];case 2:return t?[3,4]:[4,this.disableNetworkInternal()];case 3:e.sent(),this.onlineStateTracker.set(Pr.Unknown),e.label=4;case 4:return[2]}})})},t}(),Hr=function(){return function(){this.listeners=[]}}(),Gr=function(){function t(t){this.syncEngine=t,this.queries=new Dr(function(t){return t.canonicalId()}),this.onlineState=Pr.Unknown,this.syncEngine.subscribe(this)}return t.prototype.listen=function(t){var e=t.query,n=!1,r=this.queries.get(e);return r||(n=!0,r=new Hr,this.queries.set(e,r)),r.listeners.push(t),t.applyOnlineStateChange(this.onlineState),r.viewSnap&&t.onViewSnapshot(r.viewSnap),n?this.syncEngine.listen(e).then(function(t){return r.targetId=t,t}):Promise.resolve(r.targetId)},t.prototype.unlisten=function(t){return a.__awaiter(this,void 0,void 0,function(){var e,n,r,i;return a.__generator(this,function(o){return e=t.query,n=!1,(r=this.queries.get(e))&&(i=r.listeners.indexOf(t))>=0&&(r.listeners.splice(i,1),n=0===r.listeners.length),n?(this.queries.delete(e),[2,this.syncEngine.unlisten(e)]):[2]})})},t.prototype.onWatchChange=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e],i=r.query,o=this.queries.get(i);if(o){for(var a=0,s=o.listeners;a<s.length;a++){s[a].onViewSnapshot(r)}o.viewSnap=r}}},t.prototype.onWatchError=function(t,e){var n=this.queries.get(t);if(n)for(var r=0,i=n.listeners;r<i.length;r++){i[r].onError(e)}this.queries.delete(t)},t.prototype.onOnlineStateChange=function(t){this.onlineState=t,this.queries.forEach(function(e,n){for(var r=0,i=n.listeners;r<i.length;r++){i[r].applyOnlineStateChange(t)}})},t}(),zr=function(){function t(t,e,n){this.query=t,this.queryObserver=e,this.raisedInitialEvent=!1,this.onlineState=Pr.Unknown,this.options=n||{}}return t.prototype.onViewSnapshot=function(t){if(m(t.docChanges.length>0||t.syncStateChanged,"We got a new snapshot with no changes?"),!this.options.includeMetadataChanges){for(var e=[],n=0,r=t.docChanges;n<r.length;n++){var i=r[n];i.type!==Ae.Metadata&&e.push(i)}t=new Re(t.query,t.docs,t.oldDocs,e,t.mutatedKeys,t.fromCache,t.syncStateChanged,!0)}this.raisedInitialEvent?this.shouldRaiseEvent(t)&&this.queryObserver.next(t):this.shouldRaiseInitialEvent(t,this.onlineState)&&this.raiseInitialEvent(t),this.snap=t},t.prototype.onError=function(t){this.queryObserver.error(t)},t.prototype.applyOnlineStateChange=function(t){this.onlineState=t,this.snap&&!this.raisedInitialEvent&&this.shouldRaiseInitialEvent(this.snap,t)&&this.raiseInitialEvent(this.snap)},t.prototype.shouldRaiseInitialEvent=function(t,e){if(m(!this.raisedInitialEvent,"Determining whether to raise first event but already had first event"),!t.fromCache)return!0;var n=e!==Pr.Offline;return this.options.waitForSyncWhenOnline&&n?(m(t.fromCache,"Waiting for sync, but snapshot is not from cache"),!1):!t.docs.isEmpty()||e===Pr.Offline},t.prototype.shouldRaiseEvent=function(t){if(t.docChanges.length>0)return!0;var e=this.snap&&this.snap.hasPendingWrites!==t.hasPendingWrites;return!(!t.syncStateChanged&&!e)&&!0===this.options.includeMetadataChanges},t.prototype.raiseInitialEvent=function(t){m(!this.raisedInitialEvent,"Trying to raise initial events for second time"),t=Re.fromInitialDocuments(t.query,t.docs,t.mutatedKeys,t.fromCache),this.raisedInitialEvent=!0,this.queryObserver.next(t)},t}(),Xr=function(){function t(t,e,n){this.targetId=t,this.addedKeys=e,this.removedKeys=n}return t.fromSnapshot=function(e,n){for(var r=Ie(),i=Ie(),o=0,a=n.docChanges;o<a.length;o++){var s=a[o];switch(s.type){case Ae.Added:r=r.add(s.doc.key);break;case Ae.Removed:i=i.add(s.doc.key)}}return new t(e,r,i)},t}(),Yr=function(){return function(t){this.key=t}}(),Jr=function(){return function(t){this.key=t}}(),$r=function(){function t(t,e){this.query=t,this._syncedDocuments=e,this.syncState=null,this.current=!1,this.limboDocuments=Ie(),this.mutatedKeys=Ie(),this.documentSet=new ke(t.docComparator.bind(t))}return Object.defineProperty(t.prototype,"syncedDocuments",{get:function(){return this._syncedDocuments},enumerable:!0,configurable:!0}),t.prototype.computeDocChanges=function(t,e){var n=this,r=e?e.changeSet:new Oe,i=e?e.documentSet:this.documentSet,o=e?e.mutatedKeys:this.mutatedKeys,a=i,s=!1,u=this.query.hasLimit()&&i.size===this.query.limit?i.last():null;if(t.inorderTraversal(function(t,e){var c=i.get(t),h=e instanceof ht?e:null;h&&(m(t.isEqual(h.key),"Mismatching keys found in document changes: "+t+" != "+h.key),h=n.query.matches(h)?h:null);var l=!!c&&n.mutatedKeys.has(c.key),f=!!h&&(h.hasLocalMutations||n.mutatedKeys.has(h.key)&&h.hasCommittedMutations),d=!1;c&&h?c.data.isEqual(h.data)?l!==f&&(r.track({type:Ae.Metadata,doc:h}),d=!0):n.shouldWaitForSyncedDocument(c,h)||(r.track({type:Ae.Modified,doc:h}),d=!0,u&&n.query.docComparator(h,u)>0&&(s=!0)):!c&&h?(r.track({type:Ae.Added,doc:h}),d=!0):c&&!h&&(r.track({type:Ae.Removed,doc:c}),d=!0,u&&(s=!0));d&&(h?(a=a.add(h),o=f?o.add(t):o.delete(t)):(a=a.delete(t),o=o.delete(t)))}),this.query.hasLimit())for(;a.size>this.query.limit;){var c=a.last();a=a.delete(c.key),o=o.delete(c.key),r.track({type:Ae.Removed,doc:c})}return m(!s||!e,"View was refilled using docs that themselves needed refilling."),{documentSet:a,changeSet:r,needsRefill:s,mutatedKeys:o}},t.prototype.shouldWaitForSyncedDocument=function(t,e){return t.hasLocalMutations&&e.hasCommittedMutations&&!e.hasLocalMutations},t.prototype.applyChanges=function(t,e,n){var r=this;m(!t.needsRefill,"Cannot apply changes that need a refill");var i=this.documentSet;this.documentSet=t.documentSet,this.mutatedKeys=t.mutatedKeys;var o=t.changeSet.getChanges();o.sort(function(t,e){return function(t,e){var n=function(t){switch(t){case Ae.Added:return 1;case Ae.Modified:case Ae.Metadata:return 2;case Ae.Removed:return 0;default:return y("Unknown ChangeType: "+t)}};return n(t)-n(e)}(t.type,e.type)||r.query.docComparator(t.doc,e.doc)}),this.applyTargetChange(n);var a=e?this.updateLimboDocuments():[],s=0===this.limboDocuments.size&&this.current?Ne.Synced:Ne.Local,u=s!==this.syncState;return this.syncState=s,0!==o.length||u?{snapshot:new Re(this.query,t.documentSet,i,o,t.mutatedKeys,s===Ne.Local,u,!1),limboChanges:a}:{limboChanges:a}},t.prototype.applyOnlineStateChange=function(t){return this.current&&t===Pr.Offline?(this.current=!1,this.applyChanges({documentSet:this.documentSet,changeSet:new Oe,mutatedKeys:this.mutatedKeys,needsRefill:!1},!1)):{limboChanges:[]}},t.prototype.shouldBeInLimbo=function(t){return!this._syncedDocuments.has(t)&&(!!this.documentSet.has(t)&&!this.documentSet.get(t).hasLocalMutations)},t.prototype.applyTargetChange=function(t){var e=this;t&&(t.addedDocuments.forEach(function(t){return e._syncedDocuments=e._syncedDocuments.add(t)}),t.modifiedDocuments.forEach(function(t){return m(e._syncedDocuments.has(t),"Modified document "+t+" not found in view.")}),t.removedDocuments.forEach(function(t){return e._syncedDocuments=e._syncedDocuments.delete(t)}),this.current=t.current)},t.prototype.updateLimboDocuments=function(){var t=this;if(!this.current)return[];var e=this.limboDocuments;this.limboDocuments=Ie(),this.documentSet.forEach(function(e){t.shouldBeInLimbo(e.key)&&(t.limboDocuments=t.limboDocuments.add(e.key))});var n=[];return e.forEach(function(e){t.limboDocuments.has(e)||n.push(new Jr(e))}),this.limboDocuments.forEach(function(t){e.has(t)||n.push(new Yr(t))}),n},t.prototype.synchronizeWithPersistedState=function(t,e){this._syncedDocuments=e,this.limboDocuments=Ie();var n=this.computeDocChanges(t);return this.applyChanges(n,!0)},t.prototype.computeInitialSnapshot=function(){return Re.fromInitialDocuments(this.query,this.documentSet,this.mutatedKeys,this.syncState===Ne.Local)},t}();var Zr=function(){return function(t,e,n){this.query=t,this.targetId=e,this.view=n}}(),ti=function(){return function(t){this.key=t}}(),ei=function(){function t(t,e,n,r){this.localStore=t,this.remoteStore=e,this.sharedClientState=n,this.currentUser=r,this.syncEngineListener=null,this.queryViewsByQuery=new Dr(function(t){return t.canonicalId()}),this.queryViewsByTarget={},this.limboTargetsByKey=new dt(ut.comparator),this.limboResolutionsByTarget={},this.limboDocumentRefs=new Er,this.mutationUserCallbacks={},this.limboTargetIdGenerator=Xn.forSyncEngine(),this.isPrimary=void 0,this.onlineState=Pr.Unknown}return Object.defineProperty(t.prototype,"isPrimaryClient",{get:function(){return!0===this.isPrimary},enumerable:!0,configurable:!0}),t.prototype.subscribe=function(t){m(null!==t,"SyncEngine listener cannot be null"),m(null===this.syncEngineListener,"SyncEngine already has a subscriber."),this.syncEngineListener=t},t.prototype.listen=function(t){return a.__awaiter(this,void 0,void 0,function(){var e,n,r,i,o;return a.__generator(this,function(a){switch(a.label){case 0:return this.assertSubscribed("listen()"),(r=this.queryViewsByQuery.get(t))?(e=r.targetId,this.sharedClientState.addLocalQueryTarget(e),n=r.view.computeInitialSnapshot(),[3,4]):[3,1];case 1:return[4,this.localStore.allocateQuery(t)];case 2:return i=a.sent(),o=this.sharedClientState.addLocalQueryTarget(i.targetId),e=i.targetId,[4,this.initializeViewAndComputeSnapshot(i,"current"===o)];case 3:n=a.sent(),this.isPrimary&&this.remoteStore.listen(i),a.label=4;case 4:return this.syncEngineListener.onWatchChange([n]),[2,e]}})})},t.prototype.initializeViewAndComputeSnapshot=function(t,e){var n=this,r=t.query;return this.localStore.executeQuery(r).then(function(i){return n.localStore.remoteDocumentKeys(t.targetId).then(function(o){var a=new $r(r,o),s=a.computeDocChanges(i),u=Me.createSynthesizedTargetChangeForCurrentChange(t.targetId,e&&n.onlineState!==Pr.Offline),c=a.applyChanges(s,!0===n.isPrimary,u);m(0===c.limboChanges.length,"View returned limbo docs before target ack from the server."),m(!!c.snapshot,"applyChanges for new view should always return a snapshot");var h=new Zr(r,t.targetId,a);return n.queryViewsByQuery.set(r,h),n.queryViewsByTarget[t.targetId]=h,c.snapshot})})},t.prototype.synchronizeViewAndComputeSnapshot=function(t){var e=this;return this.localStore.executeQuery(t.query).then(function(n){return e.localStore.remoteDocumentKeys(t.targetId).then(function(r){return a.__awaiter(e,void 0,void 0,function(){var e;return a.__generator(this,function(i){switch(i.label){case 0:return e=t.view.synchronizeWithPersistedState(n,r),this.isPrimary?[4,this.updateTrackedLimbos(t.targetId,e.limboChanges)]:[3,2];case 1:i.sent(),i.label=2;case 2:return[2,e]}})})})})},t.prototype.unlisten=function(t){return a.__awaiter(this,void 0,void 0,function(){var e,n=this;return a.__generator(this,function(r){switch(r.label){case 0:return this.assertSubscribed("unlisten()"),m(!!(e=this.queryViewsByQuery.get(t)),"Trying to unlisten on query not found:"+t),this.isPrimary?(this.sharedClientState.removeLocalQueryTarget(e.targetId),this.sharedClientState.isActiveQueryTarget(e.targetId)?[3,2]:[4,this.localStore.releaseQuery(t,!1).then(function(){return n.sharedClientState.clearQueryState(e.targetId),n.remoteStore.unlisten(e.targetId),n.removeAndCleanupQuery(e)}).then(function(){return n.localStore.collectGarbage()}).catch(function(t){return n.ignoreIfPrimaryLeaseLoss(t)})]):[3,3];case 1:r.sent(),r.label=2;case 2:return[3,6];case 3:return[4,this.removeAndCleanupQuery(e)];case 4:return r.sent(),[4,this.localStore.releaseQuery(t,!0)];case 5:r.sent(),r.label=6;case 6:return[2]}})})},t.prototype.write=function(t,e){var n=this;return this.assertSubscribed("write()"),this.localStore.localWrite(t).then(function(t){return n.sharedClientState.addPendingMutation(t.batchId),n.addMutationCallback(t.batchId,e),n.emitNewSnapsAndNotifyLocalStore(t.changes)}).then(function(){return n.remoteStore.fillWritePipeline()})},t.prototype.wrapUpdateFunctionError=function(t){return t},t.prototype.runTransaction=function(t,e){var n=this;void 0===e&&(e=5),m(e>=0,"Got negative number of retries for transaction.");var r=this.remoteStore.createTransaction();return function(){try{var e=t(r);return!qt(e)&&e.catch&&e.then?e.catch(function(t){return Promise.reject(n.wrapUpdateFunctionError(t))}):Promise.reject(Error("Transaction callback must return a Promise"))}catch(t){return Promise.reject(n.wrapUpdateFunctionError(t))}}().then(function(i){return r.commit().then(function(){return i}).catch(function(r){return 0===e?Promise.reject(r):n.runTransaction(t,e-1)})})},t.prototype.applyRemoteEvent=function(t){var e=this;return this.assertSubscribed("applyRemoteEvent()"),this.localStore.applyRemoteEvent(t).then(function(n){return I(t.targetChanges,function(t,n){var r=e.limboResolutionsByTarget[t];r&&(m(n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size<=1,"Limbo resolution for single document contains multiple changes."),n.addedDocuments.size>0?r.receivedDocument=!0:n.modifiedDocuments.size>0?m(r.receivedDocument,"Received change for limbo target document without add."):n.removedDocuments.size>0&&(m(r.receivedDocument,"Received remove for limbo target document without add."),r.receivedDocument=!1))}),e.emitNewSnapsAndNotifyLocalStore(n,t)}).catch(function(t){return e.ignoreIfPrimaryLeaseLoss(t)})},t.prototype.applyOnlineStateChange=function(t,e){if(this.isPrimary&&e===Mr.RemoteStore||!this.isPrimary&&e===Mr.SharedClientState){var n=[];this.queryViewsByQuery.forEach(function(e,r){var i=r.view.applyOnlineStateChange(t);m(0===i.limboChanges.length,"OnlineState should not affect limbo documents."),i.snapshot&&n.push(i.snapshot)}),this.syncEngineListener.onOnlineStateChange(t),this.syncEngineListener.onWatchChange(n),this.onlineState=t,this.isPrimary&&this.sharedClientState.setOnlineState(t)}},t.prototype.rejectListen=function(t,e){return a.__awaiter(this,void 0,void 0,function(){var n,r,i,o,s,u,c=this;return a.__generator(this,function(a){switch(a.label){case 0:return this.assertSubscribed("rejectListens()"),this.sharedClientState.updateQueryState(t,"rejected",e),n=this.limboResolutionsByTarget[t],(r=n&&n.key)?(this.limboTargetsByKey=this.limboTargetsByKey.remove(r),delete this.limboResolutionsByTarget[t],i=(i=new dt(ut.comparator)).insert(r,new lt(r,Jt.forDeletedDoc())),o=Ie().add(r),s=new Pe(Jt.MIN,{},new ge(Q),i,o),[2,this.applyRemoteEvent(s)]):[3,1];case 1:return m(!!(u=this.queryViewsByTarget[t]),"Unknown targetId: "+t),[4,this.localStore.releaseQuery(u.query,!1).then(function(){return c.removeAndCleanupQuery(u)}).catch(function(t){return c.ignoreIfPrimaryLeaseLoss(t)})];case 2:a.sent(),this.syncEngineListener.onWatchError(u.query,e),a.label=3;case 3:return[2]}})})},t.prototype.applyBatchState=function(t,e,n){return a.__awaiter(this,void 0,void 0,function(){var r;return a.__generator(this,function(i){switch(i.label){case 0:return this.assertSubscribed("applyBatchState()"),[4,this.localStore.lookupMutationDocuments(t)];case 1:return null===(r=i.sent())?(f("SyncEngine","Cannot apply mutation batch with id: "+t),[2]):"pending"!==e?[3,3]:[4,this.remoteStore.fillWritePipeline()];case 2:return i.sent(),[3,4];case 3:"acknowledged"===e||"rejected"===e?(this.processUserCallback(t,n||null),this.localStore.removeCachedMutationBatchMetadata(t)):y("Unknown batchState: "+e),i.label=4;case 4:return[4,this.emitNewSnapsAndNotifyLocalStore(r)];case 5:return i.sent(),[2]}})})},t.prototype.applySuccessfulWrite=function(t){var e=this;this.assertSubscribed("applySuccessfulWrite()");var n=t.batch.batchId;return this.processUserCallback(n,null),this.localStore.acknowledgeBatch(t).then(function(t){return e.sharedClientState.updateMutationState(n,"acknowledged"),e.emitNewSnapsAndNotifyLocalStore(t)}).catch(function(t){return e.ignoreIfPrimaryLeaseLoss(t)})},t.prototype.rejectFailedWrite=function(t,e){var n=this;return this.assertSubscribed("rejectFailedWrite()"),this.processUserCallback(t,e),this.localStore.rejectBatch(t).then(function(r){return n.sharedClientState.updateMutationState(t,"rejected",e),n.emitNewSnapsAndNotifyLocalStore(r)}).catch(function(t){return n.ignoreIfPrimaryLeaseLoss(t)})},t.prototype.addMutationCallback=function(t,e){var n=this.mutationUserCallbacks[this.currentUser.toKey()];n||(n=new dt(Q)),n=n.insert(t,e),this.mutationUserCallbacks[this.currentUser.toKey()]=n},t.prototype.processUserCallback=function(t,e){var n=this.mutationUserCallbacks[this.currentUser.toKey()];if(n){var r=n.get(t);r&&(m(t===n.minKey(),"Mutation callbacks processed out-of-order?"),e?r.reject(e):r.resolve(),n=n.remove(t)),this.mutationUserCallbacks[this.currentUser.toKey()]=n}},t.prototype.removeAndCleanupQuery=function(t){return a.__awaiter(this,void 0,void 0,function(){var e,n=this;return a.__generator(this,function(r){switch(r.label){case 0:return this.sharedClientState.removeLocalQueryTarget(t.targetId),this.queryViewsByQuery.delete(t.query),delete this.queryViewsByTarget[t.targetId],this.isPrimary?(e=this.limboDocumentRefs.referencesForId(t.targetId),this.limboDocumentRefs.removeReferencesForId(t.targetId),[4,un.forEach(e.toArray(),function(t){return n.limboDocumentRefs.containsKey(null,t).next(function(e){e||n.removeLimboTarget(t)})}).toPromise()]):[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.removeLimboTarget=function(t){var e=this.limboTargetsByKey.get(t);null!==e&&(this.remoteStore.unlisten(e),this.limboTargetsByKey=this.limboTargetsByKey.remove(t),delete this.limboResolutionsByTarget[e])},t.prototype.updateTrackedLimbos=function(t,e){return a.__awaiter(this,void 0,void 0,function(){var n,r,i,o,s,u=this;return a.__generator(this,function(c){switch(c.label){case 0:n=function(e){return a.__generator(this,function(n){switch(n.label){case 0:return e instanceof Yr?(r.limboDocumentRefs.addReference(e.key,t),r.trackLimboChange(e),[3,4]):[3,1];case 1:return e instanceof Jr?(f("SyncEngine","Document no longer in limbo: "+e.key),r.limboDocumentRefs.removeReference(e.key,t),[4,r.limboDocumentRefs.containsKey(null,e.key).next(function(t){t||u.removeLimboTarget(e.key)}).toPromise()]):[3,3];case 2:return n.sent(),[3,4];case 3:y("Unknown limbo change: "+JSON.stringify(e)),n.label=4;case 4:return[2]}})},r=this,i=0,o=e,c.label=1;case 1:return i<o.length?(s=o[i],[5,n(s)]):[3,4];case 2:c.sent(),c.label=3;case 3:return i++,[3,1];case 4:return[2]}})})},t.prototype.trackLimboChange=function(t){var e=t.key;if(!this.limboTargetsByKey.get(e)){f("SyncEngine","New document in limbo: "+e);var n=this.limboTargetIdGenerator.next(),r=Vt.atPath(e.path);this.limboResolutionsByTarget[n]=new ti(e),this.remoteStore.listen(new Zt(r,n,Bt.LimboResolution,hn.INVALID)),this.limboTargetsByKey=this.limboTargetsByKey.insert(e,n)}},t.prototype.currentLimboDocs=function(){return this.limboTargetsByKey},t.prototype.emitNewSnapsAndNotifyLocalStore=function(t,e){return a.__awaiter(this,void 0,void 0,function(){var n,r,i,o=this;return a.__generator(this,function(a){switch(a.label){case 0:return n=[],r=[],i=[],this.queryViewsByQuery.forEach(function(a,s){i.push(Promise.resolve().then(function(){var e=s.view.computeDocChanges(t);return e.needsRefill?o.localStore.executeQuery(s.query).then(function(t){return s.view.computeDocChanges(t,e)}):e}).then(function(t){var i=e&&e.targetChanges[s.targetId],a=s.view.applyChanges(t,!0===o.isPrimary,i);return o.updateTrackedLimbos(s.targetId,a.limboChanges).then(function(){if(a.snapshot){o.isPrimary&&o.sharedClientState.updateQueryState(s.targetId,a.snapshot.fromCache?"not-current":"current"),n.push(a.snapshot);var t=Xr.fromSnapshot(s.targetId,a.snapshot);r.push(t)}})}))}),[4,Promise.all(i)];case 1:return a.sent(),this.syncEngineListener.onWatchChange(n),this.localStore.notifyLocalViewChanges(r),this.isPrimary?[4,this.localStore.collectGarbage().catch(function(t){return o.ignoreIfPrimaryLeaseLoss(t)})]:[3,3];case 2:a.sent(),a.label=3;case 3:return[2]}})})},t.prototype.ignoreIfPrimaryLeaseLoss=function(t){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(e){if(!gr(t))throw t;return f("SyncEngine","Unexpectedly lost primary lease"),[2]})})},t.prototype.assertSubscribed=function(t){m(null!==this.syncEngineListener,"Trying to call "+t+" before calling subscribe().")},t.prototype.handleCredentialChange=function(t){return a.__awaiter(this,void 0,void 0,function(){var e,n;return a.__generator(this,function(r){switch(r.label){case 0:return e=!this.currentUser.isEqual(t),this.currentUser=t,e?[4,this.localStore.handleUserChange(t)]:[3,3];case 1:return n=r.sent(),this.sharedClientState.handleUserChange(t,n.removedBatchIds,n.addedBatchIds),[4,this.emitNewSnapsAndNotifyLocalStore(n.affectedDocuments)];case 2:r.sent(),r.label=3;case 3:return[4,this.remoteStore.handleCredentialChange()];case 4:return r.sent(),[2]}})})},t.prototype.applyPrimaryState=function(t){return a.__awaiter(this,void 0,void 0,function(){var e,n,r,i,o,s,u,c=this;return a.__generator(this,function(a){switch(a.label){case 0:return!0!==t||!0===this.isPrimary?[3,3]:(this.isPrimary=!0,[4,this.remoteStore.applyPrimaryState(!0)]);case 1:return a.sent(),e=this.sharedClientState.getAllActiveQueryTargets(),[4,this.synchronizeQueryViewsAndRaiseSnapshots(e.toArray())];case 2:for(n=a.sent(),r=0,i=n;r<i.length;r++)o=i[r],this.remoteStore.listen(o);return[3,7];case 3:return!1!==t||!1===this.isPrimary?[3,7]:(this.isPrimary=!1,s=[],u=Promise.resolve(),C(this.queryViewsByTarget,function(t,e){c.sharedClientState.isLocalQueryTarget(t)?s.push(t):u=u.then(function(){return c.unlisten(e.query)}),c.remoteStore.unlisten(e.targetId)}),[4,u]);case 4:return a.sent(),[4,this.synchronizeQueryViewsAndRaiseSnapshots(s)];case 5:return a.sent(),this.resetLimboDocuments(),[4,this.remoteStore.applyPrimaryState(!1)];case 6:a.sent(),a.label=7;case 7:return[2]}})})},t.prototype.resetLimboDocuments=function(){var t=this;C(this.limboResolutionsByTarget,function(e){t.remoteStore.unlisten(e)}),this.limboResolutionsByTarget=[],this.limboTargetsByKey=new dt(ut.comparator)},t.prototype.synchronizeQueryViewsAndRaiseSnapshots=function(t){for(var e=this,n=Promise.resolve(),r=[],i=[],o=function(t){n=n.then(function(){return a.__awaiter(e,void 0,void 0,function(){var e,n,o,s;return a.__generator(this,function(a){switch(a.label){case 0:return(n=this.queryViewsByTarget[t])?[4,this.localStore.releaseQuery(n.query,!0)]:[3,4];case 1:return a.sent(),[4,this.localStore.allocateQuery(n.query)];case 2:return e=a.sent(),[4,this.synchronizeViewAndComputeSnapshot(n)];case 3:return(o=a.sent()).snapshot&&i.push(o.snapshot),[3,8];case 4:return m(!0===this.isPrimary,"A secondary tab should never have an active query without an active view."),[4,this.localStore.getQueryForTarget(t)];case 5:return m(!!(s=a.sent()),"Query data for target "+t+" not found"),[4,this.localStore.allocateQuery(s)];case 6:return e=a.sent(),[4,this.initializeViewAndComputeSnapshot(e,!1)];case 7:a.sent(),a.label=8;case 8:return r.push(e),[2]}})})})},s=0,u=t;s<u.length;s++){o(u[s])}return n.then(function(){return e.syncEngineListener.onWatchChange(i),r})},t.prototype.getActiveClients=function(){return this.localStore.getActiveClients()},t.prototype.applyTargetState=function(t,e,n){return a.__awaiter(this,void 0,void 0,function(){var r,i,o;return a.__generator(this,function(a){switch(a.label){case 0:if(this.isPrimary)return f("SyncEngine","Ignoring unexpected query state notification."),[2];if(!this.queryViewsByTarget[t])return[3,7];switch(e){case"current":case"not-current":return[3,1];case"rejected":return[3,3]}return[3,6];case 1:return[4,this.localStore.getNewDocumentChanges()];case 2:return r=a.sent(),i=Pe.createSynthesizedRemoteEventForCurrentChange(t,"current"===e),[2,this.emitNewSnapsAndNotifyLocalStore(r,i)];case 3:return o=this.queryViewsByTarget[t],[4,this.removeAndCleanupQuery(o)];case 4:return a.sent(),[4,this.localStore.releaseQuery(o.query,!0)];case 5:return a.sent(),this.syncEngineListener.onWatchError(o.query,n),[3,7];case 6:y("Unexpected target state: "+e),a.label=7;case 7:return[2]}})})},t.prototype.applyActiveTargetsChange=function(t,e){return a.__awaiter(this,void 0,void 0,function(){var n,r,i,o,s,u,c,h,l,f=this;return a.__generator(this,function(d){switch(d.label){case 0:if(!this.isPrimary)return[2];n=0,r=t,d.label=1;case 1:return n<r.length?(l=r[n],m(!this.queryViewsByTarget[l],"Trying to add an already active target"),[4,this.localStore.getQueryForTarget(l)]):[3,6];case 2:return m(!!(i=d.sent()),"Query data for active target "+l+" not found"),[4,this.localStore.allocateQuery(i)];case 3:return o=d.sent(),[4,this.initializeViewAndComputeSnapshot(o,!1)];case 4:d.sent(),this.remoteStore.listen(o),d.label=5;case 5:return n++,[3,1];case 6:s=function(t){var e;return a.__generator(this,function(n){switch(n.label){case 0:return(e=u.queryViewsByTarget[t])?[4,u.localStore.releaseQuery(e.query,!1).then(function(){return f.remoteStore.unlisten(t),f.removeAndCleanupQuery(e)}).catch(function(t){return f.ignoreIfPrimaryLeaseLoss(t)})]:[3,2];case 1:n.sent(),n.label=2;case 2:return[2]}})},u=this,c=0,h=e,d.label=7;case 7:return c<h.length?(l=h[c],[5,s(l)]):[3,10];case 8:d.sent(),d.label=9;case 9:return c++,[3,7];case 10:return[2]}})})},t.prototype.enableNetwork=function(){return this.localStore.setNetworkEnabled(!0),this.remoteStore.enableNetwork()},t.prototype.disableNetwork=function(){return this.localStore.setNetworkEnabled(!1),this.remoteStore.disableNetwork()},t.prototype.getRemoteKeysForTarget=function(t){var e=this.limboResolutionsByTarget[t];return e&&e.receivedDocument?Ie().add(e.key):this.queryViewsByTarget[t]?this.queryViewsByTarget[t].view.syncedDocuments:Ie()},t}(),ni=function(){function t(t){this.uid=t}return t.prototype.isAuthenticated=function(){return null!=this.uid},t.prototype.toKey=function(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"},t.prototype.isEqual=function(t){return t.uid===this.uid},t.UNAUTHENTICATED=new t(null),t.GOOGLE_CREDENTIALS=new t("google-credentials-uid"),t.FIRST_PARTY=new t("first-party-uid"),t}(),ri="SharedClientState",ii="firestore_clients",oi="firestore_mutations",ai="firestore_targets",si="firestore_online_state",ui="firestore_sequence_number",ci=function(){function t(t,e,n,r){this.user=t,this.batchId=e,this.state=n,this.error=r,m(void 0!==r==("rejected"===n),"MutationMetadata must contain an error iff state is 'rejected'")}return t.fromWebStorageEntry=function(e,n,r){var i=JSON.parse(r),o="object"==typeof i&&-1!==["pending","acknowledged","rejected"].indexOf(i.state)&&(void 0===i.error||"object"==typeof i.error),a=void 0;return o&&i.error&&(o="string"==typeof i.error.message&&"string"==typeof i.error.code)&&(a=new w(i.error.code,i.error.message)),o?new t(e,n,i.state,a):(d(ri,"Failed to parse mutation state for ID '"+n+"': "+r),null)},t.prototype.toWebStorageJSON=function(){var t={state:this.state};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),hi=function(){function t(t,e,n){this.targetId=t,this.state=e,this.error=n,m(void 0!==n==("rejected"===e),"QueryTargetMetadata must contain an error iff state is 'rejected'")}return t.fromWebStorageEntry=function(e,n){var r=JSON.parse(n),i="object"==typeof r&&-1!==["not-current","current","rejected"].indexOf(r.state)&&(void 0===r.error||"object"==typeof r.error),o=void 0;return i&&r.error&&(i="string"==typeof r.error.message&&"string"==typeof r.error.code)&&(o=new w(r.error.code,r.error.message)),i?new t(e,r.state,o):(d(ri,"Failed to parse target state for ID '"+e+"': "+n),null)},t.prototype.toWebStorageJSON=function(){var t={state:this.state};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),li=function(){function t(t,e){this.clientId=t,this.activeTargetIds=e}return t.fromWebStorageEntry=function(e,n){for(var r=JSON.parse(n),i="object"==typeof r&&r.activeTargetIds instanceof Array,o=De(),a=0;i&&a<r.activeTargetIds.length;++a)i=Ft(r.activeTargetIds[a]),o=o.add(r.activeTargetIds[a]);return i?new t(e,o):(d(ri,"Failed to parse client data for instance '"+e+"': "+n),null)},t}(),fi=function(){function t(t,e){this.clientId=t,this.onlineState=e}return t.fromWebStorageEntry=function(e){var n=JSON.parse(e);return"object"==typeof n&&void 0!==Pr[n.onlineState]&&"string"==typeof n.clientId?new t(n.clientId,Pr[n.onlineState]):(d(ri,"Failed to parse online state: "+e),null)},t}(),di=function(){function t(){this.activeTargetIds=De()}return t.prototype.addQueryTarget=function(t){m(!this.activeTargetIds.has(t),"Target with ID '"+t+"' already active."),this.activeTargetIds=this.activeTargetIds.add(t)},t.prototype.removeQueryTarget=function(t){this.activeTargetIds=this.activeTargetIds.delete(t)},t.prototype.toWebStorageJSON=function(){var t={activeTargetIds:this.activeTargetIds.toArray()};return JSON.stringify(t)},t}(),pi=function(){function t(e,n,r,i,o){if(this.queue=e,this.platform=n,this.localClientId=i,this.syncEngine=null,this.onlineStateHandler=null,this.sequenceNumberHandler=null,this.activeClients={},this.storageListener=this.handleWebStorageEvent.bind(this),this.started=!1,this.earlyEvents=[],!t.isAvailable(this.platform))throw new w(b.UNIMPLEMENTED,"LocalStorage is not available on this platform.");this.escapedPersistenceKey=r.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),this.storage=this.platform.window.localStorage,this.currentUser=o,this.localClientStorageKey=this.toWebStorageClientStateKey(this.localClientId),this.sequenceNumberKey=ui+"_"+this.escapedPersistenceKey,this.activeClients[this.localClientId]=new di,this.clientStateKeyRe=new RegExp("^"+ii+"_"+this.escapedPersistenceKey+"_([^_]*)$"),this.mutationBatchKeyRe=new RegExp("^"+oi+"_"+this.escapedPersistenceKey+"_(\\d+)(?:_(.*))?$"),this.queryTargetKeyRe=new RegExp("^"+ai+"_"+this.escapedPersistenceKey+"_(\\d+)$"),this.onlineStateKey=si+"_"+this.escapedPersistenceKey,this.platform.window.addEventListener("storage",this.storageListener)}return t.isAvailable=function(t){return!(!t.window||null==t.window.localStorage)},t.prototype.start=function(){return a.__awaiter(this,void 0,void 0,function(){var t,e,n,r,i,o,s,u,c,h,l,f=this;return a.__generator(this,function(a){switch(a.label){case 0:return m(!this.started,"WebStorageSharedClientState already started"),m(null!==this.syncEngine,"syncEngine property must be set before calling start()"),m(null!==this.onlineStateHandler,"onlineStateHandler property must be set before calling start()"),[4,this.syncEngine.getActiveClients()];case 1:for(t=a.sent(),e=0,n=t;e<n.length;e++)(r=n[e])!==this.localClientId&&(i=this.getItem(this.toWebStorageClientStateKey(r)))&&(o=li.fromWebStorageEntry(r,i))&&(this.activeClients[o.clientId]=o);for(this.persistClientState(),(s=this.storage.getItem(this.onlineStateKey))&&(u=this.fromWebStorageOnlineState(s))&&this.handleOnlineStateEvent(u),c=0,h=this.earlyEvents;c<h.length;c++)l=h[c],this.handleWebStorageEvent(l);return this.earlyEvents=[],this.platform.window.addEventListener("unload",function(){return f.shutdown()}),this.started=!0,[2]}})})},t.prototype.writeSequenceNumber=function(t){this.setItem(this.sequenceNumberKey,JSON.stringify(t))},t.prototype.getAllActiveQueryTargets=function(){var t=De();return I(this.activeClients,function(e,n){t=t.unionWith(n.activeTargetIds)}),t},t.prototype.isActiveQueryTarget=function(t){for(var e in this.activeClients)if(this.activeClients.hasOwnProperty(e)&&this.activeClients[e].activeTargetIds.has(t))return!0;return!1},t.prototype.addPendingMutation=function(t){this.persistMutationState(t,"pending")},t.prototype.updateMutationState=function(t,e,n){this.persistMutationState(t,e,n),this.removeMutationState(t)},t.prototype.addLocalQueryTarget=function(t){var e="not-current";if(this.isActiveQueryTarget(t)){var n=this.storage.getItem(this.toWebStorageQueryTargetMetadataKey(t));if(n){var r=hi.fromWebStorageEntry(t,n);r&&(e=r.state)}}return this.localClientState.addQueryTarget(t),this.persistClientState(),e},t.prototype.removeLocalQueryTarget=function(t){this.localClientState.removeQueryTarget(t),this.persistClientState()},t.prototype.isLocalQueryTarget=function(t){return this.localClientState.activeTargetIds.has(t)},t.prototype.clearQueryState=function(t){this.removeItem(this.toWebStorageQueryTargetMetadataKey(t))},t.prototype.updateQueryState=function(t,e,n){this.persistQueryTargetState(t,e,n)},t.prototype.handleUserChange=function(t,e,n){var r=this;e.forEach(function(t){r.removeMutationState(t)}),this.currentUser=t,n.forEach(function(t){r.addPendingMutation(t)})},t.prototype.setOnlineState=function(t){this.persistOnlineState(t)},t.prototype.shutdown=function(){this.started&&(this.platform.window.removeEventListener("storage",this.storageListener),this.removeItem(this.localClientStorageKey),this.started=!1)},t.prototype.getItem=function(t){var e=this.storage.getItem(t);return f(ri,"READ",t,e),e},t.prototype.setItem=function(t,e){f(ri,"SET",t,e),this.storage.setItem(t,e)},t.prototype.removeItem=function(t){f(ri,"REMOVE",t),this.storage.removeItem(t)},t.prototype.handleWebStorageEvent=function(t){var e=this;if(t.storageArea===this.storage){if(f(ri,"EVENT",t.key,t.newValue),t.key===this.localClientStorageKey)return void d("Received WebStorage notification for local change. Another client might have garbage-collected our state");this.queue.enqueueAndForget(function(){return a.__awaiter(e,void 0,void 0,function(){var e,n,r,i,o,s;return a.__generator(this,function(a){if(!this.started)return this.earlyEvents.push(t),[2];if(null===t.key)return[2];if(this.clientStateKeyRe.test(t.key)){if(null==t.newValue)return n=this.fromWebStorageClientStateKey(t.key),[2,this.handleClientStateEvent(n,null)];if(e=this.fromWebStorageClientState(t.key,t.newValue))return[2,this.handleClientStateEvent(e.clientId,e)]}else if(this.mutationBatchKeyRe.test(t.key)){if(null!==t.newValue&&(r=this.fromWebStorageMutationMetadata(t.key,t.newValue)))return[2,this.handleMutationBatchEvent(r)]}else if(this.queryTargetKeyRe.test(t.key)){if(null!==t.newValue&&(i=this.fromWebStorageQueryTargetMetadata(t.key,t.newValue)))return[2,this.handleQueryTargetEvent(i)]}else if(t.key===this.onlineStateKey){if(null!==t.newValue&&(o=this.fromWebStorageOnlineState(t.newValue)))return[2,this.handleOnlineStateEvent(o)]}else t.key===this.sequenceNumberKey&&(m(!!this.sequenceNumberHandler,"Missing sequenceNumberHandler"),(s=function(t){var e=hn.INVALID;if(null!=t)try{var n=JSON.parse(t);m("number"==typeof n,"Found non-numeric sequence number"),e=n}catch(t){d(ri,"Failed to read sequence number from WebStorage",t)}return e}(t.newValue))!==hn.INVALID&&this.sequenceNumberHandler(s));return[2]})})})}},Object.defineProperty(t.prototype,"localClientState",{get:function(){return this.activeClients[this.localClientId]},enumerable:!0,configurable:!0}),t.prototype.persistClientState=function(){this.setItem(this.localClientStorageKey,this.localClientState.toWebStorageJSON())},t.prototype.persistMutationState=function(t,e,n){var r=new ci(this.currentUser,t,e,n),i=this.toWebStorageMutationBatchKey(t);this.setItem(i,r.toWebStorageJSON())},t.prototype.removeMutationState=function(t){var e=this.toWebStorageMutationBatchKey(t);this.removeItem(e)},t.prototype.persistOnlineState=function(t){var e={clientId:this.localClientId,onlineState:Pr[t]};this.storage.setItem(this.onlineStateKey,JSON.stringify(e))},t.prototype.persistQueryTargetState=function(t,e,n){var r=this.toWebStorageQueryTargetMetadataKey(t),i=new hi(t,e,n);this.setItem(r,i.toWebStorageJSON())},t.prototype.toWebStorageClientStateKey=function(t){return m(-1===t.indexOf("_"),"Client key cannot contain '_', but was '"+t+"'"),ii+"_"+this.escapedPersistenceKey+"_"+t},t.prototype.toWebStorageQueryTargetMetadataKey=function(t){return ai+"_"+this.escapedPersistenceKey+"_"+t},t.prototype.toWebStorageMutationBatchKey=function(t){var e=oi+"_"+this.escapedPersistenceKey+"_"+t;return this.currentUser.isAuthenticated()&&(e+="_"+this.currentUser.uid),e},t.prototype.fromWebStorageClientStateKey=function(t){var e=this.clientStateKeyRe.exec(t);return e?e[1]:null},t.prototype.fromWebStorageClientState=function(t,e){var n=this.fromWebStorageClientStateKey(t);return m(null!==n,"Cannot parse client state key '"+t+"'"),li.fromWebStorageEntry(n,e)},t.prototype.fromWebStorageMutationMetadata=function(t,e){var n=this.mutationBatchKeyRe.exec(t);m(null!==n,"Cannot parse mutation batch key '"+t+"'");var r=Number(n[1]),i=void 0!==n[2]?n[2]:null;return ci.fromWebStorageEntry(new ni(i),r,e)},t.prototype.fromWebStorageQueryTargetMetadata=function(t,e){var n=this.queryTargetKeyRe.exec(t);m(null!==n,"Cannot parse query target key '"+t+"'");var r=Number(n[1]);return hi.fromWebStorageEntry(r,e)},t.prototype.fromWebStorageOnlineState=function(t){return fi.fromWebStorageEntry(t)},t.prototype.handleMutationBatchEvent=function(t){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(e){return t.user.uid!==this.currentUser.uid?(f(ri,"Ignoring mutation for non-active user "+t.user.uid),[2]):[2,this.syncEngine.applyBatchState(t.batchId,t.state,t.error)]})})},t.prototype.handleQueryTargetEvent=function(t){return this.syncEngine.applyTargetState(t.targetId,t.state,t.error)},t.prototype.handleClientStateEvent=function(t,e){var n=this,r=this.getAllActiveQueryTargets();e?this.activeClients[t]=e:delete this.activeClients[t];var i=this.getAllActiveQueryTargets(),o=[],s=[];return i.forEach(function(t){return a.__awaiter(n,void 0,void 0,function(){return a.__generator(this,function(e){return r.has(t)||o.push(t),[2]})})}),r.forEach(function(t){return a.__awaiter(n,void 0,void 0,function(){return a.__generator(this,function(e){return i.has(t)||s.push(t),[2]})})}),this.syncEngine.applyActiveTargetsChange(o,s)},t.prototype.handleOnlineStateEvent=function(t){this.activeClients[t.clientId]&&this.onlineStateHandler(t.onlineState)},t}();var yi=function(){function t(){this.localState=new di,this.queryState={},this.syncEngine=null,this.onlineStateHandler=null,this.sequenceNumberHandler=null}return t.prototype.addPendingMutation=function(t){},t.prototype.updateMutationState=function(t,e,n){},t.prototype.addLocalQueryTarget=function(t){return this.localState.addQueryTarget(t),this.queryState[t]||"not-current"},t.prototype.updateQueryState=function(t,e,n){this.queryState[t]=e},t.prototype.removeLocalQueryTarget=function(t){this.localState.removeQueryTarget(t)},t.prototype.isLocalQueryTarget=function(t){return this.localState.activeTargetIds.has(t)},t.prototype.clearQueryState=function(t){delete this.queryState[t]},t.prototype.getAllActiveQueryTargets=function(){return this.localState.activeTargetIds},t.prototype.isActiveQueryTarget=function(t){return this.localState.activeTargetIds.has(t)},t.prototype.start=function(){return this.localState=new di,Promise.resolve()},t.prototype.handleUserChange=function(t,e,n){},t.prototype.setOnlineState=function(t){},t.prototype.shutdown=function(){},t.prototype.writeSequenceNumber=function(t){},t}(),mi=function(){function t(t,e,n,r){this.platform=t,this.databaseInfo=e,this.credentials=n,this.asyncQueue=r,this.clientId=K.newId()}return t.prototype.start=function(t){var e=this,n=new ln,r=new ln,i=!1;return this.credentials.setChangeListener(function(o){i?e.asyncQueue.enqueueAndForget(function(){return e.handleCredentialChange(o)}):(i=!0,e.initializePersistence(t,r,o).then(function(){return e.initializeRest(o)}).then(n.resolve,n.reject))}),this.asyncQueue.enqueueAndForget(function(){return n.promise}),r.promise},t.prototype.enableNetwork=function(){var t=this;return this.asyncQueue.enqueue(function(){return t.syncEngine.enableNetwork()})},t.prototype.initializePersistence=function(t,e,n){var r=this;return t.enabled?this.startIndexedDbPersistence(n,t).then(e.resolve).catch(function(t){return e.reject(t),r.canFallback(t)?(console.warn("Error enabling offline storage. Falling back to storage disabled: "+t),r.startMemoryPersistence()):Promise.reject(t)}):(e.resolve(),this.startMemoryPersistence())},t.prototype.canFallback=function(t){return t instanceof w?t.code===b.FAILED_PRECONDITION||t.code===b.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&t instanceof DOMException)||(22===t.code||20===t.code)},t.prototype.startIndexedDbPersistence=function(t,e){var n=this;m(e.enabled,"Should only start IndexedDb persitence with offline persistence enabled."),this.garbageCollector=new Or;var r=mr.buildStoragePrefix(this.databaseInfo),i=new ze(this.databaseInfo.databaseId,{useProto3Json:!0});return Promise.resolve().then(function(){return a.__awaiter(n,void 0,void 0,function(){var n,o;return a.__generator(this,function(a){switch(a.label){case 0:if(e.experimentalTabSynchronization&&!pi.isAvailable(this.platform))throw new w(b.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");return e.experimentalTabSynchronization?(this.sharedClientState=new pi(this.asyncQueue,this.platform,r,this.clientId,t),n=this,[4,mr.createMultiClientIndexedDbPersistence(r,this.clientId,this.platform,this.asyncQueue,i,{sequenceNumberSyncer:this.sharedClientState})]):[3,2];case 1:return n.persistence=a.sent(),[3,4];case 2:return this.sharedClientState=new yi,o=this,[4,mr.createIndexedDbPersistence(r,this.clientId,this.platform,this.asyncQueue,i)];case 3:o.persistence=a.sent(),a.label=4;case 4:return[2]}})})})},t.prototype.startMemoryPersistence=function(){return this.garbageCollector=new cn,this.persistence=new kr(this.clientId),this.sharedClientState=new yi,Promise.resolve()},t.prototype.initializeRest=function(t){var e=this;return f("FirestoreClient","Initializing. user=",t.uid),this.platform.loadConnection(this.databaseInfo).then(function(n){return a.__awaiter(e,void 0,void 0,function(){var e,r,i,o,s=this;return a.__generator(this,function(a){switch(a.label){case 0:return this.localStore=new Ir(this.persistence,t,this.garbageCollector),e=this.platform.newSerializer(this.databaseInfo.databaseId),r=new jr(this.asyncQueue,n,this.credentials,e),i=function(t){return s.syncEngine.applyOnlineStateChange(t,Mr.RemoteStore)},o=function(t){return s.syncEngine.applyOnlineStateChange(t,Mr.SharedClientState)},this.remoteStore=new Qr(this.localStore,r,this.asyncQueue,i),this.syncEngine=new ei(this.localStore,this.remoteStore,this.sharedClientState,t),this.sharedClientState.onlineStateHandler=o,this.remoteStore.syncEngine=this.syncEngine,this.sharedClientState.syncEngine=this.syncEngine,this.eventMgr=new Gr(this.syncEngine),[4,this.localStore.start()];case 1:return a.sent(),[4,this.sharedClientState.start()];case 2:return a.sent(),[4,this.remoteStore.start()];case 3:return a.sent(),[4,this.persistence.setPrimaryStateListener(function(t){return s.syncEngine.applyPrimaryState(t)})];case 4:return a.sent(),[2]}})})})},t.prototype.handleCredentialChange=function(t){return this.asyncQueue.verifyOperationInProgress(),f("FirestoreClient","Credential Changed. Current user: "+t.uid),this.syncEngine.handleCredentialChange(t)},t.prototype.disableNetwork=function(){var t=this;return this.asyncQueue.enqueue(function(){return t.syncEngine.disableNetwork()})},t.prototype.shutdown=function(t){var e=this;return this.asyncQueue.enqueue(function(){return a.__awaiter(e,void 0,void 0,function(){return a.__generator(this,function(e){switch(e.label){case 0:return[4,this.remoteStore.shutdown()];case 1:return e.sent(),[4,this.sharedClientState.shutdown()];case 2:return e.sent(),[4,this.persistence.shutdown(t&&t.purgePersistenceWithDataLoss)];case 3:return e.sent(),this.credentials.removeChangeListener(),[2]}})})})},t.prototype.listen=function(t,e,n){var r=this,i=new zr(t,e,n);return this.asyncQueue.enqueueAndForget(function(){return r.eventMgr.listen(i)}),i},t.prototype.unlisten=function(t){var e=this;this.asyncQueue.enqueueAndForget(function(){return e.eventMgr.unlisten(t)})},t.prototype.getDocumentFromLocalCache=function(t){var e=this;return this.asyncQueue.enqueue(function(){return e.localStore.readDocument(t)}).then(function(t){if(t instanceof ht)return t;if(t instanceof lt)return null;throw new w(b.UNAVAILABLE,"Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")})},t.prototype.getDocumentsFromLocalCache=function(t){var e=this;return this.asyncQueue.enqueue(function(){return e.localStore.executeQuery(t)}).then(function(e){var n=Ie(),r=new $r(t,n),i=r.computeDocChanges(e);return r.applyChanges(i,!1).snapshot})},t.prototype.write=function(t){var e=this,n=new ln;return this.asyncQueue.enqueueAndForget(function(){return e.syncEngine.write(t,n)}),n.promise},t.prototype.databaseId=function(){return this.databaseInfo.databaseId},t.prototype.transaction=function(t){var e=this;return this.asyncQueue.enqueue(function(){return a.__awaiter(e,void 0,void 0,function(){return a.__generator(this,function(t){return[2]})})}).then(function(){return e.syncEngine.runTransaction(t)})},t}(),gi=function(){function t(t){this.observer=t,this.muted=!1}return t.prototype.next=function(t){this.scheduleEvent(this.observer.next,t)},t.prototype.error=function(t){this.scheduleEvent(this.observer.error,t)},t.prototype.mute=function(){this.muted=!0},t.prototype.scheduleEvent=function(t,e){var n=this;this.muted||setTimeout(function(){n.muted||t(e)},0)},t}(),vi=function(){function t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];!function(t,e,n,r){if(!(e instanceof Array)||e.length<r)throw new w(b.INVALID_ARGUMENT,"Function "+t+"() requires its "+n+" argument to be an array with at least "+W(r,"element")+".")}("FieldPath",t,"fieldNames",1);for(var n=0;n<t.length;++n)if(k("FieldPath","string",n,t[n]),0===t[n].length)throw new w(b.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new st(t)}return t.documentId=function(){return t._DOCUMENT_ID},t.prototype.isEqual=function(e){if(!(e instanceof t))throw U("isEqual","FieldPath",1,e);return this._internalPath.isEqual(e._internalPath)},t._DOCUMENT_ID=new t(st.keyField().canonicalString()),t}(),bi=new RegExp("[~\\*/\\[\\]]");var wi=function(){return function(t,e){this.user=e,this.type="OAuth",this.authHeaders={Authorization:"Bearer "+t}}}(),Ti=function(){function t(){this.changeListener=null}return t.prototype.getToken=function(){return Promise.resolve(null)},t.prototype.invalidateToken=function(){},t.prototype.setChangeListener=function(t){m(!this.changeListener,"Can only call setChangeListener() once."),this.changeListener=t,t(ni.UNAUTHENTICATED)},t.prototype.removeChangeListener=function(){m(null!==this.changeListener,"removeChangeListener() when no listener registered"),this.changeListener=null},t}(),Ei=function(){function t(t){var e=this;this.app=t,this.tokenListener=null,this.tokenCounter=0,this.changeListener=null,this.forceRefresh=!1,this.tokenListener=function(){e.tokenCounter++,e.currentUser=e.getUser(),e.changeListener&&e.changeListener(e.currentUser)},this.tokenCounter=0,this.app.INTERNAL.addAuthTokenListener(this.tokenListener)}return t.prototype.getToken=function(){var t=this;m(null!=this.tokenListener,"getToken cannot be called after listener removed.");var e=this.tokenCounter,n=this.forceRefresh;return this.forceRefresh=!1,this.app.INTERNAL.getToken(n).then(function(n){if(t.tokenCounter!==e)throw new w(b.ABORTED,"getToken aborted due to token change.");return n?(m("string"==typeof n.accessToken,"Invalid tokenData returned from getToken():"+n),new wi(n.accessToken,t.currentUser)):null})},t.prototype.invalidateToken=function(){this.forceRefresh=!0},t.prototype.setChangeListener=function(t){m(!this.changeListener,"Can only call setChangeListener() once."),this.changeListener=t,this.currentUser&&t(this.currentUser)},t.prototype.removeChangeListener=function(){m(null!=this.tokenListener,"removeChangeListener() called twice"),m(null!==this.changeListener,"removeChangeListener() called when no listener registered"),this.app.INTERNAL.removeAuthTokenListener(this.tokenListener),this.tokenListener=null,this.changeListener=null},t.prototype.getUser=function(){var t=this.app.INTERNAL.getUid();return m(null===t||"string"==typeof t,"Received invalid UID: "+t),new ni(t)},t}(),Si=function(){function t(t,e){this.gapi=t,this.sessionIndex=e,this.type="FirstParty",this.user=ni.FIRST_PARTY,m(this.gapi&&this.gapi.auth&&this.gapi.auth.getAuthHeaderValueForFirstParty,"unexpected gapi interface")}return Object.defineProperty(t.prototype,"authHeaders",{get:function(){return{Authorization:this.gapi.auth.getAuthHeaderValueForFirstParty([]),"X-Goog-AuthUser":this.sessionIndex}},enumerable:!0,configurable:!0}),t}(),Ci=function(){function t(t,e){this.gapi=t,this.sessionIndex=e,m(this.gapi&&this.gapi.auth&&this.gapi.auth.getAuthHeaderValueForFirstParty,"unexpected gapi interface")}return t.prototype.getToken=function(){return Promise.resolve(new Si(this.gapi,this.sessionIndex))},t.prototype.setChangeListener=function(t){t(ni.FIRST_PARTY)},t.prototype.removeChangeListener=function(){},t.prototype.invalidateToken=function(){},t}();function Ii(t){return function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=t,r=0,i=e;r<i.length;r++){var o=i[r];if(o in n&&"function"==typeof n[o])return!0}return!1}(t,["next","error","complete"])}var _i,Di=function(){function t(t){this._methodName=t}return t.delete=function(){return Ai.instance},t.serverTimestamp=function(){return Ni.instance},t.arrayUnion=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return A("FieldValue.arrayUnion",arguments,1),new ki(t)},t.arrayRemove=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return A("FieldValue.arrayRemove",arguments,1),new xi(t)},t.prototype.isEqual=function(t){return this===t},t}(),Ai=function(t){function e(){return t.call(this,"FieldValue.delete")||this}return a.__extends(e,t),e.instance=new e,e}(Di),Ni=function(t){function e(){return t.call(this,"FieldValue.serverTimestamp")||this}return a.__extends(e,t),e.instance=new e,e}(Di),ki=function(t){function e(e){var n=t.call(this,"FieldValue.arrayUnion")||this;return n._elements=e,n}return a.__extends(e,t),e}(Di),xi=function(t){function e(e){var n=t.call(this,"FieldValue.arrayRemove")||this;return n._elements=e,n}return a.__extends(e,t),e}(Di),Oi=T(Di,"Use FieldValue.<field>() instead."),Ri=/^__.*__$/,Pi=function(){function t(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}return t.prototype.toMutations=function(t,e){var n=[];return null!==this.fieldMask?n.push(new ae(t,this.data,this.fieldMask,e)):n.push(new oe(t,this.data,e)),this.fieldTransforms.length>0&&n.push(new se(t,this.fieldTransforms)),n},t}(),Mi=function(){function t(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}return t.prototype.toMutations=function(t,e){var n=[new ae(t,this.data,this.fieldMask,e)];return this.fieldTransforms.length>0&&n.push(new se(t,this.fieldTransforms)),n},t}();function Li(t){switch(t){case _i.Set:case _i.MergeSet:case _i.Update:return!0;case _i.Argument:return!1;default:throw y("Unexpected case for UserDataSource: "+t)}}!function(t){t[t.Set=0]="Set",t[t.Update=1]="Update",t[t.MergeSet=2]="MergeSet",t[t.Argument=3]="Argument"}(_i||(_i={}));var qi=function(){function t(t,e,n,r,i,o){this.dataSource=t,this.methodName=e,this.path=n,this.arrayElement=r,void 0===i&&this.validatePath(),this.arrayElement=void 0!==r&&r,this.fieldTransforms=i||[],this.fieldMask=o||[]}return t.prototype.childContextForField=function(e){var n=null==this.path?null:this.path.child(e),r=new t(this.dataSource,this.methodName,n,!1,this.fieldTransforms,this.fieldMask);return r.validatePathSegment(e),r},t.prototype.childContextForFieldPath=function(e){var n=null==this.path?null:this.path.child(e),r=new t(this.dataSource,this.methodName,n,!1,this.fieldTransforms,this.fieldMask);return r.validatePath(),r},t.prototype.childContextForArray=function(e){return new t(this.dataSource,this.methodName,null,!0,this.fieldTransforms,this.fieldMask)},t.prototype.createError=function(t){var e=null===this.path||this.path.isEmpty()?"":" (found in field "+this.path.toString()+")";return new w(b.INVALID_ARGUMENT,"Function "+this.methodName+"() called with invalid data. "+t+e)},t.prototype.contains=function(t){return void 0!==this.fieldMask.find(function(e){return t.isPrefixOf(e)})||void 0!==this.fieldTransforms.find(function(e){return t.isPrefixOf(e.field)})},t.prototype.validatePath=function(){if(null!==this.path)for(var t=0;t<this.path.length;t++)this.validatePathSegment(this.path.get(t))},t.prototype.validatePathSegment=function(t){if(Li(this.dataSource)&&Ri.test(t))throw this.createError("Document fields cannot begin and end with __")},t}(),Fi=function(){return function(t,e){this.databaseId=t,this.key=e}}(),Bi=function(){function t(t){this.preConverter=t}return t.prototype.parseSetData=function(t,e){var n=new qi(_i.Set,t,st.EMPTY_PATH);Ui("Data must be an object, but it was:",n,e);var r=this.parseData(e,n);return new Pi(r,null,n.fieldTransforms)},t.prototype.parseMergeData=function(t,e,n){var r=new qi(_i.MergeSet,t,st.EMPTY_PATH);Ui("Data must be an object, but it was:",r,e);var i,o,a=this.parseData(e,r);if(n){for(var s=[],u=0,c=n;u<c.length;u++){var h=c[u],l=void 0;if(h instanceof vi)l=h._internalPath;else{if("string"!=typeof h)throw y("Expected stringOrFieldPath to be a string or a FieldPath");l=Wi(t,h)}if(!r.contains(l))throw new w(b.INVALID_ARGUMENT,"Field '"+l+"' is specified in your field mask but missing from your input data.");s.push(l)}i=new te(s),o=r.fieldTransforms.filter(function(t){return i.covers(t.field)})}else i=new te(r.fieldMask),o=r.fieldTransforms;return new Pi(a,i,o)},t.prototype.parseUpdateData=function(t,e){var n=this,r=new qi(_i.Update,t,st.EMPTY_PATH);Ui("Data must be an object, but it was:",r,e);var i=[],o=xt.EMPTY;I(e,function(e,a){var s=Wi(t,e),u=r.childContextForFieldPath(s);if((a=n.runPreConverter(a,u))instanceof Ai)i.push(s);else{var c=n.parseData(a,u);null!=c&&(i.push(s),o=o.set(s,c))}});var a=new te(i);return new Mi(o,a,r.fieldTransforms)},t.prototype.parseUpdateVarargs=function(t,e,n,r){var i=new qi(_i.Update,t,st.EMPTY_PATH),o=[ji(t,e)],a=[n];if(r.length%2!=0)throw new w(b.INVALID_ARGUMENT,"Function "+t+"() needs to be called with an even number of arguments that alternate between field names and values.");for(var s=0;s<r.length;s+=2)o.push(ji(t,r[s])),a.push(r[s+1]);var u=[],c=xt.EMPTY;for(s=0;s<o.length;++s){var h=o[s],l=i.childContextForFieldPath(h),f=this.runPreConverter(a[s],l);if(f instanceof Ai)u.push(h);else{var d=this.parseData(f,l);null!=d&&(u.push(h),c=c.set(h,d))}}var p=new te(u);return new Mi(c,p,i.fieldTransforms)},t.prototype.parseQueryValue=function(t,e){var n=new qi(_i.Argument,t,st.EMPTY_PATH),r=this.parseData(e,n);return m(null!=r,"Parsed data should not be null."),m(0===n.fieldTransforms.length,"Field transforms should have been disallowed."),r},t.prototype.runPreConverter=function(t,e){try{return this.preConverter(t)}catch(t){var n=Ki(t);throw e.createError(n)}},t.prototype.parseData=function(t,e){if(Vi(t=this.runPreConverter(t,e)))return Ui("Unsupported field value:",e,t),this.parseObject(t,e);if(t instanceof Di)return this.parseSentinelFieldValue(t,e),null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.arrayElement)throw e.createError("Nested arrays are not supported");return this.parseArray(t,e)}return this.parseScalarValue(t,e)},t.prototype.parseObject=function(t,e){var n=this,r=new dt(Q);return _(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):I(t,function(t,i){var o=n.parseData(i,e.childContextForField(t));null!=o&&(r=r.insert(t,o))}),new xt(r)},t.prototype.parseArray=function(t,e){for(var n=[],r=0,i=0,o=t;i<o.length;i++){var a=o[i],s=this.parseData(a,e.childContextForArray(r));null==s&&(s=bt.INSTANCE),n.push(s),r++}return new Ot(n)},t.prototype.parseSentinelFieldValue=function(t,e){if(!Li(e.dataSource))throw e.createError(t._methodName+"() can only be used with update() and set()");if(null===e.path)throw e.createError(t._methodName+"() is not currently supported inside arrays");if(t instanceof Ai){if(e.dataSource!==_i.MergeSet)throw e.dataSource===_i.Update?(m(e.path.length>0,"FieldValue.delete() at the top level should have already been handled."),e.createError("FieldValue.delete() can only appear at the top level of your update data")):e.createError("FieldValue.delete() cannot be used with set() unless you pass {merge:true}");e.fieldMask.push(e.path)}else if(t instanceof Ni)e.fieldTransforms.push(new ee(e.path,ce.instance));else if(t instanceof ki){var n=this.parseArrayTransformElements(t._methodName,t._elements),r=new he(n);e.fieldTransforms.push(new ee(e.path,r))}else if(t instanceof xi){n=this.parseArrayTransformElements(t._methodName,t._elements);var i=new le(n);e.fieldTransforms.push(new ee(e.path,i))}else y("Unknown FieldValue type: "+t)},t.prototype.parseScalarValue=function(t,e){if(null===t)return bt.INSTANCE;if("number"==typeof t)return Ft(t)?new St(t):new Ct(t);if("boolean"==typeof t)return wt.of(t);if("string"==typeof t)return new It(t);if(t instanceof Date)return new _t(tt.fromDate(t));if(t instanceof tt)return new _t(new tt(t.seconds,1e3*Math.floor(t.nanoseconds/1e3)));if(t instanceof Z)return new kt(t);if(t instanceof J)return new At(t);if(t instanceof Fi)return new Nt(t.databaseId,t.key);throw e.createError("Unsupported field value: "+F(t))},t.prototype.parseArrayTransformElements=function(t,e){var n=this;return e.map(function(e,r){var i=new qi(_i.Argument,t,st.EMPTY_PATH);return n.parseData(e,i.childContextForArray(r))})},t}();function Vi(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof tt||t instanceof Z||t instanceof J||t instanceof Fi||t instanceof Di)}function Ui(t,e,n){if(!Vi(n)||!q(n)){var r=F(n);throw"an object"===r?e.createError(t+" a custom object"):e.createError(t+" "+r)}}function ji(t,e){if(e instanceof vi)return e._internalPath;if("string"==typeof e)return Wi(t,e);throw new w(b.INVALID_ARGUMENT,"Function "+t+"() called with invalid data. Field path arguments must be of type string or FieldPath.")}function Wi(t,e){try{return function(t){if(t.search(bi)>=0)throw new w(b.INVALID_ARGUMENT,"Invalid field path ("+t+"). Paths must not contain '~', '*', '/', '[', or ']'");try{return new(vi.bind.apply(vi,[void 0].concat(t.split("."))))}catch(e){throw new w(b.INVALID_ARGUMENT,"Invalid field path ("+t+"). Paths must not be empty, begin with '.', end with '.', or contain '..'")}}(e)._internalPath}catch(e){var n=Ki(e);throw new w(b.INVALID_ARGUMENT,"Function "+t+"() called with invalid data. "+n)}}function Ki(t){return t instanceof Error?t.message:t.toString()}var Qi="firestore.googleapis.com",Hi=!0,Gi=!1,zi=!1,Xi=function(){function t(t){if(void 0===t.host){if(void 0!==t.ssl)throw new w(b.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host=Qi,this.ssl=Hi}else O("settings","non-empty string","host",t.host),this.host=t.host,R("settings","boolean","ssl",t.ssl),this.ssl=S(t.ssl,Hi);V("settings",t,["host","ssl","credentials","timestampsInSnapshots"]),R("settings","object","credentials",t.credentials),this.credentials=t.credentials,R("settings","boolean","timestampsInSnapshots",t.timestampsInSnapshots),this.timestampsInSnapshots=S(t.timestampsInSnapshots,Gi)}return t.prototype.isEqual=function(t){return this.host===t.host&&this.ssl===t.ssl&&this.timestampsInSnapshots===t.timestampsInSnapshots&&this.credentials===t.credentials},t}(),Yi=function(){return function(){}}(),Ji=function(){function t(t,e){this.enabled=t,m(t||!e,"Can only provide PersistenceSettings with persistence enabled"),e=e||{},this.experimentalTabSynchronization=S(e.experimentalTabSynchronization,zi)}return t.prototype.isEqual=function(t){return this.enabled===t.enabled&&this.experimentalTabSynchronization===t.experimentalTabSynchronization},t}(),$i=function(){function t(e){var n=this;this._queue=new dn,this.INTERNAL={delete:function(t){return a.__awaiter(n,void 0,void 0,function(){return a.__generator(this,function(e){return this._firestoreClient?[2,this._firestoreClient.shutdown(t)]:[2]})})}};var r=new Yi;if("object"==typeof e.options){var i=e;r.firebaseApp=i,r.databaseId=t.databaseIdFromApp(i),r.persistenceKey=r.firebaseApp.name,r.credentials=new Ei(i)}else{var o=e;if(!o.projectId)throw new w(b.INVALID_ARGUMENT,"Must provide projectId");r.databaseId=new rt(o.projectId,o.database),r.persistenceKey="[DEFAULT]",r.credentials=new Ti}r.settings=new Xi({}),this._config=r,this._databaseId=r.databaseId}return t.prototype.settings=function(t){if(D("Firestore.settings",arguments,1),k("Firestore.settings","object",1,t),E(t,"persistence"))throw new w(b.INVALID_ARGUMENT,'"persistence" is now specified with a separate call to firestore.enablePersistence().');var e=new Xi(t);if(this._firestoreClient&&!this._config.settings.isEqual(e))throw new w(b.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only call settings() before calling any other methods on a Firestore object.");this._config.settings=e,void 0!==e.credentials&&(this._config.credentials=function(t){if(!t)return new Ti;switch(t.type){case"gapi":return new Ci(t.client,t.sessionIndex||"0");case"provider":return t.client;default:throw new w(b.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(e.credentials))},t.prototype.enableNetwork=function(){return this.ensureClientConfigured(),this._firestoreClient.enableNetwork()},t.prototype.disableNetwork=function(){return this.ensureClientConfigured(),this._firestoreClient.disableNetwork()},t.prototype.enablePersistence=function(t){if(this._firestoreClient)throw new w(b.FAILED_PRECONDITION,"Firestore has already been started and persistence can no longer be enabled. You can only call enablePersistence() before calling any other methods on a Firestore object.");return this.configureClient(new Ji(!0,t))},t.prototype.ensureClientConfigured=function(){return this._firestoreClient||this.configureClient(new Ji(!1)),this._firestoreClient},t.prototype.configureClient=function(t){var e=this;m(!!this._config.settings.host,"FirestoreSettings.host cannot be falsey"),this._config.settings.timestampsInSnapshots||d("\nThe behavior for Date objects stored in Firestore is going to change\nAND YOUR APP MAY BREAK.\nTo hide this warning and ensure your app does not break, you need to add the\nfollowing code to your app before calling any other Cloud Firestore methods:\n\n  const firestore = firebase.firestore();\n  const settings = {/* your settings... */ timestampsInSnapshots: true};\n  firestore.settings(settings);\n\nWith this change, timestamps stored in Cloud Firestore will be read back as\nFirebase Timestamp objects instead of as system Date objects. So you will also\nneed to update code expecting a Date to instead expect a Timestamp. For example:\n\n  // Old:\n  const date = snapshot.get('created_at');\n  // New:\n  const timestamp = snapshot.get('created_at');\n  const date = timestamp.toDate();\n\nPlease audit all existing usages of Date when you enable the new behavior. In a\nfuture release, the behavior will change to the new behavior, so if you do not\nfollow these steps, YOUR APP MAY BREAK."),m(!this._firestoreClient,"configureClient() called multiple times");var n=new et(this._config.databaseId,this._config.persistenceKey,this._config.settings.host,this._config.settings.ssl);return this._dataConverter=new Bi(function(t){if(t instanceof eo){var n=e._config.databaseId,r=t.firestore._config.databaseId;if(!r.isEqual(n))throw new w(b.INVALID_ARGUMENT,"Document reference is for database "+r.projectId+"/"+r.database+" but should be for database "+n.projectId+"/"+n.database);return new Fi(e._config.databaseId,t._key)}return t}),this._firestoreClient=new mi(g.getPlatform(),n,this._config.credentials,this._queue),this._firestoreClient.start(t)},t.databaseIdFromApp=function(t){var e=t.options;if(!E(e,"projectId"))throw new w(b.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');var n=e.projectId;if(!n||"string"!=typeof n)throw new w(b.INVALID_ARGUMENT,"projectId must be a string in FirebaseApp.options");return new rt(n)},Object.defineProperty(t.prototype,"app",{get:function(){if(!this._config.firebaseApp)throw new w(b.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._config.firebaseApp},enumerable:!0,configurable:!0}),t.prototype.collection=function(t){if(D("Firestore.collection",arguments,1),k("Firestore.collection","non-empty string",1,t),!t)throw new w(b.INVALID_ARGUMENT,"Must provide a non-empty collection path to collection()");return this.ensureClientConfigured(),new so(ot.fromString(t),this)},t.prototype.doc=function(t){if(D("Firestore.doc",arguments,1),k("Firestore.doc","non-empty string",1,t),!t)throw new w(b.INVALID_ARGUMENT,"Must provide a non-empty document path to doc()");return this.ensureClientConfigured(),eo.forPath(ot.fromString(t),this)},t.prototype.runTransaction=function(t){var e=this;return D("Firestore.runTransaction",arguments,1),k("Firestore.runTransaction","function",1,t),this.ensureClientConfigured().transaction(function(n){return t(new Zi(e,n))})},t.prototype.batch=function(){return this.ensureClientConfigured(),new to(this)},Object.defineProperty(t,"logLevel",{get:function(){switch(h()){case r.DEBUG:return"debug";case r.ERROR:return"error";case r.SILENT:return"silent";default:return y("Unknown log level: "+h())}},enumerable:!0,configurable:!0}),t.setLogLevel=function(t){switch(D("Firestore.setLogLevel",arguments,1),k("Firestore.setLogLevel","non-empty string",1,t),t){case"debug":l(r.DEBUG);break;case"error":l(r.ERROR);break;case"silent":l(r.SILENT);break;default:throw new w(b.INVALID_ARGUMENT,"Invalid log level: "+t)}},t.prototype._areTimestampsInSnapshotsEnabled=function(){return this._config.settings.timestampsInSnapshots},t}(),Zi=function(){function t(t,e){this._firestore=t,this._transaction=e}return t.prototype.get=function(t){var e=this;D("Transaction.get",arguments,1);var n=lo("Transaction.get",t,this._firestore);return this._transaction.lookup([n._key]).then(function(t){if(!t||1!==t.length)return y("Mismatch in docs returned from document lookup.");var r=t[0];if(r instanceof lt)return new ro(e._firestore,n._key,null,!1,!1);if(r instanceof ht)return new ro(e._firestore,n._key,r,!1,!1);throw y("BatchGetDocumentsRequest returned unexpected document type: "+r.constructor.name)})},t.prototype.set=function(t,e,n){N("Transaction.set",arguments,2,3);var r=lo("Transaction.set",t,this._firestore),i=(n=uo("Transaction.set",n)).merge||n.mergeFields?this._firestore._dataConverter.parseMergeData("Transaction.set",e,n.mergeFields):this._firestore._dataConverter.parseSetData("Transaction.set",e);return this._transaction.set(r._key,i),this},t.prototype.update=function(t,e,n){for(var r,i,o=[],a=3;a<arguments.length;a++)o[a-3]=arguments[a];return"string"==typeof e||e instanceof vi?(A("Transaction.update",arguments,3),r=lo("Transaction.update",t,this._firestore),i=this._firestore._dataConverter.parseUpdateVarargs("Transaction.update",e,n,o)):(D("Transaction.update",arguments,2),r=lo("Transaction.update",t,this._firestore),i=this._firestore._dataConverter.parseUpdateData("Transaction.update",e)),this._transaction.update(r._key,i),this},t.prototype.delete=function(t){D("Transaction.delete",arguments,1);var e=lo("Transaction.delete",t,this._firestore);return this._transaction.delete(e._key),this},t}(),to=function(){function t(t){this._firestore=t,this._mutations=[],this._committed=!1}return t.prototype.set=function(t,e,n){N("WriteBatch.set",arguments,2,3),this.verifyNotCommitted();var r=lo("WriteBatch.set",t,this._firestore),i=(n=uo("WriteBatch.set",n)).merge||n.mergeFields?this._firestore._dataConverter.parseMergeData("WriteBatch.set",e,n.mergeFields):this._firestore._dataConverter.parseSetData("WriteBatch.set",e);return this._mutations=this._mutations.concat(i.toMutations(r._key,re.NONE)),this},t.prototype.update=function(t,e,n){for(var r,i,o=[],a=3;a<arguments.length;a++)o[a-3]=arguments[a];return this.verifyNotCommitted(),"string"==typeof e||e instanceof vi?(A("WriteBatch.update",arguments,3),r=lo("WriteBatch.update",t,this._firestore),i=this._firestore._dataConverter.parseUpdateVarargs("WriteBatch.update",e,n,o)):(D("WriteBatch.update",arguments,2),r=lo("WriteBatch.update",t,this._firestore),i=this._firestore._dataConverter.parseUpdateData("WriteBatch.update",e)),this._mutations=this._mutations.concat(i.toMutations(r._key,re.exists(!0))),this},t.prototype.delete=function(t){D("WriteBatch.delete",arguments,1),this.verifyNotCommitted();var e=lo("WriteBatch.delete",t,this._firestore);return this._mutations=this._mutations.concat(new ue(e._key,re.NONE)),this},t.prototype.commit=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){return this.verifyNotCommitted(),this._committed=!0,this._mutations.length>0?[2,this._firestore.ensureClientConfigured().write(this._mutations)]:[2]})})},t.prototype.verifyNotCommitted=function(){if(this._committed)throw new w(b.FAILED_PRECONDITION,"A write batch can no longer be used after commit() has been called.")},t}(),eo=function(){function t(t,e){this._key=t,this.firestore=e,this._firestoreClient=this.firestore.ensureClientConfigured()}return t.forPath=function(e,n){if(e.length%2!=0)throw new w(b.INVALID_ARGUMENT,"Invalid document reference. Document references must have an even number of segments, but "+e.canonicalString()+" has "+e.length);return new t(new ut(e),n)},Object.defineProperty(t.prototype,"id",{get:function(){return this._key.path.lastSegment()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return new so(this._key.path.popLast(),this.firestore)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"path",{get:function(){return this._key.path.canonicalString()},enumerable:!0,configurable:!0}),t.prototype.collection=function(t){if(D("DocumentReference.collection",arguments,1),k("DocumentReference.collection","non-empty string",1,t),!t)throw new w(b.INVALID_ARGUMENT,"Must provide a non-empty collection name to collection()");var e=ot.fromString(t);return new so(this._key.path.child(e),this.firestore)},t.prototype.isEqual=function(e){if(!(e instanceof t))throw U("isEqual","DocumentReference",1,e);return this.firestore===e.firestore&&this._key.isEqual(e._key)},t.prototype.set=function(t,e){N("DocumentReference.set",arguments,1,2);var n=(e=uo("DocumentReference.set",e)).merge||e.mergeFields?this.firestore._dataConverter.parseMergeData("DocumentReference.set",t,e.mergeFields):this.firestore._dataConverter.parseSetData("DocumentReference.set",t);return this._firestoreClient.write(n.toMutations(this._key,re.NONE))},t.prototype.update=function(t,e){for(var n,r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];return"string"==typeof t||t instanceof vi?(A("DocumentReference.update",arguments,2),n=this.firestore._dataConverter.parseUpdateVarargs("DocumentReference.update",t,e,r)):(D("DocumentReference.update",arguments,1),n=this.firestore._dataConverter.parseUpdateData("DocumentReference.update",t)),this._firestoreClient.write(n.toMutations(this._key,re.exists(!0)))},t.prototype.delete=function(){return D("DocumentReference.delete",arguments,0),this._firestoreClient.write([new ue(this._key,re.NONE)])},t.prototype.onSnapshot=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];N("DocumentReference.onSnapshot",arguments,1,4);var n,r={includeMetadataChanges:!1},i=0;"object"!=typeof t[i]||Ii(t[i])||(V("DocumentReference.onSnapshot",r=t[i],["includeMetadataChanges"]),R("DocumentReference.onSnapshot","boolean","includeMetadataChanges",r.includeMetadataChanges),i++);var o={includeMetadataChanges:r.includeMetadataChanges};return Ii(t[i])?n=t[i]:(k("DocumentReference.onSnapshot","function",i,t[i]),x("DocumentReference.onSnapshot","function",i+1,t[i+1]),x("DocumentReference.onSnapshot","function",i+2,t[i+2]),n={next:t[i],error:t[i+1],complete:t[i+2]}),this.onSnapshotInternal(o,n)},t.prototype.onSnapshotInternal=function(t,e){var n=this,r=function(t){console.error("Uncaught Error in onSnapshot:",t)};e.error&&(r=e.error.bind(e));var i=new gi({next:function(t){if(e.next){m(t.docs.size<=1,"Too many documents returned on a document query");var r=t.docs.get(n._key);e.next(new ro(n.firestore,n._key,r,t.fromCache,t.hasPendingWrites))}},error:r}),o=this._firestoreClient.listen(Vt.atPath(this._key.path),i,t);return function(){i.mute(),n._firestoreClient.unlisten(o)}},t.prototype.get=function(t){var e=this;return N("DocumentReference.get",arguments,0,1),ho("DocumentReference.get",t),new Promise(function(n,r){t&&"cache"===t.source?e.firestore.ensureClientConfigured().getDocumentFromLocalCache(e._key).then(function(t){n(new ro(e.firestore,e._key,t,!0,t instanceof ht&&t.hasLocalMutations))},r):e.getViaSnapshotListener(n,r,t)})},t.prototype.getViaSnapshotListener=function(t,e,n){var r=this.onSnapshotInternal({includeMetadataChanges:!0,waitForSyncWhenOnline:!0},{next:function(i){r(),!i.exists&&i.metadata.fromCache?e(new w(b.UNAVAILABLE,"Failed to get document because the client is offline.")):i.exists&&i.metadata.fromCache&&n&&"server"===n.source?e(new w(b.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):t(i)},error:e})},t}(),no=function(){function t(t,e){this.hasPendingWrites=t,this.fromCache=e}return t.prototype.isEqual=function(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache},t}(),ro=function(){function t(t,e,n,r,i){this._firestore=t,this._key=e,this._document=n,this._fromCache=r,this._hasPendingWrites=i}return t.prototype.data=function(t){return N("DocumentSnapshot.data",arguments,0,1),t=co("DocumentSnapshot.data",t),this._document?this.convertObject(this._document.data,gt.fromSnapshotOptions(t,this._firestore._areTimestampsInSnapshotsEnabled())):void 0},t.prototype.get=function(t,e){if(N("DocumentSnapshot.get",arguments,1,2),e=co("DocumentSnapshot.get",e),this._document){var n=this._document.data.field(ji("DocumentSnapshot.get",t));if(void 0!==n)return this.convertValue(n,gt.fromSnapshotOptions(e,this._firestore._areTimestampsInSnapshotsEnabled()))}},Object.defineProperty(t.prototype,"id",{get:function(){return this._key.path.lastSegment()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ref",{get:function(){return new eo(this._key,this._firestore)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"exists",{get:function(){return null!==this._document},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"metadata",{get:function(){return new no(this._hasPendingWrites,this._fromCache)},enumerable:!0,configurable:!0}),t.prototype.isEqual=function(e){if(!(e instanceof t))throw U("isEqual","DocumentSnapshot",1,e);return this._firestore===e._firestore&&this._fromCache===e._fromCache&&this._key.isEqual(e._key)&&(null===this._document?null===e._document:this._document.isEqual(e._document))},t.prototype.convertObject=function(t,e){var n=this,r={};return t.forEach(function(t,i){r[t]=n.convertValue(i,e)}),r},t.prototype.convertValue=function(t,e){if(t instanceof xt)return this.convertObject(t,e);if(t instanceof Ot)return this.convertArray(t,e);if(t instanceof Nt){var n=t.value(e),r=this._firestore.ensureClientConfigured().databaseId();return t.databaseId.isEqual(r)||d("Document "+this._key.path+" contains a document reference within a different database ("+t.databaseId.projectId+"/"+t.databaseId.database+") which is not supported. It will be treated as a reference in the current database ("+r.projectId+"/"+r.database+") instead."),new eo(n,this._firestore)}return t.value(e)},t.prototype.convertArray=function(t,e){var n=this;return t.internalValue.map(function(t){return n.convertValue(t,e)})},t}(),io=function(t){function e(e,n,r,i,o){return t.call(this,e,n,r,i,o)||this}return a.__extends(e,t),e.prototype.data=function(e){var n=t.prototype.data.call(this,e);return m("object"==typeof n,"Document in a QueryDocumentSnapshot should exist"),n},e}(ro),oo=function(){function t(t,e){this._query=t,this.firestore=e}return t.prototype.where=function(e,n,r){var i;D("Query.where",arguments,3),k("Query.where","non-empty string",2,n),B("Query.where",3,r);var o=ji("Query.where",e),a=jt.fromString(n);if(o.isKeyField()){if(a===jt.ARRAY_CONTAINS)throw new w(b.INVALID_ARGUMENT,"Invalid Query. You can't perform array-contains queries on FieldPath.documentId() since document IDs are not arrays.");if("string"==typeof r){if(-1!==r.indexOf("/"))throw new w(b.INVALID_ARGUMENT,"Function Query.where() requires its third parameter to be a valid document ID if the first parameter is FieldPath.documentId(), but it contains a slash.");if(""===r)throw new w(b.INVALID_ARGUMENT,"Function Query.where() requires its third parameter to be a valid document ID if the first parameter is FieldPath.documentId(), but it was an empty string.");var s=this._query.path.child(new ot([r]));m(s.length%2==0,"Path should be a document key"),i=new Nt(this.firestore._databaseId,new ut(s))}else{if(!(r instanceof eo))throw new w(b.INVALID_ARGUMENT,"Function Query.where() requires its third parameter to be a string or a DocumentReference if the first parameter is FieldPath.documentId(), but it was: "+F(r)+".");var u=r;i=new Nt(this.firestore._databaseId,u._key)}}else i=this.firestore._dataConverter.parseQueryValue("Query.where",r);var c=Ut.create(o,a,i);return this.validateNewFilter(c),new t(this._query.addFilter(c),this.firestore)},t.prototype.orderBy=function(e,n){var r;if(N("Query.orderBy",arguments,1,2),x("Query.orderBy","non-empty string",2,n),void 0===n||"asc"===n)r=Ht.ASCENDING;else{if("desc"!==n)throw new w(b.INVALID_ARGUMENT,"Function Query.orderBy() has unknown direction '"+n+"', expected 'asc' or 'desc'.");r=Ht.DESCENDING}if(null!==this._query.startAt)throw new w(b.INVALID_ARGUMENT,"Invalid query. You must not call Query.startAt() or Query.startAfter() before calling Query.orderBy().");if(null!==this._query.endAt)throw new w(b.INVALID_ARGUMENT,"Invalid query. You must not call Query.endAt() or Query.endBefore() before calling Query.orderBy().");var i=ji("Query.orderBy",e),o=new zt(i,r);return this.validateNewOrderBy(o),new t(this._query.addOrderBy(o),this.firestore)},t.prototype.limit=function(e){if(D("Query.limit",arguments,1),k("Query.limit","number",1,e),e<=0)throw new w(b.INVALID_ARGUMENT,"Invalid Query. Query limit ("+e+") is invalid. Limit must be positive.");return new t(this._query.withLimit(e),this.firestore)},t.prototype.startAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];A("Query.startAt",arguments,1);var i=this.boundFromDocOrFields("Query.startAt",e,n,!0);return new t(this._query.withStartAt(i),this.firestore)},t.prototype.startAfter=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];A("Query.startAfter",arguments,1);var i=this.boundFromDocOrFields("Query.startAfter",e,n,!1);return new t(this._query.withStartAt(i),this.firestore)},t.prototype.endBefore=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];A("Query.endBefore",arguments,1);var i=this.boundFromDocOrFields("Query.endBefore",e,n,!0);return new t(this._query.withEndAt(i),this.firestore)},t.prototype.endAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];A("Query.endAt",arguments,1);var i=this.boundFromDocOrFields("Query.endAt",e,n,!1);return new t(this._query.withEndAt(i),this.firestore)},t.prototype.isEqual=function(e){if(!(e instanceof t))throw U("isEqual","Query",1,e);return this.firestore===e.firestore&&this._query.isEqual(e._query)},t.prototype.boundFromDocOrFields=function(t,e,n,r){if(B(t,1,e),e instanceof ro){if(n.length>0)throw new w(b.INVALID_ARGUMENT,"Too many arguments provided to "+t+"().");var i=e;if(!i.exists)throw new w(b.NOT_FOUND,"Can't use a DocumentSnapshot that doesn't exist for "+t+"().");return this.boundFromDocument(t,i._document,r)}var o=[e].concat(n);return this.boundFromFields(t,o,r)},t.prototype.boundFromDocument=function(t,e,n){for(var r=[],i=0,o=this._query.orderBy;i<o.length;i++){var a=o[i];if(a.field.isKeyField())r.push(new Nt(this.firestore._databaseId,e.key));else{var s=e.field(a.field);if(void 0===s){var u=a.field.canonicalString();throw new w(b.INVALID_ARGUMENT,"Invalid query. You are trying to start or end a query using a document for which the field '"+u+"' (used as the orderBy) does not exist.")}r.push(s)}}return new Gt(r,n)},t.prototype.boundFromFields=function(t,e,n){var r=this._query.explicitOrderBy;if(e.length>r.length)throw new w(b.INVALID_ARGUMENT,"Too many arguments provided to "+t+"(). The number of arguments must be less than or equal to the number of Query.orderBy() clauses");for(var i=[],o=0;o<e.length;o++){var a=e[o];if(r[o].field.isKeyField()){if("string"!=typeof a)throw new w(b.INVALID_ARGUMENT,"Invalid query. Expected a string for document ID in "+t+"(), but got a "+typeof a);if(-1!==a.indexOf("/"))throw new w(b.INVALID_ARGUMENT,"Invalid query. Document ID '"+a+"' contains a slash in "+t+"()");var s=new ut(this._query.path.child(a));i.push(new Nt(this.firestore._databaseId,s))}else{var u=this.firestore._dataConverter.parseQueryValue(t,a);i.push(u)}}return new Gt(i,n)},t.prototype.onSnapshot=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];N("Query.onSnapshot",arguments,1,4);var n,r={},i=0;return"object"!=typeof t[i]||Ii(t[i])||(V("Query.onSnapshot",r=t[i],["includeMetadataChanges"]),R("Query.onSnapshot","boolean","includeMetadataChanges",r.includeMetadataChanges),i++),Ii(t[i])?n=t[i]:(k("Query.onSnapshot","function",i,t[i]),x("Query.onSnapshot","function",i+1,t[i+1]),x("Query.onSnapshot","function",i+2,t[i+2]),n={next:t[i],error:t[i+1],complete:t[i+2]}),this.onSnapshotInternal(r,n)},t.prototype.onSnapshotInternal=function(t,e){var n=this,r=function(t){console.error("Uncaught Error in onSnapshot:",t)};e.error&&(r=e.error.bind(e));var i=new gi({next:function(t){e.next&&e.next(new ao(n.firestore,n._query,t))},error:r}),o=this.firestore.ensureClientConfigured(),a=o.listen(this._query,i,t);return function(){i.mute(),o.unlisten(a)}},t.prototype.get=function(t){var e=this;return N("Query.get",arguments,0,1),ho("Query.get",t),new Promise(function(n,r){t&&"cache"===t.source?e.firestore.ensureClientConfigured().getDocumentsFromLocalCache(e._query).then(function(t){n(new ao(e.firestore,e._query,t))},r):e.getViaSnapshotListener(n,r,t)})},t.prototype.getViaSnapshotListener=function(t,e,n){var r=this.onSnapshotInternal({includeMetadataChanges:!0,waitForSyncWhenOnline:!0},{next:function(i){r(),i.metadata.fromCache&&n&&"server"===n.source?e(new w(b.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):t(i)},error:e})},t.prototype.validateNewFilter=function(t){if(t instanceof Wt)if(t.isInequality()){var e=this._query.getInequalityFilterField();if(null!==e&&!e.isEqual(t.field))throw new w(b.INVALID_ARGUMENT,"Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '"+e.toString()+"' and '"+t.field.toString()+"'");var n=this._query.getFirstOrderByField();null!==n&&this.validateOrderByAndInequalityMatch(t.field,n)}else if(t.op===jt.ARRAY_CONTAINS&&this._query.hasArrayContainsFilter())throw new w(b.INVALID_ARGUMENT,"Invalid query. Queries only support a single array-contains filter.")},t.prototype.validateNewOrderBy=function(t){if(null===this._query.getFirstOrderByField()){var e=this._query.getInequalityFilterField();null!==e&&this.validateOrderByAndInequalityMatch(e,t.field)}},t.prototype.validateOrderByAndInequalityMatch=function(t,e){if(!e.isEqual(t))throw new w(b.INVALID_ARGUMENT,"Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '"+t.toString()+"' and so you must also use '"+t.toString()+"' as your first Query.orderBy(), but your first Query.orderBy() is on field '"+e.toString()+"' instead.")},t}(),ao=function(){function t(t,e,n){this._firestore=t,this._originalQuery=e,this._snapshot=n,this._cachedChanges=null,this._cachedChangesIncludeMetadataChanges=null,this.metadata=new no(n.hasPendingWrites,n.fromCache)}return Object.defineProperty(t.prototype,"docs",{get:function(){var t=[];return this.forEach(function(e){return t.push(e)}),t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"empty",{get:function(){return this._snapshot.docs.isEmpty()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this._snapshot.docs.size},enumerable:!0,configurable:!0}),t.prototype.forEach=function(t,e){var n=this;N("QuerySnapshot.forEach",arguments,1,2),k("QuerySnapshot.forEach","function",1,t),this._snapshot.docs.forEach(function(r){t.call(e,n.convertToDocumentImpl(r))})},Object.defineProperty(t.prototype,"query",{get:function(){return new oo(this._originalQuery,this._firestore)},enumerable:!0,configurable:!0}),t.prototype.docChanges=function(t){t&&(V("QuerySnapshot.docChanges",t,["includeMetadataChanges"]),R("QuerySnapshot.docChanges","boolean","includeMetadataChanges",t.includeMetadataChanges));var e=!(!t||!t.includeMetadataChanges);if(e&&this._snapshot.excludesMetadataChanges)throw new w(b.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===e||(this._cachedChanges=function(t,e,n){if(n.oldDocs.isEmpty()){var r,i=0;return n.docChanges.map(function(e){var o=new io(t,e.doc.key,e.doc,n.fromCache,n.mutatedKeys.has(e.doc.key));return m(e.type===Ae.Added,"Invalid event type for first snapshot"),m(!r||n.query.docComparator(r,e.doc)<0,"Got added events in wrong order"),r=e.doc,{type:"added",doc:o,oldIndex:-1,newIndex:i++}})}var o=n.oldDocs;return n.docChanges.filter(function(t){return e||t.type!==Ae.Metadata}).map(function(e){var r=new io(t,e.doc.key,e.doc,n.fromCache,n.mutatedKeys.has(e.doc.key)),i=-1,a=-1;return e.type!==Ae.Added&&(m((i=o.indexOf(e.doc.key))>=0,"Index for document not found"),o=o.delete(e.doc.key)),e.type!==Ae.Removed&&(o=o.add(e.doc),a=o.indexOf(e.doc.key)),{type:function(t){switch(t){case Ae.Added:return"added";case Ae.Modified:case Ae.Metadata:return"modified";case Ae.Removed:return"removed";default:return y("Unknown change type: "+t)}}(e.type),doc:r,oldIndex:i,newIndex:a}})}(this._firestore,e,this._snapshot),this._cachedChangesIncludeMetadataChanges=e),this._cachedChanges},t.prototype.isEqual=function(e){if(!(e instanceof t))throw U("isEqual","QuerySnapshot",1,e);return this._firestore===e._firestore&&this._originalQuery.isEqual(e._originalQuery)&&this._snapshot.isEqual(e._snapshot)},t.prototype.convertToDocumentImpl=function(t){return new io(this._firestore,t.key,t,this.metadata.fromCache,this._snapshot.mutatedKeys.has(t.key))},t}();["length","forEach","map"].concat("undefined"!=typeof Symbol?[Symbol.iterator]:[]).forEach(function(t){try{Object.defineProperty(ao.prototype.docChanges,t,{get:function(){return function(){throw new w(b.INVALID_ARGUMENT,'QuerySnapshot.docChanges has been changed from a property into a method, so usages like "querySnapshot.docChanges" should become "querySnapshot.docChanges()"')}()}})}catch(t){}});var so=function(t){function e(e,n){var r=t.call(this,Vt.atPath(e),n)||this;if(e.length%2!=1)throw new w(b.INVALID_ARGUMENT,"Invalid collection reference. Collection references must have an odd number of segments, but "+e.canonicalString()+" has "+e.length);return r}return a.__extends(e,t),Object.defineProperty(e.prototype,"id",{get:function(){return this._query.path.lastSegment()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){var t=this._query.path.popLast();return t.isEmpty()?null:new eo(new ut(t),this.firestore)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"path",{get:function(){return this._query.path.canonicalString()},enumerable:!0,configurable:!0}),e.prototype.doc=function(t){if(N("CollectionReference.doc",arguments,0,1),0===arguments.length&&(t=K.newId()),k("CollectionReference.doc","non-empty string",1,t),""===t)throw new w(b.INVALID_ARGUMENT,"Document path must be a non-empty string");var e=ot.fromString(t);return eo.forPath(this._query.path.child(e),this.firestore)},e.prototype.add=function(t){D("CollectionReference.add",arguments,1),k("CollectionReference.add","object",1,t);var e=this.doc();return e.set(t).then(function(){return e})},e}(oo);function uo(t,e){if(void 0===e)return{merge:!1};if(V(t,e,["merge","mergeFields"]),R(t,"boolean","merge",e.merge),P(t,"mergeFields","a string or a FieldPath",e.mergeFields,function(t){return"string"==typeof t||t instanceof vi}),void 0!==e.mergeFields&&void 0!==e.merge)throw new w(b.INVALID_ARGUMENT,"Invalid options passed to function "+t+'(): You cannot specify both "merge" and "mergeFields".');return e}function co(t,e){return void 0===e?{}:(V(t,e,["serverTimestamps"]),M(t,0,"serverTimestamps",e.serverTimestamps,["estimate","previous","none"]),e)}function ho(t,e){x(t,"object",1,e),e&&(V(t,e,["source"]),M(t,0,"source",e.source,["default","server","cache"]))}function lo(t,e,n){if(e instanceof eo){if(e.firestore!==n)throw new w(b.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.");return e}throw U(t,"DocumentReference",1,e)}var fo=T($i,"Use firebase.firestore() instead."),po=T(Zi,"Use firebase.firestore().runTransaction() instead."),yo=T(to,"Use firebase.firestore().batch() instead."),mo=T(eo,"Use firebase.firestore().doc() instead."),go=T(ro),vo=T(io),bo=T(oo),wo=T(ao),To=T(so,"Use firebase.firestore().collection() instead."),Eo={Firestore:fo,GeoPoint:Z,Timestamp:tt,Blob:$,Transaction:po,WriteBatch:yo,DocumentReference:mo,DocumentSnapshot:go,Query:bo,QueryDocumentSnapshot:vo,QuerySnapshot:wo,CollectionReference:To,FieldPath:vi,FieldValue:Oi,setLogLevel:$i.setLogLevel};function So(t){t.INTERNAL.registerService("firestore",function(t){return new $i(t)},function(t){m(t&&"object"==typeof t,"shallowCopy() expects object parameter.");var e={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}(Eo))}function Co(t){So(t)}Co(i),e.registerFirestore=Co}).call(this,n(3))},function(t,e,n){"use strict";n.r(e),n.d(e,"setLogLevel",function(){return u}),n.d(e,"Logger",function(){return s}),n.d(e,"LogLevel",function(){return r});var r,i=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(r||(r={}));var o=r.INFO,a=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var o=(new Date).toISOString();switch(e){case r.DEBUG:case r.VERBOSE:console.log.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.INFO:console.info.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.WARN:console.warn.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.ERROR:console.error.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+e+")")}}},s=function(){function t(t){this.name=t,this._logLevel=o,this._logHandler=a,i.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in r))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!0,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.DEBUG].concat(t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.VERBOSE].concat(t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.INFO].concat(t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.WARN].concat(t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.ERROR].concat(t))},t}();function u(t){i.forEach(function(e){e.logLevel=t})}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(global){__webpack_require__.d(__webpack_exports__,"createWebChannelTransport",function(){return src_1}),__webpack_require__.d(__webpack_exports__,"ErrorCode",function(){return src_2}),__webpack_require__.d(__webpack_exports__,"EventType",function(){return src_3}),__webpack_require__.d(__webpack_exports__,"WebChannel",function(){return src_4}),__webpack_require__.d(__webpack_exports__,"XhrIoPool",function(){return src_5});var commonjsGlobal="undefined"!=typeof window?window:void 0!==global?global:"undefined"!=typeof self?self:{},e,goog=goog||{},h=commonjsGlobal;function l(t){return"string"==typeof t}function m(t,e){t=t.split("."),e=e||h;for(var n=0;n<t.length;n++)if(null==(e=e[t[n]]))return null;return e}function aa(){}function ba(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function n(t){return"array"==ba(t)}function ca(t){var e=ba(t);return"array"==e||"object"==e&&"number"==typeof t.length}function q(t){return"function"==ba(t)}function r(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var t="closure_uid_"+(1e9*Math.random()>>>0),da=0;function ea(t,e,n){return t.call.apply(t.bind,arguments)}function fa(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function u(t,e,n){return(u=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ea:fa).apply(null,arguments)}function v(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var w=Date.now||function(){return+new Date};function x(t,e){function n(){}n.prototype=e.prototype,t.L=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.sh=function(t,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return e.prototype[n].apply(t,i)}}function y(t){if(Error.captureStackTrace)Error.captureStackTrace(this,y);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function ha(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");y.call(this,n+t[r])}function ia(t,e){throw new ha("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function z(){0!=ja&&(ka[this[t]||(this[t]=++da)]=this),this.Ka=this.Ka,this.Qa=this.Qa}x(y,Error),y.prototype.name="CustomError",x(ha,y),ha.prototype.name="AssertionError";var ja=0,ka={};z.prototype.Ka=!1,z.prototype.cb=function(){if(!this.Ka&&(this.Ka=!0,this.F(),0!=ja)){var e=this[t]||(this[t]=++da);if(0!=ja&&this.Qa&&0<this.Qa.length)throw Error(this+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete ka[e]}},z.prototype.F=function(){if(this.Qa)for(;this.Qa.length;)this.Qa.shift()()};var la=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if(l(t))return l(e)&&1==e.length?t.indexOf(e,0):-1;for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},ma=Array.prototype.lastIndexOf?function(t,e){return Array.prototype.lastIndexOf.call(t,e,t.length-1)}:function(t,e){var n=t.length-1;if(0>n&&(n=Math.max(0,t.length+n)),l(t))return l(e)&&1==e.length?t.lastIndexOf(e,n):-1;for(;0<=n;n--)if(n in t&&t[n]===e)return n;return-1},na=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i=l(t)?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)},oa=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=l(t)?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t))return!0;return!1};function pa(t){t:{for(var e=qa,n=t.length,r=l(t)?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:l(t)?t.charAt(e):t[e]}function ra(t){if(!n(t))for(var e=t.length-1;0<=e;e--)delete t[e];t.length=0}function sa(t,e){var n;return(n=0<=(e=la(t,e)))&&Array.prototype.splice.call(t,e,1),n}function ta(t){return Array.prototype.concat.apply([],arguments)}function ua(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function va(t){return/^[\s\xa0]*$/.test(t)}var wa=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},A;function xa(t,e){return t<e?-1:t>e?1:0}t:{var ya=h.navigator;if(ya){var za=ya.userAgent;if(za){A=za;break t}}A=""}function B(t){return-1!=A.indexOf(t)}function Aa(t,e,n){for(var r in t)e.call(n,t[r],r,t)}function Ba(t){var e,n=[],r=0;for(e in t)n[r++]=t[e];return n}function Ca(t){var e,n=[],r=0;for(e in t)n[r++]=e;return n}function Da(t){var e,n={};for(e in t)n[e]=t[e];return n}var Ea="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Fa(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<Ea.length;o++)n=Ea[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function Ga(t){return Ga[" "](t),t}function Ha(t,e){var n=Ia;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)}Ga[" "]=aa;var Ja=B("Opera"),C=B("Trident")||B("MSIE"),Ka=B("Edge"),La=Ka||C,Ma=B("Gecko")&&!(-1!=A.toLowerCase().indexOf("webkit")&&!B("Edge"))&&!(B("Trident")||B("MSIE"))&&!B("Edge"),Na=-1!=A.toLowerCase().indexOf("webkit")&&!B("Edge"),Pa;function Oa(){var t=h.document;return t?t.documentMode:void 0}t:{var Qa="",Ra=function(){var t=A;return Ma?/rv:([^\);]+)(\)|;)/.exec(t):Ka?/Edge\/([\d\.]+)/.exec(t):C?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(t):Na?/WebKit\/(\S+)/.exec(t):Ja?/(?:Version)[ \/]?(\S+)/.exec(t):void 0}();if(Ra&&(Qa=Ra?Ra[1]:""),C){var Sa=Oa();if(null!=Sa&&Sa>parseFloat(Qa)){Pa=String(Sa);break t}}Pa=Qa}var Ia={},Ua;function Ta(t){return Ha(t,function(){for(var e=0,n=wa(String(Pa)).split("."),r=wa(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=xa(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||xa(0==a[2].length,0==s[2].length)||xa(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e})}var Va=h.document;Ua=Va&&C?Oa()||("CSS1Compat"==Va.compatMode?parseInt(Pa,10):5):void 0;var Wa=Object.freeze||function(t){return t},Xa=!C||9<=Number(Ua),Ya=C&&!Ta("9"),Za=function(){if(!h.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{h.addEventListener("test",aa,e),h.removeEventListener("test",aa,e)}catch(t){}return t}();function D(t,e){this.type=t,this.currentTarget=this.target=e,this.defaultPrevented=this.Ea=!1,this.Ee=!0}function E(t,e){D.call(this,t?t.type:""),this.relatedTarget=this.currentTarget=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=this.offsetY=this.offsetX=0,this.key="",this.charCode=this.keyCode=0,this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.gb=null,t&&this.Of(t,e)}D.prototype.stopPropagation=function(){this.Ea=!0},D.prototype.preventDefault=function(){this.defaultPrevented=!0,this.Ee=!1},x(E,D);var $a=Wa({2:"touch",3:"pen",4:"mouse"});E.prototype.Of=function(t,e){var n=this.type=t.type,r=t.changedTouches?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.currentTarget=e,e=t.relatedTarget){if(Ma){t:{try{Ga(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,null===r?(this.offsetX=Na||void 0!==t.offsetX?t.offsetX:t.layerX,this.offsetY=Na||void 0!==t.offsetY?t.offsetY:t.layerY,this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0):(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0),this.button=t.button,this.keyCode=t.keyCode||0,this.key=t.key||"",this.charCode=t.charCode||("keypress"==n?t.keyCode:0),this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType=l(t.pointerType)?t.pointerType:$a[t.pointerType]||"",this.state=t.state,this.gb=t,t.defaultPrevented&&this.preventDefault()},E.prototype.stopPropagation=function(){E.L.stopPropagation.call(this),this.gb.stopPropagation?this.gb.stopPropagation():this.gb.cancelBubble=!0},E.prototype.preventDefault=function(){E.L.preventDefault.call(this);var t=this.gb;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,Ya)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}};var ab="closure_listenable_"+(1e6*Math.random()|0);function F(t){return!(!t||!t[ab])}var bb=0;function cb(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.Pb=i,this.key=++bb,this.Sa=this.Fb=!1}function db(t){this.src=t,this.J={},this.yb=0}function eb(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.Sa&&o.listener==e&&o.capture==!!n&&o.Pb==r)return i}return-1}cb.prototype.Wb=function(){this.Sa=!0,this.Pb=this.src=this.proxy=this.listener=null},e=db.prototype,e.add=function(t,e,n,r,i){var o=t.toString();(t=this.J[o])||(t=this.J[o]=[],this.yb++);var a=eb(t,e,r,i);return-1<a?(e=t[a],n||(e.Fb=!1)):((e=new cb(e,this.src,o,!!r,i)).Fb=n,t.push(e)),e},e.remove=function(t,e,n,r){if(!((t=t.toString())in this.J))return!1;var i=this.J[t];return-1<(e=eb(i,e,n,r))&&(i[e].Wb(),Array.prototype.splice.call(i,e,1),0==i.length&&(delete this.J[t],this.yb--),!0)},e.Be=function(t){var e=t.type;e in this.J&&sa(this.J[e],t)&&(t.Wb(),0==this.J[e].length&&(delete this.J[e],this.yb--))},e.qb=function(t){var e;for(e in t=t&&t.toString(),this.J)if(!t||e==t){for(var n=this.J[e],r=0;r<n.length;r++)n[r].Wb();delete this.J[e],this.yb--}},e.kb=function(t,e,n,r){var i=-1;return(t=this.J[t.toString()])&&(i=eb(t,e,n,r)),-1<i?t[i]:null};var fb="closure_lm_"+(1e6*Math.random()|0),gb={};function ib(t,e,i,o,a){if(o&&o.once)return jb(t,e,i,o,a);if(n(e)){for(var s=0;s<e.length;s++)ib(t,e[s],i,o,a);return null}return i=kb(i),F(t)?t.ob(e,i,r(o)?!!o.capture:!!o,a):lb(t,e,i,!1,o,a)}function lb(t,e,n,i,o,a){if(!e)throw Error("Invalid event type");var s=r(o)?!!o.capture:!!o,u=G(t);if(u||(t[fb]=u=new db(t)),(n=u.add(e,n,i,s,a)).proxy)return n;if(i=mb(),n.proxy=i,i.src=t,i.listener=n,t.addEventListener)Za||(o=s),void 0===o&&(o=!1),t.addEventListener(e.toString(),i,o);else if(t.attachEvent)t.attachEvent(nb(e.toString()),i);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(i)}return n}function mb(){var t=ob,e=Xa?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}function jb(t,e,i,o,a){if(n(e)){for(var s=0;s<e.length;s++)jb(t,e[s],i,o,a);return null}return i=kb(i),F(t)?t.Qc(e,i,r(o)?!!o.capture:!!o,a):lb(t,e,i,!0,o,a)}function pb(t,e,i,o,a){if(n(e))for(var s=0;s<e.length;s++)pb(t,e[s],i,o,a);else o=r(o)?!!o.capture:!!o,i=kb(i),F(t)?t.hd(e,i,o,a):t&&(t=G(t))&&(e=t.kb(e,i,o,a))&&qb(e)}function qb(t){if("number"!=typeof t&&t&&!t.Sa){var e=t.src;if(F(e))e.Pe(t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(nb(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=G(e))?(n.Be(t),0==n.yb&&(n.src=null,e[fb]=null)):t.Wb()}}}function nb(t){return t in gb?gb[t]:gb[t]="on"+t}function rb(t,e,n,r){var i=!0;if((t=G(t))&&(e=t.J[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.Sa&&(o=sb(o,r),i=i&&!1!==o)}return i}function sb(t,e){var n=t.listener,r=t.Pb||t.src;return t.Fb&&qb(t),n.call(r,e)}function ob(t,e){if(t.Sa)return!0;if(!Xa){var n=e||m("window.event");e=new E(n,this);var r=!0;if(!(0>n.keyCode||void 0!=n.returnValue)){t:{var i=!1;if(0==n.keyCode)try{n.keyCode=-1;break t}catch(t){i=!0}(i||void 0==n.returnValue)&&(n.returnValue=!0)}for(n=[],i=e.currentTarget;i;i=i.parentNode)n.push(i);for(t=t.type,i=n.length-1;!e.Ea&&0<=i;i--){e.currentTarget=n[i];var o=rb(n[i],t,!0,e);r=r&&o}for(i=0;!e.Ea&&i<n.length;i++)e.currentTarget=n[i],o=rb(n[i],t,!1,e),r=r&&o}return r}return sb(t,new E(e,this))}function G(t){return(t=t[fb])instanceof db?t:null}var tb="__closure_events_fn_"+(1e9*Math.random()>>>0);function kb(t){return q(t)?t:(t[tb]||(t[tb]=function(e){return t.handleEvent(e)}),t[tb])}function H(){z.call(this),this.ka=new db(this),this.Te=this,this.Wc=null}function ub(t){return!/^\s*$/.test(t)&&/^[\],:{}\s\u2028\u2029]*$/.test(t.replace(/\\["\\\/bfnrtu]/g,"@").replace(/(?:"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)[\s\u2028\u2029]*(?=:|,|]|}|$)/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,""))}function vb(a){if(a=String(a),ub(a))try{return eval("("+a+")")}catch(t){}throw Error("Invalid JSON string: "+a)}function I(){this.Ta=void 0}x(H,z),H.prototype[ab]=!0,e=H.prototype,e.addEventListener=function(t,e,n,r){ib(this,t,e,n,r)},e.removeEventListener=function(t,e,n,r){pb(this,t,e,n,r)},e.dispatchEvent=function(t){var e,n=this.Wc;if(n)for(e=[];n;n=n.Wc)e.push(n);n=this.Te;var r=t.type||t;if(l(t))t=new D(t,n);else if(t instanceof D)t.target=t.target||n;else{var i=t;Fa(t=new D(r,n),i)}if(i=!0,e)for(var o=e.length-1;!t.Ea&&0<=o;o--){var a=t.currentTarget=e[o];i=a.Mb(r,!0,t)&&i}if(t.Ea||(i=(a=t.currentTarget=n).Mb(r,!0,t)&&i,t.Ea||(i=a.Mb(r,!1,t)&&i)),e)for(o=0;!t.Ea&&o<e.length;o++)i=(a=t.currentTarget=e[o]).Mb(r,!1,t)&&i;return i},e.F=function(){H.L.F.call(this),this.tg(),this.Wc=null},e.ob=function(t,e,n,r){return this.ka.add(String(t),e,!1,n,r)},e.Qc=function(t,e,n,r){return this.ka.add(String(t),e,!0,n,r)},e.hd=function(t,e,n,r){this.ka.remove(String(t),e,n,r)},e.Pe=function(t){this.ka.Be(t)},e.tg=function(){this.ka&&this.ka.qb(void 0)},e.Mb=function(t,e,n){if(!(t=this.ka.J[String(t)]))return!0;t=t.concat();for(var r=!0,i=0;i<t.length;++i){var o=t[i];if(o&&!o.Sa&&o.capture==e){var a=o.listener,s=o.Pb||o.src;o.Fb&&this.Pe(o),r=!1!==a.call(s,n)&&r}}return r&&0!=n.Ee},e.kb=function(t,e,n,r){return this.ka.kb(String(t),e,n,r)},I.prototype.ec=function(t){var e=[];return this.bd(t,e),e.join("")},I.prototype.bd=function(t,e){if(null==t)e.push("null");else{if("object"==typeof t){if(n(t))return void this.Dg(t,e);if(!(t instanceof String||t instanceof Number||t instanceof Boolean))return void this.Fg(t,e);t=t.valueOf()}switch(typeof t){case"string":this.Ge(t,e);break;case"number":this.Eg(t,e);break;case"boolean":e.push(String(t));break;case"function":e.push("null");break;default:throw Error("Unknown type: "+typeof t)}}};var wb={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},xb=/\uffff/.test("ï¿¿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function yb(t,e){this.Wf=100,this.jf=t,this.xg=e,this.$b=0,this.Qb=null}function J(){this.nc=this.Wa=null}I.prototype.Ge=function(t,e){e.push('"',t.replace(xb,function(t){var e=wb[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),wb[t]=e),e}),'"')},I.prototype.Eg=function(t,e){e.push(isFinite(t)&&!isNaN(t)?String(t):"null")},I.prototype.Dg=function(t,e){var n=t.length;e.push("[");for(var r="",i=0;i<n;i++)e.push(r),r=t[i],this.bd(this.Ta?this.Ta.call(t,String(i),r):r,e),r=",";e.push("]")},I.prototype.Fg=function(t,e){e.push("{");var n,r="";for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var i=t[n];"function"!=typeof i&&(e.push(r),this.Ge(n,e),e.push(":"),this.bd(this.Ta?this.Ta.call(t,n,i):i,e),r=",")}e.push("}")},yb.prototype.get=function(){if(0<this.$b){this.$b--;var t=this.Qb;this.Qb=t.next,t.next=null}else t=this.jf();return t},yb.prototype.put=function(t){this.xg(t),this.$b<this.Wf&&(this.$b++,t.next=this.Qb,this.Qb=t)};var Ab=new yb(function(){return new zb},function(t){t.reset()}),Cb,Eb;function zb(){this.next=this.scope=this.Ic=null}function Bb(t){h.setTimeout(function(){throw t},0)}function Db(){var t=h.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!B("Presto")&&(t=function(){var t=document.createElement("IFRAME");t.style.display="none",t.src="",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.write(""),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=u(function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()},this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!B("Trident")&&!B("MSIE")){var e=new t,n={},r=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).ud;n.ud=null,t()}},function(t){r.next={ud:t},r=r.next,e.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(t){var e=document.createElement("SCRIPT");e.onreadystatechange=function(){e.onreadystatechange=null,e.parentNode.removeChild(e),e=null,t(),t=null},document.documentElement.appendChild(e)}:function(t){h.setTimeout(t,0)}}function Fb(){if(h.Promise&&h.Promise.resolve){var t=h.Promise.resolve(void 0);Eb=function(){t.then(Gb)}}else Eb=function(){var t=Gb;!q(h.setImmediate)||h.Window&&h.Window.prototype&&!B("Edge")&&h.Window.prototype.setImmediate==h.setImmediate?(Cb||(Cb=Db()),Cb(t)):h.setImmediate(t)}}J.prototype.add=function(t,e){var n=this.Ef();n.set(t,e),this.nc?this.nc.next=n:this.Wa=n,this.nc=n},J.prototype.remove=function(){var t=null;return this.Wa&&(t=this.Wa,this.Wa=this.Wa.next,this.Wa||(this.nc=null),t.next=null),t},J.prototype.zg=function(t){Ab.put(t)},J.prototype.Ef=function(){return Ab.get()},zb.prototype.set=function(t,e){this.Ic=t,this.scope=e,this.next=null},zb.prototype.reset=function(){this.next=this.scope=this.Ic=null};var Hb=!1,Ib=new J;function Gb(){for(var t;t=Ib.remove();){try{t.Ic.call(t.scope)}catch(t){Bb(t)}Ib.zg(t)}Hb=!1}function Jb(t,e){H.call(this),this.Na=t||1,this.xb=e||h,this.qd=u(this.Xg,this),this.le=w()}function Kb(t,e,n){if(q(t))n&&(t=u(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=u(t.handleEvent,t)}return 2147483647<Number(e)?-1:h.setTimeout(t,e||0)}function Lb(t,e,n){z.call(this),this.Yf=null!=n?u(t,n):t,this.Na=e,this.af=u(this.jg,this),this.sc=[]}function Mb(t){z.call(this),this.i=t,this.o={}}x(Jb,H),e=Jb.prototype,e.enabled=!1,e.B=null,e.setInterval=function(t){this.Na=t,this.B&&this.enabled?(this.stop(),this.start()):this.B&&this.stop()},e.Xg=function(){if(this.enabled){var t=w()-this.le;0<t&&t<.8*this.Na?this.B=this.xb.setTimeout(this.qd,this.Na-t):(this.B&&(this.xb.clearTimeout(this.B),this.B=null),this.kf(),this.enabled&&(this.stop(),this.start()))}},e.kf=function(){this.dispatchEvent("tick")},e.start=function(){this.enabled=!0,this.B||(this.B=this.xb.setTimeout(this.qd,this.Na),this.le=w())},e.stop=function(){this.enabled=!1,this.B&&(this.xb.clearTimeout(this.B),this.B=null)},e.F=function(){Jb.L.F.call(this),this.stop(),delete this.xb},x(Lb,z),e=Lb.prototype,e.Ua=!1,e.pb=0,e.B=null,e.rf=function(t){this.sc=arguments,this.B||this.pb?this.Ua=!0:this.Ec()},e.stop=function(){this.B&&(h.clearTimeout(this.B),this.B=null,this.Ua=!1,this.sc=[])},e.pause=function(){this.pb++},e.resume=function(){this.pb--,this.pb||!this.Ua||this.B||(this.Ua=!1,this.Ec())},e.F=function(){Lb.L.F.call(this),this.stop()},e.jg=function(){this.B=null,this.Ua&&!this.pb&&(this.Ua=!1,this.Ec())},e.Ec=function(){this.B=Kb(this.af,this.Na),this.Yf.apply(null,this.sc)},x(Mb,z);var Nb=[];function K(t,e,n){this.reset(t,e,n,void 0,void 0)}function Pb(t){this.se=t,this.be=this.wc=this.nb=this.ac=null}function L(t,e){this.name=t,this.value=e}e=Mb.prototype,e.ob=function(t,e,n,r){return this.Xf(t,e,n,r)},e.Xf=function(t,e,r,i){n(e)||(e&&(Nb[0]=e.toString()),e=Nb);for(var o=0;o<e.length;o++){var a=ib(t,e[o],r||this.handleEvent,i||!1,this.i||this);if(!a)break;this.o[a.key]=a}return this},e.Qc=function(t,e,n,r){return this.me(t,e,n,r)},e.me=function(t,e,r,i,o){if(n(e))for(var a=0;a<e.length;a++)this.me(t,e[a],r,i,o);else{if(!(t=jb(t,e,r||this.handleEvent,i,o||this.i||this)))return this;this.o[t.key]=t}return this},e.hd=function(t,e,i,o,a){if(n(e))for(var s=0;s<e.length;s++)this.hd(t,e[s],i,o,a);else i=i||this.handleEvent,o=r(o)?!!o.capture:!!o,a=a||this.i||this,i=kb(i),o=!!o,(e=F(t)?t.kb(e,i,o,a):t&&(t=G(t))?t.kb(e,i,o,a):null)&&(qb(e),delete this.o[e.key])},e.qb=function(){Aa(this.o,function(t,e){this.o.hasOwnProperty(e)&&qb(t)},this),this.o={}},e.F=function(){Mb.L.F.call(this),this.qb()},e.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},K.prototype.Pd=null,K.prototype.reset=function(t,e,n,r,i){this.nb=t,delete this.Pd},K.prototype.Hg=function(t){this.Pd=t},K.prototype.Ke=function(t){this.nb=t},L.prototype.toString=function(){return this.name};var Qb=new L("SEVERE",1e3),Rb=new L("WARNING",900),Sb=new L("INFO",800),Tb=new L("CONFIG",700),Ub=new L("FINE",500);e=Pb.prototype,e.getName=function(){return this.se},e.getParent=function(){return this.ac},e.tf=function(){return this.wc||(this.wc={}),this.wc},e.Ke=function(t){this.nb=t},e.Td=function(){return this.nb?this.nb:this.ac?this.ac.Td():(ia("Root logger has no level set."),null)},e.Tf=function(t){return t.value>=this.Td().value},e.log=function(t,e,n){this.Tf(t)&&(q(e)&&(e=e()),this.lf(this.yf(t,e,n)))},e.yf=function(t,e,n){return t=new K(t,String(e),this.se),n&&t.Hg(n),t},e.ca=function(t,e){this.log(Qb,t,e)},e.T=function(t,e){this.log(Rb,t,e)},e.info=function(t,e){this.log(Sb,t,e)},e.qf=function(t){this.log(Ub,t,void 0)},e.lf=function(t){for(var e=this;e;)e.$e(t),e=e.getParent()},e.$e=function(t){if(this.be)for(var e,n=0;e=this.be[n];n++)e(t)},e.Lg=function(t){this.ac=t},e.Ue=function(t,e){this.tf()[t]=e};var Wb={},Xb=null;function Yb(t){var e;if(Xb||(Xb=new Pb(""),Wb[""]=Xb,Xb.Ke(Tb)),!(e=Wb[t])){e=new Pb(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=Yb(t.substr(0,n))).Ue(r,e),e.Lg(n),Wb[t]=e}return e}function Zb(t,e){t&&t.info(e,void 0)}function M(t,e){t&&t.qf(e)}function $b(){this.s=Yb("goog.labs.net.webChannel.WebChannelDebug"),this.Yc=!0}e=$b.prototype,e.Ld=function(){this.Yc=!1},e.Zg=function(t,e,n,r,i){var o=this;this.info(function(){return"XMLHTTP REQ ("+n+") [attempt "+r+"]: "+t+"\n"+e+"\n"+o.ag(i)})},e.$g=function(t,e,n,r,i,o){this.info(function(){return"XMLHTTP RESP ("+n+") [ attempt "+r+"]: "+t+"\n"+e+"\n"+i+" "+o})},e.Xa=function(t,e,n){var r=this;this.info(function(){return"XMLHTTP TEXT ("+t+"): "+r.rg(e)+(n?" "+n:"")})},e.Yg=function(t){this.info(function(){return"TIMEOUT: "+t})},e.debug=function(t){M(this.s,t)},e.eb=function(t,e){var n=this.s;n&&n.ca(e||"Exception",t)},e.info=function(t){Zb(this.s,t)},e.T=function(t){var e=this.s;e&&e.T(t,void 0)},e.ca=function(t){var e=this.s;e&&e.ca(t,void 0)},e.rg=function(t){if(!this.Yc)return t;if(!t)return null;try{var e=JSON.parse(t);if(e)for(var r=0;r<e.length;r++)n(e[r])&&this.$f(e[r]);return(new I).ec(e)}catch(e){return this.debug("Exception parsing expected JS array - probably was not JS"),t}},e.$f=function(t){if(!(2>t.length||(t=t[1],!n(t)||1>t.length))){var e=t[0];if("noop"!=e&&"stop"!=e&&"close"!=e)for(e=1;e<t.length;e++)t[e]=""}},e.ag=function(t){if(!this.Yc)return t;if(!t)return null;var e="";t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].split("=");if(1<r.length){var i=r[0];r=r[1];var o=i.split("_");e=2<=o.length&&"type"==o[1]?e+(i+"=")+r+"&":e+(i+"=redacted&")}}return e};var N=new H;function ac(t){D.call(this,"serverreachability",t)}function O(t){N.dispatchEvent(new ac(N,t))}function bc(t,e){D.call(this,"statevent",t),this.stat=e}function P(t){N.dispatchEvent(new bc(N,t))}function cc(t,e,n){D.call(this,"timingevent",t),this.size=e,this.rtt=n}function dc(t,e,n){N.dispatchEvent(new cc(N,t,e,n))}function Q(t,e){if(!q(t))throw Error("Fn must not be null and must be a function");return h.setTimeout(function(){t()},e)}x(ac,D),x(bc,D),x(cc,D);var ec={NO_ERROR:0,ah:1,ih:2,hh:3,eh:4,gh:5,jh:6,Re:7,TIMEOUT:8,mh:9},fc={dh:"complete",qh:"success",Se:"error",Re:"abort",oh:"ready",ph:"readystatechange",TIMEOUT:"timeout",kh:"incrementaldata",nh:"progress",fh:"downloadprogress",rh:"uploadprogress"};function gc(){}function hc(){}gc.prototype.sd=null,gc.prototype.Yd=function(){return this.sd||(this.sd=this.Qf())};var ic={OPEN:"a",bh:"b",Se:"c",lh:"d"},lc;function jc(){D.call(this,"d")}function kc(){D.call(this,"c")}function mc(){}function R(t,e,n,r,i){this.b=t,this.a=e,this.ra=n,this.R=r,this.Zc=i||1,this.Hc=new Mb(this),this.Va=nc,t=La?125:void 0,this.Xc=new Jb(t),this.A=null,this.S=!1,this.Da=this.pa=this.ua=this.kc=this.rb=this.ld=this.Ga=null,this.ba=[],this.h=null,this.Cb=0,this.I=this.Fa=null,this.w=-1,this.$a=!1,this.Ra=0,this.bc=null,this.mb=this.Hd=this.Ac=!1}x(jc,D),x(kc,D),x(mc,gc),mc.prototype.Gd=function(){var t=this.Zd();return t?new ActiveXObject(t):new XMLHttpRequest},mc.prototype.Qf=function(){var t={};return this.Zd()&&(t[0]=!0,t[1]=!0),t},mc.prototype.Zd=function(){if(!this.ee&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var t=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],e=0;e<t.length;e++){var n=t[e];try{return new ActiveXObject(n),this.ee=n}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return this.ee},lc=new mc;var nc=45e3;function oc(t,e){switch(t){case 0:return"Non-200 return code ("+e+")";case 1:return"XMLHTTP failure (no data)";case 2:return"HttpConnection timeout";default:return"Unknown error"}}var pc={},qc={};function rc(t){if(t.H&&"function"==typeof t.H)return t.H();if(l(t))return t.split("");if(ca(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}return Ba(t)}function sc(t,e,n){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,n);else if(ca(t)||l(t))na(t,e,n);else{if(t.W&&"function"==typeof t.W)var r=t.W();else if(t.H&&"function"==typeof t.H)r=void 0;else if(ca(t)||l(t)){r=[];for(var i=t.length,o=0;o<i;o++)r.push(o)}else r=Ca(t);o=(i=rc(t)).length;for(var a=0;a<o;a++)e.call(n,i[a],r&&r[a],t)}}function S(t,e){this.D={},this.o=[],this.j=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else t&&this.addAll(t)}function T(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e=R.prototype,e.ga=function(t){this.A=t},e.setTimeout=function(t){this.Va=t},e.Le=function(t){this.Ra=t},e.Mg=function(t){this.ba=t},e.la=function(){return this.ba},e.nd=function(t,e){this.kc=1,this.ua=t.clone().Vb(),this.Da=e,this.Ac=!0,this.Fe(null)},e.md=function(t,e,n){this.kc=1,this.ua=t.clone().Vb(),this.Da=null,this.Ac=e,this.Fe(n)},e.Fe=function(t){this.rb=w(),this.fb(),this.pa=this.ua.clone(),this.pa.fc("t",this.Zc),this.Cb=0,this.h=this.b.Kb(this.b.hc()?t:null),0<this.Ra&&(this.bc=new Lb(u(this.Qe,this,this.h),this.Ra)),this.Hc.ob(this.h,"readystatechange",this.qg),t=this.A?Da(this.A):{},this.Da?(this.Fa||(this.Fa="POST"),t["Content-Type"]="application/x-www-form-urlencoded",this.h.send(this.pa,this.Fa,this.Da,t)):(this.Fa="GET",this.h.send(this.pa,this.Fa,null,t)),O(1),this.a.Zg(this.Fa,this.pa,this.R,this.Zc,this.Da)},e.qg=function(t){t=t.target;var e=this.bc;e&&3==t.ma()?(this.a.debug("Throttling readystatechange."),e.rf()):this.Qe(t)},e.Qe=function(t){try{t==this.h?this.lg():this.a.T("Called back with an unexpected xmlhttp")}catch(t){if(this.a.debug("Failed call to OnXmlHttpReadyStateChanged_"),this.h&&this.h.ya()){var e=this;this.a.eb(t,function(){return"ResponseText: "+e.h.ya()})}else this.a.eb(t,"No response text")}},e.lg=function(){var t=this.h.ma(),e=this.h.Xd(),n=this.h.za();if(!(3>t||3==t&&!La&&!this.h.ya())){this.$a||4!=t||7==e||O(8==e||0>=n?3:2),this.Gb();var r=this.h.za();if(this.w=r,!(e=this.h.ya())){var i=this;this.a.debug(function(){return"No response text for uri "+i.pa+" status "+r})}if(this.S=200==r,this.a.$g(this.Fa,this.pa,this.R,this.Zc,t,r),this.S){if(this.Og()){if(!(n=this.wf()))return this.S=!1,this.I=3,P(12),this.a.T("XMLHTTP Missing X_HTTP_INITIAL_RESPONSE ("+this.R+")"),this.Ia(),void this.Lb();this.a.Xa(this.R,n,"Initial handshake response via X-HTTP-Initial-Response"),this.mb=!0,this.$c(n)}this.Ac?(this.Id(t,e),La&&this.S&&3==t&&this.Tg()):(this.a.Xa(this.R,e,null),this.$c(e)),4==t&&this.Ia(),this.S&&!this.$a&&(4==t?this.b.Vc(this):(this.S=!1,this.fb()))}else 400==r&&0<e.indexOf("Unknown SID")?(this.I=3,P(12),this.a.T("XMLHTTP Unknown SID ("+this.R+")")):(this.I=0,P(13),this.a.T("XMLHTTP Bad status "+r+" ("+this.R+")")),this.Ia(),this.Lb()}},e.Og=function(){return this.Hd&&!this.mb},e.wf=function(){if(this.h){var t=this.h.lb("X-HTTP-Initial-Response");if(t&&!va(t))return t}return null},e.Gg=function(){this.Hd=!0},e.Id=function(t,e){for(var n=!0;!this.$a&&this.Cb<e.length;){var r=this.zf(e);if(r==qc){4==t&&(this.I=4,P(14),n=!1),this.a.Xa(this.R,null,"[Incomplete Response]");break}if(r==pc){this.I=4,P(15),this.a.Xa(this.R,e,"[Invalid Chunk]"),n=!1;break}this.a.Xa(this.R,r,null),this.$c(r)}4==t&&0==e.length&&(this.I=1,P(16),n=!1),this.S=this.S&&n,n||(this.a.Xa(this.R,e,"[Invalid Chunked Response]"),this.Ia(),this.Lb())},e.og=function(){if(this.h){var t=this.h.ma(),e=this.h.ya();this.Cb<e.length&&(this.Gb(),this.Id(t,e),this.S&&4!=t&&this.fb())}},e.Tg=function(){this.Hc.ob(this.Xc,"tick",this.og),this.Xc.start()},e.zf=function(t){var e=this.Cb,n=t.indexOf("\n",e);return-1==n?qc:(e=Number(t.substring(e,n)),isNaN(e)?pc:(n+=1)+e>t.length?qc:(t=t.substr(n,e),this.Cb=n+e,t))},e.Bg=function(t){this.kc=2,this.ua=t.clone().Vb(),t=!1,h.navigator&&h.navigator.sendBeacon&&(t=h.navigator.sendBeacon(this.ua.toString(),"")),!t&&h.Image&&((new Image).src=this.ua,t=!0),t||(this.h=this.b.Kb(null),this.h.send(this.ua)),this.rb=w(),this.fb()},e.cancel=function(){this.$a=!0,this.Ia()},e.wg=function(t){t&&this.setTimeout(t),this.Ga&&(this.Gb(),this.fb())},e.fb=function(){this.ld=w()+this.Va,this.Oe(this.Va)},e.Oe=function(t){if(null!=this.Ga)throw Error("WatchDog timer not null");this.Ga=Q(u(this.kg,this),t)},e.Gb=function(){this.Ga&&(h.clearTimeout(this.Ga),this.Ga=null)},e.kg=function(){this.Ga=null;var t=w();0<=t-this.ld?this.Hf():(this.a.T("WatchDog timer called too early"),this.Oe(this.ld-t))},e.Hf=function(){this.S&&this.a.ca("Received watchdog timeout even though request loaded successfully"),this.a.Yg(this.pa),2!=this.kc&&(O(3),P(17)),this.Ia(),this.I=2,this.Lb()},e.Lb=function(){this.b.ge()||this.$a||this.b.Vc(this)},e.Ia=function(){this.Gb();var t=this.bc;t&&"function"==typeof t.cb&&t.cb(),this.bc=null,this.Xc.stop(),this.Hc.qb(),this.h&&(t=this.h,this.h=null,t.abort(),t.cb())},e.Jc=function(){return this.I},e.$c=function(t){try{this.b.xe(this,t),O(4)}catch(t){this.a.eb(t,"Error in httprequest callback")}},e=S.prototype,e.C=function(){return this.j},e.H=function(){this.yc();for(var t=[],e=0;e<this.o.length;e++)t.push(this.D[this.o[e]]);return t},e.W=function(){return this.yc(),this.o.concat()},e.va=function(t){return T(this.D,t)},e.X=function(){return 0==this.j},e.clear=function(){this.D={},this.j=this.o.length=0},e.remove=function(t){return!!T(this.D,t)&&(delete this.D[t],this.j--,this.o.length>2*this.j&&this.yc(),!0)},e.yc=function(){if(this.j!=this.o.length){for(var t=0,e=0;t<this.o.length;){var n=this.o[t];T(this.D,n)&&(this.o[e++]=n),t++}this.o.length=e}if(this.j!=this.o.length){var r={};for(e=t=0;t<this.o.length;)T(r,n=this.o[t])||(this.o[e++]=n,r[n]=1),t++;this.o.length=e}},e.get=function(t,e){return T(this.D,t)?this.D[t]:e},e.set=function(t,e){T(this.D,t)||(this.j++,this.o.push(t)),this.D[t]=e},e.addAll=function(t){if(t instanceof S)for(var e=t.W(),n=0;n<e.length;n++)this.set(e[n],t.get(e[n]));else for(e in t)this.set(e,t[e])},e.forEach=function(t,e){for(var n=this.W(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}},e.clone=function(){return new S(this)};var tc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function uc(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}function U(t,e){var n;this.xa=this.Ab=this.qa="",this.Ca=null,this.jb=this.K="",this.O=this.Uf=!1,t instanceof U?(this.O=void 0!==e?e:t.O,this.ub(t.qa),this.fd(t.Ab),this.sb(t.xa),this.tb(t.Ca),this.gc(t.K),this.ed(t.P.clone()),this.cd(t.jb)):t&&(n=String(t).match(tc))?(this.O=!!e,this.ub(n[1]||"",!0),this.fd(n[2]||"",!0),this.sb(n[3]||"",!0),this.tb(n[4]),this.gc(n[5]||"",!0),this.ed(n[6]||"",!0),this.cd(n[7]||"",!0)):(this.O=!!e,this.P=new vc(null,this.O))}function Ec(t){return t instanceof U?t.clone():new U(t,void 0)}function Fc(t,e,n,r){var i=new U(null,void 0);return t&&i.ub(t),e&&i.sb(e),n&&i.tb(n),r&&i.gc(r),i}function Cc(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function wc(t,e,n){return l(t)?(t=encodeURI(t).replace(e,Gc),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Gc(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}e=U.prototype,e.toString=function(){var t=[],e=this.qa;e&&t.push(wc(e,yc,!0),":");var n=this.xa;return(n||"file"==e)&&(t.push("//"),(e=this.Ab)&&t.push(wc(e,yc,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.Ca)&&t.push(":",String(n))),(n=this.K)&&(this.Kc()&&"/"!=n.charAt(0)&&t.push("/"),t.push(wc(n,"/"==n.charAt(0)?zc:Ac,!0))),(n=this.Ud())&&t.push("?",n),(n=this.jb)&&t.push("#",wc(n,Bc)),t.join("")},e.resolve=function(t){var e=this.clone(),n=t.Lf();n?e.ub(t.qa):n=t.Mf(),n?e.fd(t.Ab):n=t.Kc(),n?e.sb(t.xa):n=t.Jf();var r=t.K;if(n)e.tb(t.Ca);else if(n=t.de()){if("/"!=r.charAt(0))if(this.Kc()&&!this.de())r="/"+r;else{var i=e.K.lastIndexOf("/");-1!=i&&(r=e.K.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(-1!=i.indexOf("./")||-1!=i.indexOf("/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],a=0;a<i.length;){var s=i[a++];"."==s?r&&a==i.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&a==i.length&&o.push("")):(o.push(s),r=!0)}r=o.join("/")}else r=i}return n?e.gc(r):n=t.Kf(),n?e.ed(t.P.clone()):n=t.If(),n&&e.cd(t.jb),e},e.clone=function(){return new U(this)},e.ub=function(t,e){this.U(),(this.qa=e?Cc(t,!0):t)&&(this.qa=this.qa.replace(/:$/,""))},e.Lf=function(){return!!this.qa},e.fd=function(t,e){this.U(),this.Ab=e?Cc(t):t},e.Mf=function(){return!!this.Ab},e.sb=function(t,e){this.U(),this.xa=e?Cc(t,!0):t},e.Kc=function(){return!!this.xa},e.tb=function(t){if(this.U(),t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);this.Ca=t}else this.Ca=null},e.Jf=function(){return null!=this.Ca},e.gc=function(t,e){this.U(),this.K=e?Cc(t,!0):t},e.de=function(){return!!this.K},e.Kf=function(){return""!==this.P.toString()},e.ed=function(t,e){this.U(),t instanceof vc?(this.P=t,this.P.dd(this.O)):(e||(t=wc(t,Dc)),this.P=new vc(t,this.O))},e.Ud=function(){return this.P.toString()},e.getQuery=function(){return this.Ud()},e.l=function(t,e){this.U(),this.P.set(t,e)},e.fc=function(t,e){this.U(),n(e)||(e=[String(e)]),this.P.Me(t,e)},e.cd=function(t,e){this.U(),this.jb=e?Cc(t):t},e.If=function(){return!!this.jb},e.Vb=function(){return this.U(),this.l("zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^w()).toString(36)),this},e.removeParameter=function(t){return this.U(),this.P.remove(t),this},e.U=function(){if(this.Uf)throw Error("Tried to modify a read-only Uri")},e.dd=function(t){this.O=t,this.P&&this.P.dd(t)};var yc=/[#\/\?@]/g,Ac=/[#\?:]/g,zc=/[#\?]/g,Dc=/[#\?@]/g,Bc=/#/g;function vc(t,e){this.j=this.m=null,this.ja=t||null,this.O=!!e}function Jc(){}function Kc(){}function Lc(t,e){this.b=t,this.a=e,this.f=this.A=null,this.cc=!1,this.K=null,this.w=-1,this.Dd=this.na=null}function Mc(){this.rd=this.ce=null}function Nc(t){this.D=new S,t&&this.addAll(t)}function Oc(e){var n=typeof e;return"object"==n&&e||"function"==n?"o"+(e[t]||(e[t]=++da)):n.substr(0,1)+e}function Pc(t,e){this.Rc=t,this.map=e,this.context=null}function Qc(t){this.pe=t||Rc,h.PerformanceNavigationTiming?t=0<(t=h.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):t=!!(h.xc&&h.xc.ne&&h.xc.ne()&&h.xc.ne().th),this.Yb=t?this.pe:1,this.v=null,1<this.Yb&&(this.v=new Nc),this.f=null,this.ba=[]}e=vc.prototype,e.$=function(){if(!this.m&&(this.m=new S,this.j=0,this.ja)){var t=this;uc(this.ja,function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})}},e.C=function(){return this.$(),this.j},e.add=function(t,e){this.$(),this.Oa(),t=this.Ma(t);var n=this.m.get(t);return n||this.m.set(t,n=[]),n.push(e),this.j+=1,this},e.remove=function(t){return this.$(),t=this.Ma(t),!!this.m.va(t)&&(this.Oa(),this.j-=this.m.get(t).length,this.m.remove(t))},e.clear=function(){this.Oa(),this.m=null,this.j=0},e.X=function(){return this.$(),0==this.j},e.va=function(t){return this.$(),t=this.Ma(t),this.m.va(t)},e.forEach=function(t,e){this.$(),this.m.forEach(function(n,r){na(n,function(n){t.call(e,n,r,this)},this)},this)},e.W=function(){this.$();for(var t=this.m.H(),e=this.m.W(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},e.H=function(t){this.$();var e=[];if(l(t))this.va(t)&&(e=ta(e,this.m.get(this.Ma(t))));else{t=this.m.H();for(var n=0;n<t.length;n++)e=ta(e,t[n])}return e},e.set=function(t,e){return this.$(),this.Oa(),t=this.Ma(t),this.va(t)&&(this.j-=this.m.get(t).length),this.m.set(t,[e]),this.j+=1,this},e.get=function(t,e){return t&&0<(t=this.H(t)).length?String(t[0]):e},e.Me=function(t,e){this.remove(t),0<e.length&&(this.Oa(),this.m.set(this.Ma(t),ua(e)),this.j+=e.length)},e.toString=function(){if(this.ja)return this.ja;if(!this.m)return"";for(var t=[],e=this.m.W(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.H(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),t.push(a)}}return this.ja=t.join("&")},e.Oa=function(){this.ja=null},e.clone=function(){var t=new vc;return t.ja=this.ja,this.m&&(t.m=this.m.clone(),t.j=this.j),t},e.Ma=function(t){return t=String(t),this.O&&(t=t.toLowerCase()),t},e.dd=function(t){t&&!this.O&&(this.$(),this.Oa(),this.m.forEach(function(t,e){var n=e.toLowerCase();e!=n&&(this.remove(e),this.Me(n,t))},this)),this.O=t},e.extend=function(t){for(var e=0;e<arguments.length;e++)sc(arguments[e],function(t,e){this.add(e,t)},this)},x(Kc,Jc),e=Lc.prototype,e.g=null,e.ga=function(t){this.A=t},e.connect=function(t){this.K=t,t=this.b.Vd(this.K),P(3);var e=this.b.Jb.ce;null!=e?(this.na=this.b.ab(e[0]),this.g=1,this.Ad()):(t.fc("MODE","init"),!this.b.ta&&this.b.aa&&t.fc("X-HTTP-Session-Id",this.b.aa),this.f=new R(this,this.a,void 0,void 0,void 0),this.f.ga(this.A),this.f.md(t,!1,null),this.g=0)},e.Ad=function(){this.a.debug("TestConnection: starting stage 2");var t=this.b.Jb.rd;if(null!=t)this.a.debug(function(){return"Buffered"}),P(4),t?(P(10),this.b.vb(this,!1)):(P(11),this.b.vb(this,!0));else{this.f=new R(this,this.a,void 0,void 0,void 0),this.f.ga(this.A);var e=this.b.Sd(this.na,this.K);P(4),e.fc("TYPE","xmlhttp");var n=this.b.aa,r=this.b.Mc;n&&r&&e.l(n,r),this.f.md(e,!1,this.na)}},e.Kb=function(t){return this.b.Kb(t)},e.abort=function(){this.f&&(this.f.cancel(),this.f=null),this.w=-1},e.ge=function(){return!1},e.xe=function(t,e){if(this.w=t.w,0==this.g)if(this.a.debug("TestConnection: Got data for stage 1"),this.rc(t),e){try{var n=this.b.mc.Bc(e)}catch(t){return this.a.eb(t),void this.b.gd(this)}this.na=this.b.ab(n[0])}else this.a.debug("TestConnection: Null responseText"),this.b.gd(this);else 1==this.g&&(this.cc?P(6):"11111"==e?(P(5),this.cc=!0,this.cf()&&(this.w=200,this.f.cancel(),this.a.debug("Test connection succeeded; using streaming connection"),P(11),this.b.vb(this,!0))):(P(7),this.cc=!1))},e.Vc=function(){this.w=this.f.w,this.f.S?0==this.g?(this.g=1,this.a.debug("TestConnection: request complete for initial check"),this.Ad()):1==this.g&&(this.a.debug("TestConnection: request complete for stage 2"),this.cc?(this.a.debug("Test connection succeeded; using streaming connection"),P(11),this.b.vb(this,!0)):(this.a.debug("Test connection failed; not using streaming"),P(10),this.b.vb(this,!1))):(this.a.debug("TestConnection: request failed, in state "+this.g),0==this.g?P(8):1==this.g&&P(9),this.b.gd(this))},e.rc=function(t){if(!this.b.ta&&(t=t.h)){var e=t.lb("X-Client-Wire-Protocol");this.Dd=e||null,this.b.aa&&((t=t.lb("X-HTTP-Session-Id"))?this.b.Je(t):this.a.T("Missing X_HTTP_SESSION_ID in the handshake response"))}},e.hc=function(){return this.b.hc()},e.Ba=function(){return this.b.Ba()},e.cf=function(){return!C||10<=Number(Ua)},e=Nc.prototype,e.C=function(){return this.D.C()},e.add=function(t){this.D.set(Oc(t),t)},e.addAll=function(t){for(var e=(t=rc(t)).length,n=0;n<e;n++)this.add(t[n])},e.qb=function(t){for(var e=(t=rc(t)).length,n=0;n<e;n++)this.remove(t[n])},e.remove=function(t){return this.D.remove(Oc(t))},e.clear=function(){this.D.clear()},e.X=function(){return this.D.X()},e.contains=function(t){return this.D.va(Oc(t))},e.H=function(){return this.D.H()},e.clone=function(){return new Nc(this)};var Rc=10;function Sc(){this.Ag=this.Ta=void 0}function Tc(){this.ng=new Sc}function Uc(t,e){var n=new $b;n.debug("TestLoadImage: loading "+t);var r=new Image;r.onload=v(Vc,n,r,"TestLoadImage: loaded",!0,e),r.onerror=v(Vc,n,r,"TestLoadImage: error",!1,e),r.onabort=v(Vc,n,r,"TestLoadImage: abort",!1,e),r.ontimeout=v(Vc,n,r,"TestLoadImage: timeout",!1,e),h.setTimeout(function(){r.ontimeout&&r.ontimeout()},1e4),r.src=t}function Vc(t,e,n,r,i){try{t.debug(n),e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,i(r)}catch(e){t.eb(e)}}function V(t){H.call(this),this.headers=new S,this.Ya=t||null,this.ha=!1,this.oc=this.c=null,this.je=this.Ub="",this.Pa=0,this.I="",this.Aa=this.Nc=this.Rb=this.Gc=!1,this.wb=0,this.jc=null,this.De=Wc,this.lc=this.pg=this.Bb=!1}e=Qc.prototype,e.od=function(t){this.v||-1==t.indexOf("spdy")&&-1==t.indexOf("quic")&&-1==t.indexOf("h2")||(this.Yb=this.pe,this.v=new Nc,this.f&&(this.qc(this.f),this.f=null))},e.he=function(){return!!this.f||!!this.v&&this.v.C()>=this.Yb},e.Bf=function(){return this.f?1:this.v?this.v.C():0},e.Lc=function(t){return this.f?this.f==t:!!this.v&&this.v.contains(t)},e.qc=function(t){this.v?this.v.add(t):this.f=t},e.Ce=function(t){this.f&&this.f==t?this.f=null:this.v&&this.v.contains(t)&&this.v.remove(t)},e.cancel=function(){this.ba=this.la(),this.f?(this.f.cancel(),this.f=null):this.v&&!this.v.X()&&(na(this.v.H(),function(t){t.cancel()}),this.v.clear())},e.la=function(){if(null!=this.f)return this.ba.concat(this.f.la());if(null!=this.v&&!this.v.X()){var t=this.ba;return na(this.v.H(),function(e){t=t.concat(e.la())}),t}return ua(this.ba)},e.Ve=function(t){this.ba=this.ba.concat(t)},e.df=function(){this.ba.length=0},Sc.prototype.stringify=function(t){return h.JSON.stringify(t,this.Ta)},Sc.prototype.parse=function(t){return h.JSON.parse(t,this.Ag)},Tc.prototype.mf=function(t,e,n){var i=n||"";try{sc(t,function(t,n){var o=t;r(t)&&(o=(new I).ec(t)),e.push(i+n+"="+encodeURIComponent(o))})}catch(t){throw e.push(i+"type="+encodeURIComponent("_badmap")),t}},Tc.prototype.nf=function(t,e,n){for(var r=-1;;){var i=["count="+e];-1==r?0<e?(r=t[0].Rc,i.push("ofs="+r)):r=0:i.push("ofs="+r);for(var o=!0,a=0;a<e;a++){var s=t[a].Rc,u=t[a].map;if(0>(s-=r))r=Math.max(0,t[a].Rc-100),o=!1;else try{this.mf(u,i,"req"+s+"_")}catch(t){n&&n(u)}}if(o)return i.join("&")}},Tc.prototype.Bc=function(t){return this.ng.parse(t)},x(V,H);var Wc="";V.prototype.s=Yb("goog.net.XhrIo");var Xc=/^https?$/i,Yc=["POST","PUT"];function Zc(t){return C&&Ta(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}function qa(t){return"content-type"==t.toLowerCase()}function $c(t,e){return{type:e,lengthComputable:t.lengthComputable,loaded:t.loaded,total:t.total}}function ad(t){var e="";return Aa(t,function(t,n){e+=n,e+=":",e+=t,e+="\r\n"}),e}function bd(t,e,n){t:{for(r in n){var r=!1;break t}r=!0}if(r)return t;if(n=ad(n),l(t)){if(e=encodeURIComponent(String(e)),e+=n=null!=n?"="+encodeURIComponent(String(n)):""){if(0>(n=t.indexOf("#"))&&(n=t.length),0>(r=t.indexOf("?"))||r>n){r=n;var i=""}else i=t.substring(r+1,n);n=(t=[t.substr(0,r),i,t.substr(n)])[1],t[1]=e?n?n+"&"+e:e:n,t=t[0]+(t[1]?"?"+t[1]:"")+t[2]}return t}return t.l(e,n),t}function cd(t){this.Ed=22,this.He=0,this.M=[],this.a=new $b,this.Jb=new Mc,this.na=this.pd=this.ib=this.K=this.u=this.Mc=this.aa=this.hb=this.N=this.Sb=this.A=null,this.Xe=!0,this.eg=this.Zb=0,this.pf=!!m("internalChannelParams.failFast",t),this.jd=this.Ja=this.wa=this.ia=this.ea=this.i=null,this.We=!0,this.w=this.ke=this.Tb=-1,this.tc=this.Ha=this.La=0,this.Ze=m("internalChannelParams.baseRetryDelayMs",t)||5e3,this.yg=m("internalChannelParams.retryDelaySeedMs",t)||1e4,this.sf=m("internalChannelParams.forwardChannelMaxRetries",t)||2,this.Rd=m("internalChannelParams.forwardChannelRequestTimeoutMs",t)||2e4,this.Ya=t&&t.uh||void 0,this.Eb=void 0,this.Ra=0,this.ic=t&&t.supportsCrossDomainXhr||!1,this.ra="",this.G=new Qc(t&&t.concurrentRequestLimit),this.mc=new Tc,this.ta=!t||void 0===t.backgroundChannelTest||t.backgroundChannelTest,(this.Qd=t&&t.fastHandshake||!1)&&!this.ta&&(this.a.T("Force backgroundChannelTest when fastHandshake is enabled."),this.ta=!0),t&&t.Ld&&this.a.Ld()}function dd(){}function ed(t){for(var e=arguments[0],n=1;n<arguments.length;n++){var r,i=arguments[n];if(0==i.lastIndexOf("/",0))e=i;else(r=""==e)||(r=0<=(r=e.length-1)&&e.indexOf("/",r)==r),e=r?e+i:e+"/"+i}return e}function fd(){if(C&&!(10<=Number(Ua)))throw Error("Environmental error: no available transport.")}function W(t,e){H.call(this),this.b=new cd(e),this.zb=t,this.Wg=e&&e.testUrl?e.testUrl:ed(this.zb,"test"),this.s=Yb("goog.labs.net.webChannel.WebChannelBaseTransport"),this.Tc=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.b.ga(t),t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.Cd&&(t?t["X-WebChannel-Client-Profile"]=e.Cd:t={"X-WebChannel-Client-Profile":e.Cd}),this.b.Kg(t),(t=e&&e.httpHeadersOverwriteParam)&&!va(t)&&this.b.Ig(t),this.Ug=e&&e.supportsCrossDomainXhr||!1,this.Cg=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!va(e)&&(this.b.Jg(e),null!==(t=this.Tc)&&e in t&&(e in(t=this.Tc)&&delete t[e],(t=this.s)&&t.T("Ignore httpSessionIdParam also specified with messageUrlParams: "+e,void 0))),this.yd=new X(this)}function gd(t){jc.call(this);var e=t.__sm__;if(e){t:{for(var n in e){t=n;break t}t=void 0}(this.qe=t)&&(t=this.qe,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function hd(t){kc.call(this),this.status=1,this.errorCode=t}function X(t){this.b=t}e=V.prototype,e.Ne=function(t){this.Bb=t},e.send=function(t,e,n,r){if(this.c)throw Error("[goog.net.XhrIo] Object is active with another request="+this.Ub+"; newUri="+t);e=e?e.toUpperCase():"GET",this.Ub=t,this.I="",this.Pa=0,this.je=e,this.Gc=!1,this.ha=!0,this.c=this.hf(),this.oc=this.Ya?this.Ya.Yd():lc.Yd(),this.c.onreadystatechange=u(this.we,this),this.pg&&"onprogress"in this.c&&(this.c.onprogress=u(function(t){this.ue(t,!0)},this),this.c.upload&&(this.c.upload.onprogress=u(this.ue,this)));try{M(this.s,this.da("Opening Xhr")),this.Nc=!0,this.c.open(e,String(t),!0),this.Nc=!1}catch(t){return M(this.s,this.da("Error opening Xhr: "+t.message)),void this.Od(t)}t=n||"";var i=this.headers.clone();r&&sc(r,function(t,e){i.set(e,t)}),r=pa(i.W()),n=h.FormData&&t instanceof h.FormData,!(0<=la(Yc,e))||r||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach(function(t,e){this.c.setRequestHeader(e,t)},this),this.De&&(this.c.responseType=this.De),"withCredentials"in this.c&&this.c.withCredentials!==this.Bb&&(this.c.withCredentials=this.Bb);try{this.Bd(),0<this.wb&&(this.lc=Zc(this.c),M(this.s,this.da("Will abort after "+this.wb+"ms if incomplete, xhr2 "+this.lc)),this.lc?(this.c.timeout=this.wb,this.c.ontimeout=u(this.Va,this)):this.jc=Kb(this.Va,this.wb,this)),M(this.s,this.da("Sending request")),this.Rb=!0,this.c.send(t),this.Rb=!1}catch(t){M(this.s,this.da("Send error: "+t.message)),this.Od(t)}},e.hf=function(){return this.Ya?this.Ya.Gd():lc.Gd()},e.Va=function(){void 0!==goog&&this.c&&(this.I="Timed out after "+this.wb+"ms, aborting",this.Pa=8,M(this.s,this.da(this.I)),this.dispatchEvent("timeout"),this.abort(8))},e.Od=function(t){this.ha=!1,this.c&&(this.Aa=!0,this.c.abort(),this.Aa=!1),this.I=t,this.Pa=5,this.Md(),this.Hb()},e.Md=function(){this.Gc||(this.Gc=!0,this.dispatchEvent("complete"),this.dispatchEvent("error"))},e.abort=function(t){this.c&&this.ha&&(M(this.s,this.da("Aborting")),this.ha=!1,this.Aa=!0,this.c.abort(),this.Aa=!1,this.Pa=t||7,this.dispatchEvent("complete"),this.dispatchEvent("abort"),this.Hb())},e.F=function(){this.c&&(this.ha&&(this.ha=!1,this.Aa=!0,this.c.abort(),this.Aa=!1),this.Hb(!0)),V.L.F.call(this)},e.we=function(){this.Ka||(this.Nc||this.Rb||this.Aa?this.ve():this.ig())},e.ig=function(){this.ve()},e.ve=function(){if(this.ha&&void 0!==goog)if(this.oc[1]&&4==this.ma()&&2==this.za())M(this.s,this.da("Local request error detected and ignored"));else if(this.Rb&&4==this.ma())Kb(this.we,0,this);else if(this.dispatchEvent("readystatechange"),this.Oc()){M(this.s,this.da("Request complete")),this.ha=!1;try{this.Vf()?(this.dispatchEvent("complete"),this.dispatchEvent("success")):(this.Pa=6,this.I=this.ae()+" ["+this.za()+"]",this.Md())}finally{this.Hb()}}},e.ue=function(t,e){this.dispatchEvent($c(t,"progress")),this.dispatchEvent($c(t,e?"downloadprogress":"uploadprogress"))},e.Hb=function(t){if(this.c){this.Bd();var e=this.c,n=this.oc[0]?aa:null;this.oc=this.c=null,t||this.dispatchEvent("ready");try{e.onreadystatechange=n}catch(e){(t=this.s)&&t.ca("Problem encountered resetting onreadystatechange: "+e.message,void 0)}}},e.Bd=function(){this.c&&this.lc&&(this.c.ontimeout=null),this.jc&&(h.clearTimeout(this.jc),this.jc=null)},e.Ba=function(){return!!this.c},e.Oc=function(){return 4==this.ma()},e.Vf=function(){var t=this.za();t:switch(t){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var e=!0;break t;default:e=!1}return e||0===t&&!this.Sf()},e.Sf=function(){var t=String(this.Ub).match(tc)[1]||null;return!t&&h.self&&h.self.location&&(t=(t=h.self.location.protocol).substr(0,t.length-1)),Xc.test(t?t.toLowerCase():"")},e.ma=function(){return this.c?this.c.readyState:0},e.za=function(){try{return 2<this.ma()?this.c.status:-1}catch(t){return-1}},e.ae=function(){try{return 2<this.ma()?this.c.statusText:""}catch(t){return M(this.s,"Can not get status: "+t.message),""}},e.ya=function(){try{return this.c?this.c.responseText:""}catch(t){return M(this.s,"Can not get responseText: "+t.message),""}},e.Cf=function(t){if(this.c){var e=this.c.responseText;t&&0==e.indexOf(t)&&(e=e.substring(t.length));t:{if(t=e,h.JSON)try{var n=h.JSON.parse(t);break t}catch(t){}n=vb(t)}return n}},e.getResponseHeader=function(t){if(this.c&&this.Oc())return null===(t=this.c.getResponseHeader(t))?void 0:t},e.getAllResponseHeaders=function(){return this.c&&this.Oc()&&this.c.getAllResponseHeaders()||""},e.lb=function(t){return this.c?this.c.getResponseHeader(t):null},e.Xd=function(){return this.Pa},e.Jc=function(){return l(this.I)?this.I:String(this.I)},e.da=function(t){return t+" ["+this.je+" "+this.Ub+" "+this.za()+"]"},e=cd.prototype,e.vc=8,e.g=1,e.connect=function(t,e,n,r,i){this.a.debug("connect()"),P(0),this.K=e,this.hb=n||{},r&&void 0!==i&&(this.hb.OSID=r,this.hb.OAID=i),this.ta&&(this.a.debug("connect() bypassed channel-test."),this.Jb.ce=[],this.Jb.rd=!1),this.ff(t)},e.disconnect=function(){if(this.a.debug("disconnect()"),this.td(),3==this.g){var t=this.Zb++,e=this.ib.clone();e.l("SID",this.ra),e.l("RID",t),e.l("TYPE","terminate"),this.Za(e),new R(this,this.a,this.ra,t,void 0).Bg(e)}this.te()},e.ff=function(t){this.a.debug("connectTest_()"),this.Ja=new Lc(this,this.a),null===this.N&&this.Ja.ga(this.A);var e=t;this.N&&this.A&&(e=bd(t,this.N,this.A)),this.Ja.connect(e)},e.ef=function(){this.a.debug("connectChannel_()"),this.ib=this.Vd(this.K),this.Fc()},e.td=function(){this.Ja&&(this.Ja.abort(),this.Ja=null),this.u&&(this.u.cancel(),this.u=null),this.ia&&(h.clearTimeout(this.ia),this.ia=null),this.Ib(),this.G.cancel(),this.ea&&(h.clearTimeout(this.ea),this.ea=null)},e.ga=function(t){this.A=t},e.Kg=function(t){this.Sb=t},e.Ig=function(t){this.N=t},e.Jg=function(t){this.aa=t},e.Je=function(t){this.Mc=t},e.Le=function(t){this.Ra=t},e.Ng=function(){this.ic=!0},e.Ie=function(t){this.i=t},e.Rf=function(){return!this.jd},e.ad=function(t){1e3==this.M.length&&this.a.ca(function(){return"Already have 1000 queued maps upon queueing "+(new I).ec(t)}),this.M.push(new Pc(this.eg++,t)),3==this.g&&this.Fc()},e.uf=function(){return this.pf?0:this.sf},e.ge=function(){return 0==this.g},e.getState=function(){return this.g},e.Fc=function(){this.G.he()||this.ea||(this.ea=Q(u(this.ze,this),0),this.La=0)},e.bg=function(t){return this.G.Bf()>=this.G.Yb-(this.ea?1:0)?(this.a.ca("Unexpected retry request is scheduled."),!1):this.ea?(this.a.debug("Use the retry request that is already scheduled."),this.M=t.la().concat(this.M),!0):!(1==this.g||2==this.g||this.La>=this.uf())&&(this.a.debug("Going to retry POST"),this.ea=Q(u(this.ze,this,t),this.$d(this.La)),this.La++,!0)},e.ze=function(t){this.ea=null,this.Sg(t)},e.Sg=function(t){this.a.debug("startForwardChannel_"),1==this.g?t?this.a.ca("Not supposed to retry the open"):(this.mg(),this.g=2):3==this.g&&(t?this.oe(t):0==this.M.length?this.a.debug("startForwardChannel_ returned: nothing to send"):this.G.he()?this.a.ca("startForwardChannel_ returned: connection already in progress"):(this.oe(),this.a.debug("startForwardChannel_ finished, sent request")))},e.mg=function(){this.a.debug("open_()"),this.Zb=Math.floor(1e5*Math.random());var t=this.Zb++,e=new R(this,this.a,"",t,void 0),n=this.A;this.Sb&&(n?Fa(n=Da(n),this.Sb):n=this.Sb),null===this.N&&e.ga(n);var r=this.Kd(e),i=this.ib.clone();i.l("RID",t),0<this.Ed&&i.l("CVER",this.Ed),this.ta&&this.aa&&i.l("X-HTTP-Session-Id",this.aa),this.Za(i),this.N&&n&&bd(i,this.N,n),this.G.qc(e),this.Qd?(i.l("$req",r),i.l("SID","null"),e.Gg(),e.nd(i,null)):e.nd(i,r)},e.oe=function(t){var e=t?t.R:this.Zb++,n=this.ib.clone();n.l("SID",this.ra),n.l("RID",e),n.l("AID",this.Tb),this.Za(n),this.N&&this.A&&bd(n,this.N,this.A),e=new R(this,this.a,this.ra,e,this.La+1),null===this.N&&e.ga(this.A),t&&this.vg(t),t=this.Kd(e),e.setTimeout(Math.round(.5*this.Rd)+Math.round(.5*this.Rd*Math.random())),this.G.qc(e),e.nd(n,t)},e.Za=function(t){this.i&&sc({},function(e,n){t.l(n,e)})},e.Kd=function(t){var e=Math.min(this.M.length,1e3),n=this.i?u(this.i.Ye,this.i,this):null;return n=this.mc.nf(this.M,e,n),t.Mg(this.M.splice(0,e)),n},e.vg=function(t){this.M=t.la().concat(this.M)},e.Nd=function(){if(!this.u&&!this.ia){this.tc=1;var t=this.ye;Eb||Fb(),Hb||(Eb(),Hb=!0),Ib.add(t,this),this.Ha=0}},e.Sc=function(){return this.u||this.ia?(this.a.ca("Request already in progress"),!1):!(3<=this.Ha)&&(this.a.debug("Going to retry GET"),this.tc++,this.ia=Q(u(this.ye,this),this.$d(this.Ha)),this.Ha++,!0)},e.ye=function(){this.ia=null,this.Qg()},e.Qg=function(){this.a.debug("Creating new HttpRequest"),this.u=new R(this,this.a,this.ra,"rpc",this.tc),null===this.N&&this.u.ga(this.A),this.u.Le(this.Ra);var t=this.pd.clone();t.l("RID","rpc"),t.l("SID",this.ra),t.l("CI",this.jd?"0":"1"),t.l("AID",this.Tb),this.Za(t),t.l("TYPE","xmlhttp"),this.N&&this.A&&bd(t,this.N,this.A),this.Eb&&this.u.setTimeout(this.Eb),this.u.md(t,!0,this.na),this.a.debug("New Request created")},e.vb=function(t,e){this.a.debug("Test Connection Finished");var n=t.Dd;n&&this.G.od(n),this.jd=this.We&&e,this.w=t.w,this.ef()},e.gd=function(t){this.a.debug("Test Connection Failed"),this.w=t.w,this.sa(2)},e.xe=function(t,e){if(0!=this.g&&(this.u==t||this.G.Lc(t)))if(this.w=t.w,!t.mb&&this.G.Lc(t)&&3==this.g){try{var r=this.mc.Bc(e)}catch(t){r=null}n(r)&&3==r.length?this.Gf(r,t):(this.a.debug("Bad POST response data returned"),this.sa(11))}else(t.mb||this.u==t)&&this.Ib(),va(e)||(r=this.mc.Bc(e),this.hg(r,t))},e.Gf=function(t,e){0==t[0]?this.Ff(e):(this.ke=t[1],0<(e=this.ke-this.Tb)&&(t=t[2],this.a.debug(t+" bytes (in "+e+" arrays) are outstanding on the BackChannel"),this.Pg(t)&&!this.wa&&(this.wa=Q(u(this.fg,this),6e3))))},e.Ff=function(t){if(this.a.debug("Server claims our backchannel is missing."),this.ia)this.a.debug("But we are currently starting the request.");else{if(this.u){if(!(this.u.rb+3e3<t.rb))return;this.Ib(),this.u.cancel(),this.u=null}else this.a.T("We do not have a BackChannel established");this.Sc(),P(18)}},e.Pg=function(t){return 37500>t&&!this.Rf()&&0==this.Ha},e.ab=function(t){return this.Xe?this.i?this.i.ab(t):t:null},e.fg=function(){null!=this.wa&&(this.wa=null,this.u.cancel(),this.u=null,this.Sc(),P(19))},e.Ib=function(){null!=this.wa&&(h.clearTimeout(this.wa),this.wa=null)},e.Vc=function(t){this.a.debug("Request complete");var e=null;if(this.u==t){this.Ib(),this.u=null;var n=2}else{if(!this.G.Lc(t))return;e=t.la(),this.G.Ce(t),n=1}if(this.w=t.w,0!=this.g)if(t.S)1==n?(dc(t.Da?t.Da.length:0,w()-t.rb,this.La),this.Fc()):this.Nd();else{var r=t.Jc();if(3==r||0==r&&0<this.w)this.a.debug("Not retrying due to error type");else{var i=this;if(this.a.debug(function(){return"Maybe retrying, last error: "+oc(r,i.w)}),1==n&&this.bg(t)||2==n&&this.Sc())return;this.a.debug("Exceeded max number of retries")}switch(e&&0<e.length&&this.G.Ve(e),this.a.debug("Error: HTTP request failed"),r){case 1:this.sa(5);break;case 4:this.sa(10);break;case 3:this.sa(6);break;default:this.sa(2)}}},e.$d=function(t){var e=this.Ze+Math.floor(Math.random()*this.yg);return this.Ba()||(this.a.debug("Inactive channel"),e*=2),e*t},e.rc=function(t){if(this.ta&&(t=t.h)){var e=t.lb("X-Client-Wire-Protocol");e&&this.G.od(e),this.aa&&((t=t.lb("X-HTTP-Session-Id"))?(this.Je(t),this.ib.l(this.aa,t)):this.a.T("Missing X_HTTP_SESSION_ID in the handshake response"))}},e.hg=function(t,e){for(var n=this.i&&this.i.uc?[]:null,r=0;r<t.length;r++){var i=t[r];if(this.Tb=i[0],i=i[1],2==this.g)if("c"==i[0]){this.ra=i[1],this.na=this.ab(i[2]);var o=i[3];null!=o&&(this.vc=o,this.a.info("VER="+this.vc)),null!=(o=i[4])&&(this.He=o,this.a.info("SVER="+this.He)),null!=(i=i[5])&&"number"==typeof i&&0<i&&(this.Eb=i*=1.5,this.a.info("backChannelRequestTimeoutMs_="+i)),this.rc(e),this.g=3,this.i&&this.i.zd(),this.Rg(e)}else"stop"!=i[0]&&"close"!=i[0]||this.sa(7);else 3==this.g&&("stop"==i[0]||"close"==i[0]?(n&&0!=n.length&&(this.i.uc(this,n),n.length=0),"stop"==i[0]?this.sa(7):this.disconnect()):"noop"!=i[0]&&(n?n.push(i):this.i&&this.i.xd(i)),this.Ha=0)}n&&0!=n.length&&this.i.uc(this,n)},e.Rg=function(t){this.pd=this.Sd(this.na,this.K),t.mb?(this.a.debug("Upgrade the handshake request to a backchannel."),this.G.Ce(t),t.wg(this.Eb),this.u=t):this.Nd()},e.sa=function(t){if(this.a.info("Error code "+t),2==t){var e=null;this.i&&(e=null);var n=u(this.Vg,this);e||(e=new U("//www.google.com/images/cleardot.gif"),h.location&&"http"==h.location.protocol||e.ub("https"),e.Vb()),Uc(e.toString(),n)}else P(2);this.gg(t)},e.Vg=function(t){t?(this.a.info("Successfully pinged google.com"),P(2)):(this.a.info("Failed to ping google.com"),P(1))},e.gg=function(t){this.a.debug("HttpChannel: error - "+t),this.g=0,this.i&&this.i.wd(t),this.te(),this.td()},e.te=function(){if(this.g=0,this.w=-1,this.i){var t=this.G.la();if(0!=t.length||0!=this.M.length){var e=this;this.a.debug(function(){return"Number of undelivered maps, pending: "+t.length+", outgoing: "+e.M.length}),this.G.df(),ua(this.M),this.M.length=0}this.i.vd()}},e.Vd=function(t){return t=this.Fd(null,t),this.a.debug("GetForwardChannelUri: "+t),t},e.Sd=function(t,e){return t=this.Fd(this.hc()?t:null,e),this.a.debug("GetBackChannelUri: "+t),t},e.Fd=function(t,e){var n=Ec(e);if(""!=n.xa)t&&n.sb(t+"."+n.xa),n.tb(n.Ca);else{var r=h.location;n=Fc(r.protocol,t?t+"."+r.hostname:r.hostname,+r.port,e)}return this.hb&&Aa(this.hb,function(t,e){n.l(e,t)}),t=this.aa,e=this.Mc,t&&e&&n.l(t,e),n.l("VER",this.vc),this.Za(n),n},e.Kb=function(t){if(t&&!this.ic)throw Error("Can't create secondary domain capable XhrIo object.");return(t=new V(this.Ya)).Ne(this.ic),t},e.Ba=function(){return!!this.i&&this.i.Ba()},e.hc=function(){return this.ic},e=dd.prototype,e.uc=null,e.zd=function(){},e.xd=function(){},e.wd=function(){},e.vd=function(){},e.Ba=function(){return!0},e.Ye=function(){},e.ab=function(t){return t},fd.prototype.gf=function(t,e){return new W(t,e)},x(W,H),e=W.prototype,e.addEventListener=function(t,e,n,r){W.L.addEventListener.call(this,t,e,n,r)},e.removeEventListener=function(t,e,n,r){W.L.removeEventListener.call(this,t,e,n,r)},e.open=function(){this.b.Ie(this.yd),this.Ug&&this.b.Ng(),this.b.connect(this.Wg,this.zb,this.Tc||void 0)},e.close=function(){this.b.disconnect()},e.send=function(t){if(l(t)){var e={};e.__data__=t,this.b.ad(e)}else this.Cg?((e={}).__data__=(new I).ec(t),this.b.ad(e)):this.b.ad(t)},e.F=function(){this.b.Ie(null),delete this.yd,this.b.disconnect(),delete this.b,W.L.F.call(this)},x(gd,jc),x(hd,kc),x(X,dd),X.prototype.zd=function(){Zb(this.b.s,"WebChannel opened on "+this.b.zb),this.b.dispatchEvent("a")},X.prototype.xd=function(t){this.b.dispatchEvent(new gd(t))},X.prototype.wd=function(t){Zb(this.b.s,"WebChannel aborted on "+this.b.zb+" due to channel error: "+t),this.b.dispatchEvent(new hd(t))},X.prototype.vd=function(){Zb(this.b.s,"WebChannel closed on "+this.b.zb),this.b.dispatchEvent("b")};var id=v(function(t,e){function n(){}n.prototype=t.prototype;var r=new n;return t.apply(r,Array.prototype.slice.call(arguments,1)),r},fd);function jd(){this.V=[],this.Z=[]}function kd(t,e){if(z.call(this),this.re=t||0,this.Xb=e||10,this.re>this.Xb)throw Error(ld);this.fa=new jd,this.oa=new Nc,this.Cc=0,this.Pc=null,this.Db()}e=jd.prototype,e.Zf=function(){0==this.V.length&&(this.V=this.Z,this.V.reverse(),this.Z=[])},e.enqueue=function(t){this.Z.push(t)},e.bb=function(){return this.Zf(),this.V.pop()},e.C=function(){return this.V.length+this.Z.length},e.X=function(){return 0==this.V.length&&0==this.Z.length},e.clear=function(){this.V=[],this.Z=[]},e.contains=function(t){return 0<=la(this.V,t)||0<=la(this.Z,t)},e.remove=function(t){var e=this.V,n=ma(e,t);return 0<=n?(Array.prototype.splice.call(e,n,1),e=!0):e=!1,e||sa(this.Z,t)},e.H=function(){for(var t=[],e=this.V.length-1;0<=e;--e)t.push(this.V[e]);var n=this.Z.length;for(e=0;e<n;++e)t.push(this.Z[e]);return t},x(kd,z);var ld="[goog.structs.Pool] Min can not be greater than max";function md(t,e){this.ie=t,this.kd=e}function nd(t){this.Y=[],t&&this.Pf(t)}function od(){nd.call(this)}function Y(t,e){this.Jd=void 0,this.dc=new od,kd.call(this,t,e)}function Z(t,e,n,r){this.Nf=t,this.Bb=!!r,Y.call(this,e,n)}e=kd.prototype,e.Nb=function(){var t=w();if(!(null!=this.Pc&&t-this.Pc<this.Cc)){var e=this.ug();return e&&(this.Pc=t,this.oa.add(e)),e}},e.sg=function(t){return!!this.oa.remove(t)&&(this.pc(t),!0)},e.ug=function(){for(var t;0<this.Wd()&&(t=this.fa.bb(),!this.Uc(t));)this.Db();return!t&&this.C()<this.Xb&&(t=this.zc()),t},e.pc=function(t){this.oa.remove(t),this.Uc(t)&&this.C()<this.Xb?this.fa.enqueue(t):this.Dc(t)},e.Db=function(){for(var t=this.fa;this.C()<this.re;)t.enqueue(this.zc());for(;this.C()>this.Xb&&0<this.Wd();)this.Dc(t.bb())},e.zc=function(){return{}},e.Dc=function(t){if("function"==typeof t.cb)t.cb();else for(var e in t)t[e]=null},e.Uc=function(t){return"function"!=typeof t.bf||t.bf()},e.contains=function(t){return this.fa.contains(t)||this.oa.contains(t)},e.C=function(){return this.fa.C()+this.oa.C()},e.vf=function(){return this.oa.C()},e.Wd=function(){return this.fa.C()},e.X=function(){return this.fa.X()&&this.oa.X()},e.F=function(){if(kd.L.F.call(this),0<this.vf())throw Error("[goog.structs.Pool] Objects not released");delete this.oa;for(var t=this.fa;!t.X();)this.Dc(t.bb());delete this.fa},md.prototype.getKey=function(){return this.ie},md.prototype.clone=function(){return new md(this.ie,this.kd)},e=nd.prototype,e.fe=function(t,e){var n=this.Y;n.push(new md(t,e)),this.dg(n.length-1)},e.Pf=function(t){if(t instanceof nd){var e=t.W();if(t=t.H(),0>=this.C()){for(var n=this.Y,r=0;r<e.length;r++)n.push(new md(e[r],t[r]));return}}else e=Ca(t),t=Ba(t);for(r=0;r<e.length;r++)this.fe(e[r],t[r])},e.remove=function(){var t=this.Y,e=t.length,n=t[0];if(!(0>=e))return 1==e?ra(t):(t[0]=t.pop(),this.cg()),n.kd},e.cg=function(){for(var t=0,e=this.Y,n=e.length,r=e[t];t<n>>1;){var i=this.xf(t),o=this.Df(t);if(e[i=o<n&&e[o].getKey()<e[i].getKey()?o:i].getKey()>r.getKey())break;e[t]=e[i],t=i}e[t]=r},e.dg=function(t){for(var e=this.Y,n=e[t];0<t;){var r=this.Af(t);if(!(e[r].getKey()>n.getKey()))break;e[t]=e[r],t=r}e[t]=n},e.xf=function(t){return 2*t+1},e.Df=function(t){return 2*t+2},e.Af=function(t){return t-1>>1},e.H=function(){for(var t=this.Y,e=[],n=t.length,r=0;r<n;r++)e.push(t[r].kd);return e},e.W=function(){for(var t=this.Y,e=[],n=t.length,r=0;r<n;r++)e.push(t[r].getKey());return e},e.va=function(t){return oa(this.Y,function(e){return e.getKey()==t})},e.clone=function(){return new nd(this)},e.C=function(){return this.Y.length},e.X=function(){return 0==this.Y.length},e.clear=function(){ra(this.Y)},x(od,nd),od.prototype.enqueue=function(t,e){this.fe(t,e)},od.prototype.bb=function(){return this.remove()},x(Y,kd),e=Y.prototype,e.Nb=function(t,e){if(!t)return(t=Y.L.Nb.call(this))&&this.Cc&&(this.Jd=h.setTimeout(u(this.Ob,this),this.Cc)),t;this.dc.enqueue(void 0!==e?e:100,t),this.Ob()},e.Ob=function(){for(var t=this.dc;0<t.C();){var e=this.Nb();if(!e)break;t.bb().apply(this,[e])}},e.pc=function(t){Y.L.pc.call(this,t),this.Ob()},e.Db=function(){Y.L.Db.call(this),this.Ob()},e.F=function(){Y.L.F.call(this),h.clearTimeout(this.Jd),this.dc.clear(),this.dc=null},x(Z,Y),Z.prototype.zc=function(){var t=new V,e=this.Nf;return e&&e.forEach(function(e,n){t.headers.set(n,e)}),this.Bb&&t.Ne(!0),t},Z.prototype.Uc=function(t){return!t.Ka&&!t.Ba()},fd.prototype.createWebChannel=fd.prototype.gf,W.prototype.send=W.prototype.send,W.prototype.open=W.prototype.open,W.prototype.close=W.prototype.close,ec.NO_ERROR=0,ec.TIMEOUT=8,ec.HTTP_ERROR=6,fc.COMPLETE="complete",hc.EventType=ic,ic.OPEN="a",ic.CLOSE="b",ic.ERROR="c",ic.MESSAGE="d",H.prototype.listen=H.prototype.ob,Z.prototype.getObject=Z.prototype.Nb,Z.prototype.releaseObject=Z.prototype.sg,V.prototype.listenOnce=V.prototype.Qc,V.prototype.getLastError=V.prototype.Jc,V.prototype.getLastErrorCode=V.prototype.Xd,V.prototype.getStatus=V.prototype.za,V.prototype.getStatusText=V.prototype.ae,V.prototype.getResponseJson=V.prototype.Cf,V.prototype.getResponseText=V.prototype.ya,V.prototype.getResponseText=V.prototype.ya,V.prototype.send=V.prototype.send;var src={createWebChannelTransport:id,ErrorCode:ec,EventType:fc,WebChannel:hc,XhrIoPool:Z},src_1=src.createWebChannelTransport,src_2=src.ErrorCode,src_3=src.EventType,src_4=src.WebChannel,src_5=src.XhrIoPool;__webpack_exports__.default=src}.call(this,__webpack_require__(0))},function(t,e,n){"use strict";n.r(e);var r=n(2),i=n(1);n(12);i.initializeApp({apiKey:"AIzaSyDZEYW94vKbwm0GDOnRO3hTK1hAg_JWZ5s",authDomain:"mvp-ionic-bf833.firebaseapp.com",databaseURL:"https://mvp-ionic-bf833.firebaseio.com",projectId:"mvp-ionic-bf833",storageBucket:"mvp-ionic-bf833.appspot.com",messagingSenderId:"208329950851"}),i.firestore().settings({timestampsInSnapshots:!0}),r(function(){i.firestore().collection("proyectos").get().then(function(t){t.docs.forEach(function(t){r(".row").append('\n                    <div class="col m4 s6">\n                    <div class="card">\n                        <div class="content">\n                        <span>'+t.data().titulo+'</span>\n                        <p class="des">'+t.data().descripcion+'</p>\n                        </div>\n            \n                        <div class="link_action">\n                        <a href="'+t.data().url+'" target="_blank">\n                            <i class="fas fa-arrow-right"></i>\n                        </a>\n                        </div>\n                    </div>\n                    </div>\n                ')})})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXBwL2Rpc3QvaW5kZXguY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9kaXN0L2luZGV4LmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9kaXN0L2luZGV4LmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2ZpcmVzdG9yZS9kaXN0L2luZGV4LmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2xvZ2dlci9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3dlYmNoYW5uZWwtd3JhcHBlci9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJldmFsIiwiZSIsIndpbmRvdyIsImZpcmViYXNlIiwiZXgiLCJfaW50ZXJvcERlZmF1bHQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsImZhY3RvcnkiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInNsaWNlIiwiY29uY2F0IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJub2RlIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwib3B0aW9ucyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsIml0ZXJhdG9yIiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZWxzIiwic2VlZCIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsIm5vZGVOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsImpvaW4iLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwidG1wIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwidmFsIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwiPiIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJjYXRjaCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInNldFRpbWVvdXQiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJzd2FwIiwib2xkIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImhpZGUiLCJ0b2dnbGUiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsInJodG1sIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiZGl2IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiZXJyIiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94IiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImhlaWdodCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInBhcnNlSW50IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5IiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJ1dGlsIiwiREVGQVVMVF9FTlRSWV9OQU1FIiwidG9rZW5MaXN0ZW5lcnMiLCJGaXJlYmFzZUFwcEltcGwiLCJjb25maWciLCJmaXJlYmFzZV8iLCJpc0RlbGV0ZWRfIiwic2VydmljZXNfIiwibmFtZV8iLCJfYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkIiwiYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkIiwib3B0aW9uc18iLCJkZWVwQ29weSIsIklOVEVSTkFMIiwiZ2V0VWlkIiwiZ2V0VG9rZW4iLCJQcm9taXNlIiwiYWRkQXV0aFRva2VuTGlzdGVuZXIiLCJyZW1vdmVBdXRoVG9rZW5MaXN0ZW5lciIsImxpc3RlbmVyIiwiY2hlY2tEZXN0cm95ZWRfIiwiZGVsZXRlIiwiX3RoaXMiLCJyZW1vdmVBcHAiLCJzZXJ2aWNlcyIsImZvckVhY2giLCJzZXJ2aWNlS2V5IiwiaW5zdGFuY2VLZXkiLCJzZXJ2aWNlIiwiX2dldFNlcnZpY2UiLCJpbnN0YW5jZUlkZW50aWZpZXIiLCJpbnN0YW5jZVNwZWNpZmllciIsImZhY3RvcmllcyIsImV4dGVuZEFwcCIsImRlZXBFeHRlbmQiLCJhcHBFcnJvcnMiLCJsb2ciLCJFcnJvckZhY3RvcnkiLCJuby1hcHAiLCJiYWQtYXBwLW5hbWUiLCJkdXBsaWNhdGUtYXBwIiwiYXBwLWRlbGV0ZWQiLCJkdXBsaWNhdGUtc2VydmljZSIsInNhLW5vdC1zdXBwb3J0ZWQiLCJpbnZhbGlkLWFwcC1hcmd1bWVudCIsImNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlIiwiYXBwc18iLCJhcHBIb29rcyIsImluaXRpYWxpemVBcHAiLCJyYXdDb25maWciLCJuYW1lXzEiLCJhcHAiLCJjYWxsQXBwSG9va3MiLCJhcHBzIiwiU0RLX1ZFUlNJT04iLCJyZWdpc3RlclNlcnZpY2UiLCJjcmVhdGVTZXJ2aWNlIiwic2VydmljZVByb3BlcnRpZXMiLCJhcHBIb29rIiwiYWxsb3dNdWx0aXBsZUluc3RhbmNlcyIsImdldEFwcHMiLCJzZXJ2aWNlTmFtZXNwYWNlIiwiYXBwQXJnIiwiX2kiLCJleHRlbmROYW1lc3BhY2UiLCJjcmVhdGVTdWJzY3JpYmUiLCJ1c2VBc1NlcnZpY2UiLCJldmVudE5hbWUiLCJzZXJ2aWNlTmFtZSIsImZhY3RvcnlOYW1lIiwidXNlU2VydmljZSIsInBhdGNoUHJvcGVydHkiLCJkZWZhdWx0IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fZXh0ZW5kcyIsIl9fYXNzaWduIiwiX19yZXN0IiwiX19kZWNvcmF0ZSIsIl9fcGFyYW0iLCJfX21ldGFkYXRhIiwiX19hd2FpdGVyIiwiX19nZW5lcmF0b3IiLCJfX2V4cG9ydFN0YXIiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsIl9fc3ByZWFkIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJfX2FzeW5jRGVsZWdhdG9yIiwiX19hc3luY1ZhbHVlcyIsIl9fbWFrZVRlbXBsYXRlT2JqZWN0IiwiX19pbXBvcnRTdGFyIiwiX19pbXBvcnREZWZhdWx0IiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX18iLCJhc3NpZ24iLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJkZWNvcmF0b3JzIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJtZXRhZGF0YSIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZiIsInkiLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsInRocm93IiwicmV0dXJuIiwib3AiLCJhciIsImFzeW5jSXRlcmF0b3IiLCJxIiwicmVzdW1lIiwiZnVsZmlsbCIsInNldHRsZSIsImNvb2tlZCIsIm1vZCIsImsiLCJzZXRJbW1lZGlhdGUiLCJzZXRUaW1lb3V0RnVuYyIsIl9zdGF0ZSIsIl9oYW5kbGVkIiwiX3ZhbHVlIiwiX2RlZmVycmVkcyIsImRvUmVzb2x2ZSIsIl9pbW1lZGlhdGVGbiIsImNiIiwibmV3VmFsdWUiLCJmaW5hbGUiLCJfdW5oYW5kbGVkUmVqZWN0aW9uRm4iLCJyZWFzb24iLCJwcm9tIiwicmVzIiwicmFjZSIsImdsb2JhbE5TIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJfZ2xvYmFsIiwiX19nIiwiX2NvcmUiLCJjb3JlIiwiX19lIiwiX2lzT2JqZWN0IiwiaXQiLCJfYW5PYmplY3QiLCJfZmFpbHMiLCJfZGVzY3JpcHRvcnMiLCJfZG9tQ3JlYXRlIiwiX2llOERvbURlZmluZSIsIl90b1ByaW1pdGl2ZSIsIlMiLCJ2YWx1ZU9mIiwiZFAiLCJfb2JqZWN0RHAiLCJPIiwiQXR0cmlidXRlcyIsIl9wcm9wZXJ0eURlc2MiLCJiaXRtYXAiLCJfaGlkZSIsIl9oYXMiLCJweCIsIl91aWQiLCJfcmVkZWZpbmUiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsIl9jdHgiLCJfYUZ1bmN0aW9uIiwiJGV4cG9ydCIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiQiIsImV4cFByb3RvIiwiVSIsIlciLCJSIiwiX2V4cG9ydCIsIl9jb2YiLCJfaW9iamVjdCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX2RlZmluZWQiLCJfdG9PYmplY3QiLCJmbG9vciIsIl90b0ludGVnZXIiLCJtaW4iLCJfdG9MZW5ndGgiLCJfaXNBcnJheSIsInN0b3JlIiwiX3NoYXJlZCIsIl93a3MiLCJVU0VfU1lNQk9MIiwiU1BFQ0lFUyIsIl9hcnJheVNwZWNpZXNDcmVhdGUiLCJDIiwiX2FycmF5TWV0aG9kcyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvIiwiX2FkZFRvVW5zY29wYWJsZXMiLCIkZmluZCIsImZvcmNlZCIsIiRmaW5kJDEiLCJmb3JjZWQkMSIsImZpbmRJbmRleCIsIl90b0lvYmplY3QiLCJtaW4kMSIsInNoYXJlZCIsIl9zaGFyZWRLZXkiLCJhcnJheUluZGV4T2YiLCJJU19JTkNMVURFUyIsImZyb21JbmRleCIsIl90b0Fic29sdXRlSW5kZXgiLCJfYXJyYXlJbmNsdWRlcyIsIklFX1BST1RPIiwiX29iamVjdEtleXNJbnRlcm5hbCIsIm5hbWVzIiwiX2VudW1CdWdLZXlzIiwiX29iamVjdEtleXMiLCJfb2JqZWN0R29wcyIsIl9vYmplY3RQaWUiLCIkYXNzaWduIiwiX29iamVjdEFzc2lnbiIsIkEiLCJLIiwiVCIsImFMZW4iLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwiTUFUQ0giLCJfc3RyaW5nQ29udGV4dCIsInNlYXJjaFN0cmluZyIsIk5BTUUiLCJpc1JlZ0V4cCIsIl9pc1JlZ2V4cCIsIk1BVENIJDEiLCIkc3RhcnRzV2l0aCIsIktFWSIsInJlIiwiX2ZhaWxzSXNSZWdleHAiLCJzdGFydHNXaXRoIiwic2VhcmNoIiwicmVwZWF0Iiwic3RyIiwiSW5maW5pdHkiLCJSYW5nZUVycm9yIiwiX21ldGEiLCJNRVRBIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsImRlZiIsIl9zZXRUb1N0cmluZ1RhZyIsInN0YXQiLCJfd2tzRXh0IiwiX3drc0RlZmluZSIsIiRTeW1ib2wiLCJjaGFyQXQiLCJfb2JqZWN0RHBzIiwiZGVmaW5lUHJvcGVydGllcyIsIlByb3BlcnRpZXMiLCJkb2N1bWVudCQxIiwiX2h0bWwiLCJJRV9QUk9UTyQxIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJjb250ZW50V2luZG93Iiwid3JpdGUiLCJjbG9zZSIsIl9vYmplY3RDcmVhdGUiLCJoaWRkZW5LZXlzIiwiX29iamVjdEdvcG4iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ09QTiIsInRvU3RyaW5nJDEiLCJ3aW5kb3dOYW1lcyIsIl9vYmplY3RHb3BuRXh0IiwiZ2V0V2luZG93TmFtZXMiLCJnT1BEIiwiX29iamVjdEdvcGQiLCJnT1BEJDEiLCJkUCQxIiwiZ09QTiQxIiwiJEpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiT2JqZWN0UHJvdG8iLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJEIiwicHJvdG9EZXNjIiwic3ltIiwiX2siLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwic3ltYm9scyIsIl9lbnVtS2V5cyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCIkc2V0IiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIlRBRyQxIiwiQVJHIiwidHJ5R2V0IiwiY2FsbGVlIiwiX2NsYXNzb2YiLCJfaXRlcmF0b3JzIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJfaXRlckNyZWF0ZSIsIkNvbnN0cnVjdG9yIiwiSUVfUFJPVE8kMiIsIk9iamVjdFByb3RvJDEiLCJfb2JqZWN0R3BvIiwiSVRFUkFUT1IiLCJCVUdHWSIsInJldHVyblRoaXMiLCJfaXRlckRlZmluZSIsIkJhc2UiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwibWV0aG9kcyIsImdldE1ldGhvZCIsImtpbmQiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImVudHJpZXMiLCIkYXQiLCJUT19TVFJJTkciLCJfc3RyaW5nQXQiLCJpdGVyYXRlZCIsIl90IiwicG9pbnQiLCJfaXRlclN0ZXAiLCJlczZfYXJyYXlfaXRlcmF0b3IiLCJBcmd1bWVudHMiLCJJVEVSQVRPUiQxIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsInNjb3BlIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwiaXRlbSIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJhdHRhY2hUbyIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbiIsIk1lc3NhZ2VDaGFubmVsIiwiY2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbiIsImluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24iLCJ0YXNrIiwiZmV0Y2giLCJzZWFyY2hQYXJhbXMiLCJpdGVyYWJsZSIsImJsb2IiLCJCbG9iIiwiZm9ybURhdGEiLCJhcnJheUJ1ZmZlciIsInZpZXdDbGFzc2VzIiwiaXNEYXRhVmlldyIsIkRhdGFWaWV3IiwiaXNQcm90b3R5cGVPZiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJIZWFkZXJzIiwibm9ybWFsaXplTmFtZSIsIm5vcm1hbGl6ZVZhbHVlIiwib2xkVmFsdWUiLCJpdGVtcyIsIml0ZXJhdG9yRm9yIiwiUmVxdWVzdCIsIl9ib2R5SW5pdCIsIkJvZHkiLCJSZXNwb25zZSIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsInJlcXVlc3QiLCJyYXdIZWFkZXJzIiwibGluZSIsInBhcnNlSGVhZGVycyIsInJlc3BvbnNlVVJMIiwiY3JlZGVudGlhbHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJwb2x5ZmlsbCIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJidWZmZXJDbG9uZSIsImJ1ZiIsIlVpbnQ4QXJyYXkiLCJieXRlTGVuZ3RoIiwiYnVmZmVyIiwiX2luaXRCb2R5IiwiX2JvZHlUZXh0IiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlYWRBc1RleHQiLCJyZWFkQmxvYkFzVGV4dCIsImNoYXJzIiwicmVhZEFycmF5QnVmZmVyQXNUZXh0IiwiZGVjb2RlIiwidXBjYXNlZCIsIm5vcm1hbGl6ZU1ldGhvZCIsInJlZmVycmVyIiwiZm9ybSIsImJ5dGVzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYm9keUluaXQiLCJvayIsInRzbGliXzEiLCJDT05TVEFOVFMiLCJOT0RFX0NMSUVOVCIsIk5PREVfQURNSU4iLCJhc3NlcnRpb24iLCJhc3NlcnRpb25FcnJvciIsInN0cmluZ1RvQnl0ZUFycmF5IiwiYmFzZTY0IiwiYnl0ZVRvQ2hhck1hcF8iLCJjaGFyVG9CeXRlTWFwXyIsImJ5dGVUb0NoYXJNYXBXZWJTYWZlXyIsImNoYXJUb0J5dGVNYXBXZWJTYWZlXyIsIkVOQ09ERURfVkFMU19CQVNFIiwiRU5DT0RFRF9WQUxTIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJhdG9iIiwiZW5jb2RlQnl0ZUFycmF5Iiwib3B0X3dlYlNhZmUiLCJpbml0XyIsImJ5dGVUb0NoYXJNYXAiLCJvdXRwdXQiLCJieXRlMSIsImhhdmVCeXRlMiIsImJ5dGUyIiwiaGF2ZUJ5dGUzIiwiYnl0ZTMiLCJvdXRCeXRlMSIsIm91dEJ5dGUyIiwib3V0Qnl0ZTMiLCJvdXRCeXRlNCIsImVuY29kZVN0cmluZyIsImJ0b2EiLCJkZWNvZGVTdHJpbmciLCJjMSIsImMyIiwidSIsImMzIiwiYnl0ZUFycmF5VG9TdHJpbmciLCJkZWNvZGVTdHJpbmdUb0J5dGVBcnJheSIsImNoYXJUb0J5dGVNYXAiLCJieXRlNCIsImJhc2U2NERlY29kZSIsImdldFRpbWUiLCJ3cmFwQ2FsbGJhY2siLCJnZXRVQSIsIm5hdmlnYXRvciIsIkVSUk9SX05BTUUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZpcmViYXNlRXJyb3IiLCJlcnJvcnMiLCJ0ZW1wbGF0ZSIsImZ1bGxDb2RlIiwianNvbkV2YWwiLCJjbGFpbXMiLCJzaWduYXR1cmUiLCJvYmpUbyIsIm9iakZyb20iLCJmaW5kS2V5Iiwib3B0X3RoaXMiLCJTaGExIiwiX3N1cGVyIiwiY2hhaW5fIiwiYnVmXyIsIldfIiwicGFkXyIsImluYnVmXyIsInRvdGFsXyIsImJsb2NrU2l6ZSIsImNvbXByZXNzXyIsIm9wdF9vZmZzZXQiLCJ1cGRhdGUiLCJvcHRfbGVuZ3RoIiwibGVuZ3RoTWludXNCbG9jayIsImluYnVmIiwiZGlnZXN0IiwidG90YWxCaXRzIiwiT2JzZXJ2ZXJQcm94eSIsImV4ZWN1dG9yIiwib25Ob09ic2VydmVycyIsIm9ic2VydmVycyIsInVuc3Vic2NyaWJlcyIsIm9ic2VydmVyQ291bnQiLCJmaW5hbGl6ZWQiLCJmb3JFYWNoT2JzZXJ2ZXIiLCJvYnNlcnZlciIsInN1YnNjcmliZSIsIm5leHRPck9ic2VydmVyIiwibWV0aG9kc18xIiwiaW1wbGVtZW50c0FueU1ldGhvZHMiLCJ1bnN1YiIsInVuc3Vic2NyaWJlT25lIiwiZmluYWxFcnJvciIsInNlbmRPbmUiLCJlcnJvclByZWZpeCIsImZuTmFtZSIsImFyZ3VtZW50TnVtYmVyIiwib3B0aW9uYWwiLCJhcmdOYW1lIiwiYmFzZTY0RW5jb2RlIiwidXRmOEJ5dGVzIiwiaXNNb2JpbGVDb3Jkb3ZhIiwiaXNOb2RlU2RrIiwiaXNSZWFjdE5hdGl2ZSIsInBhdGNoQ2FwdHVyZSIsImNhcHR1cmVGYWtlIiwiaXNBZG1pbiIsImlzc3VlZEF0VGltZSIsImlzVmFsaWRGb3JtYXQiLCJpc1ZhbGlkVGltZXN0YW1wIiwidmFsaWRTaW5jZSIsInZhbGlkVW50aWwiLCJldmVyeSIsImZpbmRWYWx1ZSIsImdldEFueUtleSIsImdldENvdW50IiwicnYiLCJnZXRWYWx1ZXMiLCJpc0VtcHR5IiwiaXNOb25OdWxsT2JqZWN0Iiwib3B0X29iaiIsInNhZmVHZXQiLCJxdWVyeXN0cmluZyIsInF1ZXJ5c3RyaW5nUGFyYW1zIiwiYXJyYXlWYWwiLCJxdWVyeXN0cmluZ0RlY29kZSIsIm9uRXJyb3IiLCJ2YWxpZGF0ZUFyZ0NvdW50IiwibWluQ291bnQiLCJtYXhDb3VudCIsImFyZ0NvdW50IiwiYXJnRXJyb3IiLCJ2YWxpZGF0ZUNhbGxiYWNrIiwidmFsaWRhdGVDb250ZXh0T2JqZWN0IiwidmFsaWRhdGVOYW1lc3BhY2UiLCJzdHJpbmdMZW5ndGgiLCJMb2dMZXZlbCIsImxvZ2dlciIsIndlYmNoYW5uZWxXcmFwcGVyIiwibG9nQ2xpZW50IiwiTG9nZ2VyIiwiZ2V0TG9nTGV2ZWwiLCJsb2dMZXZlbCIsIkRFQlVHIiwiU0lMRU5UIiwiRVJST1IiLCJzZXRMb2dMZXZlbCIsIm5ld0xldmVsIiwiZGVidWciLCJhcmdUb1N0cmluZyIsInBsYXRmb3JtIiwiUGxhdGZvcm1TdXBwb3J0IiwiZ2V0UGxhdGZvcm0iLCJmb3JtYXRKU09OIiwiZmFpbHVyZSIsInNldFBsYXRmb3JtIiwiZW1wdHlCeXRlU3RyaW5nIiwiQ29kZSIsIk9LIiwiQ0FOQ0VMTEVEIiwiVU5LTk9XTiIsIklOVkFMSURfQVJHVU1FTlQiLCJERUFETElORV9FWENFRURFRCIsIk5PVF9GT1VORCIsIkFMUkVBRFlfRVhJU1RTIiwiUEVSTUlTU0lPTl9ERU5JRUQiLCJVTkFVVEhFTlRJQ0FURUQiLCJSRVNPVVJDRV9FWEhBVVNURUQiLCJGQUlMRURfUFJFQ09ORElUSU9OIiwiQUJPUlRFRCIsIk9VVF9PRl9SQU5HRSIsIlVOSU1QTEVNRU5URUQiLCJVTkFWQUlMQUJMRSIsIkRBVEFfTE9TUyIsIkZpcmVzdG9yZUVycm9yIiwibWFrZUNvbnN0cnVjdG9yUHJpdmF0ZSIsImNscyIsIm9wdGlvbmFsTWVzc2FnZSIsIlB1YmxpY0NvbnN0cnVjdG9yIiwic3RhdGljUHJvcGVydHkiLCJkZWZhdWx0ZWQiLCJmb3JFYWNoTnVtYmVyIiwiTnVtYmVyIiwidmFsaWRhdGVFeGFjdE51bWJlck9mQXJncyIsImZ1bmN0aW9uTmFtZSIsIm51bWJlck9mQXJncyIsImZvcm1hdFBsdXJhbCIsInZhbGlkYXRlQXRMZWFzdE51bWJlck9mQXJncyIsIm1pbk51bWJlck9mQXJncyIsInZhbGlkYXRlQmV0d2Vlbk51bWJlck9mQXJncyIsIm1heE51bWJlck9mQXJncyIsInZhbGlkYXRlQXJnVHlwZSIsInZhbGlkYXRlVHlwZSIsIm9yZGluYWwiLCJ2YWxpZGF0ZU9wdGlvbmFsQXJnVHlwZSIsInZhbGlkYXRlTmFtZWRUeXBlIiwib3B0aW9uTmFtZSIsInZhbGlkYXRlTmFtZWRPcHRpb25hbFR5cGUiLCJ2YWxpZGF0ZU9wdGlvbmFsQXJyYXlFbGVtZW50cyIsInR5cGVEZXNjcmlwdGlvbiIsInZhbGlkYXRvciIsInZhbHVlRGVzY3JpcHRpb24iLCJ2YWxpZGF0ZUFycmF5RWxlbWVudHMiLCJ2YWxpZGF0ZU5hbWVkT3B0aW9uYWxQcm9wZXJ0eUVxdWFscyIsImlucHV0TmFtZSIsImV4cGVjdGVkIiwiZXhwZWN0ZWREZXNjcmlwdGlvbiIsImV4cGVjdGVkXzEiLCJhY3R1YWxEZXNjcmlwdGlvbiIsInZhbGlkYXRlTmFtZWRQcm9wZXJ0eUVxdWFscyIsImRlc2NyaXB0aW9uIiwic3Vic3RyaW5nIiwiY3VzdG9tT2JqZWN0TmFtZSIsInRyeUdldEN1c3RvbU9iamVjdFR5cGUiLCJ2YWxpZGF0ZURlZmluZWQiLCJ2YWxpZGF0ZU9wdGlvbk5hbWVzIiwib3B0aW9uTmFtZXMiLCJpbnZhbGlkQ2xhc3NFcnJvciIsIkF1dG9JZCIsIm5ld0lkIiwiYXV0b0lkIiwicHJpbWl0aXZlQ29tcGFyYXRvciIsImFycmF5RXF1YWxzIiwiaXNFcXVhbCIsImFzc2VydFVpbnQ4QXJyYXlBdmFpbGFibGUiLCJhc3NlcnRCYXNlNjRBdmFpbGFibGUiLCJiYXNlNjRBdmFpbGFibGUiLCJUeXBlT3JkZXIiLCJTZXJ2ZXJUaW1lc3RhbXBCZWhhdmlvciIsImJpbmFyeVN0cmluZyIsIl9iaW5hcnlTdHJpbmciLCJmcm9tQmFzZTY0U3RyaW5nIiwiZnJvbVVpbnQ4QXJyYXkiLCJ0b0Jhc2U2NCIsInRvVWludDhBcnJheSIsIm90aGVyIiwiX2NvbXBhcmVUbyIsIlB1YmxpY0Jsb2IiLCJHZW9Qb2ludCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiX2xhdCIsIl9sb25nIiwiVGltZXN0YW1wIiwic2Vjb25kcyIsIm5hbm9zZWNvbmRzIiwiZnJvbU1pbGxpcyIsImZyb21EYXRlIiwiZGF0ZSIsIm1pbGxpc2Vjb25kcyIsInRvRGF0ZSIsInRvTWlsbGlzIiwiRGF0YWJhc2VJbmZvIiwiZGF0YWJhc2VJZCIsInBlcnNpc3RlbmNlS2V5Iiwic3NsIiwiREVGQVVMVF9EQVRBQkFTRV9OQU1FIiwiRGF0YWJhc2VJZCIsInByb2plY3RJZCIsImRhdGFiYXNlIiwiY29tcGFyZVRvIiwiUGF0aCIsInNlZ21lbnRzIiwiY29uc3RydWN0IiwicGF0aCIsImNvbXBhcmF0b3IiLCJjaGlsZCIsIm5hbWVPclBhdGgiLCJsaW1pdCIsInNlZ21lbnQiLCJwb3BGaXJzdCIsInNpemUiLCJwb3BMYXN0IiwiZmlyc3RTZWdtZW50IiwibGFzdFNlZ21lbnQiLCJpc1ByZWZpeE9mIiwiaXNJbW1lZGlhdGVQYXJlbnRPZiIsInBvdGVudGlhbENoaWxkIiwicDEiLCJwMiIsIlJlc291cmNlUGF0aCIsImNhbm9uaWNhbFN0cmluZyIsImZyb21TdHJpbmciLCJFTVBUWV9QQVRIIiwiaWRlbnRpZmllclJlZ0V4cCIsIkZpZWxkUGF0aCIsImlzVmFsaWRJZGVudGlmaWVyIiwiaXNLZXlGaWVsZCIsImtleUZpZWxkIiwiZnJvbVNlcnZlckZvcm1hdCIsImFkZEN1cnJlbnRTZWdtZW50IiwiaW5CYWNrdGlja3MiLCJEb2N1bWVudEtleSIsImlzRG9jdW1lbnRLZXkiLCJrMSIsImsyIiwiZnJvbVNlZ21lbnRzIiwiZnJvbVBhdGhTdHJpbmciLCJFTVBUWSIsIk1heWJlRG9jdW1lbnQiLCJjb21wYXJlQnlLZXkiLCJkMSIsImQyIiwiRG9jdW1lbnQiLCJoYXNMb2NhbE11dGF0aW9ucyIsImhhc0NvbW1pdHRlZE11dGF0aW9ucyIsImZpZWxkIiwiZmllbGRWYWx1ZSIsImNvbXBhcmVCeUZpZWxkIiwidjEiLCJ2MiIsIk5vRG9jdW1lbnQiLCJVbmtub3duRG9jdW1lbnQiLCJTb3J0ZWRNYXAiLCJMTFJCTm9kZSIsIkJMQUNLIiwiY21wIiwicHJ1bmVkTm9kZXMiLCJtaW5LZXkiLCJtYXhLZXkiLCJpbm9yZGVyVHJhdmVyc2FsIiwiYWN0aW9uIiwicmV2ZXJzZVRyYXZlcnNhbCIsImdldEl0ZXJhdG9yIiwiU29ydGVkTWFwSXRlcmF0b3IiLCJnZXRJdGVyYXRvckZyb20iLCJnZXRSZXZlcnNlSXRlcmF0b3IiLCJnZXRSZXZlcnNlSXRlcmF0b3JGcm9tIiwic3RhcnRLZXkiLCJpc1JldmVyc2UiLCJub2RlU3RhY2siLCJnZXROZXh0IiwiaGFzTmV4dCIsInBlZWsiLCJjb2xvciIsIlJFRCIsImZpeFVwIiwicmVtb3ZlTWluIiwiaXNSZWQiLCJtb3ZlUmVkTGVmdCIsInNtYWxsZXN0Iiwicm90YXRlUmlnaHQiLCJtb3ZlUmVkUmlnaHQiLCJyb3RhdGVMZWZ0IiwiY29sb3JGbGlwIiwibmwiLCJuciIsImNoZWNrTWF4RGVwdGgiLCJibGFja0RlcHRoIiwicG93IiwiTExSQkVtcHR5Tm9kZSIsIkZpZWxkVmFsdWVPcHRpb25zIiwic2VydmVyVGltZXN0YW1wQmVoYXZpb3IiLCJ0aW1lc3RhbXBzSW5TbmFwc2hvdHMiLCJmcm9tU25hcHNob3RPcHRpb25zIiwic2VydmVyVGltZXN0YW1wcyIsIkVzdGltYXRlIiwiUHJldmlvdXMiLCJEZWZhdWx0IiwiRmllbGRWYWx1ZSIsImRlZmF1bHRDb21wYXJlVG8iLCJ0eXBlT3JkZXIiLCJOdWxsVmFsdWUiLCJpbnRlcm5hbFZhbHVlIiwiSU5TVEFOQ0UiLCJCb29sZWFuVmFsdWUiLCJvZiIsIlRSVUUiLCJGQUxTRSIsIk51bWJlclZhbHVlIiwibnVtZXJpY0NvbXBhcmF0b3IiLCJudW1lcmljRXF1YWxzIiwiSW50ZWdlclZhbHVlIiwiRG91YmxlVmFsdWUiLCJOQU4iLCJOYU4iLCJQT1NJVElWRV9JTkZJTklUWSIsIk5FR0FUSVZFX0lORklOSVRZIiwiU3RyaW5nVmFsdWUiLCJUaW1lc3RhbXBWYWx1ZSIsIlNlcnZlclRpbWVzdGFtcFZhbHVlIiwibG9jYWxXcml0ZVRpbWUiLCJwcmV2aW91c1ZhbHVlIiwiQmxvYlZhbHVlIiwiUmVmVmFsdWUiLCJHZW9Qb2ludFZhbHVlIiwiT2JqZWN0VmFsdWUiLCJpdDEiLCJpdDIiLCJuZXh0MSIsIm5leHQyIiwic2V0Q2hpbGQiLCJuZXdDaGlsZCIsInBhdGhTZWdtZW50IiwiY2hpbGROYW1lIiwiQXJyYXlWYWx1ZSIsIm1pbkxlbmd0aCIsIk51bWJlckFzQW55IiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJpc0ludGVnZXIiLCJpc051bGxPclVuZGVmaW5lZCIsImlzU2FmZUludGVnZXIiLCJRdWVyeVB1cnBvc2UiLCJRdWVyeSIsImV4cGxpY2l0T3JkZXJCeSIsInN0YXJ0QXQiLCJlbmRBdCIsIm1lbW9pemVkQ2Fub25pY2FsSWQiLCJtZW1vaXplZE9yZGVyQnkiLCJhc3NlcnRWYWxpZEJvdW5kIiwiYXRQYXRoIiwiaW5lcXVhbGl0eUZpZWxkIiwiZ2V0SW5lcXVhbGl0eUZpbHRlckZpZWxkIiwiZmlyc3RPcmRlckJ5RmllbGQiLCJnZXRGaXJzdE9yZGVyQnlGaWVsZCIsIktFWV9PUkRFUklOR19BU0MiLCJPcmRlckJ5IiwiZm91bmRLZXlPcmRlcmluZyIsIl9hIiwib3JkZXJCeSIsImxhc3REaXJlY3Rpb24iLCJEaXJlY3Rpb24iLCJBU0NFTkRJTkciLCJLRVlfT1JERVJJTkdfREVTQyIsImFkZEZpbHRlciIsIlJlbGF0aW9uRmlsdGVyIiwiaXNJbmVxdWFsaXR5IiwibmV3RmlsdGVycyIsImFkZE9yZGVyQnkiLCJuZXdPcmRlckJ5Iiwid2l0aExpbWl0Iiwid2l0aFN0YXJ0QXQiLCJib3VuZCIsIndpdGhFbmRBdCIsImNhbm9uaWNhbElkIiwiX2IiLCJfYyIsImRvY0NvbXBhcmF0b3IiLCJjb21wYXJlZE9uS2V5RmllbGQiLCJjb21wIiwibWF0Y2hlc0FuY2VzdG9yIiwibWF0Y2hlc09yZGVyQnkiLCJtYXRjaGVzRmlsdGVycyIsIm1hdGNoZXNCb3VuZHMiLCJoYXNMaW1pdCIsImhhc0FycmF5Q29udGFpbnNGaWx0ZXIiLCJSZWxhdGlvbk9wIiwiQVJSQVlfQ09OVEFJTlMiLCJpc0RvY3VtZW50UXVlcnkiLCJkb2NQYXRoIiwic29ydHNCZWZvcmVEb2N1bWVudCIsIkZpbHRlciIsIkVRVUFMIiwiTnVsbEZpbHRlciIsIk5hbkZpbHRlciIsIkxFU1NfVEhBTiIsIkxFU1NfVEhBTl9PUl9FUVVBTCIsIkdSRUFURVJfVEhBTl9PUl9FUVVBTCIsIkdSRUFURVJfVEhBTiIsInJlZlZhbHVlIiwiY29tcGFyaXNvbiIsIm1hdGNoZXNDb21wYXJpc29uIiwibWF0Y2hlc1ZhbHVlIiwiZWxlbWVudCIsIkRFU0NFTkRJTkciLCJCb3VuZCIsIm9yZGVyQnlDb21wb25lbnQiLCJjb21wb25lbnQiLCJkb2NWYWx1ZSIsInRoaXNQb3NpdGlvbiIsIm90aGVyUG9zaXRpb24iLCJpc0tleU9yZGVyQnkiLCJTbmFwc2hvdFZlcnNpb24iLCJ0aW1lc3RhbXAiLCJmcm9tTWljcm9zZWNvbmRzIiwiZnJvbVRpbWVzdGFtcCIsImZvckRlbGV0ZWREb2MiLCJNSU4iLCJ0b01pY3Jvc2Vjb25kcyIsInRvVGltZXN0YW1wIiwiTXV0YXRpb25UeXBlIiwiUXVlcnlEYXRhIiwicXVlcnkiLCJ0YXJnZXRJZCIsInB1cnBvc2UiLCJzZXF1ZW5jZU51bWJlciIsInNuYXBzaG90VmVyc2lvbiIsInJlc3VtZVRva2VuIiwib3ZlcndyaXRlIiwiRmllbGRNYXNrIiwiZmllbGRzIiwiY292ZXJzIiwiZmllbGRQYXRoIiwiRmllbGRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJNdXRhdGlvblJlc3VsdCIsInRyYW5zZm9ybVJlc3VsdHMiLCJQcmVjb25kaXRpb24iLCJ1cGRhdGVUaW1lIiwiZXhpc3RzIiwiaXNWYWxpZEZvciIsIm1heWJlRG9jIiwiaXNOb25lIiwiZXF1YWxzIiwiTk9ORSIsIk11dGF0aW9uIiwidmVyaWZ5S2V5TWF0Y2hlcyIsImdldFBvc3RNdXRhdGlvblZlcnNpb24iLCJTZXRNdXRhdGlvbiIsInByZWNvbmRpdGlvbiIsIlNldCIsImFwcGx5VG9SZW1vdGVEb2N1bWVudCIsIm11dGF0aW9uUmVzdWx0IiwiYXBwbHlUb0xvY2FsVmlldyIsImJhc2VEb2MiLCJQYXRjaE11dGF0aW9uIiwiZmllbGRNYXNrIiwiUGF0Y2giLCJuZXdEYXRhIiwicGF0Y2hEb2N1bWVudCIsInBhdGNoT2JqZWN0IiwiVHJhbnNmb3JtTXV0YXRpb24iLCJmaWVsZFRyYW5zZm9ybXMiLCJUcmFuc2Zvcm0iLCJyZXF1aXJlRG9jdW1lbnQiLCJzZXJ2ZXJUcmFuc2Zvcm1SZXN1bHRzIiwidHJhbnNmb3JtT2JqZWN0IiwibG9jYWxUcmFuc2Zvcm1SZXN1bHRzIiwiZmllbGRUcmFuc2Zvcm0iLCJEZWxldGVNdXRhdGlvbiIsIkRlbGV0ZSIsIlNlcnZlclRpbWVzdGFtcFRyYW5zZm9ybSIsInRyYW5zZm9ybVJlc3VsdCIsImluc3RhbmNlIiwiQXJyYXlVbmlvblRyYW5zZm9ybU9wZXJhdGlvbiIsImNvZXJjZWRGaWVsZFZhbHVlc0FycmF5IiwiX2xvb3BfMSIsInRvVW5pb24iLCJBcnJheVJlbW92ZVRyYW5zZm9ybU9wZXJhdGlvbiIsIl9sb29wXzIiLCJ0b1JlbW92ZSIsIlJwY0NvZGUiLCJFeGlzdGVuY2VGaWx0ZXIiLCJpc1Blcm1hbmVudEVycm9yIiwibWFwQ29kZUZyb21ScGNDb2RlIiwiU29ydGVkU2V0IiwiZnJvbU1hcEtleXMiLCJmb3JFYWNoSW5SYW5nZSIsInJhbmdlIiwiaXRlciIsImZvckVhY2hXaGlsZSIsImZpcnN0QWZ0ZXJPckVxdWFsIiwidW5pb25XaXRoIiwidGhpc0l0Iiwib3RoZXJJdCIsInRoaXNFbGVtIiwib3RoZXJFbGVtIiwiRU1QVFlfTUFZQkVfRE9DVU1FTlRfTUFQIiwibWF5YmVEb2N1bWVudE1hcCIsIkVNUFRZX0RPQ1VNRU5UX01BUCIsImRvY3VtZW50TWFwIiwiRU1QVFlfRE9DVU1FTlRfVkVSU0lPTl9NQVAiLCJkb2N1bWVudFZlcnNpb25NYXAiLCJFTVBUWV9ET0NVTUVOVF9LRVlfU0VUIiwiZG9jdW1lbnRLZXlTZXQiLCJFTVBUWV9UQVJHRVRfSURfU0VUIiwidGFyZ2V0SWRTZXQiLCJDaGFuZ2VUeXBlIiwiU3luY1N0YXRlIiwiRG9jdW1lbnRTZXQiLCJrZXllZE1hcCIsInNvcnRlZFNldCIsImVtcHR5U2V0Iiwib2xkU2V0IiwidGhpc0RvYyIsIm90aGVyRG9jIiwiZG9jU3RyaW5ncyIsIm5ld1NldCIsIldhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUiLCJEb2N1bWVudENoYW5nZVNldCIsImNoYW5nZU1hcCIsInRyYWNrIiwiY2hhbmdlIiwib2xkQ2hhbmdlIiwiQWRkZWQiLCJNZXRhZGF0YSIsIlJlbW92ZWQiLCJNb2RpZmllZCIsImdldENoYW5nZXMiLCJjaGFuZ2VzIiwiVmlld1NuYXBzaG90IiwiZG9jcyIsIm9sZERvY3MiLCJkb2NDaGFuZ2VzIiwibXV0YXRlZEtleXMiLCJmcm9tQ2FjaGUiLCJzeW5jU3RhdGVDaGFuZ2VkIiwiZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXMiLCJmcm9tSW5pdGlhbERvY3VtZW50cyIsImRvY3VtZW50cyIsIm90aGVyQ2hhbmdlcyIsIlJlbW90ZUV2ZW50IiwidGFyZ2V0Q2hhbmdlcyIsInRhcmdldE1pc21hdGNoZXMiLCJkb2N1bWVudFVwZGF0ZXMiLCJyZXNvbHZlZExpbWJvRG9jdW1lbnRzIiwiY3JlYXRlU3ludGhlc2l6ZWRSZW1vdGVFdmVudEZvckN1cnJlbnRDaGFuZ2UiLCJUYXJnZXRDaGFuZ2UiLCJjcmVhdGVTeW50aGVzaXplZFRhcmdldENoYW5nZUZvckN1cnJlbnRDaGFuZ2UiLCJhZGRlZERvY3VtZW50cyIsIm1vZGlmaWVkRG9jdW1lbnRzIiwicmVtb3ZlZERvY3VtZW50cyIsIkRvY3VtZW50V2F0Y2hDaGFuZ2UiLCJ1cGRhdGVkVGFyZ2V0SWRzIiwicmVtb3ZlZFRhcmdldElkcyIsIm5ld0RvYyIsIkV4aXN0ZW5jZUZpbHRlckNoYW5nZSIsImV4aXN0ZW5jZUZpbHRlciIsIldhdGNoVGFyZ2V0Q2hhbmdlIiwidGFyZ2V0SWRzIiwiY2F1c2UiLCJUYXJnZXRTdGF0ZSIsInBlbmRpbmdSZXNwb25zZXMiLCJkb2N1bWVudENoYW5nZXMiLCJzbmFwc2hvdENoYW5nZXNNYXAiLCJfcmVzdW1lVG9rZW4iLCJfY3VycmVudCIsIl9oYXNQZW5kaW5nQ2hhbmdlcyIsInVwZGF0ZVJlc3VtZVRva2VuIiwidG9UYXJnZXRDaGFuZ2UiLCJjaGFuZ2VUeXBlIiwiY2xlYXJQZW5kaW5nQ2hhbmdlcyIsImFkZERvY3VtZW50Q2hhbmdlIiwicmVtb3ZlRG9jdW1lbnRDaGFuZ2UiLCJyZWNvcmRQZW5kaW5nVGFyZ2V0UmVxdWVzdCIsInJlY29yZFRhcmdldFJlc3BvbnNlIiwibWFya0N1cnJlbnQiLCJXYXRjaENoYW5nZUFnZ3JlZ2F0b3IiLCJtZXRhZGF0YVByb3ZpZGVyIiwidGFyZ2V0U3RhdGVzIiwicGVuZGluZ0RvY3VtZW50VXBkYXRlcyIsInBlbmRpbmdEb2N1bWVudFRhcmdldE1hcHBpbmciLCJkb2N1bWVudFRhcmdldE1hcCIsInBlbmRpbmdUYXJnZXRSZXNldHMiLCJoYW5kbGVEb2N1bWVudENoYW5nZSIsImRvY0NoYW5nZSIsImFkZERvY3VtZW50VG9UYXJnZXQiLCJyZW1vdmVEb2N1bWVudEZyb21UYXJnZXQiLCJoYW5kbGVUYXJnZXRDaGFuZ2UiLCJ0YXJnZXRDaGFuZ2UiLCJmb3JFYWNoVGFyZ2V0IiwidGFyZ2V0U3RhdGUiLCJlbnN1cmVUYXJnZXRTdGF0ZSIsIk5vQ2hhbmdlIiwiaXNBY3RpdmVUYXJnZXQiLCJpc1BlbmRpbmciLCJyZW1vdmVUYXJnZXQiLCJDdXJyZW50IiwiUmVzZXQiLCJyZXNldFRhcmdldCIsImhhbmRsZUV4aXN0ZW5jZUZpbHRlciIsIndhdGNoQ2hhbmdlIiwiZXhwZWN0ZWRDb3VudCIsInF1ZXJ5RGF0YSIsInF1ZXJ5RGF0YUZvckFjdGl2ZVRhcmdldCIsImdldEN1cnJlbnREb2N1bWVudENvdW50Rm9yVGFyZ2V0IiwiY3JlYXRlUmVtb3RlRXZlbnQiLCJ0YXJnZXRDb250YWluc0RvY3VtZW50IiwiaGFzUGVuZGluZ0NoYW5nZXMiLCJpc09ubHlMaW1ib1RhcmdldCIsIkxpbWJvUmVzb2x1dGlvbiIsInJlbW90ZUV2ZW50IiwiZW5zdXJlRG9jdW1lbnRUYXJnZXRNYXBwaW5nIiwidXBkYXRlZERvY3VtZW50IiwiZ2V0UmVtb3RlS2V5c0ZvclRhcmdldCIsInRhcmdldE1hcHBpbmciLCJnZXRRdWVyeURhdGFGb3JUYXJnZXQiLCJESVJFQ1RJT05TIiwiZGlycyIsIk9QRVJBVE9SUyIsIklTT19SRUdfRVhQIiwiYXNzZXJ0UHJlc2VudCIsInBhcnNlSW50NjQiLCJKc29uUHJvdG9TZXJpYWxpemVyIiwidXNlUHJvdG8zSnNvbiIsInVuc2FmZUNhc3RQcm90b0J5dGVTdHJpbmciLCJieXRlU3RyaW5nIiwiZnJvbVJwY1N0YXR1cyIsInRvSW50MzJWYWx1ZSIsImZyb21JbnQzMlZhbHVlIiwibmFub3MiLCJmcm9tSXNvODYwMVN0cmluZyIsInV0YyIsImZyYWN0aW9uIiwibmFub1N0ciIsInN1YnN0ciIsInRvQnl0ZXMiLCJmcm9tQmxvYiIsInRvVmVyc2lvbiIsImZyb21WZXJzaW9uIiwidG9SZXNvdXJjZU5hbWUiLCJmdWxseVF1YWxpZmllZFByZWZpeFBhdGgiLCJmcm9tUmVzb3VyY2VOYW1lIiwicmVzb3VyY2UiLCJpc1ZhbGlkUmVzb3VyY2VOYW1lIiwidG9OYW1lIiwiZnJvbU5hbWUiLCJleHRyYWN0TG9jYWxQYXRoRnJvbVJlc291cmNlTmFtZSIsInRvUXVlcnlQYXRoIiwiZW5jb2RlZERhdGFiYXNlSWQiLCJmcm9tUXVlcnlQYXRoIiwicmVzb3VyY2VOYW1lIiwidG9WYWx1ZSIsIm51bGxWYWx1ZSIsImJvb2xlYW5WYWx1ZSIsImludGVnZXJWYWx1ZSIsImRvdWJsZVZhbHVlIiwic3RyaW5nVmFsdWUiLCJtYXBWYWx1ZSIsInRvTWFwVmFsdWUiLCJhcnJheVZhbHVlIiwidG9BcnJheVZhbHVlIiwidGltZXN0YW1wVmFsdWUiLCJnZW9Qb2ludFZhbHVlIiwiYnl0ZXNWYWx1ZSIsInJlZmVyZW5jZVZhbHVlIiwiZnJvbVZhbHVlIiwiaGFzVGFnIiwiZnJvbUZpZWxkcyIsImRiSWQiLCJ0b011dGF0aW9uRG9jdW1lbnQiLCJ0b0ZpZWxkcyIsInRvRG9jdW1lbnQiLCJmcm9tRG9jdW1lbnQiLCJmcm9tRm91bmQiLCJmb3VuZCIsImZyb21NaXNzaW5nIiwibWlzc2luZyIsInJlYWRUaW1lIiwiZnJvbU1heWJlRG9jdW1lbnQiLCJ0b1dhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUiLCJ0b1Rlc3RXYXRjaENoYW5nZSIsImRvY3VtZW50Q2hhbmdlIiwiZG9jdW1lbnREZWxldGUiLCJkb2N1bWVudFJlbW92ZSIsIm1hcFJwY0NvZGVGcm9tQ29kZSIsInRhcmdldENoYW5nZVR5cGUiLCJmcm9tV2F0Y2hDaGFuZ2UiLCJmcm9tV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZSIsImNhdXNlUHJvdG8iLCJlbnRpdHlDaGFuZ2UiLCJkb2NEZWxldGUiLCJkb2NSZW1vdmUiLCJ2ZXJzaW9uRnJvbUxpc3RlblJlc3BvbnNlIiwidG9NdXRhdGlvbiIsIm11dGF0aW9uIiwidXBkYXRlTWFzayIsInRvRG9jdW1lbnRNYXNrIiwidG9GaWVsZFRyYW5zZm9ybSIsImN1cnJlbnREb2N1bWVudCIsInRvUHJlY29uZGl0aW9uIiwiZnJvbU11dGF0aW9uIiwiZnJvbVByZWNvbmRpdGlvbiIsImZyb21Eb2N1bWVudE1hc2siLCJmcm9tRmllbGRUcmFuc2Zvcm0iLCJmcm9tV3JpdGVSZXN1bHQiLCJjb21taXRUaW1lIiwiZnJvbVdyaXRlUmVzdWx0cyIsInByb3RvcyIsInNldFRvU2VydmVyVmFsdWUiLCJhcHBlbmRNaXNzaW5nRWxlbWVudHMiLCJyZW1vdmVBbGxGcm9tQXJyYXkiLCJ0b0RvY3VtZW50c1RhcmdldCIsImZyb21Eb2N1bWVudHNUYXJnZXQiLCJkb2N1bWVudHNUYXJnZXQiLCJ0b1F1ZXJ5VGFyZ2V0Iiwic3RydWN0dXJlZFF1ZXJ5IiwiZnJvbSIsImNvbGxlY3Rpb25JZCIsIndoZXJlIiwidG9GaWx0ZXIiLCJ0b09yZGVyIiwidG9DdXJzb3IiLCJmcm9tUXVlcnlUYXJnZXQiLCJmcm9tQ291bnQiLCJmaWx0ZXJCeSIsImZyb21GaWx0ZXIiLCJmcm9tT3JkZXIiLCJmcm9tQ3Vyc29yIiwidG9MaXN0ZW5SZXF1ZXN0TGFiZWxzIiwidG9MYWJlbCIsImdvb2ctbGlzdGVuLXRhZ3MiLCJMaXN0ZW4iLCJFeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaCIsInRvVGFyZ2V0IiwidG9SZWxhdGlvbkZpbHRlciIsInRvVW5hcnlGaWx0ZXIiLCJjb21wb3NpdGVGaWx0ZXIiLCJ1bmFyeUZpbHRlciIsImZyb21VbmFyeUZpbHRlciIsImZpZWxkRmlsdGVyIiwiZnJvbVJlbGF0aW9uRmlsdGVyIiwicmVkdWNlIiwiYWNjdW0iLCJvcmRlckJ5cyIsInRvUHJvcGVydHlPcmRlciIsImZyb21Qcm9wZXJ0eU9yZGVyIiwiY3Vyc29yIiwidG9EaXJlY3Rpb24iLCJmcm9tRGlyZWN0aW9uIiwidG9PcGVyYXRvck5hbWUiLCJmcm9tT3BlcmF0b3JOYW1lIiwidG9GaWVsZFBhdGhSZWZlcmVuY2UiLCJmcm9tRmllbGRQYXRoUmVmZXJlbmNlIiwiZmllbGRSZWZlcmVuY2UiLCJkaXJlY3Rpb24iLCJuYW5GaWVsZCIsIm51bGxGaWVsZCIsImZpZWxkUGF0aHMiLCJTdHJlYW1CcmlkZ2UiLCJzZW5kRm4iLCJjbG9zZUZuIiwib25PcGVuIiwid3JhcHBlZE9uT3BlbiIsIm9uQ2xvc2UiLCJ3cmFwcGVkT25DbG9zZSIsIm9uTWVzc2FnZSIsIndyYXBwZWRPbk1lc3NhZ2UiLCJjYWxsT25PcGVuIiwiY2FsbE9uQ2xvc2UiLCJjYWxsT25NZXNzYWdlIiwiTE9HX1RBRyIsIlJQQ19OQU1FX1JFU1RfTUFQUElORyIsIkJhdGNoR2V0RG9jdW1lbnRzIiwiQ29tbWl0IiwiWF9HT09HX0FQSV9DTElFTlRfVkFMVUUiLCJXZWJDaGFubmVsQ29ubmVjdGlvbiIsImluZm8iLCJwb29sIiwiWGhySW9Qb29sIiwiYmFzZVVybCIsIm1vZGlmeUhlYWRlcnNGb3JSZXF1ZXN0IiwiYXV0aEhlYWRlcnMiLCJpbnZva2VSUEMiLCJycGNOYW1lIiwibWFrZVVybCIsImdldE9iamVjdCIsImxpc3Rlbk9uY2UiLCJFdmVudFR5cGUiLCJDT01QTEVURSIsImdldExhc3RFcnJvckNvZGUiLCJFcnJvckNvZGUiLCJOT19FUlJPUiIsImdldFJlc3BvbnNlSnNvbiIsIlRJTUVPVVQiLCJIVFRQX0VSUk9SIiwic3RhdHVzXzEiLCJnZXRTdGF0dXMiLCJnZXRSZXNwb25zZVRleHQiLCJtYXBDb2RlRnJvbUh0dHBTdGF0dXMiLCJnZXRTdGF0dXNUZXh0IiwiZ2V0TGFzdEVycm9yIiwicmVsZWFzZU9iamVjdCIsInJlcXVlc3RTdHJpbmciLCJDb250ZW50LVR5cGUiLCJpbnZva2VTdHJlYW1pbmdSUEMiLCJvcGVuU3RyZWFtIiwidXJsUGFydHMiLCJ3ZWJjaGFubmVsVHJhbnNwb3J0IiwiY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCIsImJhY2tncm91bmRDaGFubmVsVGVzdCIsImh0dHBTZXNzaW9uSWRQYXJhbSIsImluaXRNZXNzYWdlSGVhZGVycyIsIm1lc3NhZ2VVcmxQYXJhbXMiLCJzZW5kUmF3SnNvbiIsInN1cHBvcnRzQ3Jvc3NEb21haW5YaHIiLCJjcmVhdGVXZWJDaGFubmVsIiwib3BlbmVkIiwiY2xvc2VkIiwic3RyZWFtQnJpZGdlIiwidW5ndWFyZGVkRXZlbnRMaXN0ZW4iLCJsaXN0ZW4iLCJXZWJDaGFubmVsIiwiT1BFTiIsIkNMT1NFIiwiTUVTU0FHRSIsIm1zZ0RhdGEiLCJlcnJvciQkMSIsInN0YXR1c18yIiwibWFwQ29kZUZyb21ScGNTdGF0dXMiLCJ1cmxScGNOYW1lIiwiQnJvd3NlclBsYXRmb3JtIiwibG9hZENvbm5lY3Rpb24iLCJkYXRhYmFzZUluZm8iLCJuZXdTZXJpYWxpemVyIiwiZW5jb2RlZCIsIlRpbWVySWQiLCJQZXJzaXN0ZW5jZVByb21pc2UiLCJuZXh0Q2FsbGJhY2siLCJjYXRjaENhbGxiYWNrIiwiaXNEb25lIiwiY2FsbGJhY2tBdHRhY2hlZCIsIm5leHRGbiIsImNhdGNoRm4iLCJ3cmFwRmFpbHVyZSIsIndyYXBTdWNjZXNzIiwidG9Qcm9taXNlIiwid3JhcFVzZXJGdW5jdGlvbiIsIndhaXRGb3IiLCJyZXNvbHZlZENvdW50IiwiYWxsXzEiLCJwcm9taXNlcyIsImVsZW1lbnRzXzEiLCJFYWdlckdhcmJhZ2VDb2xsZWN0b3IiLCJpc0VhZ2VyIiwic291cmNlcyIsInBvdGVudGlhbEdhcmJhZ2UiLCJhZGRHYXJiYWdlU291cmNlIiwiZ2FyYmFnZVNvdXJjZSIsInNldEdhcmJhZ2VDb2xsZWN0b3IiLCJyZW1vdmVHYXJiYWdlU291cmNlIiwiYWRkUG90ZW50aWFsR2FyYmFnZUtleSIsImNvbGxlY3RHYXJiYWdlIiwidHhuIiwiZ2FyYmFnZUtleXMiLCJoYXNSZWZzUHJvbWlzZSIsImRvY3VtZW50SGFzQW55UmVmZXJlbmNlcyIsImhhc1JlZnMiLCJjb250YWluc0tleSIsIm5leHRQcm9taXNlIiwiTGlzdGVuU2VxdWVuY2UiLCJzZXF1ZW5jZU51bWJlclN5bmNlciIsInNlcXVlbmNlTnVtYmVySGFuZGxlciIsInNldFByZXZpb3VzVmFsdWUiLCJ3cml0ZU5ld1NlcXVlbmNlTnVtYmVyIiwid3JpdGVTZXF1ZW5jZU51bWJlciIsImV4dGVybmFsUHJldmlvdXNWYWx1ZSIsIm5leHRWYWx1ZSIsIklOVkFMSUQiLCJEZWZlcnJlZCQxIiwiRGVsYXllZE9wZXJhdGlvbiIsImFzeW5jUXVldWUiLCJ0aW1lcklkIiwidGFyZ2V0VGltZU1zIiwicmVtb3ZhbENhbGxiYWNrIiwiY3JlYXRlQW5kU2NoZWR1bGUiLCJkZWxheU1zIiwiZGVsYXllZE9wIiwidGltZXJIYW5kbGUiLCJoYW5kbGVEZWxheUVsYXBzZWQiLCJza2lwRGVsYXkiLCJjYW5jZWwiLCJlbnF1ZXVlQW5kRm9yZ2V0IiwiQXN5bmNRdWV1ZSIsInRhaWwiLCJkZWxheWVkT3BlcmF0aW9ucyIsIm9wZXJhdGlvbkluUHJvZ3Jlc3MiLCJlbnF1ZXVlIiwidmVyaWZ5Tm90RmFpbGVkIiwibmV3VGFpbCIsImVucXVldWVBZnRlckRlbGF5IiwiY29udGFpbnNEZWxheWVkT3BlcmF0aW9uIiwicmVtb3ZlRGVsYXllZE9wZXJhdGlvbiIsInZlcmlmeU9wZXJhdGlvbkluUHJvZ3Jlc3MiLCJkcmFpbiIsInJ1bkRlbGF5ZWRPcGVyYXRpb25zRWFybHkiLCJsYXN0VGltZXJJZCIsIkFsbCIsIkJBVENISURfVU5LTk9XTiIsIk11dGF0aW9uQmF0Y2giLCJiYXRjaElkIiwibXV0YXRpb25zIiwiZG9jS2V5IiwiYmF0Y2hSZXN1bHQiLCJtdXRhdGlvblJlc3VsdHMiLCJrZXlTZXQiLCJpc1RvbWJzdG9uZSIsInRvVG9tYnN0b25lIiwiTXV0YXRpb25CYXRjaFJlc3VsdCIsImJhdGNoIiwiY29tbWl0VmVyc2lvbiIsInN0cmVhbVRva2VuIiwiZG9jVmVyc2lvbnMiLCJ2ZXJzaW9uTWFwIiwiZXNjYXBlQ2hhciIsImVuY29kZWRTZXBhcmF0b3JDaGFyIiwiZW5jb2RlZE51bCIsImVuY29kZWRFc2NhcGUiLCJlbmNvZGUiLCJlbmNvZGVTZXBhcmF0b3IiLCJlbmNvZGVTZWdtZW50IiwicmVzdWx0QnVmIiwiZGVjb2RlJDEiLCJsYXN0UmVhc29uYWJsZUVzY2FwZUluZGV4Iiwic2VnbWVudEJ1aWxkZXIiLCJjdXJyZW50UGllY2UiLCJTY2hlbWFDb252ZXJ0ZXIiLCJzZXJpYWxpemVyIiwiY3JlYXRlT3JVcGdyYWRlIiwiZGIiLCJjcmVhdGVPYmplY3RTdG9yZSIsIkRiUHJpbWFyeUNsaWVudCIsImNyZWF0ZVByaW1hcnlDbGllbnRTdG9yZSIsIkRiTXV0YXRpb25RdWV1ZSIsImtleVBhdGgiLCJEYk11dGF0aW9uQmF0Y2giLCJhdXRvSW5jcmVtZW50IiwiY3JlYXRlSW5kZXgiLCJ1c2VyTXV0YXRpb25zSW5kZXgiLCJ1c2VyTXV0YXRpb25zS2V5UGF0aCIsIkRiRG9jdW1lbnRNdXRhdGlvbiIsImNyZWF0ZU11dGF0aW9uUXVldWUiLCJjcmVhdGVRdWVyeUNhY2hlIiwiRGJSZW1vdGVEb2N1bWVudCIsImNyZWF0ZVJlbW90ZURvY3VtZW50Q2FjaGUiLCJkZWxldGVPYmplY3RTdG9yZSIsIkRiVGFyZ2V0RG9jdW1lbnQiLCJEYlRhcmdldCIsIkRiVGFyZ2V0R2xvYmFsIiwiZHJvcFF1ZXJ5Q2FjaGUiLCJnbG9iYWxTdG9yZSIsInB1dCIsIndyaXRlRW1wdHlUYXJnZXRHbG9iYWxFbnRyeSIsImxvYWRBbGwiLCJleGlzdGluZ011dGF0aW9ucyIsIm11dGF0aW9uc1N0b3JlIiwidjNNdXRhdGlvbnNTdG9yZSIsIndyaXRlQWxsIiwidXBncmFkZU11dGF0aW9uQmF0Y2hTY2hlbWFBbmRNaWdyYXRlRGF0YSIsIkRiQ2xpZW50TWV0YWRhdGEiLCJjcmVhdGVDbGllbnRNZXRhZGF0YVN0b3JlIiwiRGJSZW1vdGVEb2N1bWVudENoYW5nZXMiLCJjcmVhdGVSZW1vdGVEb2N1bWVudENoYW5nZXNTdG9yZSIsInJlbW92ZUFja25vd2xlZGdlZE11dGF0aW9ucyIsInF1ZXVlc1N0b3JlIiwicXVldWVzIiwiSURCS2V5UmFuZ2UiLCJ1c2VySWQiLCJsYXN0QWNrbm93bGVkZ2VkQmF0Y2hJZCIsImRiQmF0Y2hlcyIsImRiQmF0Y2giLCJmcm9tRGJNdXRhdGlvbkJhdGNoIiwicmVtb3ZlTXV0YXRpb25CYXRjaCIsIkRiVGltZXN0YW1wIiwib3duZXJJZCIsImFsbG93VGFiU3luY2hyb25pemF0aW9uIiwibGVhc2VUaW1lc3RhbXBNcyIsImxhc3RTdHJlYW1Ub2tlbiIsImxvY2FsV3JpdGVUaW1lTXMiLCJwcmVmaXhGb3JVc2VyIiwicHJlZml4Rm9yUGF0aCIsIlBMQUNFSE9MREVSIiwiRGJOb0RvY3VtZW50IiwiRGJVbmtub3duRG9jdW1lbnQiLCJ1bmtub3duRG9jdW1lbnQiLCJub0RvY3VtZW50IiwibGFzdExpc3RlblNlcXVlbmNlTnVtYmVyIiwicXVlcnlUYXJnZXRzSW5kZXhOYW1lIiwicXVlcnlUYXJnZXRzS2V5UGF0aCIsImRvY3VtZW50VGFyZ2V0c0luZGV4IiwiZG9jdW1lbnRUYXJnZXRzS2V5UGF0aCIsImhpZ2hlc3RUYXJnZXRJZCIsImhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciIsImxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24iLCJ0YXJnZXRDb3VudCIsImNsaWVudElkIiwidXBkYXRlVGltZU1zIiwibmV0d29ya0VuYWJsZWQiLCJpbkZvcmVncm91bmQiLCJsYXN0UHJvY2Vzc2VkRG9jdW1lbnRDaGFuZ2VJZCIsIkFMTF9TVE9SRVMiLCJJbmRleGVkRGJNdXRhdGlvblF1ZXVlIiwiZG9jdW1lbnRLZXlzQnlCYXRjaElkIiwiZ2FyYmFnZUNvbGxlY3RvciIsImZvclVzZXIiLCJ1c2VyIiwiaXNBdXRoZW50aWNhdGVkIiwidHJhbnNhY3Rpb24iLCJjaGVja0VtcHR5IiwiaXRlcmF0ZSIsImNvbnRyb2wiLCJhY2tub3dsZWRnZUJhdGNoIiwiZ2V0TXV0YXRpb25RdWV1ZU1ldGFkYXRhIiwiY29udmVydFN0cmVhbVRva2VuIiwibXV0YXRpb25RdWV1ZXNTdG9yZSIsImdldExhc3RTdHJlYW1Ub2tlbiIsInNldExhc3RTdHJlYW1Ub2tlbiIsImFkZE11dGF0aW9uQmF0Y2giLCJkb2N1bWVudFN0b3JlIiwiZG9jdW1lbnRNdXRhdGlvbnNTdG9yZSIsIm11dGF0aW9uU3RvcmUiLCJ0b0RiTXV0YXRpb25CYXRjaCIsIm11dGF0aW9uc18xIiwiaW5kZXhLZXkiLCJsb29rdXBNdXRhdGlvbkJhdGNoIiwibG9va3VwTXV0YXRpb25LZXlzIiwiZ2V0TmV4dE11dGF0aW9uQmF0Y2hBZnRlckJhdGNoSWQiLCJuZXh0QmF0Y2hJZCIsImxvd2VyQm91bmQiLCJmb3VuZEJhdGNoIiwiZ2V0QWxsTXV0YXRpb25CYXRjaGVzIiwiZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXkiLCJkb2N1bWVudEtleSIsImluZGV4UHJlZml4IiwiaW5kZXhTdGFydCIsInVzZXJJRCIsImVuY29kZWRQYXRoIiwiZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXlzIiwiZG9jdW1lbnRLZXlzIiwidW5pcXVlQmF0Y2hJRHMiLCJiYXRjaElEIiwibG9va3VwTXV0YXRpb25CYXRjaGVzIiwiZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nUXVlcnkiLCJxdWVyeVBhdGgiLCJpbW1lZGlhdGVDaGlsZHJlbkxlbmd0aCIsImJhdGNoSURzIiwic2ltcGxlRGJUcmFuc2FjdGlvbiIsInJlbW92ZUNhY2hlZE11dGF0aW9uS2V5cyIsInJlbW92ZWREb2N1bWVudHNfMSIsInBlcmZvcm1Db25zaXN0ZW5jeUNoZWNrIiwic3RhcnRSYW5nZSIsImRhbmdsaW5nTXV0YXRpb25SZWZlcmVuY2VzIiwiZ2MiLCJrZXlzT25seSIsImluZGV4VHhuIiwib25seSIsIm51bURlbGV0ZWQiLCJyZW1vdmVQcm9taXNlIiwiVVNFX01PQ0tfUEVSU0lTVEVOQ0UiLCJJbmRleGVkRGJQZXJzaXN0ZW5jZSIsImdldFN0b3JlIiwiR2VuZXJhdG9ySWRzIiwiUkVTRVJWRURfQklUUyIsIlRhcmdldElkR2VuZXJhdG9yIiwiZ2VuZXJhdG9ySWQiLCJzZWVrIiwibmV4dElkIiwiZm9yUXVlcnlDYWNoZSIsIlF1ZXJ5Q2FjaGUiLCJmb3JTeW5jRW5naW5lIiwiU3luY0VuZ2luZSIsIlNpbXBsZURiIiwib3Blbk9yQ3JlYXRlIiwic2NoZW1hQ29udmVydGVyIiwiaXNBdmFpbGFibGUiLCJpbmRleGVkREIiLCJvbnN1Y2Nlc3MiLCJvbmJsb2NrZWQiLCJvbnVwZ3JhZGVuZWVkZWQiLCJvbGRWZXJzaW9uIiwiU2ltcGxlRGJUcmFuc2FjdGlvbiIsIndyYXBSZXF1ZXN0IiwiZGVsZXRlRGF0YWJhc2UiLCJ1YSIsInVzZXJBZ2VudCIsInJ1blRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmVzIiwidHJhbnNhY3Rpb25GbiIsInRyYW5zYWN0aW9uRm5SZXN1bHQiLCJjb21wbGV0aW9uUHJvbWlzZSIsIkl0ZXJhdGlvbkNvbnRyb2xsZXIiLCJkYkN1cnNvciIsInNob3VsZFN0b3AiLCJuZXh0S2V5IiwiYWJvcnRlZCIsImNvbXBsZXRpb25EZWZlcnJlZCIsIm9uY29tcGxldGUiLCJvYmplY3RTdG9yZU5hbWVzIiwic3RvcmVOYW1lIiwib2JqZWN0U3RvcmUiLCJTaW1wbGVEYlN0b3JlIiwia2V5T3JWYWx1ZSIsImluZGV4T3JSYW5nZSIsIml0ZXJhdGVDdXJzb3IiLCJkZWxldGVBbGwiLCJvcHRpb25zT3JDYWxsYmFjayIsImN1cnNvclJlcXVlc3QiLCJjb250cm9sbGVyIiwidXNlclJlc3VsdCIsInByaW1hcnlLZXkiLCJza2lwVG9LZXkiLCJjb250aW51ZSIsImluZGV4TmFtZSIsIm9wZW5LZXlDdXJzb3IiLCJvcGVuQ3Vyc29yIiwiSW5kZXhlZERiUXVlcnlDYWNoZSIsInRhcmdldElkR2VuZXJhdG9yIiwiYWxsb2NhdGVUYXJnZXRJZCIsInJldHJpZXZlTWV0YWRhdGEiLCJzYXZlTWV0YWRhdGEiLCJnZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uIiwiZ2V0SGlnaGVzdFNlcXVlbmNlTnVtYmVyIiwiZ2V0SGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyIiwic2V0VGFyZ2V0c01ldGFkYXRhIiwiYWRkUXVlcnlEYXRhIiwic2F2ZVF1ZXJ5RGF0YSIsInVwZGF0ZU1ldGFkYXRhRnJvbVF1ZXJ5RGF0YSIsInVwZGF0ZVF1ZXJ5RGF0YSIsInJlbW92ZVF1ZXJ5RGF0YSIsInJlbW92ZU1hdGNoaW5nS2V5c0ZvclRhcmdldElkIiwidGFyZ2V0c1N0b3JlIiwiZ2xvYmFsVGFyZ2V0U3RvcmUiLCJ0b0RiVGFyZ2V0IiwidXBkYXRlZCIsImdldFF1ZXJ5Q291bnQiLCJnZXRRdWVyeURhdGEiLCJmcm9tRGJUYXJnZXQiLCJhZGRNYXRjaGluZ0tleXMiLCJkb2N1bWVudFRhcmdldFN0b3JlIiwicmVtb3ZlTWF0Y2hpbmdLZXlzIiwibm90aWZ5R0NGb3JSZW1vdmVkS2V5cyIsImdldE1hdGNoaW5nS2V5c0ZvclRhcmdldElkIiwiaW1tZWRpYXRlU3VjY2Vzc29yIiwidGFyZ2V0R2xvYmFsIiwiSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZSIsImtlZXBEb2N1bWVudENoYW5nZUxvZyIsIl9sYXN0UHJvY2Vzc2VkRG9jdW1lbnRDaGFuZ2VJZCIsImFkZEVudHJpZXMiLCJtYXliZURvY3VtZW50cyIsInJlbW90ZURvY3VtZW50c1N0b3JlIiwiY2hhbmdlZEtleXMiLCJtYXliZURvY3VtZW50c18xIiwibWF5YmVEb2N1bWVudCIsImRiS2V5IiwidG9EYlJlbW90ZURvY3VtZW50IiwiZG9jdW1lbnRDaGFuZ2VzU3RvcmUiLCJ0b0RiUmVzb3VyY2VQYXRocyIsInJlbW92ZUVudHJ5IiwiZ2V0RW50cnkiLCJkYlJlbW90ZURvYyIsImZyb21EYlJlbW90ZURvY3VtZW50IiwiZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeSIsImdldE5ld0RvY3VtZW50Q2hhbmdlcyIsImNoYW5nZWREb2NzIiwiZnJvbURiUmVzb3VyY2VQYXRocyIsImRvY3VtZW50UHJvbWlzZXMiLCJyZW1vdmVEb2N1bWVudENoYW5nZXNUaHJvdWdoQ2hhbmdlSWQiLCJjaGFuZ2VJZCIsInVwcGVyQm91bmQiLCJMb2NhbFNlcmlhbGl6ZXIiLCJyZW1vdGVTZXJpYWxpemVyIiwicmVtb3RlRG9jIiwiZnJvbURiVGltZXN0YW1wIiwidG9EYlRpbWVzdGFtcCIsImRiVGltZXN0YW1wIiwic2VyaWFsaXplZE11dGF0aW9ucyIsImVuY29kZWRLZXlzIiwiZW5jb2RlZFBhdGhzIiwiZW5jb2RlZFBhdGhzXzEiLCJkYlRhcmdldCIsImRiUXVlcnkiLCJxdWVyeVByb3RvIiwiTE9HX1RBRyQyIiwiUFJJTUFSWV9MRUFTRV9MT1NUX0VSUk9SX01TRyIsIlBSSU1BUllfTEVBU0VfRVhDTFVTSVZFX0VSUk9SX01TRyIsIlVOU1VQUE9SVEVEX1BMQVRGT1JNX0VSUk9SX01TRyIsIkluZGV4ZWREYlRyYW5zYWN0aW9uIiwiY3VycmVudFNlcXVlbmNlTnVtYmVyIiwibXVsdGlDbGllbnRQYXJhbXMiLCJfc3RhcnRlZCIsImlzUHJpbWFyeSIsImxhc3RHYXJiYWdlQ29sbGVjdGlvblRpbWUiLCJwcmltYXJ5U3RhdGVMaXN0ZW5lciIsImRiTmFtZSIsIk1BSU5fREFUQUJBU0UiLCJxdWVyeUNhY2hlIiwicmVtb3RlRG9jdW1lbnRDYWNoZSIsImxvY2FsU3RvcmFnZSIsIndlYlN0b3JhZ2UiLCJjcmVhdGVJbmRleGVkRGJQZXJzaXN0ZW5jZSIsInBlcnNpc3RlbmNlIiwiY3JlYXRlTXVsdGlDbGllbnRJbmRleGVkRGJQZXJzaXN0ZW5jZSIsInN0YXJ0ZWQiLCJzaW1wbGVEYiIsInN0YXJ0UmVtb3RlRG9jdW1lbnRDYWNoZSIsImF0dGFjaFZpc2liaWxpdHlIYW5kbGVyIiwiYXR0YWNoV2luZG93VW5sb2FkSG9vayIsInVwZGF0ZUNsaWVudE1ldGFkYXRhQW5kVHJ5QmVjb21lUHJpbWFyeSIsInNjaGVkdWxlQ2xpZW50TWV0YWRhdGFBbmRQcmltYXJ5TGVhc2VSZWZyZXNoZXMiLCJsaXN0ZW5TZXF1ZW5jZSIsInNldFByaW1hcnlTdGF0ZUxpc3RlbmVyIiwic2V0TmV0d29ya0VuYWJsZWQiLCJjbGllbnRNZXRhZGF0YVN0b3JlIiwiY2FuQWN0QXNQcmltYXJ5Iiwid2FzUHJpbWFyeSIsInJlbGVhc2VQcmltYXJ5TGVhc2VJZkhlbGQiLCJhY3F1aXJlT3JFeHRlbmRQcmltYXJ5TGVhc2UiLCJyZW1vdmVDbGllbnRNZXRhZGF0YSIsIm1heWJlR2FyYmFnZUNvbGxlY3RNdWx0aUNsaWVudFN0YXRlIiwiYWN0aXZlQ2xpZW50c18xIiwiaW5hY3RpdmVDbGllbnRzXzEiLCJpc1dpdGhpbkFnZSIsIm1ldGFkYXRhU3RvcmUiLCJleGlzdGluZ0NsaWVudHMiLCJmaWx0ZXJBY3RpdmVDbGllbnRzIiwiY2xpZW50IiwiaW5hY3RpdmVDbGllbnQiLCJwcm9jZXNzZWRDaGFuZ2VJZHMiLCJvbGRlc3RDaGFuZ2VJZCIsInJlbW92ZUl0ZW0iLCJ6b21iaWVkQ2xpZW50TG9jYWxTdG9yYWdlS2V5IiwiY2xpZW50TWV0YWRhdGFSZWZyZXNoZXIiLCJDbGllbnRNZXRhZGF0YVJlZnJlc2giLCJpc0xvY2FsQ2xpZW50IiwicHJpbWFyeUNsaWVudFN0b3JlIiwiY3VycmVudFByaW1hcnkiLCJpc0NsaWVudFpvbWJpZWQiLCJvdGhlckNsaWVudCIsIm90aGVyQ2xpZW50SGFzQmV0dGVyTmV0d29ya1N0YXRlIiwib3RoZXJDbGllbnRIYXNCZXR0ZXJWaXNpYmlsaXR5Iiwib3RoZXJDbGllbnRIYXNTYW1lTmV0d29ya1N0YXRlIiwic2h1dGRvd24iLCJkZWxldGVEYXRhIiwibWFya0NsaWVudFpvbWJpZWQiLCJkZXRhY2hWaXNpYmlsaXR5SGFuZGxlciIsImRldGFjaFdpbmRvd1VubG9hZEhvb2siLCJyZW1vdmVDbGllbnRab21iaWVkRW50cnkiLCJjbGllbnRzIiwiYWN0aXZpdHlUaHJlc2hvbGRNcyIsImdldEFjdGl2ZUNsaWVudHMiLCJjbGllbnRNZXRhZGF0YSIsImdldE11dGF0aW9uUXVldWUiLCJnZXRRdWVyeUNhY2hlIiwiZ2V0UmVtb3RlRG9jdW1lbnRDYWNoZSIsInRyYW5zYWN0aW9uT3BlcmF0aW9uIiwic2ltcGxlRGJUeG4iLCJ2ZXJpZnlBbGxvd1RhYlN5bmNocm9uaXphdGlvbiIsIm5ld1ByaW1hcnkiLCJidWlsZFN0b3JhZ2VQcmVmaXgiLCJpc0RlZmF1bHREYXRhYmFzZSIsInByaW1hcnlDbGllbnQiLCJtYXhBZ2VNcyIsImRvY3VtZW50VmlzaWJpbGl0eUhhbmRsZXIiLCJ2aXNpYmlsaXR5U3RhdGUiLCJ3aW5kb3dVbmxvYWRIYW5kbGVyIiwiaXNab21iaWVkIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJaT01CSUVEX0NMSUVOVFNfS0VZX1BSRUZJWCIsImlzUHJpbWFyeUxlYXNlTG9zdEVycm9yIiwiUGVyc2lzdGVudFN0cmVhbVN0YXRlIiwiTG9jYWxEb2N1bWVudHNWaWV3IiwibXV0YXRpb25RdWV1ZSIsImdldERvY3VtZW50IiwiYmF0Y2hlcyIsImdldERvY3VtZW50SW50ZXJuYWwiLCJpbkJhdGNoZXMiLCJpbkJhdGNoZXNfMSIsImdldERvY3VtZW50cyIsImdldERvY3VtZW50c01hdGNoaW5nRG9jdW1lbnRRdWVyeSIsImdldERvY3VtZW50c01hdGNoaW5nQ29sbGVjdGlvblF1ZXJ5IiwicXVlcnlSZXN1bHRzIiwibWF0Y2hpbmdNdXRhdGlvbkJhdGNoZXMiLCJtYXRjaGluZ011dGF0aW9uQmF0Y2hlc18xIiwibXV0YXRlZERvYyIsIlJlZmVyZW5jZVNldCIsInJlZnNCeUtleSIsIkRvY1JlZmVyZW5jZSIsInJlZnNCeVRhcmdldCIsImNvbXBhcmVCeVRhcmdldElkIiwiYWRkUmVmZXJlbmNlIiwiYWRkUmVmZXJlbmNlcyIsInJlbW92ZVJlZmVyZW5jZSIsInJlbW92ZVJlZiIsInJlbW92ZVJlZmVyZW5jZXMiLCJyZW1vdmVSZWZlcmVuY2VzRm9ySWQiLCJlbXB0eUtleSIsInN0YXJ0UmVmIiwiZW5kUmVmIiwicmVtb3ZlQWxsUmVmZXJlbmNlcyIsInJlZmVyZW5jZXNGb3JJZCIsImZpcnN0UmVmIiwidGFyZ2V0T3JCYXRjaElkIiwiUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIiLCJhZGRFbnRyeSIsImFzc2VydENoYW5nZXMiLCJidWZmZXJlZEVudHJ5IiwiTG9jYWxTdG9yZSIsImluaXRpYWxVc2VyIiwibG9jYWxWaWV3UmVmZXJlbmNlcyIsInF1ZXJ5RGF0YUJ5VGFyZ2V0IiwicmVtb3RlRG9jdW1lbnRzIiwibG9jYWxEb2N1bWVudHMiLCJzdGFydE11dGF0aW9uUXVldWUiLCJoYW5kbGVVc2VyQ2hhbmdlIiwib2xkQmF0Y2hlcyIsInByb21pc2VkT2xkQmF0Y2hlcyIsIm5ld0JhdGNoZXMiLCJyZW1vdmVkQmF0Y2hJZHMiLCJhZGRlZEJhdGNoSWRzIiwib2xkQmF0Y2hlc18xIiwibmV3QmF0Y2hlc18xIiwiX2QiLCJfZSIsImFmZmVjdGVkRG9jdW1lbnRzIiwibG9jYWxXcml0ZSIsInByb21pc2VkQmF0Y2giLCJjaGFuZ2VkRG9jdW1lbnRzIiwibG9va3VwTXV0YXRpb25Eb2N1bWVudHMiLCJhZmZlY3RlZCIsImRvY3VtZW50QnVmZmVyIiwiYXBwbHlXcml0ZVRvUmVtb3RlRG9jdW1lbnRzIiwicmVqZWN0QmF0Y2giLCJhZmZlY3RlZEtleXMiLCJhcHBseVJlbW90ZUV2ZW50IiwiYXV0aG9yaXRhdGl2ZVVwZGF0ZXMiLCJvbGRRdWVyeURhdGEiLCJzaG91bGRQZXJzaXN0UXVlcnlEYXRhIiwiY2hhbmdlZERvY0tleXMiLCJleGlzdGluZ0RvYyIsImhhc1BlbmRpbmdXcml0ZXMiLCJyZW1vdGVWZXJzaW9uIiwidXBkYXRlUmVtb3RlVmVyc2lvbiIsImxhc3RSZW1vdGVWZXJzaW9uIiwibmV3UXVlcnlEYXRhIiwiUkVTVU1FX1RPS0VOX01BWF9BR0VfTUlDUk9TIiwibm90aWZ5TG9jYWxWaWV3Q2hhbmdlcyIsInZpZXdDaGFuZ2VzIiwidmlld0NoYW5nZXNfMSIsInZpZXdDaGFuZ2UiLCJhZGRlZEtleXMiLCJyZW1vdmVkS2V5cyIsIm5leHRNdXRhdGlvbkJhdGNoIiwiYWZ0ZXJCYXRjaElkIiwicmVhZERvY3VtZW50IiwiYWxsb2NhdGVRdWVyeSIsInJlbGVhc2VRdWVyeSIsImtlZXBQZXJzaXN0ZWRRdWVyeURhdGEiLCJjYWNoZWRRdWVyeURhdGEiLCJleGVjdXRlUXVlcnkiLCJyZW1vdGVEb2N1bWVudEtleXMiLCJnYXJiYWdlIiwicmVtb3ZlQ2FjaGVkTXV0YXRpb25CYXRjaE1ldGFkYXRhIiwiZG9jS2V5cyIsInByb21pc2VDaGFpbiIsImFja1ZlcnNpb24iLCJnZXRRdWVyeUZvclRhcmdldCIsIk1lbW9yeU11dGF0aW9uUXVldWUiLCJoaWdoZXN0QWNrbm93bGVkZ2VkQmF0Y2hJZCIsImJhdGNoZXNCeURvY3VtZW50S2V5IiwiYmF0Y2hJbmRleCIsImluZGV4T2ZFeGlzdGluZ0JhdGNoSWQiLCJmaW5kTXV0YXRpb25CYXRjaCIsIm11dGF0aW9uQmF0Y2giLCJyYXdJbmRleCIsImluZGV4T2ZCYXRjaElkIiwiZ2V0QWxsTGl2ZU11dGF0aW9uQmF0Y2hlc0JlZm9yZUluZGV4IiwiZmluZE11dGF0aW9uQmF0Y2hlcyIsImltbWVkaWF0ZUNoaWxkcmVuUGF0aExlbmd0aCIsInN0YXJ0UGF0aCIsInJvd0tleVBhdGgiLCJlbmRJbmRleCIsInJlZmVyZW5jZXMiLCJPYmplY3RNYXAiLCJtYXBLZXlGbiIsImlubmVyIiwibWF0Y2hlc18xIiwib3RoZXJLZXkiLCJlbnRyaWVzXzEiLCJNZW1vcnlRdWVyeUNhY2hlIiwicXVlcmllcyIsImhpZ2hlc3RTZXF1ZW5jZU51bWJlciIsIm5leHRUYXJnZXRJZCIsIm1hdGNoaW5nS2V5cyIsIk1lbW9yeVJlbW90ZURvY3VtZW50Q2FjaGUiLCJuZXdEb2N1bWVudENoYW5nZXMiLCJNZW1vcnlQZXJzaXN0ZW5jZSIsIm11dGF0aW9uUXVldWVzIiwidG9LZXkiLCJNZW1vcnlUcmFuc2FjdGlvbiIsIk5vT3BHYXJiYWdlQ29sbGVjdG9yIiwiRXhwb25lbnRpYWxCYWNrb2ZmIiwiaW5pdGlhbERlbGF5TXMiLCJiYWNrb2ZmRmFjdG9yIiwibWF4RGVsYXlNcyIsInRpbWVyUHJvbWlzZSIsImxhc3RBdHRlbXB0VGltZSIsImN1cnJlbnRCYXNlTXMiLCJyZXNldFRvTWF4IiwiYmFja29mZkFuZFJ1biIsImRlc2lyZWREZWxheVdpdGhKaXR0ZXJNcyIsImppdHRlckRlbGF5TXMiLCJkZWxheVNvRmFyTXMiLCJyZW1haW5pbmdEZWxheU1zIiwiT25saW5lU3RhdGUiLCJPbmxpbmVTdGF0ZVNvdXJjZSIsIkJBQ0tPRkZfSU5JVElBTF9ERUxBWV9NUyIsIkJBQ0tPRkZfTUFYX0RFTEFZX01TIiwiQkFDS09GRl9GQUNUT1IiLCJQZXJzaXN0ZW50U3RyZWFtIiwiY29ubmVjdGlvblRpbWVySWQiLCJpZGxlVGltZXJJZCIsImNvbm5lY3Rpb24iLCJjcmVkZW50aWFsc1Byb3ZpZGVyIiwiSW5pdGlhbCIsImNsb3NlQ291bnQiLCJpZGxlVGltZXIiLCJzdHJlYW0iLCJiYWNrb2ZmIiwiaXNTdGFydGVkIiwiU3RhcnRpbmciLCJPcGVuIiwiQmFja29mZiIsImlzT3BlbiIsImF1dGgiLCJwZXJmb3JtQmFja29mZiIsImluaGliaXRCYWNrb2ZmIiwibWFya0lkbGUiLCJoYW5kbGVJZGxlQ2xvc2VUaW1lciIsInNlbmRSZXF1ZXN0IiwiY2FuY2VsSWRsZUNoZWNrIiwiZmluYWxTdGF0ZSIsImludmFsaWRhdGVUb2tlbiIsInRlYXJEb3duIiwiZGlzcGF0Y2hJZk5vdENsb3NlZCIsImdldENsb3NlR3VhcmRlZERpc3BhdGNoZXIiLCJzdGFydFN0cmVhbSIsInJwY0Vycm9yIiwiaGFuZGxlU3RyZWFtQ2xvc2UiLCJzdGFydFJwYyIsInN0YXJ0Q2xvc2VDb3VudCIsIlBlcnNpc3RlbnRMaXN0ZW5TdHJlYW0iLCJMaXN0ZW5TdHJlYW1Db25uZWN0aW9uQmFja29mZiIsIkxpc3RlblN0cmVhbUlkbGUiLCJ3YXRjaENoYW5nZVByb3RvIiwic25hcHNob3QiLCJvbldhdGNoQ2hhbmdlIiwid2F0Y2giLCJhZGRUYXJnZXQiLCJsYWJlbHMiLCJ1bndhdGNoIiwiUGVyc2lzdGVudFdyaXRlU3RyZWFtIiwiV3JpdGVTdHJlYW1Db25uZWN0aW9uQmFja29mZiIsIldyaXRlU3RyZWFtSWRsZSIsImhhbmRzaGFrZUNvbXBsZXRlXyIsIndyaXRlTXV0YXRpb25zIiwicmVzcG9uc2VQcm90byIsIndyaXRlUmVzdWx0cyIsIm9uTXV0YXRpb25SZXN1bHQiLCJvbkhhbmRzaGFrZUNvbXBsZXRlIiwid3JpdGVIYW5kc2hha2UiLCJ3cml0ZXMiLCJEYXRhc3RvcmUiLCJuZXdQZXJzaXN0ZW50V3JpdGVTdHJlYW0iLCJuZXdQZXJzaXN0ZW50V2F0Y2hTdHJlYW0iLCJjb21taXQiLCJsb29rdXAiLCJUcmFuc2FjdGlvbiIsImRhdGFzdG9yZSIsInJlYWRWZXJzaW9ucyIsImNvbW1pdHRlZCIsInJlY29yZFZlcnNpb24iLCJkb2NWZXJzaW9uIiwiZXhpc3RpbmdWZXJzaW9uIiwicHJlY29uZGl0aW9uRm9yVXBkYXRlIiwidG9NdXRhdGlvbnMiLCJ1bndyaXR0ZW4iLCJPbmxpbmVTdGF0ZVRyYWNrZXIiLCJvbmxpbmVTdGF0ZUhhbmRsZXIiLCJVbmtub3duIiwid2F0Y2hTdHJlYW1GYWlsdXJlcyIsIm9ubGluZVN0YXRlVGltZXIiLCJzaG91bGRXYXJuQ2xpZW50SXNPZmZsaW5lIiwiaGFuZGxlV2F0Y2hTdHJlYW1TdGFydCIsInNldEFuZEJyb2FkY2FzdCIsIk9ubGluZVN0YXRlVGltZW91dCIsImxvZ0NsaWVudE9mZmxpbmVXYXJuaW5nSWZOZWNlc3NhcnkiLCJPZmZsaW5lIiwiaGFuZGxlV2F0Y2hTdHJlYW1GYWlsdXJlIiwiT25saW5lIiwiY2xlYXJPbmxpbmVTdGF0ZVRpbWVyIiwibmV3U3RhdGUiLCJkZXRhaWxzIiwiUmVtb3RlU3RvcmUiLCJsb2NhbFN0b3JlIiwid3JpdGVQaXBlbGluZSIsImxpc3RlblRhcmdldHMiLCJ3YXRjaENoYW5nZUFnZ3JlZ2F0b3IiLCJvbmxpbmVTdGF0ZVRyYWNrZXIiLCJ3YXRjaFN0cmVhbSIsIm9uV2F0Y2hTdHJlYW1PcGVuIiwib25XYXRjaFN0cmVhbUNsb3NlIiwib25XYXRjaFN0cmVhbUNoYW5nZSIsIndyaXRlU3RyZWFtIiwib25Xcml0ZVN0cmVhbU9wZW4iLCJvbldyaXRlU3RyZWFtQ2xvc2UiLCJvbldyaXRlSGFuZHNoYWtlQ29tcGxldGUiLCJlbmFibGVOZXR3b3JrIiwiY2FuVXNlTmV0d29yayIsInNob3VsZFN0YXJ0V2F0Y2hTdHJlYW0iLCJzdGFydFdhdGNoU3RyZWFtIiwiZmlsbFdyaXRlUGlwZWxpbmUiLCJkaXNhYmxlTmV0d29yayIsImRpc2FibGVOZXR3b3JrSW50ZXJuYWwiLCJjbGVhblVwV2F0Y2hTdHJlYW1TdGF0ZSIsInNlbmRXYXRjaFJlcXVlc3QiLCJ1bmxpc3RlbiIsInNlbmRVbndhdGNoUmVxdWVzdCIsInN5bmNFbmdpbmUiLCJoYW5kbGVUYXJnZXRFcnJvciIsInJhaXNlV2F0Y2hTbmFwc2hvdCIsInJlcXVlc3RRdWVyeURhdGEiLCJyZWplY3RMaXN0ZW4iLCJsYXN0QmF0Y2hJZFJldHJpZXZlZCIsImNhbkFkZFRvV3JpdGVQaXBlbGluZSIsImFkZFRvV3JpdGVQaXBlbGluZSIsInNob3VsZFN0YXJ0V3JpdGVTdHJlYW0iLCJzdGFydFdyaXRlU3RyZWFtIiwib3V0c3RhbmRpbmdXcml0ZXMiLCJoYW5kc2hha2VDb21wbGV0ZSIsImlnbm9yZUlmUHJpbWFyeUxlYXNlTG9zcyIsImFwcGx5U3VjY2Vzc2Z1bFdyaXRlIiwiaGFuZGxlV3JpdGVFcnJvciIsImhhbmRsZUhhbmRzaGFrZUVycm9yIiwicmVqZWN0RmFpbGVkV3JpdGUiLCJjcmVhdGVUcmFuc2FjdGlvbiIsImhhbmRsZUNyZWRlbnRpYWxDaGFuZ2UiLCJhcHBseVByaW1hcnlTdGF0ZSIsIlF1ZXJ5TGlzdGVuZXJzSW5mbyIsIkV2ZW50TWFuYWdlciIsIm9ubGluZVN0YXRlIiwiZmlyc3RMaXN0ZW4iLCJxdWVyeUluZm8iLCJhcHBseU9ubGluZVN0YXRlQ2hhbmdlIiwidmlld1NuYXAiLCJvblZpZXdTbmFwc2hvdCIsImxhc3RMaXN0ZW4iLCJ2aWV3U25hcHMiLCJ2aWV3U25hcHNfMSIsIm9uV2F0Y2hFcnJvciIsIm9uT25saW5lU3RhdGVDaGFuZ2UiLCJRdWVyeUxpc3RlbmVyIiwicXVlcnlPYnNlcnZlciIsInJhaXNlZEluaXRpYWxFdmVudCIsInNuYXAiLCJpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzIiwic2hvdWxkUmFpc2VFdmVudCIsInNob3VsZFJhaXNlSW5pdGlhbEV2ZW50IiwicmFpc2VJbml0aWFsRXZlbnQiLCJtYXliZU9ubGluZSIsIndhaXRGb3JTeW5jV2hlbk9ubGluZSIsImhhc1BlbmRpbmdXcml0ZXNDaGFuZ2VkIiwiTG9jYWxWaWV3Q2hhbmdlcyIsImZyb21TbmFwc2hvdCIsInZpZXdTbmFwc2hvdCIsIkFkZGVkTGltYm9Eb2N1bWVudCIsIlJlbW92ZWRMaW1ib0RvY3VtZW50IiwiVmlldyIsIl9zeW5jZWREb2N1bWVudHMiLCJzeW5jU3RhdGUiLCJsaW1ib0RvY3VtZW50cyIsImRvY3VtZW50U2V0IiwiY29tcHV0ZURvY0NoYW5nZXMiLCJwcmV2aW91c0NoYW5nZXMiLCJjaGFuZ2VTZXQiLCJvbGREb2N1bWVudFNldCIsIm5ld011dGF0ZWRLZXlzIiwibmV3RG9jdW1lbnRTZXQiLCJuZWVkc1JlZmlsbCIsImxhc3REb2NJbkxpbWl0IiwibmV3TWF5YmVEb2MiLCJvbGREb2MiLCJvbGREb2NIYWRQZW5kaW5nTXV0YXRpb25zIiwibmV3RG9jSGFzUGVuZGluZ011dGF0aW9ucyIsImNoYW5nZUFwcGxpZWQiLCJzaG91bGRXYWl0Rm9yU3luY2VkRG9jdW1lbnQiLCJhcHBseUNoYW5nZXMiLCJ1cGRhdGVMaW1ib0RvY3VtZW50cyIsImNvbXBhcmVDaGFuZ2VUeXBlIiwiYXBwbHlUYXJnZXRDaGFuZ2UiLCJsaW1ib0NoYW5nZXMiLCJuZXdTeW5jU3RhdGUiLCJTeW5jZWQiLCJMb2NhbCIsInNob3VsZEJlSW5MaW1ibyIsIm9sZExpbWJvRG9jdW1lbnRzIiwic3luY2hyb25pemVXaXRoUGVyc2lzdGVkU3RhdGUiLCJsb2NhbERvY3MiLCJyZW1vdGVLZXlzIiwiY29tcHV0ZUluaXRpYWxTbmFwc2hvdCIsIlF1ZXJ5VmlldyIsInJlbW90ZVN0b3JlIiwic2hhcmVkQ2xpZW50U3RhdGUiLCJjdXJyZW50VXNlciIsInN5bmNFbmdpbmVMaXN0ZW5lciIsInF1ZXJ5Vmlld3NCeVF1ZXJ5IiwicXVlcnlWaWV3c0J5VGFyZ2V0IiwibGltYm9UYXJnZXRzQnlLZXkiLCJsaW1ib1Jlc29sdXRpb25zQnlUYXJnZXQiLCJsaW1ib0RvY3VtZW50UmVmcyIsIm11dGF0aW9uVXNlckNhbGxiYWNrcyIsImxpbWJvVGFyZ2V0SWRHZW5lcmF0b3IiLCJxdWVyeVZpZXciLCJhc3NlcnRTdWJzY3JpYmVkIiwiYWRkTG9jYWxRdWVyeVRhcmdldCIsImluaXRpYWxpemVWaWV3QW5kQ29tcHV0ZVNuYXBzaG90Iiwidmlld0RvY0NoYW5nZXMiLCJzeW50aGVzaXplZFRhcmdldENoYW5nZSIsInN5bmNocm9uaXplVmlld0FuZENvbXB1dGVTbmFwc2hvdCIsInVwZGF0ZVRyYWNrZWRMaW1ib3MiLCJyZW1vdmVMb2NhbFF1ZXJ5VGFyZ2V0IiwiaXNBY3RpdmVRdWVyeVRhcmdldCIsImNsZWFyUXVlcnlTdGF0ZSIsInJlbW92ZUFuZENsZWFudXBRdWVyeSIsInVzZXJDYWxsYmFjayIsImFkZFBlbmRpbmdNdXRhdGlvbiIsImFkZE11dGF0aW9uQ2FsbGJhY2siLCJlbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlIiwid3JhcFVwZGF0ZUZ1bmN0aW9uRXJyb3IiLCJ1cGRhdGVGdW5jdGlvbiIsInJldHJpZXMiLCJ1c2VyUHJvbWlzZSIsIndyYXBwZWRVcGRhdGVGdW5jdGlvbiIsImxpbWJvUmVzb2x1dGlvbiIsInJlY2VpdmVkRG9jdW1lbnQiLCJTaGFyZWRDbGllbnRTdGF0ZSIsIm5ld1ZpZXdTbmFwc2hvdHNfMSIsInNldE9ubGluZVN0YXRlIiwibGltYm9LZXkiLCJldmVudF8xIiwicXVlcnlWaWV3XzEiLCJ1cGRhdGVRdWVyeVN0YXRlIiwiYXBwbHlCYXRjaFN0YXRlIiwiYmF0Y2hTdGF0ZSIsInByb2Nlc3NVc2VyQ2FsbGJhY2siLCJtdXRhdGlvbkJhdGNoUmVzdWx0IiwidXBkYXRlTXV0YXRpb25TdGF0ZSIsIm5ld0NhbGxiYWNrcyIsImxpbWJvS2V5cyIsImlzUmVmZXJlbmNlZCIsInJlbW92ZUxpbWJvVGFyZ2V0IiwibGltYm9UYXJnZXRJZCIsInRoaXNfMSIsImxpbWJvQ2hhbmdlc18xIiwibGltYm9DaGFuZ2UiLCJ0cmFja0xpbWJvQ2hhbmdlIiwiY3VycmVudExpbWJvRG9jcyIsIm5ld1NuYXBzIiwiZG9jQ2hhbmdlc0luQWxsVmlld3MiLCJxdWVyaWVzUHJvY2Vzc2VkIiwidXNlckNoYW5nZWQiLCJhY3RpdmVUYXJnZXRzIiwiYWN0aXZlUXVlcmllcyIsImFjdGl2ZVF1ZXJpZXNfMSIsImFjdGl2ZVRhcmdldHNfMSIsInBfMSIsImdldEFsbEFjdGl2ZVF1ZXJ5VGFyZ2V0cyIsInN5bmNocm9uaXplUXVlcnlWaWV3c0FuZFJhaXNlU25hcHNob3RzIiwiaXNMb2NhbFF1ZXJ5VGFyZ2V0IiwicmVzZXRMaW1ib0RvY3VtZW50cyIsIm5ld1ZpZXdTbmFwc2hvdHMiLCJ0YXJnZXRzXzEiLCJhcHBseVRhcmdldFN0YXRlIiwic3ludGhlc2l6ZWRSZW1vdGVFdmVudCIsImFwcGx5QWN0aXZlVGFyZ2V0c0NoYW5nZSIsImFkZGVkIiwicmVtb3ZlZCIsImFkZGVkXzEiLCJfbG9vcF8zIiwidGhpc18yIiwicmVtb3ZlZF8xIiwic3luY2VkRG9jdW1lbnRzIiwiVXNlciIsIm90aGVyVXNlciIsIkdPT0dMRV9DUkVERU5USUFMUyIsIkZJUlNUX1BBUlRZIiwiTE9HX1RBRyQxMCIsIkNMSUVOVF9TVEFURV9LRVlfUFJFRklYIiwiTVVUQVRJT05fQkFUQ0hfS0VZX1BSRUZJWCIsIlFVRVJZX1RBUkdFVF9LRVlfUFJFRklYIiwiT05MSU5FX1NUQVRFX0tFWV9QUkVGSVgiLCJTRVFVRU5DRV9OVU1CRVJfS0VZX1BSRUZJWCIsIk11dGF0aW9uTWV0YWRhdGEiLCJmcm9tV2ViU3RvcmFnZUVudHJ5IiwidmFsaWREYXRhIiwiZmlyZXN0b3JlRXJyb3IiLCJ0b1dlYlN0b3JhZ2VKU09OIiwiYmF0Y2hNZXRhZGF0YSIsIlF1ZXJ5VGFyZ2V0TWV0YWRhdGEiLCJSZW1vdGVDbGllbnRTdGF0ZSIsImFjdGl2ZVRhcmdldElkcyIsImNsaWVudFN0YXRlIiwiYWN0aXZlVGFyZ2V0SWRzU2V0IiwiU2hhcmVkT25saW5lU3RhdGUiLCJMb2NhbENsaWVudFN0YXRlIiwiYWRkUXVlcnlUYXJnZXQiLCJyZW1vdmVRdWVyeVRhcmdldCIsIldlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZSIsImxvY2FsQ2xpZW50SWQiLCJhY3RpdmVDbGllbnRzIiwic3RvcmFnZUxpc3RlbmVyIiwiaGFuZGxlV2ViU3RvcmFnZUV2ZW50IiwiZWFybHlFdmVudHMiLCJlc2NhcGVkUGVyc2lzdGVuY2VLZXkiLCJzdG9yYWdlIiwibG9jYWxDbGllbnRTdG9yYWdlS2V5IiwidG9XZWJTdG9yYWdlQ2xpZW50U3RhdGVLZXkiLCJzZXF1ZW5jZU51bWJlcktleSIsImNsaWVudFN0YXRlS2V5UmUiLCJtdXRhdGlvbkJhdGNoS2V5UmUiLCJxdWVyeVRhcmdldEtleVJlIiwib25saW5lU3RhdGVLZXkiLCJleGlzdGluZ0NsaWVudHNfMSIsInN0b3JhZ2VJdGVtIiwib25saW5lU3RhdGVKU09OIiwicGVyc2lzdENsaWVudFN0YXRlIiwiZnJvbVdlYlN0b3JhZ2VPbmxpbmVTdGF0ZSIsImhhbmRsZU9ubGluZVN0YXRlRXZlbnQiLCJwZXJzaXN0TXV0YXRpb25TdGF0ZSIsInJlbW92ZU11dGF0aW9uU3RhdGUiLCJxdWVyeVN0YXRlIiwidG9XZWJTdG9yYWdlUXVlcnlUYXJnZXRNZXRhZGF0YUtleSIsImxvY2FsQ2xpZW50U3RhdGUiLCJwZXJzaXN0UXVlcnlUYXJnZXRTdGF0ZSIsInBlcnNpc3RPbmxpbmVTdGF0ZSIsInN0b3JhZ2VBcmVhIiwibXV0YXRpb25NZXRhZGF0YSIsInF1ZXJ5VGFyZ2V0TWV0YWRhdGEiLCJmcm9tV2ViU3RvcmFnZUNsaWVudFN0YXRlS2V5IiwiaGFuZGxlQ2xpZW50U3RhdGVFdmVudCIsImZyb21XZWJTdG9yYWdlQ2xpZW50U3RhdGUiLCJmcm9tV2ViU3RvcmFnZU11dGF0aW9uTWV0YWRhdGEiLCJoYW5kbGVNdXRhdGlvbkJhdGNoRXZlbnQiLCJmcm9tV2ViU3RvcmFnZVF1ZXJ5VGFyZ2V0TWV0YWRhdGEiLCJoYW5kbGVRdWVyeVRhcmdldEV2ZW50Iiwic2VxU3RyaW5nIiwiZnJvbVdlYlN0b3JhZ2VTZXF1ZW5jZU51bWJlciIsIm11dGF0aW9uU3RhdGUiLCJtdXRhdGlvbktleSIsInRvV2ViU3RvcmFnZU11dGF0aW9uQmF0Y2hLZXkiLCJlbnRyeSIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwiZXhpc3RpbmdUYXJnZXRzIiwibmV3VGFyZ2V0cyIsImFkZGVkVGFyZ2V0cyIsInJlbW92ZWRUYXJnZXRzIiwiTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGUiLCJsb2NhbFN0YXRlIiwiRmlyZXN0b3JlQ2xpZW50IiwicGVyc2lzdGVuY2VTZXR0aW5ncyIsImluaXRpYWxpemF0aW9uRG9uZSIsInBlcnNpc3RlbmNlUmVzdWx0IiwiaW5pdGlhbGl6ZWQiLCJzZXRDaGFuZ2VMaXN0ZW5lciIsImluaXRpYWxpemVQZXJzaXN0ZW5jZSIsImluaXRpYWxpemVSZXN0Iiwic3RhcnRJbmRleGVkRGJQZXJzaXN0ZW5jZSIsImNhbkZhbGxiYWNrIiwic3RhcnRNZW1vcnlQZXJzaXN0ZW5jZSIsIkRPTUV4Y2VwdGlvbiIsInN0b3JhZ2VQcmVmaXgiLCJleHBlcmltZW50YWxUYWJTeW5jaHJvbml6YXRpb24iLCJyZW1vdGVTdG9yZU9ubGluZVN0YXRlQ2hhbmdlZEhhbmRsZXIiLCJzaGFyZWRDbGllbnRTdGF0ZU9ubGluZVN0YXRlQ2hhbmdlZEhhbmRsZXIiLCJldmVudE1nciIsInB1cmdlUGVyc2lzdGVuY2VXaXRoRGF0YUxvc3MiLCJyZW1vdmVDaGFuZ2VMaXN0ZW5lciIsImdldERvY3VtZW50RnJvbUxvY2FsQ2FjaGUiLCJnZXREb2N1bWVudHNGcm9tTG9jYWxDYWNoZSIsIkFzeW5jT2JzZXJ2ZXIiLCJtdXRlZCIsInNjaGVkdWxlRXZlbnQiLCJtdXRlIiwiZXZlbnRIYW5kbGVyIiwiRmllbGRQYXRoJDEiLCJGaWVsZFBhdGgkJDEiLCJmaWVsZE5hbWVzIiwibWluTnVtYmVyT2ZFbGVtZW50cyIsInZhbGlkYXRlTmFtZWRBcnJheUF0TGVhc3ROdW1iZXJPZkVsZW1lbnRzIiwiX2ludGVybmFsUGF0aCIsImRvY3VtZW50SWQiLCJfRE9DVU1FTlRfSUQiLCJSRVNFUlZFRCIsIk9BdXRoVG9rZW4iLCJBdXRob3JpemF0aW9uIiwiRW1wdHlDcmVkZW50aWFsc1Byb3ZpZGVyIiwiY2hhbmdlTGlzdGVuZXIiLCJGaXJlYmFzZUNyZWRlbnRpYWxzUHJvdmlkZXIiLCJ0b2tlbkxpc3RlbmVyIiwidG9rZW5Db3VudGVyIiwiZm9yY2VSZWZyZXNoIiwiZ2V0VXNlciIsImluaXRpYWxUb2tlbkNvdW50ZXIiLCJ0b2tlbkRhdGEiLCJhY2Nlc3NUb2tlbiIsImN1cnJlbnRVaWQiLCJGaXJzdFBhcnR5VG9rZW4iLCJnYXBpIiwic2Vzc2lvbkluZGV4IiwiWC1Hb29nLUF1dGhVc2VyIiwiRmlyc3RQYXJ0eUNyZWRlbnRpYWxzUHJvdmlkZXIiLCJpc1BhcnRpYWxPYnNlcnZlciIsImltcGxlbWVudHNBbnlNZXRob2RzJDEiLCJVc2VyRGF0YVNvdXJjZSIsIkZpZWxkVmFsdWVJbXBsIiwiX21ldGhvZE5hbWUiLCJEZWxldGVGaWVsZFZhbHVlSW1wbCIsInNlcnZlclRpbWVzdGFtcCIsIlNlcnZlclRpbWVzdGFtcEZpZWxkVmFsdWVJbXBsIiwiYXJyYXlVbmlvbiIsIkFycmF5VW5pb25GaWVsZFZhbHVlSW1wbCIsImFycmF5UmVtb3ZlIiwiQXJyYXlSZW1vdmVGaWVsZFZhbHVlSW1wbCIsIl9lbGVtZW50cyIsIlB1YmxpY0ZpZWxkVmFsdWUiLCJSRVNFUlZFRF9GSUVMRF9SRUdFWCIsIlBhcnNlZFNldERhdGEiLCJQYXJzZWRVcGRhdGVEYXRhIiwiaXNXcml0ZSIsImRhdGFTb3VyY2UiLCJNZXJnZVNldCIsIlVwZGF0ZSIsIkFyZ3VtZW50IiwiUGFyc2VDb250ZXh0IiwibWV0aG9kTmFtZSIsImFycmF5RWxlbWVudCIsInZhbGlkYXRlUGF0aCIsImNoaWxkQ29udGV4dEZvckZpZWxkIiwiY2hpbGRQYXRoIiwidmFsaWRhdGVQYXRoU2VnbWVudCIsImNoaWxkQ29udGV4dEZvckZpZWxkUGF0aCIsImNoaWxkQ29udGV4dEZvckFycmF5IiwiY3JlYXRlRXJyb3IiLCJmaWVsZERlc2NyaXB0aW9uIiwiRG9jdW1lbnRLZXlSZWZlcmVuY2UiLCJVc2VyRGF0YUNvbnZlcnRlciIsInByZUNvbnZlcnRlciIsInBhcnNlU2V0RGF0YSIsInZhbGlkYXRlUGxhaW5PYmplY3QiLCJ1cGRhdGVEYXRhIiwicGFyc2VEYXRhIiwicGFyc2VNZXJnZURhdGEiLCJ2YWxpZGF0ZWRGaWVsZFBhdGhzIiwiZmllbGRQYXRoc18xIiwic3RyaW5nT3JGaWVsZFBhdGgiLCJmaWVsZFBhdGhGcm9tRG90U2VwYXJhdGVkU3RyaW5nIiwicGFyc2VVcGRhdGVEYXRhIiwiZmllbGRNYXNrUGF0aHMiLCJjaGlsZENvbnRleHQiLCJydW5QcmVDb252ZXJ0ZXIiLCJwYXJzZWRWYWx1ZSIsIm1hc2siLCJwYXJzZVVwZGF0ZVZhcmFyZ3MiLCJtb3JlRmllbGRzQW5kVmFsdWVzIiwiZmllbGRQYXRoRnJvbUFyZ3VtZW50IiwidmFsdWVfMSIsInBhcnNlUXVlcnlWYWx1ZSIsImVycm9yTWVzc2FnZSIsImxvb2tzTGlrZUpzb25PYmplY3QiLCJwYXJzZU9iamVjdCIsInBhcnNlU2VudGluZWxGaWVsZFZhbHVlIiwicGFyc2VBcnJheSIsInBhcnNlU2NhbGFyVmFsdWUiLCJlbnRyeUluZGV4IiwiYXJyYXlfMSIsInBhcnNlZEVudHJ5IiwicGFyc2VkRWxlbWVudHMiLCJwYXJzZUFycmF5VHJhbnNmb3JtRWxlbWVudHMiLCJmcm9tRG90U2VwYXJhdGVkU3RyaW5nIiwiREVGQVVMVF9IT1NUIiwiREVGQVVMVF9TU0wiLCJERUZBVUxUX1RJTUVTVEFNUFNfSU5fU05BUFNIT1RTIiwiREVGQVVMVF9TWU5DSFJPTklaRV9UQUJTIiwiRmlyZXN0b3JlU2V0dGluZ3MiLCJGaXJlc3RvcmVDb25maWciLCJQZXJzaXN0ZW5jZVNldHRpbmdzIiwiRmlyZXN0b3JlIiwiZGF0YWJhc2VJZE9yQXBwIiwiX3F1ZXVlIiwiX2ZpcmVzdG9yZUNsaWVudCIsImZpcmViYXNlQXBwIiwiZGF0YWJhc2VJZEZyb21BcHAiLCJleHRlcm5hbF8xIiwiX2NvbmZpZyIsIl9kYXRhYmFzZUlkIiwic2V0dGluZ3NMaXRlcmFsIiwibmV3U2V0dGluZ3MiLCJtYWtlQ3JlZGVudGlhbHNQcm92aWRlciIsImVuc3VyZUNsaWVudENvbmZpZ3VyZWQiLCJlbmFibGVQZXJzaXN0ZW5jZSIsImNvbmZpZ3VyZUNsaWVudCIsIl9kYXRhQ29udmVydGVyIiwiRG9jdW1lbnRSZWZlcmVuY2UiLCJ0aGlzRGIiLCJvdGhlckRiIiwiZmlyZXN0b3JlIiwiX2tleSIsInBhdGhTdHJpbmciLCJDb2xsZWN0aW9uUmVmZXJlbmNlIiwiZm9yUGF0aCIsIlRyYW5zYWN0aW9uJDEiLCJXcml0ZUJhdGNoIiwibGV2ZWwiLCJfYXJlVGltZXN0YW1wc0luU25hcHNob3RzRW5hYmxlZCIsIl9maXJlc3RvcmUiLCJfdHJhbnNhY3Rpb24iLCJkb2N1bWVudFJlZiIsInZhbGlkYXRlUmVmZXJlbmNlIiwiRG9jdW1lbnRTbmFwc2hvdCIsInZhbGlkYXRlU2V0T3B0aW9ucyIsIm1lcmdlRmllbGRzIiwiZmllbGRPclVwZGF0ZURhdGEiLCJfbXV0YXRpb25zIiwiX2NvbW1pdHRlZCIsInZlcmlmeU5vdENvbW1pdHRlZCIsIm9uU25hcHNob3QiLCJjdXJyQXJnIiwiaW50ZXJuYWxPcHRpb25zIiwib25TbmFwc2hvdEludGVybmFsIiwiZXJySGFuZGxlciIsImFzeW5jT2JzZXJ2ZXIiLCJpbnRlcm5hbExpc3RlbmVyIiwidmFsaWRhdGVHZXRPcHRpb25zIiwiZ2V0VmlhU25hcHNob3RMaXN0ZW5lciIsIlNuYXBzaG90TWV0YWRhdGEiLCJfZG9jdW1lbnQiLCJfZnJvbUNhY2hlIiwiX2hhc1BlbmRpbmdXcml0ZXMiLCJ2YWxpZGF0ZVNuYXBzaG90T3B0aW9ucyIsImNvbnZlcnRPYmplY3QiLCJjb252ZXJ0VmFsdWUiLCJjb252ZXJ0QXJyYXkiLCJRdWVyeURvY3VtZW50U25hcHNob3QiLCJRdWVyeSQxIiwiUXVlcnkkJDEiLCJfcXVlcnkiLCJvcFN0ciIsInJlbGF0aW9uT3AiLCJ2YWxpZGF0ZU5ld0ZpbHRlciIsImRpcmVjdGlvblN0ciIsInZhbGlkYXRlTmV3T3JkZXJCeSIsImRvY09yRmllbGQiLCJib3VuZEZyb21Eb2NPckZpZWxkcyIsInN0YXJ0QWZ0ZXIiLCJlbmRCZWZvcmUiLCJib3VuZEZyb21Eb2N1bWVudCIsImFsbEZpZWxkcyIsImJvdW5kRnJvbUZpZWxkcyIsImNvbXBvbmVudHMiLCJyYXdWYWx1ZSIsIndyYXBwZWQiLCJRdWVyeVNuYXBzaG90IiwiZmlyZXN0b3JlQ2xpZW50IiwiZXhpc3RpbmdGaWVsZCIsInZhbGlkYXRlT3JkZXJCeUFuZEluZXF1YWxpdHlNYXRjaCIsImluZXF1YWxpdHkiLCJfb3JpZ2luYWxRdWVyeSIsIl9zbmFwc2hvdCIsIl9jYWNoZWRDaGFuZ2VzIiwiX2NhY2hlZENoYW5nZXNJbmNsdWRlTWV0YWRhdGFDaGFuZ2VzIiwiY29udmVydFRvRG9jdW1lbnRJbXBsIiwibGFzdERvY18xIiwiaW5kZXhfMSIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJpbmRleFRyYWNrZXJfMSIsInJlc3VsdENoYW5nZVR5cGUiLCJjaGFuZ2VzRnJvbVNuYXBzaG90IiwidGhyb3dEb2NDaGFuZ2VzTWV0aG9kRXJyb3IiLCJwYXJlbnRQYXRoIiwiZG9jUmVmIiwiUHVibGljRmlyZXN0b3JlIiwiUHVibGljVHJhbnNhY3Rpb24iLCJQdWJsaWNXcml0ZUJhdGNoIiwiUHVibGljRG9jdW1lbnRSZWZlcmVuY2UiLCJQdWJsaWNEb2N1bWVudFNuYXBzaG90IiwiUHVibGljUXVlcnlEb2N1bWVudFNuYXBzaG90IiwiUHVibGljUXVlcnkiLCJQdWJsaWNRdWVyeVNuYXBzaG90IiwiUHVibGljQ29sbGVjdGlvblJlZmVyZW5jZSIsImZpcmVzdG9yZU5hbWVzcGFjZSIsImNvbmZpZ3VyZUZvckZpcmViYXNlIiwiZmlyZWJhc2UkJDEiLCJzaGFsbG93Q29weSIsInJlZ2lzdGVyRmlyZXN0b3JlIiwiaW5zdGFuY2VzIiwiZGVmYXVsdExvZ0xldmVsIiwiSU5GTyIsImRlZmF1bHRMb2dIYW5kbGVyIiwibG9nVHlwZSIsInRvSVNPU3RyaW5nIiwiVkVSQk9TRSIsIldBUk4iLCJfbG9nTGV2ZWwiLCJfbG9nSGFuZGxlciIsImluc3QiLCJzcmNfMSIsInNyY18yIiwic3JjXzMiLCJzcmNfNCIsInNyY181IiwiY29tbW9uanNHbG9iYWwiLCJnb29nIiwiaCIsImFhIiwiYmEiLCJjYSIsImRhIiwiZWEiLCJmYSIsIngiLCJMIiwic2giLCJoYSIsImlhIiwieiIsImphIiwia2EiLCJLYSIsIlFhIiwibGEiLCJtYSIsImxhc3RJbmRleE9mIiwibmEiLCJvYSIsInNvbWUiLCJwYSIsInFhIiwicmEiLCJzYSIsInRhIiwidmEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiTGEiLCJNYSIsIk5hIiwiUGEiLCJPYSIsImRvY3VtZW50TW9kZSIsIlJhIiwiU2EiLCJVYSIsIlRhIiwiVmEiLCJjb21wYXRNb2RlIiwiV2EiLCJmcmVlemUiLCJYYSIsIllhIiwiWmEiLCJFZSIsImdiIiwiT2YiLCIkYSIsIjIiLCIzIiwiNCIsInNyY0VsZW1lbnQiLCJmcm9tRWxlbWVudCIsImxheWVyWCIsImxheWVyWSIsImNhbmNlbEJ1YmJsZSIsImFiIiwiYmIiLCJjYXB0dXJlIiwiUGIiLCJGYiIsIkoiLCJ5YiIsImViIiwiV2IiLCJCZSIsInFiIiwia2IiLCJmYiIsImliIiwiamIiLCJvYiIsImxiIiwibWIiLCJuYiIsIlFjIiwicGIiLCJoZCIsIlBlIiwiZGV0YWNoRXZlbnQiLCJyYiIsInNiIiwidGIiLCJoYW5kbGVFdmVudCIsIkgiLCJUZSIsIldjIiwidWIiLCJ2YiIsIkkiLCJkaXNwYXRjaEV2ZW50IiwiTWIiLCJ0ZyIsImVjIiwiYmQiLCJEZyIsIkJvb2xlYW4iLCJGZyIsIkdlIiwiRWciLCJ3YiIsIlwiIiwiXFwiLCIvIiwiXGIiLCJcZiIsIlxuIiwiXHIiLCJcdCIsIlx1MDAwYiIsInhiIiwiV2YiLCJqZiIsInhnIiwiJGIiLCJRYiIsIm5jIiwiQWIiLCJ6YiIsIkNiIiwiRWIiLCJJYyIsIkJiIiwiRGIiLCJvcmlnaW4iLCJ1ZCIsIkdiIiwiV2luZG93IiwiRWYiLCJ6ZyIsIkhiIiwiSWIiLCJKYiIsInFkIiwiWGciLCJsZSIsIktiIiwiTGIiLCJZZiIsImFmIiwiamciLCJzYyIsImtmIiwicmYiLCJFYyIsInBhdXNlIiwiTmIiLCJzZSIsImJlIiwid2MiLCJhYyIsIlhmIiwibWUiLCJQZCIsIkhnIiwiS2UiLCJSYiIsIlNiIiwiVGIiLCJVYiIsImdldE5hbWUiLCJnZXRQYXJlbnQiLCJ0ZiIsIlRkIiwiVGYiLCJsZiIsInlmIiwicWYiLCIkZSIsIkxnIiwiVWUiLCJYYiIsIlliIiwiWmIiLCJNIiwiWWMiLCJMZCIsIlpnIiwiYWciLCIkZyIsInJnIiwiWWciLCIkZiIsIk4iLCJiYyIsImNjIiwicnR0IiwiZGMiLCJRIiwiYWgiLCJpaCIsImhoIiwiZWgiLCJnaCIsImpoIiwiUmUiLCJtaCIsImZjIiwiZGgiLCJxaCIsIlNlIiwib2giLCJwaCIsImtoIiwibmgiLCJmaCIsInJoIiwiaGMiLCJzZCIsIllkIiwiUWYiLCJpYyIsImJoIiwibGgiLCJsYyIsImpjIiwia2MiLCJtYyIsIlpjIiwiSGMiLCJYYyIsImxkIiwiSGQiLCJBYyIsIkdkIiwiWmQiLCJBY3RpdmVYT2JqZWN0IiwiZWUiLCJvYyIsInBjIiwicWMiLCJyYyIsImFkZEFsbCIsImdhIiwiTGUiLCJNZyIsIm5kIiwiVmIiLCJGZSIsIm1kIiwiUWUiLCJxZyIsImxnIiwiWGQiLCJPZyIsIndmIiwiJGMiLCJJZCIsIlRnIiwiVmMiLCJHZyIsInpmIiwib2ciLCJCZyIsInNlbmRCZWFjb24iLCJJbWFnZSIsIndnIiwiT2UiLCJrZyIsIkhmIiwiZ2UiLCJKYyIsInhlIiwieWMiLCJYIiwiY2xlYXIiLCJ0YyIsInVjIiwiVWYiLCJmZCIsImVkIiwiY2QiLCJ2YyIsIkZjIiwiQ2MiLCJkZWNvZGVVUkkiLCJlbmNvZGVVUkkiLCJHYyIsIktjIiwiemMiLCJVZCIsIkJjIiwiTGYiLCJNZiIsIkpmIiwiZGUiLCJLZiIsIklmIiwiZGQiLCJEYyIsImdldFF1ZXJ5IiwiTWUiLCJhYnMiLCJyZW1vdmVQYXJhbWV0ZXIiLCJMYyIsIkRkIiwiTWMiLCJyZCIsImNlIiwiTmMiLCJPYyIsIlBjIiwiUmMiLCJwZSIsIlBlcmZvcm1hbmNlTmF2aWdhdGlvblRpbWluZyIsInBlcmZvcm1hbmNlIiwiZ2V0RW50cmllc0J5VHlwZSIsIm5leHRIb3BQcm90b2NvbCIsInhjIiwibmUiLCJjb25uZWN0IiwiVmQiLCJBZCIsIlNkIiwiZ2QiLCJjZiIsIkplIiwiU2MiLCJBZyIsIlRjIiwibmciLCJVYyIsIlYiLCJqZSIsIkRlIiwicGciLCJvZCIsImhlIiwiQmYiLCJDZSIsIlZlIiwiZGYiLCJtZiIsIm5mIiwicGQiLCJsZW5ndGhDb21wdXRhYmxlIiwibG9hZGVkIiwidG90YWwiLCJhZCIsIkVkIiwiSGUiLCJoYiIsIlhlIiwiZWciLCJwZiIsImpkIiwiV2UiLCJrZSIsIlplIiwieWciLCJzZiIsIlJkIiwidWgiLCJjb25jdXJyZW50UmVxdWVzdExpbWl0IiwiUWQiLCJmYXN0SGFuZHNoYWtlIiwiV2ciLCJ0ZXN0VXJsIiwibWVzc2FnZUhlYWRlcnMiLCJjbGllbnRQcm90b2NvbEhlYWRlclJlcXVpcmVkIiwiWC1DbGllbnQtUHJvdG9jb2wiLCJtZXNzYWdlQ29udGVudFR5cGUiLCJYLVdlYkNoYW5uZWwtQ29udGVudC1UeXBlIiwiQ2QiLCJYLVdlYkNoYW5uZWwtQ2xpZW50LVByb2ZpbGUiLCJLZyIsImh0dHBIZWFkZXJzT3ZlcndyaXRlUGFyYW0iLCJJZyIsIlVnIiwiQ2ciLCJKZyIsInlkIiwiX19zbV9fIiwicWUiLCJlcnJvckNvZGUiLCJOZSIsImhmIiwid2UiLCJvbnByb2dyZXNzIiwidWUiLCJ1cGxvYWQiLCJPZCIsIkJkIiwiTWQiLCJ2ZSIsImlnIiwiVmYiLCJhZSIsIlNmIiwiQ2YiLCJPU0lEIiwiT0FJRCIsImZmIiwiZGlzY29ubmVjdCIsInRlIiwiZWYiLCJOZyIsIkllIiwiUmYiLCJ1ZiIsImdldFN0YXRlIiwiemUiLCJiZyIsIiRkIiwiU2ciLCJtZyIsIm9lIiwiS2QiLCJ2ZyIsIlllIiwiTmQiLCJ5ZSIsIlFnIiwiR2YiLCJoZyIsIkZmIiwiUGciLCJmZyIsInpkIiwiUmciLCJ4ZCIsIlZnIiwiZ2ciLCJ3ZCIsInZkIiwiRmQiLCJob3N0bmFtZSIsInBvcnQiLCJnZiIsIl9fZGF0YV9fIiwiWiIsImtkIiwiWmYiLCJpZSIsIlkiLCJQZiIsIkpkIiwiTmYiLCJ1ZyIsInNnIiwiV2QiLCJiZiIsInZmIiwiZ2V0S2V5IiwiZmUiLCJkZyIsImNnIiwieGYiLCJEZiIsIkFmIiwiT2IiLCJpbmRleF9janMiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJ0aXR1bG8iLCJkZXNjcmlwY2lvbiJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFB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QXpoQyxLQUFTcWlGLDBCQUFBNzNFLEdBQUEyMkUsVUFBQXcwQyxHQUFBMzBDLFVBQUFtN0MsR0FBQWo1QyxXQUFBMjVDLEdBQUF0OEMsVUFBQXFxRCxHQUN0U3JjLE1BQUF2dUgsSUFBQXFpRiwwQkFDQW1zQyxNQUFBeHVILElBQUFtaEYsVUFDQXN0QyxNQUFBenVILElBQUFnaEYsVUFDQTB0QyxNQUFBMXVILElBQUFrakYsV0FDQXlyQyxNQUFBM3VILElBQUF1Z0YsVUFFZS94QyxvQkFBQSw0R0N2SGZ5OUYsRUFBQSxlQVBJQyxPQUFRLDBDQUNSQyxXQUFZLGtDQUNaQyxZQUFhLHlDQUNibndFLFVBQVcsa0JBQ1hvd0UsY0FBZSw4QkFDZkMsa0JBQW1CLGlCQUd2QkwsRUFBQSxZQUFxQjNzRyxVQUFXMGlDLHVCQUF1QixJQUN2RDFnRSxFQUFFLFdBQ0UycUksRUFBQSxZQUFxQmhnSCxXQUFXLGFBQWF2dkIsTUFDeENxZCxLQUFLLFNBQUNnM0QsR0FDUUEsRUFBS0EsS0FDWHZsQyxRQUFRLFNBQUF1OUIsR0FDVHpuRSxFQUFFLFFBQVF5ckIsT0FBTyx1S0FJRGc4QyxFQUFReHBELE9BQU9ndEgsT0FBTSxtREFDWnhqRSxFQUFReHBELE9BQU9pdEgsWUFBVywySUFJaEN6akUsRUFBUXhwRCxPQUFPZ2YsSUFBRyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaCAoZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG5yZXF1aXJlKCdAZmlyZWJhc2UvcG9seWZpbGwnKTtcbnZhciBmaXJlYmFzZSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAZmlyZWJhc2UvYXBwJykpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmaXJlYmFzZTtcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4zLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE4LTAxLTIwVDE3OjI0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MsIG5vZGUgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblx0XHRcdFx0aWYgKCBub2RlWyBpIF0gKSB7XG5cdFx0XHRcdFx0c2NyaXB0WyBpIF0gPSBub2RlWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjMuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jLCBub2RlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IGRpdi5vZmZzZXRXaWR0aCA9PT0gMzYgfHwgXCJhYnNvbHV0ZVwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblx0XHQpICk7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3g7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gdmFsdWVJc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSB7XG5cblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF07XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgcHJvdmlkZSBib3JkZXItYm94IHZhbHVlc1xuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgPT09IHN0eWxlcy5wb3NpdGlvbiApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IERhdGUubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHV0aWwgPSByZXF1aXJlKCdAZmlyZWJhc2UvdXRpbCcpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIGNvbnRhaW5zID0gZnVuY3Rpb24gKG9iaiwga2V5KSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcclxufTtcclxudmFyIERFRkFVTFRfRU5UUllfTkFNRSA9ICdbREVGQVVMVF0nO1xyXG4vLyBBbiBhcnJheSB0byBjYXB0dXJlIGxpc3RlbmVycyBiZWZvcmUgdGhlIHRydWUgYXV0aCBmdW5jdGlvbnNcclxuLy8gZXhpc3RcclxudmFyIHRva2VuTGlzdGVuZXJzID0gW107XHJcbi8qKlxyXG4gKiBHbG9iYWwgY29udGV4dCBvYmplY3QgZm9yIGEgY29sbGVjdGlvbiBvZiBzZXJ2aWNlcyB1c2luZ1xyXG4gKiBhIHNoYXJlZCBhdXRoZW50aWNhdGlvbiBzdGF0ZS5cclxuICovXHJcbnZhciBGaXJlYmFzZUFwcEltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaXJlYmFzZUFwcEltcGwob3B0aW9ucywgY29uZmlnLCBmaXJlYmFzZV8pIHtcclxuICAgICAgICB0aGlzLmZpcmViYXNlXyA9IGZpcmViYXNlXztcclxuICAgICAgICB0aGlzLmlzRGVsZXRlZF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNlcnZpY2VzXyA9IHt9O1xyXG4gICAgICAgIHRoaXMubmFtZV8gPSBjb25maWcubmFtZTtcclxuICAgICAgICB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPVxyXG4gICAgICAgICAgICBjb25maWcuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkIHx8IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub3B0aW9uc18gPSB1dGlsLmRlZXBDb3B5KG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuSU5URVJOQUwgPSB7XHJcbiAgICAgICAgICAgIGdldFVpZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSxcclxuICAgICAgICAgICAgZ2V0VG9rZW46IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTsgfSxcclxuICAgICAgICAgICAgYWRkQXV0aFRva2VuTGlzdGVuZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgdG9rZW5MaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgY2FsbGJhY2sgaXMgY2FsbGVkLCBhc3luY2hyb25vdXNseSwgaW4gdGhlIGFic2VuY2Ugb2YgdGhlIGF1dGggbW9kdWxlXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxiYWNrKG51bGwpOyB9LCAwKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVtb3ZlQXV0aFRva2VuTGlzdGVuZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgdG9rZW5MaXN0ZW5lcnMgPSB0b2tlbkxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGxpc3RlbmVyKSB7IHJldHVybiBsaXN0ZW5lciAhPT0gY2FsbGJhY2s7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLCBcImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWRfKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgdGhpcy5fYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkID0gdmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwibmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWRfKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWVfO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwib3B0aW9uc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWRfKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNfO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgX3RoaXMuY2hlY2tEZXN0cm95ZWRfKCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmZpcmViYXNlXy5JTlRFUk5BTC5yZW1vdmVBcHAoX3RoaXMubmFtZV8pO1xyXG4gICAgICAgICAgICB2YXIgc2VydmljZXMgPSBbXTtcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMoX3RoaXMuc2VydmljZXNfKS5mb3JFYWNoKGZ1bmN0aW9uIChzZXJ2aWNlS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhfdGhpcy5zZXJ2aWNlc19bc2VydmljZUtleV0pLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMucHVzaChfdGhpcy5zZXJ2aWNlc19bc2VydmljZUtleV1baW5zdGFuY2VLZXldKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHNlcnZpY2VzLm1hcChmdW5jdGlvbiAoc2VydmljZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuSU5URVJOQUwuZGVsZXRlKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmlzRGVsZXRlZF8gPSB0cnVlO1xyXG4gICAgICAgICAgICBfdGhpcy5zZXJ2aWNlc18gPSB7fTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBhIHNlcnZpY2UgaW5zdGFuY2UgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYXBwIChjcmVhdGluZyBpdFxyXG4gICAgICogb24gZGVtYW5kKSwgaWRlbnRpZmllZCBieSB0aGUgcGFzc2VkIGluc3RhbmNlSWRlbnRpZmllci5cclxuICAgICAqXHJcbiAgICAgKiBOT1RFOiBDdXJyZW50bHkgc3RvcmFnZSBpcyB0aGUgb25seSBvbmUgdGhhdCBpcyBsZXZlcmFnaW5nIHRoaXNcclxuICAgICAqIGZ1bmN0aW9uYWxpdHkuIFRoZXkgaW52b2tlIGl0IGJ5IGNhbGxpbmc6XHJcbiAgICAgKlxyXG4gICAgICogYGBgamF2YXNjcmlwdFxyXG4gICAgICogZmlyZWJhc2UuYXBwKCkuc3RvcmFnZSgnU1RPUkFHRSBCVUNLRVQgSUQnKVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHNlcnZpY2UgbmFtZSBpcyBwYXNzZWQgdG8gdGhpcyBhbHJlYWR5XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5fZ2V0U2VydmljZSA9IGZ1bmN0aW9uIChuYW1lLCBpbnN0YW5jZUlkZW50aWZpZXIpIHtcclxuICAgICAgICBpZiAoaW5zdGFuY2VJZGVudGlmaWVyID09PSB2b2lkIDApIHsgaW5zdGFuY2VJZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FOyB9XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICBpZiAoIXRoaXMuc2VydmljZXNfW25hbWVdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VydmljZXNfW25hbWVdID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5zZXJ2aWNlc19bbmFtZV1baW5zdGFuY2VJZGVudGlmaWVyXSkge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSWYgYSBjdXN0b20gaW5zdGFuY2UgaGFzIGJlZW4gZGVmaW5lZCAoaS5lLiBub3QgJ1tERUZBVUxUXScpXHJcbiAgICAgICAgICAgICAqIHRoZW4gd2Ugd2lsbCBwYXNzIHRoYXQgaW5zdGFuY2Ugb24sIG90aGVyd2lzZSB3ZSBwYXNzIGBudWxsYFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdmFyIGluc3RhbmNlU3BlY2lmaWVyID0gaW5zdGFuY2VJZGVudGlmaWVyICE9PSBERUZBVUxUX0VOVFJZX05BTUVcclxuICAgICAgICAgICAgICAgID8gaW5zdGFuY2VJZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSB0aGlzLmZpcmViYXNlXy5JTlRFUk5BTC5mYWN0b3JpZXNbbmFtZV0odGhpcywgdGhpcy5leHRlbmRBcHAuYmluZCh0aGlzKSwgaW5zdGFuY2VTcGVjaWZpZXIpO1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZpY2VzX1tuYW1lXVtpbnN0YW5jZUlkZW50aWZpZXJdID0gc2VydmljZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZXNfW25hbWVdW2luc3RhbmNlSWRlbnRpZmllcl07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiB1c2VkIHRvIGV4dGVuZCBhbiBBcHAgaW5zdGFuY2UgYXQgdGhlIHRpbWVcclxuICAgICAqIG9mIHNlcnZpY2UgaW5zdGFuY2UgY3JlYXRpb24uXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuZXh0ZW5kQXBwID0gZnVuY3Rpb24gKHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBDb3B5IHRoZSBvYmplY3Qgb250byB0aGUgRmlyZWJhc2VBcHBJbXBsIHByb3RvdHlwZVxyXG4gICAgICAgIHV0aWwuZGVlcEV4dGVuZCh0aGlzLCBwcm9wcyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgdGhlIGFwcCBoYXMgb3ZlcndyaXR0ZW4gdGhlIGFkZEF1dGhUb2tlbkxpc3RlbmVyIHN0dWIsIGZvcndhcmRcclxuICAgICAgICAgKiB0aGUgYWN0aXZlIHRva2VuIGxpc3RlbmVycyBvbiB0byB0aGUgdHJ1ZSBmeG4uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBUT0RPOiBUaGlzIGZ1bmN0aW9uIGlzIHJlcXVpcmVkIGR1ZSB0byBvdXIgY3VycmVudCBtb2R1bGVcclxuICAgICAgICAgKiBzdHJ1Y3R1cmUuIE9uY2Ugd2UgYXJlIGFibGUgdG8gcmVseSBzdHJpY3RseSB1cG9uIGEgc2luZ2xlIG1vZHVsZVxyXG4gICAgICAgICAqIGltcGxlbWVudGF0aW9uLCB0aGlzIGNvZGUgc2hvdWxkIGJlIHJlZmFjdG9yZWQgYW5kIEF1dGggc2hvdWxkXHJcbiAgICAgICAgICogcHJvdmlkZSB0aGVzZSBzdHVicyBhbmQgdGhlIHVwZ3JhZGUgbG9naWNcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAocHJvcHMuSU5URVJOQUwgJiYgcHJvcHMuSU5URVJOQUwuYWRkQXV0aFRva2VuTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgdG9rZW5MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLklOVEVSTkFMLmFkZEF1dGhUb2tlbkxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRva2VuTGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yIGlmIHRoZSBBcHAgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkIC1cclxuICAgICAqIHVzZSBiZWZvcmUgcGVyZm9ybWluZyBBUEkgYWN0aW9ucyBvbiB0aGUgQXBwLlxyXG4gICAgICovXHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLmNoZWNrRGVzdHJveWVkXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlbGV0ZWRfKSB7XHJcbiAgICAgICAgICAgIGVycm9yKCdhcHAtZGVsZXRlZCcsIHsgbmFtZTogdGhpcy5uYW1lXyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpcmViYXNlQXBwSW1wbDtcclxufSgpKTtcclxuLy8gUHJldmVudCBkZWFkLWNvZGUgZWxpbWluYXRpb24gb2YgdGhlc2UgbWV0aG9kcyB3L28gaW52YWxpZCBwcm9wZXJ0eVxyXG4vLyBjb3B5aW5nLlxyXG4oRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5uYW1lICYmIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUub3B0aW9ucykgfHxcclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuZGVsZXRlIHx8XHJcbiAgICBjb25zb2xlLmxvZygnZGMnKTtcclxuLyoqXHJcbiAqIFJldHVybiBhIGZpcmViYXNlIG5hbWVzcGFjZSBvYmplY3QuXHJcbiAqXHJcbiAqIEluIHByb2R1Y3Rpb24sIHRoaXMgd2lsbCBiZSBjYWxsZWQgZXhhY3RseSBvbmNlIGFuZCB0aGUgcmVzdWx0XHJcbiAqIGFzc2lnbmVkIHRvIHRoZSAnZmlyZWJhc2UnIGdsb2JhbC4gIEl0IG1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXNcclxuICogaW4gdW5pdCB0ZXN0cy5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlKCkge1xyXG4gICAgdmFyIGFwcHNfID0ge307XHJcbiAgICB2YXIgZmFjdG9yaWVzID0ge307XHJcbiAgICB2YXIgYXBwSG9va3MgPSB7fTtcclxuICAgIC8vIEEgbmFtZXNwYWNlIGlzIGEgcGxhaW4gSmF2YVNjcmlwdCBPYmplY3QuXHJcbiAgICB2YXIgbmFtZXNwYWNlID0ge1xyXG4gICAgICAgIC8vIEhhY2sgdG8gcHJldmVudCBCYWJlbCBmcm9tIG1vZGlmeWluZyB0aGUgb2JqZWN0IHJldHVybmVkXHJcbiAgICAgICAgLy8gYXMgdGhlIGZpcmViYXNlIG5hbWVzcGFjZS5cclxuICAgICAgICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gICAgICAgIGluaXRpYWxpemVBcHA6IGluaXRpYWxpemVBcHAsXHJcbiAgICAgICAgYXBwOiBhcHAsXHJcbiAgICAgICAgYXBwczogbnVsbCxcclxuICAgICAgICBQcm9taXNlOiBQcm9taXNlLFxyXG4gICAgICAgIFNES19WRVJTSU9OOiAnNS41LjAnLFxyXG4gICAgICAgIElOVEVSTkFMOiB7XHJcbiAgICAgICAgICAgIHJlZ2lzdGVyU2VydmljZTogcmVnaXN0ZXJTZXJ2aWNlLFxyXG4gICAgICAgICAgICBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZTogY3JlYXRlRmlyZWJhc2VOYW1lc3BhY2UsXHJcbiAgICAgICAgICAgIGV4dGVuZE5hbWVzcGFjZTogZXh0ZW5kTmFtZXNwYWNlLFxyXG4gICAgICAgICAgICBjcmVhdGVTdWJzY3JpYmU6IHV0aWwuY3JlYXRlU3Vic2NyaWJlLFxyXG4gICAgICAgICAgICBFcnJvckZhY3Rvcnk6IHV0aWwuRXJyb3JGYWN0b3J5LFxyXG4gICAgICAgICAgICByZW1vdmVBcHA6IHJlbW92ZUFwcCxcclxuICAgICAgICAgICAgZmFjdG9yaWVzOiBmYWN0b3JpZXMsXHJcbiAgICAgICAgICAgIHVzZUFzU2VydmljZTogdXNlQXNTZXJ2aWNlLFxyXG4gICAgICAgICAgICBQcm9taXNlOiBQcm9taXNlLFxyXG4gICAgICAgICAgICBkZWVwRXh0ZW5kOiB1dGlsLmRlZXBFeHRlbmRcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gSW5qZWN0IGEgY2lyY3VsYXIgZGVmYXVsdCBleHBvcnQgdG8gYWxsb3cgQmFiZWwgdXNlcnMgd2hvIHdlcmUgcHJldmlvdXNseVxyXG4gICAgLy8gdXNpbmc6XHJcbiAgICAvL1xyXG4gICAgLy8gICBpbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnO1xyXG4gICAgLy8gICB3aGljaCBiZWNvbWVzOiB2YXIgZmlyZWJhc2UgPSByZXF1aXJlKCdmaXJlYmFzZScpLmRlZmF1bHQ7XHJcbiAgICAvL1xyXG4gICAgLy8gaW5zdGVhZCBvZlxyXG4gICAgLy9cclxuICAgIC8vICAgaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnO1xyXG4gICAgLy8gICB3aGljaCBiZWNvbWVzOiB2YXIgZmlyZWJhc2UgPSByZXF1aXJlKCdmaXJlYmFzZScpO1xyXG4gICAgdXRpbC5wYXRjaFByb3BlcnR5KG5hbWVzcGFjZSwgJ2RlZmF1bHQnLCBuYW1lc3BhY2UpO1xyXG4gICAgLy8gZmlyZWJhc2UuYXBwcyBpcyBhIHJlYWQtb25seSBnZXR0ZXIuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmFtZXNwYWNlLCAnYXBwcycsIHtcclxuICAgICAgICBnZXQ6IGdldEFwcHNcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgYnkgQXBwLmRlbGV0ZSgpIC0gYnV0IGJlZm9yZSBhbnkgc2VydmljZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBBcHBcclxuICAgICAqIGFyZSBkZWxldGVkLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiByZW1vdmVBcHAobmFtZSkge1xyXG4gICAgICAgIHZhciBhcHAgPSBhcHBzX1tuYW1lXTtcclxuICAgICAgICBjYWxsQXBwSG9va3MoYXBwLCAnZGVsZXRlJyk7XHJcbiAgICAgICAgZGVsZXRlIGFwcHNfW25hbWVdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIEFwcCBvYmplY3QgZm9yIGEgZ2l2ZW4gbmFtZSAob3IgREVGQVVMVCkuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGFwcChuYW1lKSB7XHJcbiAgICAgICAgbmFtZSA9IG5hbWUgfHwgREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIGlmICghY29udGFpbnMoYXBwc18sIG5hbWUpKSB7XHJcbiAgICAgICAgICAgIGVycm9yKCduby1hcHAnLCB7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcHBzX1tuYW1lXTtcclxuICAgIH1cclxuICAgIHV0aWwucGF0Y2hQcm9wZXJ0eShhcHAsICdBcHAnLCBGaXJlYmFzZUFwcEltcGwpO1xyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcChvcHRpb25zLCByYXdDb25maWcpIHtcclxuICAgICAgICBpZiAocmF3Q29uZmlnID09PSB2b2lkIDApIHsgcmF3Q29uZmlnID0ge307IH1cclxuICAgICAgICBpZiAodHlwZW9mIHJhd0NvbmZpZyAhPT0gJ29iamVjdCcgfHwgcmF3Q29uZmlnID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lXzEgPSByYXdDb25maWc7XHJcbiAgICAgICAgICAgIHJhd0NvbmZpZyA9IHsgbmFtZTogbmFtZV8xIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb25maWcgPSByYXdDb25maWc7XHJcbiAgICAgICAgaWYgKGNvbmZpZy5uYW1lID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uZmlnLm5hbWUgPSBERUZBVUxUX0VOVFJZX05BTUU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuYW1lID0gY29uZmlnLm5hbWU7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCAhbmFtZSkge1xyXG4gICAgICAgICAgICBlcnJvcignYmFkLWFwcC1uYW1lJywgeyBuYW1lOiBuYW1lICsgJycgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250YWlucyhhcHBzXywgbmFtZSkpIHtcclxuICAgICAgICAgICAgZXJyb3IoJ2R1cGxpY2F0ZS1hcHAnLCB7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhcHAgPSBuZXcgRmlyZWJhc2VBcHBJbXBsKG9wdGlvbnMsIGNvbmZpZywgbmFtZXNwYWNlKTtcclxuICAgICAgICBhcHBzX1tuYW1lXSA9IGFwcDtcclxuICAgICAgICBjYWxsQXBwSG9va3MoYXBwLCAnY3JlYXRlJyk7XHJcbiAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgIH1cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgYWxsIHRoZSBub24tZGVsZXRlZCBGaXJlYmFzZUFwcHMuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldEFwcHMoKSB7XHJcbiAgICAgICAgLy8gTWFrZSBhIGNvcHkgc28gY2FsbGVyIGNhbm5vdCBtdXRhdGUgdGhlIGFwcHMgbGlzdC5cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXBwc18pLm1hcChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gYXBwc19bbmFtZV07IH0pO1xyXG4gICAgfVxyXG4gICAgLypcclxuICAgICAqIFJlZ2lzdGVyIGEgRmlyZWJhc2UgU2VydmljZS5cclxuICAgICAqXHJcbiAgICAgKiBmaXJlYmFzZS5JTlRFUk5BTC5yZWdpc3RlclNlcnZpY2UoKVxyXG4gICAgICpcclxuICAgICAqIFRPRE86IEltcGxlbWVudCBzZXJ2aWNlUHJvcGVydGllcy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJTZXJ2aWNlKG5hbWUsIGNyZWF0ZVNlcnZpY2UsIHNlcnZpY2VQcm9wZXJ0aWVzLCBhcHBIb29rLCBhbGxvd011bHRpcGxlSW5zdGFuY2VzKSB7XHJcbiAgICAgICAgLy8gQ2Fubm90IHJlLXJlZ2lzdGVyIGEgc2VydmljZSB0aGF0IGFscmVhZHkgZXhpc3RzXHJcbiAgICAgICAgaWYgKGZhY3Rvcmllc1tuYW1lXSkge1xyXG4gICAgICAgICAgICBlcnJvcignZHVwbGljYXRlLXNlcnZpY2UnLCB7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENhcHR1cmUgdGhlIHNlcnZpY2UgZmFjdG9yeSBmb3IgbGF0ZXIgc2VydmljZSBpbnN0YW50aWF0aW9uXHJcbiAgICAgICAgZmFjdG9yaWVzW25hbWVdID0gY3JlYXRlU2VydmljZTtcclxuICAgICAgICAvLyBDYXB0dXJlIHRoZSBhcHBIb29rLCBpZiBwYXNzZWRcclxuICAgICAgICBpZiAoYXBwSG9vaykge1xyXG4gICAgICAgICAgICBhcHBIb29rc1tuYW1lXSA9IGFwcEhvb2s7XHJcbiAgICAgICAgICAgIC8vIFJ1biB0aGUgKipuZXcqKiBhcHAgaG9vayBvbiBhbGwgZXhpc3RpbmcgYXBwc1xyXG4gICAgICAgICAgICBnZXRBcHBzKCkuZm9yRWFjaChmdW5jdGlvbiAoYXBwKSB7XHJcbiAgICAgICAgICAgICAgICBhcHBIb29rKCdjcmVhdGUnLCBhcHApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVGhlIFNlcnZpY2UgbmFtZXNwYWNlIGlzIGFuIGFjY2Vzc29yIGZ1bmN0aW9uIC4uLlxyXG4gICAgICAgIHZhciBzZXJ2aWNlTmFtZXNwYWNlID0gZnVuY3Rpb24gKGFwcEFyZykge1xyXG4gICAgICAgICAgICBpZiAoYXBwQXJnID09PSB2b2lkIDApIHsgYXBwQXJnID0gYXBwKCk7IH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcHBBcmdbbmFtZV0gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIEludmFsaWQgYXJndW1lbnQuXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGhhcHBlbnMgaW4gdGhlIGZvbGxvd2luZyBjYXNlOiBmaXJlYmFzZS5zdG9yYWdlKCdnczovJylcclxuICAgICAgICAgICAgICAgIGVycm9yKCdpbnZhbGlkLWFwcC1hcmd1bWVudCcsIHsgbmFtZTogbmFtZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBGb3J3YXJkIHNlcnZpY2UgaW5zdGFuY2UgbG9va3VwIHRvIHRoZSBGaXJlYmFzZUFwcC5cclxuICAgICAgICAgICAgcmV0dXJuIGFwcEFyZ1tuYW1lXSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gLi4uIGFuZCBhIGNvbnRhaW5lciBmb3Igc2VydmljZS1sZXZlbCBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIGlmIChzZXJ2aWNlUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHV0aWwuZGVlcEV4dGVuZChzZXJ2aWNlTmFtZXNwYWNlLCBzZXJ2aWNlUHJvcGVydGllcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE1vbmtleS1wYXRjaCB0aGUgc2VydmljZU5hbWVzcGFjZSBvbnRvIHRoZSBmaXJlYmFzZSBuYW1lc3BhY2VcclxuICAgICAgICBuYW1lc3BhY2VbbmFtZV0gPSBzZXJ2aWNlTmFtZXNwYWNlO1xyXG4gICAgICAgIC8vIFBhdGNoIHRoZSBGaXJlYmFzZUFwcEltcGwgcHJvdG90eXBlXHJcbiAgICAgICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2VydmljZUZ4biA9IHRoaXMuX2dldFNlcnZpY2UuYmluZCh0aGlzLCBuYW1lKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2VGeG4uYXBwbHkodGhpcywgYWxsb3dNdWx0aXBsZUluc3RhbmNlcyA/IGFyZ3MgOiBbXSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZU5hbWVzcGFjZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGF0Y2ggdGhlIHRvcC1sZXZlbCBmaXJlYmFzZSBuYW1lc3BhY2Ugd2l0aCBhZGRpdGlvbmFsIHByb3BlcnRpZXMuXHJcbiAgICAgKlxyXG4gICAgICogZmlyZWJhc2UuSU5URVJOQUwuZXh0ZW5kTmFtZXNwYWNlKClcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZXh0ZW5kTmFtZXNwYWNlKHByb3BzKSB7XHJcbiAgICAgICAgdXRpbC5kZWVwRXh0ZW5kKG5hbWVzcGFjZSwgcHJvcHMpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2FsbEFwcEhvb2tzKGFwcCwgZXZlbnROYW1lKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoZmFjdG9yaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChzZXJ2aWNlTmFtZSkge1xyXG4gICAgICAgICAgICAvLyBJZ25vcmUgdmlydHVhbCBzZXJ2aWNlc1xyXG4gICAgICAgICAgICB2YXIgZmFjdG9yeU5hbWUgPSB1c2VBc1NlcnZpY2UoYXBwLCBzZXJ2aWNlTmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChmYWN0b3J5TmFtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhcHBIb29rc1tmYWN0b3J5TmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIGFwcEhvb2tzW2ZhY3RvcnlOYW1lXShldmVudE5hbWUsIGFwcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIE1hcCB0aGUgcmVxdWVzdGVkIHNlcnZpY2UgdG8gYSByZWdpc3RlcmVkIHNlcnZpY2UgbmFtZVxyXG4gICAgLy8gKHVzZWQgdG8gbWFwIGF1dGggdG8gc2VydmVyQXV0aCBzZXJ2aWNlIHdoZW4gbmVlZGVkKS5cclxuICAgIGZ1bmN0aW9uIHVzZUFzU2VydmljZShhcHAsIG5hbWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ3NlcnZlckF1dGgnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdXNlU2VydmljZSA9IG5hbWU7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcHAub3B0aW9ucztcclxuICAgICAgICByZXR1cm4gdXNlU2VydmljZTtcclxuICAgIH1cclxuICAgIHJldHVybiBuYW1lc3BhY2U7XHJcbn1cclxuZnVuY3Rpb24gZXJyb3IoY29kZSwgYXJncykge1xyXG4gICAgdGhyb3cgYXBwRXJyb3JzLmNyZWF0ZShjb2RlLCBhcmdzKTtcclxufVxyXG4vLyBUeXBlU2NyaXB0IGRvZXMgbm90IHN1cHBvcnQgbm9uLXN0cmluZyBpbmRleGVzIVxyXG4vLyBsZXQgZXJyb3JzOiB7W2NvZGU6IEFwcEVycm9yOiBzdHJpbmd9ID0ge1xyXG52YXIgZXJyb3JzID0ge1xyXG4gICAgJ25vLWFwcCc6IFwiTm8gRmlyZWJhc2UgQXBwICd7JG5hbWV9JyBoYXMgYmVlbiBjcmVhdGVkIC0gXCIgK1xyXG4gICAgICAgICdjYWxsIEZpcmViYXNlIEFwcC5pbml0aWFsaXplQXBwKCknLFxyXG4gICAgJ2JhZC1hcHAtbmFtZSc6IFwiSWxsZWdhbCBBcHAgbmFtZTogJ3skbmFtZX1cIixcclxuICAgICdkdXBsaWNhdGUtYXBwJzogXCJGaXJlYmFzZSBBcHAgbmFtZWQgJ3skbmFtZX0nIGFscmVhZHkgZXhpc3RzXCIsXHJcbiAgICAnYXBwLWRlbGV0ZWQnOiBcIkZpcmViYXNlIEFwcCBuYW1lZCAneyRuYW1lfScgYWxyZWFkeSBkZWxldGVkXCIsXHJcbiAgICAnZHVwbGljYXRlLXNlcnZpY2UnOiBcIkZpcmViYXNlIHNlcnZpY2UgbmFtZWQgJ3skbmFtZX0nIGFscmVhZHkgcmVnaXN0ZXJlZFwiLFxyXG4gICAgJ3NhLW5vdC1zdXBwb3J0ZWQnOiAnSW5pdGlhbGl6aW5nIHRoZSBGaXJlYmFzZSBTREsgd2l0aCBhIHNlcnZpY2UgJyArXHJcbiAgICAgICAgJ2FjY291bnQgaXMgb25seSBhbGxvd2VkIGluIGEgTm9kZS5qcyBlbnZpcm9ubWVudC4gT24gY2xpZW50ICcgK1xyXG4gICAgICAgICdkZXZpY2VzLCB5b3Ugc2hvdWxkIGluc3RlYWQgaW5pdGlhbGl6ZSB0aGUgU0RLIHdpdGggYW4gYXBpIGtleSBhbmQgJyArXHJcbiAgICAgICAgJ2F1dGggZG9tYWluJyxcclxuICAgICdpbnZhbGlkLWFwcC1hcmd1bWVudCc6ICdmaXJlYmFzZS57JG5hbWV9KCkgdGFrZXMgZWl0aGVyIG5vIGFyZ3VtZW50IG9yIGEgJyArXHJcbiAgICAgICAgJ0ZpcmViYXNlIEFwcCBpbnN0YW5jZS4nXHJcbn07XHJcbnZhciBhcHBFcnJvcnMgPSBuZXcgdXRpbC5FcnJvckZhY3RvcnkoJ2FwcCcsICdGaXJlYmFzZScsIGVycm9ycyk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgZmlyZWJhc2UgPSBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZSgpO1xuXG5leHBvcnRzLmZpcmViYXNlID0gZmlyZWJhc2U7XG5leHBvcnRzLmRlZmF1bHQgPSBmaXJlYmFzZTtcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0geVtvcFswXSAmIDIgPyBcInJldHVyblwiIDogb3BbMF0gPyBcInRocm93XCIgOiBcIm5leHRcIl0pICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gWzAsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7ICB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAob1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJpbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbi8vIFN0b3JlIHNldFRpbWVvdXQgcmVmZXJlbmNlIHNvIHByb21pc2UtcG9seWZpbGwgd2lsbCBiZSB1bmFmZmVjdGVkIGJ5XG4vLyBvdGhlciBjb2RlIG1vZGlmeWluZyBzZXRUaW1lb3V0IChsaWtlIHNpbm9uLnVzZUZha2VUaW1lcnMoKSlcbnZhciBzZXRUaW1lb3V0RnVuYyA9IHNldFRpbWVvdXQ7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vLyBQb2x5ZmlsbCBmb3IgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb21pc2UoZm4pIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb21pc2UpKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ldycpO1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBmdW5jdGlvbicpO1xuICB0aGlzLl9zdGF0ZSA9IDA7XG4gIHRoaXMuX2hhbmRsZWQgPSBmYWxzZTtcbiAgdGhpcy5fdmFsdWUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2RlZmVycmVkcyA9IFtdO1xuXG4gIGRvUmVzb2x2ZShmbiwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZShzZWxmLCBkZWZlcnJlZCkge1xuICB3aGlsZSAoc2VsZi5fc3RhdGUgPT09IDMpIHtcbiAgICBzZWxmID0gc2VsZi5fdmFsdWU7XG4gIH1cbiAgaWYgKHNlbGYuX3N0YXRlID09PSAwKSB7XG4gICAgc2VsZi5fZGVmZXJyZWRzLnB1c2goZGVmZXJyZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICBzZWxmLl9oYW5kbGVkID0gdHJ1ZTtcbiAgUHJvbWlzZS5faW1tZWRpYXRlRm4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNiID0gc2VsZi5fc3RhdGUgPT09IDEgPyBkZWZlcnJlZC5vbkZ1bGZpbGxlZCA6IGRlZmVycmVkLm9uUmVqZWN0ZWQ7XG4gICAgaWYgKGNiID09PSBudWxsKSB7XG4gICAgICAoc2VsZi5fc3RhdGUgPT09IDEgPyByZXNvbHZlIDogcmVqZWN0KShkZWZlcnJlZC5wcm9taXNlLCBzZWxmLl92YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZXQ7XG4gICAgdHJ5IHtcbiAgICAgIHJldCA9IGNiKHNlbGYuX3ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QoZGVmZXJyZWQucHJvbWlzZSwgZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlc29sdmUoZGVmZXJyZWQucHJvbWlzZSwgcmV0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmUoc2VsZiwgbmV3VmFsdWUpIHtcbiAgdHJ5IHtcbiAgICAvLyBQcm9taXNlIFJlc29sdXRpb24gUHJvY2VkdXJlOiBodHRwczovL2dpdGh1Yi5jb20vcHJvbWlzZXMtYXBsdXMvcHJvbWlzZXMtc3BlYyN0aGUtcHJvbWlzZS1yZXNvbHV0aW9uLXByb2NlZHVyZVxuICAgIGlmIChuZXdWYWx1ZSA9PT0gc2VsZilcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0EgcHJvbWlzZSBjYW5ub3QgYmUgcmVzb2x2ZWQgd2l0aCBpdHNlbGYuJyk7XG4gICAgaWYgKFxuICAgICAgbmV3VmFsdWUgJiZcbiAgICAgICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICApIHtcbiAgICAgIHZhciB0aGVuID0gbmV3VmFsdWUudGhlbjtcbiAgICAgIGlmIChuZXdWYWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgc2VsZi5fc3RhdGUgPSAzO1xuICAgICAgICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICBmaW5hbGUoc2VsZik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZG9SZXNvbHZlKGJpbmQodGhlbiwgbmV3VmFsdWUpLCBzZWxmKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBzZWxmLl9zdGF0ZSA9IDE7XG4gICAgc2VsZi5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICBmaW5hbGUoc2VsZik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZWplY3Qoc2VsZiwgZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVqZWN0KHNlbGYsIG5ld1ZhbHVlKSB7XG4gIHNlbGYuX3N0YXRlID0gMjtcbiAgc2VsZi5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgZmluYWxlKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBmaW5hbGUoc2VsZikge1xuICBpZiAoc2VsZi5fc3RhdGUgPT09IDIgJiYgc2VsZi5fZGVmZXJyZWRzLmxlbmd0aCA9PT0gMCkge1xuICAgIFByb21pc2UuX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFzZWxmLl9oYW5kbGVkKSB7XG4gICAgICAgIFByb21pc2UuX3VuaGFuZGxlZFJlamVjdGlvbkZuKHNlbGYuX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWxmLl9kZWZlcnJlZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBoYW5kbGUoc2VsZiwgc2VsZi5fZGVmZXJyZWRzW2ldKTtcbiAgfVxuICBzZWxmLl9kZWZlcnJlZHMgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBIYW5kbGVyKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9taXNlKSB7XG4gIHRoaXMub25GdWxmaWxsZWQgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IG51bGw7XG4gIHRoaXMub25SZWplY3RlZCA9IHR5cGVvZiBvblJlamVjdGVkID09PSAnZnVuY3Rpb24nID8gb25SZWplY3RlZCA6IG51bGw7XG4gIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG59XG5cbi8qKlxuICogVGFrZSBhIHBvdGVudGlhbGx5IG1pc2JlaGF2aW5nIHJlc29sdmVyIGZ1bmN0aW9uIGFuZCBtYWtlIHN1cmVcbiAqIG9uRnVsZmlsbGVkIGFuZCBvblJlamVjdGVkIGFyZSBvbmx5IGNhbGxlZCBvbmNlLlxuICpcbiAqIE1ha2VzIG5vIGd1YXJhbnRlZXMgYWJvdXQgYXN5bmNocm9ueS5cbiAqL1xuZnVuY3Rpb24gZG9SZXNvbHZlKGZuLCBzZWxmKSB7XG4gIHZhciBkb25lID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgZm4oXG4gICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZShzZWxmLCB2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICByZWplY3Qoc2VsZiwgcmVhc29uKTtcbiAgICAgIH1cbiAgICApO1xuICB9IGNhdGNoIChleCkge1xuICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgZG9uZSA9IHRydWU7XG4gICAgcmVqZWN0KHNlbGYsIGV4KTtcbiAgfVxufVxuXG5Qcm9taXNlLnByb3RvdHlwZVsnY2F0Y2gnXSA9IGZ1bmN0aW9uKG9uUmVqZWN0ZWQpIHtcbiAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICB2YXIgcHJvbSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGhhbmRsZSh0aGlzLCBuZXcgSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvbSkpO1xuICByZXR1cm4gcHJvbTtcbn07XG5cblByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10gPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgY29uc3RydWN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xufTtcblxuUHJvbWlzZS5hbGwgPSBmdW5jdGlvbihhcnIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmICghYXJyIHx8IHR5cGVvZiBhcnIubGVuZ3RoID09PSAndW5kZWZpbmVkJylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UuYWxsIGFjY2VwdHMgYW4gYXJyYXknKTtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gcmVzb2x2ZShbXSk7XG4gICAgdmFyIHJlbWFpbmluZyA9IGFyZ3MubGVuZ3RoO1xuXG4gICAgZnVuY3Rpb24gcmVzKGksIHZhbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHZhbCAmJiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICB2YXIgdGhlbiA9IHZhbC50aGVuO1xuICAgICAgICAgIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhlbi5jYWxsKFxuICAgICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgIHJlcyhpLCB2YWwpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICByZWplY3RcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFyZ3NbaV0gPSB2YWw7XG4gICAgICAgIGlmICgtLXJlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgIHJlc29sdmUoYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHJlamVjdChleCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXMoaSwgYXJnc1tpXSk7XG4gICAgfVxuICB9KTtcbn07XG5cblByb21pc2UucmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBQcm9taXNlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSk7XG59O1xuXG5Qcm9taXNlLnJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWplY3QodmFsdWUpO1xuICB9KTtcbn07XG5cblByb21pc2UucmFjZSA9IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFsdWVzW2ldLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9XG4gIH0pO1xufTtcblxuLy8gVXNlIHBvbHlmaWxsIGZvciBzZXRJbW1lZGlhdGUgZm9yIHBlcmZvcm1hbmNlIGdhaW5zXG5Qcm9taXNlLl9pbW1lZGlhdGVGbiA9XG4gICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nICYmXG4gICAgZnVuY3Rpb24oZm4pIHtcbiAgICAgIHNldEltbWVkaWF0ZShmbik7XG4gICAgfSkgfHxcbiAgZnVuY3Rpb24oZm4pIHtcbiAgICBzZXRUaW1lb3V0RnVuYyhmbiwgMCk7XG4gIH07XG5cblByb21pc2UuX3VuaGFuZGxlZFJlamVjdGlvbkZuID0gZnVuY3Rpb24gX3VuaGFuZGxlZFJlamVjdGlvbkZuKGVycikge1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUpIHtcbiAgICBjb25zb2xlLndhcm4oJ1Bvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjonLCBlcnIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgfVxufTtcblxudmFyIGdsb2JhbE5TID0gKGZ1bmN0aW9uKCkge1xuICAvLyB0aGUgb25seSByZWxpYWJsZSBtZWFucyB0byBnZXQgdGhlIGdsb2JhbCBvYmplY3QgaXNcbiAgLy8gYEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKClgXG4gIC8vIEhvd2V2ZXIsIHRoaXMgY2F1c2VzIENTUCB2aW9sYXRpb25zIGluIENocm9tZSBhcHBzLlxuICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0Jyk7XG59KSgpO1xuXG5pZiAoIWdsb2JhbE5TLlByb21pc2UpIHtcbiAgZ2xvYmFsTlMuUHJvbWlzZSA9IFByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgX2dsb2JhbCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbn0pO1xuXG52YXIgX2NvcmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG52YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjUnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxufSk7XG52YXIgX2NvcmVfMSA9IF9jb3JlLnZlcnNpb247XG5cbnZhciBfaXNPYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbnZhciBfYW5PYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFfaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbnZhciBfZmFpbHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG52YXIgX2Rlc2NyaXB0b3JzID0gIV9mYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cbnZhciBkb2N1bWVudCA9IF9nbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IF9pc09iamVjdChkb2N1bWVudCkgJiYgX2lzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xudmFyIF9kb21DcmVhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cbnZhciBfaWU4RG9tRGVmaW5lID0gIV9kZXNjcmlwdG9ycyAmJiAhX2ZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZG9tQ3JlYXRlKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxuLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG5cbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xudmFyIF90b1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIV9pc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhX2lzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFfaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFfaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuXG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBmID0gX2Rlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBfYW5PYmplY3QoTyk7XG4gIFAgPSBfdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIF9hbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKF9pZThEb21EZWZpbmUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxudmFyIF9vYmplY3REcCA9IHtcblx0ZjogZlxufTtcblxudmFyIF9wcm9wZXJ0eURlc2MgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxudmFyIF9oaWRlID0gX2Rlc2NyaXB0b3JzID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gX29iamVjdERwLmYob2JqZWN0LCBrZXksIF9wcm9wZXJ0eURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfaGFzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuXG52YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbnZhciBfdWlkID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxudmFyIF9yZWRlZmluZSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbnZhciBTUkMgPSBfdWlkKCdzcmMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5fY29yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBfaGFzKHZhbCwgJ25hbWUnKSB8fCBfaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBfaGFzKHZhbCwgU1JDKSB8fCBfaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gX2dsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgX2hpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBfaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbn0pO1xuXG52YXIgX2FGdW5jdGlvbiA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xuXG52YXIgX2N0eCA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIF9hRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBfZ2xvYmFsIDogSVNfU1RBVElDID8gX2dsb2JhbFtuYW1lXSB8fCAoX2dsb2JhbFtuYW1lXSA9IHt9KSA6IChfZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IF9jb3JlIDogX2NvcmVbbmFtZV0gfHwgKF9jb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IF9jdHgob3V0LCBfZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IF9jdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgX3JlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBfaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuX2dsb2JhbC5jb3JlID0gX2NvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG52YXIgX2V4cG9ydCA9ICRleHBvcnQ7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgX2NvZiA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xudmFyIF9pb2JqZWN0ID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIF9jb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cbi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG52YXIgX2RlZmluZWQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG4vLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG5cbnZhciBfdG9PYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChfZGVmaW5lZChpdCkpO1xufTtcblxuLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgX3RvSW50ZWdlciA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG5cbi8vIDcuMS4xNSBUb0xlbmd0aFxuXG52YXIgbWluID0gTWF0aC5taW47XG52YXIgX3RvTGVuZ3RoID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4oX3RvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcblxudmFyIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gX2NvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBfZ2xvYmFsW1NIQVJFRF0gfHwgKF9nbG9iYWxbU0hBUkVEXSA9IHt9KTtcbnZhciBfc2hhcmVkID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTtcbn07XG5cbnZhciBfd2tzID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xudmFyIHN0b3JlID0gX3NoYXJlZCgnd2tzJyk7XG5cbnZhciBTeW1ib2wgPSBfZ2xvYmFsLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogX3VpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbn0pO1xuXG52YXIgU1BFQ0lFUyA9IF93a3MoJ3NwZWNpZXMnKTtcblxudmFyIF9hcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKF9pc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBfaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChfaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuXG4vLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG5cblxudmFyIF9hcnJheVNwZWNpZXNDcmVhdGUgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChfYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcblxuLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxuXG5cblxuXG5cbnZhciBfYXJyYXlNZXRob2RzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBfYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSBfdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gX2lvYmplY3QoTyk7XG4gICAgdmFyIGYgPSBfY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSBfdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuXG4vLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSBfd2tzKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSBfaGlkZShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xudmFyIF9hZGRUb1Vuc2NvcGFibGVzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG5cbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcblxudmFyICRmaW5kID0gX2FycmF5TWV0aG9kcyg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuX2V4cG9ydChfZXhwb3J0LlAgKyBfZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuX2FkZFRvVW5zY29wYWJsZXMoS0VZKTtcblxudmFyIGZpbmQgPSBfY29yZS5BcnJheS5maW5kO1xuXG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcblxudmFyICRmaW5kJDEgPSBfYXJyYXlNZXRob2RzKDYpO1xudmFyIEtFWSQxID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkJDEgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkkMSBpbiBbXSkgQXJyYXkoMSlbS0VZJDFdKGZ1bmN0aW9uICgpIHsgZm9yY2VkJDEgPSBmYWxzZTsgfSk7XG5fZXhwb3J0KF9leHBvcnQuUCArIF9leHBvcnQuRiAqIGZvcmNlZCQxLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kJDEodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbl9hZGRUb1Vuc2NvcGFibGVzKEtFWSQxKTtcblxudmFyIGZpbmRJbmRleCA9IF9jb3JlLkFycmF5LmZpbmRJbmRleDtcblxuLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG5cblxudmFyIF90b0lvYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIF9pb2JqZWN0KF9kZWZpbmVkKGl0KSk7XG59O1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluJDEgPSBNYXRoLm1pbjtcbnZhciBfdG9BYnNvbHV0ZUluZGV4ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSBfdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4kMShpbmRleCwgbGVuZ3RoKTtcbn07XG5cbi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG5cblxuXG52YXIgX2FycmF5SW5jbHVkZXMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gX3RvSW9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IF90b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gX3RvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbnZhciBzaGFyZWQgPSBfc2hhcmVkKCdrZXlzJyk7XG5cbnZhciBfc2hhcmVkS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gX3VpZChrZXkpKTtcbn07XG5cbnZhciBhcnJheUluZGV4T2YgPSBfYXJyYXlJbmNsdWRlcyhmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSBfc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgX29iamVjdEtleXNJbnRlcm5hbCA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gX3RvSW9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgX2hhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChfaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xudmFyIF9lbnVtQnVnS2V5cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcblxuLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG5cblxuXG52YXIgX29iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIF9vYmplY3RLZXlzSW50ZXJuYWwoTywgX2VudW1CdWdLZXlzKTtcbn07XG5cbnZhciBmJDEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG52YXIgX29iamVjdEdvcHMgPSB7XG5cdGY6IGYkMVxufTtcblxudmFyIGYkMiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG52YXIgX29iamVjdFBpZSA9IHtcblx0ZjogZiQyXG59O1xuXG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG5cblxuXG5cblxudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbnZhciBfb2JqZWN0QXNzaWduID0gISRhc3NpZ24gfHwgX2ZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSBfdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IF9vYmplY3RHb3BzLmY7XG4gIHZhciBpc0VudW0gPSBfb2JqZWN0UGllLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IF9pb2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gX29iamVjdEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogX29iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG5cbi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG5cblxuX2V4cG9ydChfZXhwb3J0LlMgKyBfZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogX29iamVjdEFzc2lnbiB9KTtcblxudmFyIGFzc2lnbiA9IF9jb3JlLk9iamVjdC5hc3NpZ247XG5cbi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxuXG5cbnZhciBNQVRDSCA9IF93a3MoJ21hdGNoJyk7XG52YXIgX2lzUmVnZXhwID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIF9pc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBfY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuXG4vLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxuXG5cblxudmFyIF9zdHJpbmdDb250ZXh0ID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoX2lzUmVnZXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKF9kZWZpbmVkKHRoYXQpKTtcbn07XG5cbnZhciBNQVRDSCQxID0gX3drcygnbWF0Y2gnKTtcbnZhciBfZmFpbHNJc1JlZ2V4cCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIJDFdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcblxudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG5fZXhwb3J0KF9leHBvcnQuUCArIF9leHBvcnQuRiAqIF9mYWlsc0lzUmVnZXhwKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IF9zdHJpbmdDb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IF90b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcblxudmFyIHN0YXJ0c1dpdGggPSBfY29yZS5TdHJpbmcuc3RhcnRzV2l0aDtcblxudmFyIF9zdHJpbmdSZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhfZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSBfdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuXG5fZXhwb3J0KF9leHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IF9zdHJpbmdSZXBlYXRcbn0pO1xuXG52YXIgcmVwZWF0ID0gX2NvcmUuU3RyaW5nLnJlcGVhdDtcblxudmFyIF9tZXRhID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xudmFyIE1FVEEgPSBfdWlkKCdtZXRhJyk7XG5cblxudmFyIHNldERlc2MgPSBfb2JqZWN0RHAuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhX2ZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghX2lzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFfaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFfaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFfaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG59KTtcbnZhciBfbWV0YV8xID0gX21ldGEuS0VZO1xudmFyIF9tZXRhXzIgPSBfbWV0YS5ORUVEO1xudmFyIF9tZXRhXzMgPSBfbWV0YS5mYXN0S2V5O1xudmFyIF9tZXRhXzQgPSBfbWV0YS5nZXRXZWFrO1xudmFyIF9tZXRhXzUgPSBfbWV0YS5vbkZyZWV6ZTtcblxudmFyIGRlZiA9IF9vYmplY3REcC5mO1xuXG52YXIgVEFHID0gX3drcygndG9TdHJpbmdUYWcnKTtcblxudmFyIF9zZXRUb1N0cmluZ1RhZyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhX2hhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcblxudmFyIGYkMyA9IF93a3M7XG5cbnZhciBfd2tzRXh0ID0ge1xuXHRmOiBmJDNcbn07XG5cbnZhciBfbGlicmFyeSA9IGZhbHNlO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBfb2JqZWN0RHAuZjtcbnZhciBfd2tzRGVmaW5lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBfY29yZS5TeW1ib2wgfHwgKF9jb3JlLlN5bWJvbCA9IF9saWJyYXJ5ID8ge30gOiBfZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiBfd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuXG4vLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xuXG5cblxudmFyIF9lbnVtS2V5cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gX29iamVjdEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IF9vYmplY3RHb3BzLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gX29iamVjdFBpZS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIF9vYmplY3REcHMgPSBfZGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBfYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gX29iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIF9vYmplY3REcC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciBkb2N1bWVudCQxID0gX2dsb2JhbC5kb2N1bWVudDtcbnZhciBfaHRtbCA9IGRvY3VtZW50JDEgJiYgZG9jdW1lbnQkMS5kb2N1bWVudEVsZW1lbnQ7XG5cbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuXG5cblxudmFyIElFX1BST1RPJDEgPSBfc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSQxID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gX2RvbUNyZWF0ZSgnaWZyYW1lJyk7XG4gIHZhciBpID0gX2VudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIF9odG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRSQxXVtfZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxudmFyIF9vYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFJDFdID0gX2FuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRSQxXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UTyQxXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBfb2JqZWN0RHBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG4vLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5cbnZhciBoaWRkZW5LZXlzID0gX2VudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG52YXIgZiQ0ID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBfb2JqZWN0S2V5c0ludGVybmFsKE8sIGhpZGRlbktleXMpO1xufTtcblxudmFyIF9vYmplY3RHb3BuID0ge1xuXHRmOiBmJDRcbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcblxudmFyIGdPUE4gPSBfb2JqZWN0R29wbi5mO1xudmFyIHRvU3RyaW5nJDEgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG52YXIgZiQ1ID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmckMS5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4oX3RvSW9iamVjdChpdCkpO1xufTtcblxudmFyIF9vYmplY3RHb3BuRXh0ID0ge1xuXHRmOiBmJDVcbn07XG5cbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIGYkNiA9IF9kZXNjcmlwdG9ycyA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gX3RvSW9iamVjdChPKTtcbiAgUCA9IF90b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKF9pZThEb21EZWZpbmUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoX2hhcyhPLCBQKSkgcmV0dXJuIF9wcm9wZXJ0eURlc2MoIV9vYmplY3RQaWUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG5cbnZhciBfb2JqZWN0R29wZCA9IHtcblx0ZjogZiQ2XG59O1xuXG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG5cblxuXG5cblxudmFyIE1FVEEgPSBfbWV0YS5LRVk7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBnT1BEJDEgPSBfb2JqZWN0R29wZC5mO1xudmFyIGRQJDEgPSBfb2JqZWN0RHAuZjtcbnZhciBnT1BOJDEgPSBfb2JqZWN0R29wbkV4dC5mO1xudmFyICRTeW1ib2wgPSBfZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IF9nbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSQyID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gX3drcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IF93a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBfc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gX3NoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IF9zaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEUkMl07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IF9nbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRSQyXSB8fCAhUU9iamVjdFtQUk9UT1RZUEUkMl0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gX2Rlc2NyaXB0b3JzICYmIF9mYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfb2JqZWN0Q3JlYXRlKGRQJDEoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAkMSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRCQxKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAkMShpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQJDEoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUCQxO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9vYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEUkMl0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBfYW5PYmplY3QoaXQpO1xuICBrZXkgPSBfdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgX2FuT2JqZWN0KEQpO1xuICBpZiAoX2hhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghX2hhcyhpdCwgSElEREVOKSkgZFAkMShpdCwgSElEREVOLCBfcHJvcGVydHlEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoX2hhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9vYmplY3RDcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBfcHJvcGVydHlEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUCQxKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgX2FuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBfZW51bUtleXMoUCA9IF90b0lvYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX29iamVjdENyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfb2JqZWN0Q3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IF90b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIF9oYXMoQWxsU3ltYm9scywga2V5KSAmJiAhX2hhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIV9oYXModGhpcywga2V5KSB8fCAhX2hhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IF9oYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSBfdG9Jb2JqZWN0KGl0KTtcbiAga2V5ID0gX3RvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgX2hhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFfaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQkMShpdCwga2V5KTtcbiAgaWYgKEQgJiYgX2hhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoX2hhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4kMShfdG9Jb2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghX2hhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOJDEoSVNfT1AgPyBPUFN5bWJvbHMgOiBfdG9Jb2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChfaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IF9oYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSBfdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoX2hhcyh0aGlzLCBISURERU4pICYmIF9oYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIF9wcm9wZXJ0eURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChfZGVzY3JpcHRvcnMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgX3JlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFJDJdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgX29iamVjdEdvcGQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIF9vYmplY3REcC5mID0gJGRlZmluZVByb3BlcnR5O1xuICBfb2JqZWN0R29wbi5mID0gX29iamVjdEdvcG5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBfb2JqZWN0UGllLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIF9vYmplY3RHb3BzLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChfZGVzY3JpcHRvcnMgJiYgIV9saWJyYXJ5KSB7XG4gICAgX3JlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgX3drc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcChfd2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuX2V4cG9ydChfZXhwb3J0LkcgKyBfZXhwb3J0LlcgKyBfZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspX3drcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gX29iamVjdEtleXMoX3drcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSBfd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbl9leHBvcnQoX2V4cG9ydC5TICsgX2V4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbl9leHBvcnQoX2V4cG9ydC5TICsgX2V4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmIF9leHBvcnQoX2V4cG9ydC5TICsgX2V4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8IF9mYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFfaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIV9pc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEUkMl1bVE9fUFJJTUlUSVZFXSB8fCBfaGlkZSgkU3ltYm9sW1BST1RPVFlQRSQyXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRSQyXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbl9zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5fc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5fc2V0VG9TdHJpbmdUYWcoX2dsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxuXG52YXIgVEFHJDEgPSBfd2tzKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBfY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbnZhciBfY2xhc3NvZiA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRyQxKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBfY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBfY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG5cbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxuXG52YXIgdGVzdCA9IHt9O1xudGVzdFtfd2tzKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIF9yZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIF9jbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cblxuX3drc0RlZmluZSgnYXN5bmNJdGVyYXRvcicpO1xuXG5fd2tzRGVmaW5lKCdvYnNlcnZhYmxlJyk7XG5cbnZhciBzeW1ib2wgPSBfY29yZS5TeW1ib2w7XG5cbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG52YXIgX3N0cmluZ0F0ID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKF9kZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IF90b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG52YXIgX2l0ZXJhdG9ycyA9IHt9O1xuXG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbl9oaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBfd2tzKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxudmFyIF9pdGVyQ3JlYXRlID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IF9vYmplY3RDcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogX3Byb3BlcnR5RGVzYygxLCBuZXh0KSB9KTtcbiAgX3NldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcblxuLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcblxuXG52YXIgSUVfUFJPVE8kMiA9IF9zaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8kMSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbnZhciBfb2JqZWN0R3BvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSBfdG9PYmplY3QoTyk7XG4gIGlmIChfaGFzKE8sIElFX1BST1RPJDIpKSByZXR1cm4gT1tJRV9QUk9UTyQyXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byQxIDogbnVsbDtcbn07XG5cbnZhciBJVEVSQVRPUiA9IF93a3MoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbnZhciBfaXRlckRlZmluZSA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgX2l0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBfb2JqZWN0R3BvKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIF9zZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFfbGlicmFyeSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIF9oaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFfbGlicmFyeSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgX2hpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBfaXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIF9pdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSBfcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgX2V4cG9ydChfZXhwb3J0LlAgKyBfZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcblxudmFyICRhdCA9IF9zdHJpbmdBdCh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxuX2l0ZXJEZWZpbmUoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcblxudmFyIF9pdGVyU3RlcCA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxudmFyIGVzNl9hcnJheV9pdGVyYXRvciA9IF9pdGVyRGVmaW5lKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IF90b0lvYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBfaXRlclN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gX2l0ZXJTdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBfaXRlclN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gX2l0ZXJTdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuX2l0ZXJhdG9ycy5Bcmd1bWVudHMgPSBfaXRlcmF0b3JzLkFycmF5O1xuXG5fYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuX2FkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuX2FkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxudmFyIElURVJBVE9SJDEgPSBfd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSBfd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gX2l0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBfb2JqZWN0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBfZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SJDFdKSBfaGlkZShwcm90bywgSVRFUkFUT1IkMSwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIF9oaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBfaXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiBlczZfYXJyYXlfaXRlcmF0b3IpIGlmICghcHJvdG9ba2V5XSkgX3JlZGVmaW5lKHByb3RvLCBrZXksIGVzNl9hcnJheV9pdGVyYXRvcltrZXldLCB0cnVlKTtcbiAgfVxufVxuXG52YXIgaXRlcmF0b3IgPSBfd2tzRXh0LmYoJ2l0ZXJhdG9yJyk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCIoZnVuY3Rpb24oc2VsZikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKHNlbGYuZmV0Y2gpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgICBibG9iOiAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJiAnQmxvYicgaW4gc2VsZiAmJiAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbiAgfVxuXG4gIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gICAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gICAgXVxuXG4gICAgdmFyIGlzRGF0YVZpZXcgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxuICAgIH1cblxuICAgIHZhciBpc0FycmF5QnVmZmVyVmlldyA9IEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgICB9XG4gICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXFxeX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICAgIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSsnLCcrdmFsdWUgOiB2YWx1ZVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChuYW1lKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IGl0ZW1zLnB1c2godmFsdWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICAgIH1cbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gICAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG4gIH1cblxuICBmdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gQm9keSgpIHtcbiAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgICB9XG4gICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ29taXQnXG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICAgIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHkpXG4gIH1cblxuICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7IGJvZHk6IHRoaXMuX2JvZHlJbml0IH0pXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gICAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gICAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9XG5cbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxuXG4gIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfVxuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICAgIH0pXG4gIH1cbiAgc2VsZi5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliXzEgPSByZXF1aXJlKCd0c2xpYicpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgRmlyZWJhc2UgY29uc3RhbnRzLiAgU29tZSBvZiB0aGVzZSAoQGRlZmluZXMpIGNhbiBiZSBvdmVycmlkZGVuIGF0IGNvbXBpbGUtdGltZS5cclxuICovXHJcbnZhciBDT05TVEFOVFMgPSB7XHJcbiAgICAvKipcclxuICAgICAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyB0aGUgY2xpZW50IE5vZGUuanMgU0RLLlxyXG4gICAgICovXHJcbiAgICBOT0RFX0NMSUVOVDogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyB0aGUgQWRtaW4gTm9kZS5qcyBTREsuXHJcbiAgICAgKi9cclxuICAgIE5PREVfQURNSU46IGZhbHNlLFxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlYmFzZSBTREsgVmVyc2lvblxyXG4gICAgICovXHJcbiAgICBTREtfVkVSU0lPTjogJyR7SlNDT1JFX1ZFUlNJT059J1xyXG59O1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcHJvdmlkZWQgYXNzZXJ0aW9uIGlzIGZhbHN5XHJcbiAqIEBwYXJhbSB7Kn0gYXNzZXJ0aW9uIFRoZSBhc3NlcnRpb24gdG8gYmUgdGVzdGVkIGZvciBmYWxzaW5lc3NcclxuICogQHBhcmFtIHshc3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkgaWYgdGhlIGNoZWNrIGZhaWxzXHJcbiAqL1xyXG52YXIgYXNzZXJ0ID0gZnVuY3Rpb24gKGFzc2VydGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFhc3NlcnRpb24pIHtcclxuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcihtZXNzYWdlKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgYW4gRXJyb3Igb2JqZWN0IHN1aXRhYmxlIGZvciB0aHJvd2luZy5cclxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcclxuICogQHJldHVybiB7IUVycm9yfVxyXG4gKi9cclxudmFyIGFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZpcmViYXNlIERhdGFiYXNlICgnICtcclxuICAgICAgICBDT05TVEFOVFMuU0RLX1ZFUlNJT04gK1xyXG4gICAgICAgICcpIElOVEVSTkFMIEFTU0VSVCBGQUlMRUQ6ICcgK1xyXG4gICAgICAgIG1lc3NhZ2UpO1xyXG59O1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIHN0cmluZ1RvQnl0ZUFycmF5ID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIHZhciBvdXQgPSBbXSwgcCA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgoYyAmIDB4ZmMwMCkgPT0gMHhkODAwICYmXHJcbiAgICAgICAgICAgIGkgKyAxIDwgc3RyLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmYzAwKSA9PSAweGRjMDApIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgwM2ZmKTtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxyXG4gKiBjaGFyYWN0ZXJzIHRvIHdoaWNoIHRoZSBudW1iZXJzIGNvcnJlc3BvbmQuXHJcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYnl0ZXMgQXJyYXkgb2YgbnVtYmVycyByZXByZXNlbnRpbmcgY2hhcmFjdGVycy5cclxuICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmdpZmljYXRpb24gb2YgdGhlIGFycmF5LlxyXG4gKi9cclxudmFyIGJ5dGVBcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gKGJ5dGVzKSB7XHJcbiAgICAvLyBUT0RPKHVzZXIpOiBVc2UgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBpZi93aGVuIGF2YWlsYWJsZVxyXG4gICAgdmFyIG91dCA9IFtdLCBwb3MgPSAwLCBjID0gMDtcclxuICAgIHdoaWxlIChwb3MgPCBieXRlcy5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgYzEgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgaWYgKGMxIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMxID4gMTkxICYmIGMxIDwgMjI0KSB7XHJcbiAgICAgICAgICAgIHZhciBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYzEgJiAzMSkgPDwgNikgfCAoYzIgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDIzOSAmJiBjMSA8IDM2NSkge1xyXG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxyXG4gICAgICAgICAgICB2YXIgYzIgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIHZhciBjMyA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgdmFyIGM0ID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICB2YXIgdSA9ICgoKGMxICYgNykgPDwgMTgpIHwgKChjMiAmIDYzKSA8PCAxMikgfCAoKGMzICYgNjMpIDw8IDYpIHwgKGM0ICYgNjMpKSAtXHJcbiAgICAgICAgICAgICAgICAweDEwMDAwO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkODAwICsgKHUgPj4gMTApKTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZGMwMCArICh1ICYgMTAyMykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGMyID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICB2YXIgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMTUpIDw8IDEyKSB8ICgoYzIgJiA2MykgPDwgNikgfCAoYzMgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQuam9pbignJyk7XHJcbn07XHJcbi8vIFN0YXRpYyBsb29rdXAgbWFwcywgbGF6aWx5IHBvcHVsYXRlZCBieSBpbml0XygpXHJcbnZhciBiYXNlNjQgPSB7XHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgYnl0ZXMgdG8gY2hhcmFjdGVycy5cclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNoYXJUb0J5dGVNYXBfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIGJ5dGVzIHRvIHdlYnNhZmUgY2hhcmFjdGVycy5cclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgd2Vic2FmZSBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNoYXJUb0J5dGVNYXBXZWJTYWZlXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogT3VyIGRlZmF1bHQgYWxwaGFiZXQsIHNoYXJlZCBiZXR3ZWVuXHJcbiAgICAgKiBFTkNPREVEX1ZBTFMgYW5kIEVOQ09ERURfVkFMU19XRUJTQUZFXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBFTkNPREVEX1ZBTFNfQkFTRTogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJyArICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicgKyAnMDEyMzQ1Njc4OScsXHJcbiAgICAvKipcclxuICAgICAqIE91ciBkZWZhdWx0IGFscGhhYmV0LiBWYWx1ZSA2NCAoPSkgaXMgc3BlY2lhbDsgaXQgbWVhbnMgXCJub3RoaW5nLlwiXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJysvPSc7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgd2Vic2FmZSBhbHBoYWJldC5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldCBFTkNPREVEX1ZBTFNfV0VCU0FGRSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5FTkNPREVEX1ZBTFNfQkFTRSArICctXy4nO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgdGhlIGF0b2IgYW5kIGJ0b2EgZnVuY3Rpb25zLiBUaGlzIGV4dGVuc2lvblxyXG4gICAgICogc3RhcnRlZCBhdCBNb3ppbGxhIGJ1dCBpcyBub3cgaW1wbGVtZW50ZWQgYnkgbWFueSBicm93c2Vycy4gV2UgdXNlIHRoZVxyXG4gICAgICogQVNTVU1FXyogdmFyaWFibGVzIHRvIGF2b2lkIHB1bGxpbmcgaW4gdGhlIGZ1bGwgdXNlcmFnZW50IGRldGVjdGlvbiBsaWJyYXJ5XHJcbiAgICAgKiBidXQgc3RpbGwgYWxsb3dpbmcgdGhlIHN0YW5kYXJkIHBlci1icm93c2VyIGNvbXBpbGF0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgSEFTX05BVElWRV9TVVBQT1JUOiB0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJyxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhbiBhcnJheSBvZiBieXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PG51bWJlcj58VWludDhBcnJheX0gaW5wdXQgQW4gYXJyYXkgb2YgYnl0ZXMgKG51bWJlcnMgd2l0aFxyXG4gICAgICogICAgIHZhbHVlIGluIFswLCAyNTVdKSB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfd2ViU2FmZSBCb29sZWFuIGluZGljYXRpbmcgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlQnl0ZUFycmF5OiBmdW5jdGlvbiAoaW5wdXQsIG9wdF93ZWJTYWZlKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZW5jb2RlQnl0ZUFycmF5IHRha2VzIGFuIGFycmF5IGFzIGEgcGFyYW1ldGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICB2YXIgYnl0ZVRvQ2hhck1hcCA9IG9wdF93ZWJTYWZlXHJcbiAgICAgICAgICAgID8gdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV9cclxuICAgICAgICAgICAgOiB0aGlzLmJ5dGVUb0NoYXJNYXBfO1xyXG4gICAgICAgIHZhciBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIHZhciBieXRlMSA9IGlucHV0W2ldO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGUyID0gaSArIDEgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBieXRlMiA9IGhhdmVCeXRlMiA/IGlucHV0W2kgKyAxXSA6IDA7XHJcbiAgICAgICAgICAgIHZhciBoYXZlQnl0ZTMgPSBpICsgMiA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJ5dGUzID0gaGF2ZUJ5dGUzID8gaW5wdXRbaSArIDJdIDogMDtcclxuICAgICAgICAgICAgdmFyIG91dEJ5dGUxID0gYnl0ZTEgPj4gMjtcclxuICAgICAgICAgICAgdmFyIG91dEJ5dGUyID0gKChieXRlMSAmIDB4MDMpIDw8IDQpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICB2YXIgb3V0Qnl0ZTMgPSAoKGJ5dGUyICYgMHgwZikgPDwgMikgfCAoYnl0ZTMgPj4gNik7XHJcbiAgICAgICAgICAgIHZhciBvdXRCeXRlNCA9IGJ5dGUzICYgMHgzZjtcclxuICAgICAgICAgICAgaWYgKCFoYXZlQnl0ZTMpIHtcclxuICAgICAgICAgICAgICAgIG91dEJ5dGU0ID0gNjQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhdmVCeXRlMikge1xyXG4gICAgICAgICAgICAgICAgICAgIG91dEJ5dGUzID0gNjQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3V0cHV0LnB1c2goYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMV0sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTJdLCBieXRlVG9DaGFyTWFwW291dEJ5dGUzXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlNF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgQSBzdHJpbmcgdG8gZW5jb2RlLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3dlYlNhZmUgSWYgdHJ1ZSwgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlU3RyaW5nOiBmdW5jdGlvbiAoaW5wdXQsIG9wdF93ZWJTYWZlKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcclxuICAgICAgICAvLyBhIG5hdGl2ZSBiYXNlNjQgZW5jb2RlciBpbiB0aGUgZm9ybSBvZiBcImJ0b2EvYXRvYlwiXHJcbiAgICAgICAgaWYgKHRoaXMuSEFTX05BVElWRV9TVVBQT1JUICYmICFvcHRfd2ViU2FmZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYnRvYShpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZUJ5dGVBcnJheShzdHJpbmdUb0J5dGVBcnJheShpbnB1dCksIG9wdF93ZWJTYWZlKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF93ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nOiBmdW5jdGlvbiAoaW5wdXQsIG9wdF93ZWJTYWZlKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcclxuICAgICAgICAvLyBhIG5hdGl2ZSBiYXNlNjQgZW5jb2RlciBpbiB0aGUgZm9ybSBvZiBcImJ0b2EvYXRvYlwiXHJcbiAgICAgICAgaWYgKHRoaXMuSEFTX05BVElWRV9TVVBQT1JUICYmICFvcHRfd2ViU2FmZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXRvYihpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBieXRlQXJyYXlUb1N0cmluZyh0aGlzLmRlY29kZVN0cmluZ1RvQnl0ZUFycmF5KGlucHV0LCBvcHRfd2ViU2FmZSkpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBJbiBiYXNlLTY0IGRlY29kaW5nLCBncm91cHMgb2YgZm91ciBjaGFyYWN0ZXJzIGFyZSBjb252ZXJ0ZWQgaW50byB0aHJlZVxyXG4gICAgICogYnl0ZXMuICBJZiB0aGUgZW5jb2RlciBkaWQgbm90IGFwcGx5IHBhZGRpbmcsIHRoZSBpbnB1dCBsZW5ndGggbWF5IG5vdFxyXG4gICAgICogYmUgYSBtdWx0aXBsZSBvZiA0LlxyXG4gICAgICpcclxuICAgICAqIEluIHRoaXMgY2FzZSwgdGhlIGxhc3QgZ3JvdXAgd2lsbCBoYXZlIGZld2VyIHRoYW4gNCBjaGFyYWN0ZXJzLCBhbmRcclxuICAgICAqIHBhZGRpbmcgd2lsbCBiZSBpbmZlcnJlZC4gIElmIHRoZSBncm91cCBoYXMgb25lIG9yIHR3byBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzXHJcbiAgICAgKiB0byBvbmUgYnl0ZS4gIElmIHRoZSBncm91cCBoYXMgdGhyZWUgY2hhcmFjdGVycywgaXQgZGVjb2RlcyB0byB0d28gYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IElucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF93ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgd2ViLXNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8bnVtYmVyPn0gYnl0ZXMgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBkZWNvZGVTdHJpbmdUb0J5dGVBcnJheTogZnVuY3Rpb24gKGlucHV0LCBvcHRfd2ViU2FmZSkge1xyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICB2YXIgY2hhclRvQnl0ZU1hcCA9IG9wdF93ZWJTYWZlXHJcbiAgICAgICAgICAgID8gdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV9cclxuICAgICAgICAgICAgOiB0aGlzLmNoYXJUb0J5dGVNYXBfO1xyXG4gICAgICAgIHZhciBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDspIHtcclxuICAgICAgICAgICAgdmFyIGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XHJcbiAgICAgICAgICAgIHZhciBoYXZlQnl0ZTIgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTIgPSBoYXZlQnl0ZTIgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiAwO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIHZhciBoYXZlQnl0ZTMgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTMgPSBoYXZlQnl0ZTMgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiA2NDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGU0ID0gaSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJ5dGU0ID0gaGF2ZUJ5dGU0ID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgaWYgKGJ5dGUxID09IG51bGwgfHwgYnl0ZTIgPT0gbnVsbCB8fCBieXRlMyA9PSBudWxsIHx8IGJ5dGU0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG91dEJ5dGUxID0gKGJ5dGUxIDw8IDIpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XHJcbiAgICAgICAgICAgIGlmIChieXRlMyAhPSA2NCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG91dEJ5dGUyID0gKChieXRlMiA8PCA0KSAmIDB4ZjApIHwgKGJ5dGUzID4+IDIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGU0ICE9IDY0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG91dEJ5dGUzID0gKChieXRlMyA8PCA2KSAmIDB4YzApIHwgYnl0ZTQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxyXG4gICAgICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0XzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5ieXRlVG9DaGFyTWFwXykge1xyXG4gICAgICAgICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF8gPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV8gPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV8gPSB7fTtcclxuICAgICAgICAgICAgLy8gV2Ugd2FudCBxdWljayBtYXBwaW5ncyBiYWNrIGFuZCBmb3J0aCwgc28gd2UgcHJlY29tcHV0ZSB0d28gbWFwcy5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLkVOQ09ERURfVkFMUy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwX1tpXSA9IHRoaXMuRU5DT0RFRF9WQUxTLmNoYXJBdChpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5ieXRlVG9DaGFyTWFwX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV9baV0gPSB0aGlzLkVOQ09ERURfVkFMU19XRUJTQUZFLmNoYXJBdChpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfW3RoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldXSA9IGk7XHJcbiAgICAgICAgICAgICAgICAvLyBCZSBmb3JnaXZpbmcgd2hlbiBkZWNvZGluZyBhbmQgY29ycmVjdGx5IGRlY29kZSBib3RoIGVuY29kaW5ncy5cclxuICAgICAgICAgICAgICAgIGlmIChpID49IHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwX1t0aGlzLkVOQ09ERURfVkFMU19XRUJTQUZFLmNoYXJBdChpKV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfW3RoaXMuRU5DT0RFRF9WQUxTLmNoYXJBdChpKV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4geyFzdHJpbmd9XHJcbiAqL1xyXG52YXIgYmFzZTY0RW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgdmFyIHV0ZjhCeXRlcyA9IHN0cmluZ1RvQnl0ZUFycmF5KHN0cik7XHJcbiAgICByZXR1cm4gYmFzZTY0LmVuY29kZUJ5dGVBcnJheSh1dGY4Qnl0ZXMsIHRydWUpO1xyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGRlY29kaW5nXHJcbiAqXHJcbiAqIE5PVEU6IERPIE5PVCB1c2UgdGhlIGdsb2JhbCBhdG9iKCkgZnVuY3Rpb24gLSBpdCBkb2VzIE5PVCBzdXBwb3J0IHRoZVxyXG4gKiBiYXNlNjRVcmwgdmFyaWFudCBlbmNvZGluZy5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUbyBiZSBkZWNvZGVkXHJcbiAqIEByZXR1cm4gez9zdHJpbmd9IERlY29kZWQgcmVzdWx0LCBpZiBwb3NzaWJsZVxyXG4gKi9cclxudmFyIGJhc2U2NERlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5kZWNvZGVTdHJpbmcoc3RyLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignYmFzZTY0RGVjb2RlIGZhaWxlZDogJywgZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEbyBhIGRlZXAtY29weSBvZiBiYXNpYyBKYXZhU2NyaXB0IE9iamVjdHMgb3IgQXJyYXlzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcENvcHkodmFsdWUpIHtcclxuICAgIHJldHVybiBkZWVwRXh0ZW5kKHVuZGVmaW5lZCwgdmFsdWUpO1xyXG59XHJcbi8qKlxyXG4gKiBDb3B5IHByb3BlcnRpZXMgZnJvbSBzb3VyY2UgdG8gdGFyZ2V0IChyZWN1cnNpdmVseSBhbGxvd3MgZXh0ZW5zaW9uXHJcbiAqIG9mIE9iamVjdHMgYW5kIEFycmF5cykuICBTY2FsYXIgdmFsdWVzIGluIHRoZSB0YXJnZXQgYXJlIG92ZXItd3JpdHRlbi5cclxuICogSWYgdGFyZ2V0IGlzIHVuZGVmaW5lZCwgYW4gb2JqZWN0IG9mIHRoZSBhcHByb3ByaWF0ZSB0eXBlIHdpbGwgYmUgY3JlYXRlZFxyXG4gKiAoYW5kIHJldHVybmVkKS5cclxuICpcclxuICogV2UgcmVjdXJzaXZlbHkgY29weSBhbGwgY2hpbGQgcHJvcGVydGllcyBvZiBwbGFpbiBPYmplY3RzIGluIHRoZSBzb3VyY2UtIHNvXHJcbiAqIHRoYXQgbmFtZXNwYWNlLSBsaWtlIGRpY3Rpb25hcmllcyBhcmUgbWVyZ2VkLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgdGhlIHRhcmdldCBjYW4gYmUgYSBmdW5jdGlvbiwgaW4gd2hpY2ggY2FzZSB0aGUgcHJvcGVydGllcyBpblxyXG4gKiB0aGUgc291cmNlIE9iamVjdCBhcmUgY29waWVkIG9udG8gaXQgYXMgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhlIEZ1bmN0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcEV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xyXG4gICAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgT2JqZWN0KSkge1xyXG4gICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHNvdXJjZS5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIGNhc2UgRGF0ZTpcclxuICAgICAgICAgICAgLy8gVHJlYXQgRGF0ZXMgbGlrZSBzY2FsYXJzOyBpZiB0aGUgdGFyZ2V0IGRhdGUgb2JqZWN0IGhhZCBhbnkgY2hpbGRcclxuICAgICAgICAgICAgLy8gcHJvcGVydGllcyAtIHRoZXkgd2lsbCBiZSBsb3N0IVxyXG4gICAgICAgICAgICB2YXIgZGF0ZVZhbHVlID0gc291cmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVZhbHVlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgY2FzZSBPYmplY3Q6XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBBcnJheTpcclxuICAgICAgICAgICAgLy8gQWx3YXlzIGNvcHkgdGhlIGFycmF5IHNvdXJjZSBhbmQgb3ZlcndyaXRlIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgIHRhcmdldCA9IFtdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XHJcbiAgICAgICAgaWYgKCFzb3VyY2UuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IGRlZXBFeHRlbmQodGFyZ2V0W3Byb3BdLCBzb3VyY2VbcHJvcF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxyXG4vLyBUT0RPOiBSZWFsbHkgbmVlZGVkIChmb3IgSlNDb21waWxlciB0eXBlIGNoZWNraW5nKT9cclxuZnVuY3Rpb24gcGF0Y2hQcm9wZXJ0eShvYmosIHByb3AsIHZhbHVlKSB7XHJcbiAgICBvYmpbcHJvcF0gPSB2YWx1ZTtcclxufVxuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIERlZmVycmVkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGVmZXJyZWQoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLnJlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICBfdGhpcy5yZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE91ciBBUEkgaW50ZXJuYWxzIGFyZSBub3QgcHJvbWlzZWlmaWVkIGFuZCBjYW5ub3QgYmVjYXVzZSBvdXIgY2FsbGJhY2sgQVBJcyBoYXZlIHN1YnRsZSBleHBlY3RhdGlvbnMgYXJvdW5kXHJcbiAgICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xyXG4gICAgICogYW5kIHJldHVybnMgYSBub2RlLXN0eWxlIGNhbGxiYWNrIHdoaWNoIHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIERlZmVycmVkJ3MgcHJvbWlzZS5cclxuICAgICAqIEBwYXJhbSB7KCg/ZnVuY3Rpb24oPyhFcnJvcikpOiAoP3x1bmRlZmluZWQpKXwgKD9mdW5jdGlvbig/KEVycm9yKSw/PSk6ICg/fHVuZGVmaW5lZCkpKT19IGNhbGxiYWNrXHJcbiAgICAgKiBAcmV0dXJuIHshZnVuY3Rpb24oPyhFcnJvciksID89KX1cclxuICAgICAqL1xyXG4gICAgRGVmZXJyZWQucHJvdG90eXBlLndyYXBDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvciwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgLy8gQXR0YWNoaW5nIG5vb3AgaGFuZGxlciBqdXN0IGluIGNhc2UgZGV2ZWxvcGVyIHdhc24ndCBleHBlY3RpbmdcclxuICAgICAgICAgICAgICAgIC8vIHByb21pc2VzXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9taXNlLmNhdGNoKGZ1bmN0aW9uICgpIHsgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBTb21lIG9mIG91ciBjYWxsYmFja3MgZG9uJ3QgZXhwZWN0IGEgdmFsdWUgYW5kIG91ciBvd24gdGVzdHNcclxuICAgICAgICAgICAgICAgIC8vIGFzc2VydCB0aGF0IHRoZSBwYXJhbWV0ZXIgbGVuZ3RoIGlzIDFcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVmZXJyZWQ7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyBuYXZpZ2F0b3IudXNlckFnZW50IHN0cmluZyBvciAnJyBpZiBpdCdzIG5vdCBkZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHVzZXIgYWdlbnQgc3RyaW5nXHJcbiAqL1xyXG52YXIgZ2V0VUEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICB0eXBlb2YgbmF2aWdhdG9yWyd1c2VyQWdlbnQnXSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yWyd1c2VyQWdlbnQnXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIERldGVjdCBDb3Jkb3ZhIC8gUGhvbmVHYXAgLyBJb25pYyBmcmFtZXdvcmtzIG9uIGEgbW9iaWxlIGRldmljZS5cclxuICpcclxuICogRGVsaWJlcmF0ZWx5IGRvZXMgbm90IHJlbHkgb24gY2hlY2tpbmcgYGZpbGU6Ly9gIFVSTHMgKGFzIHRoaXMgZmFpbHMgUGhvbmVHYXAgaW4gdGhlIFJpcHBsZSBlbXVsYXRvcikgbm9yXHJcbiAqIENvcmRvdmEgYG9uRGV2aWNlUmVhZHlgLCB3aGljaCB3b3VsZCBub3JtYWxseSB3YWl0IGZvciBhIGNhbGxiYWNrLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHtib29sZWFufSBpc01vYmlsZUNvcmRvdmFcclxuICovXHJcbnZhciBpc01vYmlsZUNvcmRvdmEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgISEod2luZG93Wydjb3Jkb3ZhJ10gfHwgd2luZG93WydwaG9uZWdhcCddIHx8IHdpbmRvd1snUGhvbmVHYXAnXSkgJiZcclxuICAgICAgICAvaW9zfGlwaG9uZXxpcG9kfGlwYWR8YW5kcm9pZHxibGFja2JlcnJ5fGllbW9iaWxlL2kudGVzdChnZXRVQSgpKSk7XHJcbn07XHJcbi8qKlxyXG4gKiBEZXRlY3QgUmVhY3QgTmF0aXZlLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIFJlYWN0TmF0aXZlIGVudmlyb25tZW50IGlzIGRldGVjdGVkLlxyXG4gKi9cclxudmFyIGlzUmVhY3ROYXRpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvclsncHJvZHVjdCddID09PSAnUmVhY3ROYXRpdmUnKTtcclxufTtcclxuLyoqXHJcbiAqIERldGVjdCBOb2RlLmpzLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIE5vZGUuanMgZW52aXJvbm1lbnQgaXMgZGV0ZWN0ZWQuXHJcbiAqL1xyXG52YXIgaXNOb2RlU2RrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIENPTlNUQU5UUy5OT0RFX0NMSUVOVCA9PT0gdHJ1ZSB8fCBDT05TVEFOVFMuTk9ERV9BRE1JTiA9PT0gdHJ1ZTtcclxufTtcblxudmFyIEVSUk9SX05BTUUgPSAnRmlyZWJhc2VFcnJvcic7XHJcbnZhciBjYXB0dXJlU3RhY2tUcmFjZSA9IEVycm9yXHJcbiAgICAuY2FwdHVyZVN0YWNrVHJhY2U7XHJcbi8vIEV4cG9ydCBmb3IgZmFraW5nIGluIHRlc3RzXHJcbmZ1bmN0aW9uIHBhdGNoQ2FwdHVyZShjYXB0dXJlRmFrZSkge1xyXG4gICAgdmFyIHJlc3VsdCA9IGNhcHR1cmVTdGFja1RyYWNlO1xyXG4gICAgY2FwdHVyZVN0YWNrVHJhY2UgPSBjYXB0dXJlRmFrZTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxudmFyIEZpcmViYXNlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaXJlYmFzZUVycm9yKGNvZGUsIG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICAgICAgLy8gV2Ugd2FudCB0aGUgc3RhY2sgdmFsdWUsIGlmIGltcGxlbWVudGVkIGJ5IEVycm9yXHJcbiAgICAgICAgaWYgKGNhcHR1cmVTdGFja1RyYWNlKSB7XHJcbiAgICAgICAgICAgIC8vIFBhdGNoZXMgdGhpcy5zdGFjaywgb21pdHRlZCBjYWxscyBhYm92ZSBFcnJvckZhY3RvcnkjY3JlYXRlXHJcbiAgICAgICAgICAgIGNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEVycm9yRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJbiBjYXNlIG9mIElFMTEsIHN0YWNrIHdpbGwgYmUgc2V0IG9ubHkgYWZ0ZXIgZXJyb3IgaXMgcmFpc2VkLlxyXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvc2NyaXB0aW5nL2phdmFzY3JpcHQvcmVmZXJlbmNlL3N0YWNrLXByb3BlcnR5LWVycm9yLWphdmFzY3JpcHRcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gRVJST1JfTkFNRTtcclxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugbm9uLWVudW1lcmFibGUgZ2V0dGVyIGZvciB0aGUgcHJvcGVydHkuXHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyLnN0YWNrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIEZpcmViYXNlRXJyb3I7XHJcbn0oKSk7XHJcbi8vIEJhY2stZG9vciBpbmhlcml0YW5jZVxyXG5GaXJlYmFzZUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcclxuRmlyZWJhc2VFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGaXJlYmFzZUVycm9yO1xyXG5GaXJlYmFzZUVycm9yLnByb3RvdHlwZS5uYW1lID0gRVJST1JfTkFNRTtcclxudmFyIEVycm9yRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVycm9yRmFjdG9yeShzZXJ2aWNlLCBzZXJ2aWNlTmFtZSwgZXJyb3JzKSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcclxuICAgICAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XHJcbiAgICAgICAgLy8gTWF0Y2hlcyB7JG5hbWV9LCBieSBkZWZhdWx0LlxyXG4gICAgICAgIHRoaXMucGF0dGVybiA9IC9cXHtcXCQoW159XSspfS9nO1xyXG4gICAgICAgIC8vIGVtcHR5XHJcbiAgICB9XHJcbiAgICBFcnJvckZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb2RlLCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBkYXRhID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMuZXJyb3JzW2NvZGVdO1xyXG4gICAgICAgIHZhciBmdWxsQ29kZSA9IHRoaXMuc2VydmljZSArICcvJyArIGNvZGU7XHJcbiAgICAgICAgdmFyIG1lc3NhZ2U7XHJcbiAgICAgICAgaWYgKHRlbXBsYXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9ICdFcnJvcic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gdGVtcGxhdGUucmVwbGFjZSh0aGlzLnBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBkYXRhW2tleV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlLnRvU3RyaW5nKCkgOiAnPCcgKyBrZXkgKyAnPz4nO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU2VydmljZTogRXJyb3IgbWVzc2FnZSAoc2VydmljZS9jb2RlKS5cclxuICAgICAgICBtZXNzYWdlID0gdGhpcy5zZXJ2aWNlTmFtZSArICc6ICcgKyBtZXNzYWdlICsgJyAoJyArIGZ1bGxDb2RlICsgJykuJztcclxuICAgICAgICB2YXIgZXJyID0gbmV3IEZpcmViYXNlRXJyb3IoZnVsbENvZGUsIG1lc3NhZ2UpO1xyXG4gICAgICAgIC8vIFBvcHVsYXRlIHRoZSBFcnJvciBvYmplY3Qgd2l0aCBtZXNzYWdlIHBhcnRzIGZvciBwcm9ncmFtbWF0aWNcclxuICAgICAgICAvLyBhY2Nlc3NlcyAoZS5nLiwgZS5maWxlKS5cclxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KHByb3ApIHx8IHByb3Auc2xpY2UoLTEpID09PSAnXycpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVycltwcm9wXSA9IGRhdGFbcHJvcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlcnI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEVycm9yRmFjdG9yeTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFdmFsdWF0ZXMgYSBKU09OIHN0cmluZyBpbnRvIGEgamF2YXNjcmlwdCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgQSBzdHJpbmcgY29udGFpbmluZyBKU09OLlxyXG4gKiBAcmV0dXJuIHsqfSBUaGUgamF2YXNjcmlwdCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgSlNPTi5cclxuICovXHJcbmZ1bmN0aW9uIGpzb25FdmFsKHN0cikge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBKU09OIHJlcHJlc2VudGluZyBhIGphdmFzY3JpcHQgb2JqZWN0LlxyXG4gKiBAcGFyYW0geyp9IGRhdGEgSmF2YXNjcmlwdCBvYmplY3QgdG8gYmUgc3RyaW5naWZpZWQuXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEpTT04gY29udGVudHMgb2YgdGhlIG9iamVjdC5cclxuICovXHJcbmZ1bmN0aW9uIHN0cmluZ2lmeShkYXRhKSB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XHJcbn1cblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gaW50byBjb25zdGl0dWVudCBwYXJ0cy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiB3aXRoIGludmFsaWQgLyBpbmNvbXBsZXRlIGNsYWltcyBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICpcclxuICogQHBhcmFtIHs/c3RyaW5nfSB0b2tlblxyXG4gKiBAcmV0dXJuIHt7aGVhZGVyOiAqLCBjbGFpbXM6ICosIGRhdGE6ICosIHNpZ25hdHVyZTogc3RyaW5nfX1cclxuICovXHJcbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBoZWFkZXIgPSB7fSwgY2xhaW1zID0ge30sIGRhdGEgPSB7fSwgc2lnbmF0dXJlID0gJyc7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHZhciBwYXJ0cyA9IHRva2VuLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgaGVhZGVyID0ganNvbkV2YWwoYmFzZTY0RGVjb2RlKHBhcnRzWzBdKSB8fCAnJyk7XHJcbiAgICAgICAgY2xhaW1zID0ganNvbkV2YWwoYmFzZTY0RGVjb2RlKHBhcnRzWzFdKSB8fCAnJyk7XHJcbiAgICAgICAgc2lnbmF0dXJlID0gcGFydHNbMl07XHJcbiAgICAgICAgZGF0YSA9IGNsYWltc1snZCddIHx8IHt9O1xyXG4gICAgICAgIGRlbGV0ZSBjbGFpbXNbJ2QnXTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7IH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaGVhZGVyOiBoZWFkZXIsXHJcbiAgICAgICAgY2xhaW1zOiBjbGFpbXMsXHJcbiAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZVxyXG4gICAgfTtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgdGltZS1iYXNlZCBjbGFpbXMuIFdpbGwgcmV0dXJuIHRydWUgaWYgdGhlXHJcbiAqIHRva2VuIGlzIHdpdGhpbiB0aGUgdGltZSB3aW5kb3cgYXV0aG9yaXplZCBieSB0aGUgJ25iZicgKG5vdC1iZWZvcmUpIGFuZCAnaWF0JyAoaXNzdWVkLWF0KSBjbGFpbXMuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICpcclxuICogQHBhcmFtIHs/c3RyaW5nfSB0b2tlblxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzVmFsaWRUaW1lc3RhbXAgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcywgbm93ID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApLCB2YWxpZFNpbmNlLCB2YWxpZFVudGlsO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnbmJmJykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snbmJmJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snaWF0J107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2V4cCcpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkVW50aWwgPSBjbGFpbXNbJ2V4cCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9rZW4gd2lsbCBleHBpcmUgYWZ0ZXIgMjRoIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgdmFsaWRVbnRpbCA9IHZhbGlkU2luY2UgKyA4NjQwMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKG5vdyAmJiB2YWxpZFNpbmNlICYmIHZhbGlkVW50aWwgJiYgbm93ID49IHZhbGlkU2luY2UgJiYgbm93IDw9IHZhbGlkVW50aWwpO1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCByZXR1cm5zIGl0cyBpc3N1ZWQgYXQgdGltZSBpZiB2YWxpZCwgbnVsbCBvdGhlcndpc2UuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gbnVsbCBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICpcclxuICogQHBhcmFtIHs/c3RyaW5nfSB0b2tlblxyXG4gKiBAcmV0dXJuIHs/bnVtYmVyfVxyXG4gKi9cclxudmFyIGlzc3VlZEF0VGltZSA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgdmFyIGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICByZXR1cm4gY2xhaW1zWydpYXQnXTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyBmb3JtYXQuIEV4cGVjdHMgYSB2YWxpZCBpc3N1ZWQtYXQgdGltZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKlxyXG4gKiBAcGFyYW0gez9zdHJpbmd9IHRva2VuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG52YXIgaXNWYWxpZEZvcm1hdCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgdmFyIGRlY29kZWQgPSBkZWNvZGUodG9rZW4pLCBjbGFpbXMgPSBkZWNvZGVkLmNsYWltcztcclxuICAgIHJldHVybiAhIWNsYWltcyAmJiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpO1xyXG59O1xyXG4vKipcclxuICogQXR0ZW1wdHMgdG8gcGVlciBpbnRvIGFuIGF1dGggdG9rZW4gYW5kIGRldGVybWluZSBpZiBpdCdzIGFuIGFkbWluIGF1dGggdG9rZW4gYnkgbG9va2luZyBhdCB0aGUgY2xhaW1zIHBvcnRpb24uXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICpcclxuICogQHBhcmFtIHs/c3RyaW5nfSB0b2tlblxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzQWRtaW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIHJldHVybiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXNbJ2FkbWluJ10gPT09IHRydWU7XHJcbn07XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBTZWUgaHR0cDovL3d3dy5kZXZ0aG91Z2h0LmNvbS8yMDEyLzAxLzE4L2FuLW9iamVjdC1pcy1ub3QtYS1oYXNoL1xyXG52YXIgY29udGFpbnMgPSBmdW5jdGlvbiAob2JqLCBrZXkpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xyXG59O1xyXG52YXIgc2FmZUdldCA9IGZ1bmN0aW9uIChvYmosIGtleSkge1xyXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpXHJcbiAgICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgLy8gZWxzZSByZXR1cm4gdW5kZWZpbmVkLlxyXG59O1xyXG4vKipcclxuICogRW51bWVyYXRlcyB0aGUga2V5cy92YWx1ZXMgaW4gYW4gb2JqZWN0LCBleGNsdWRpbmcga2V5cyBkZWZpbmVkIG9uIHRoZSBwcm90b3R5cGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7P09iamVjdC48SyxWPn0gb2JqIE9iamVjdCB0byBlbnVtZXJhdGUuXHJcbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKEssIFYpfSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGtleSBhbmQgdmFsdWUuXHJcbiAqIEB0ZW1wbGF0ZSBLLFZcclxuICovXHJcbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gKG9iaiwgZm4pIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICBmbihrZXksIG9ialtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBDb3BpZXMgYWxsIHRoZSAob3duKSBwcm9wZXJ0aWVzIGZyb20gb25lIG9iamVjdCB0byBhbm90aGVyLlxyXG4gKiBAcGFyYW0geyFPYmplY3R9IG9ialRvXHJcbiAqIEBwYXJhbSB7IU9iamVjdH0gb2JqRnJvbVxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fSBvYmpUb1xyXG4gKi9cclxudmFyIGV4dGVuZCA9IGZ1bmN0aW9uIChvYmpUbywgb2JqRnJvbSkge1xyXG4gICAgZm9yRWFjaChvYmpGcm9tLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIG9ialRvW2tleV0gPSB2YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9ialRvO1xyXG59O1xyXG4vKipcclxuICogUmV0dXJucyBhIGNsb25lIG9mIHRoZSBzcGVjaWZpZWQgb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fSBjbG9uZWQgb2JqLlxyXG4gKi9cclxudmFyIGNsb25lID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgcmV0dXJuIGV4dGVuZCh7fSwgb2JqKTtcclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaGFzIHR5cGVvZiBcIm9iamVjdFwiIGFuZCBpcyBub3QgbnVsbC4gIFVubGlrZSBnb29nLmlzT2JqZWN0KCksIGRvZXMgbm90IHJldHVybiB0cnVlXHJcbiAqIGZvciBmdW5jdGlvbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmogeyp9IEEgcG90ZW50aWFsIG9iamVjdC5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgaXQncyBhbiBvYmplY3QuXHJcbiAqL1xyXG52YXIgaXNOb25OdWxsT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbDtcclxufTtcclxudmFyIGlzRW1wdHkgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XHJcbnZhciBnZXRDb3VudCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHZhciBydiA9IDA7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgcnYrKztcclxuICAgIH1cclxuICAgIHJldHVybiBydjtcclxufTtcclxudmFyIG1hcCA9IGZ1bmN0aW9uIChvYmosIGYsIG9wdF9vYmopIHtcclxuICAgIHZhciByZXMgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICByZXNba2V5XSA9IGYuY2FsbChvcHRfb2JqLCBvYmpba2V5XSwga2V5LCBvYmopO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxudmFyIGZpbmRLZXkgPSBmdW5jdGlvbiAob2JqLCBmbiwgb3B0X3RoaXMpIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoZm4uY2FsbChvcHRfdGhpcywgb2JqW2tleV0sIGtleSwgb2JqKSkge1xyXG4gICAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn07XHJcbnZhciBmaW5kVmFsdWUgPSBmdW5jdGlvbiAob2JqLCBmbiwgb3B0X3RoaXMpIHtcclxuICAgIHZhciBrZXkgPSBmaW5kS2V5KG9iaiwgZm4sIG9wdF90aGlzKTtcclxuICAgIHJldHVybiBrZXkgJiYgb2JqW2tleV07XHJcbn07XHJcbnZhciBnZXRBbnlLZXkgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIGtleTtcclxuICAgIH1cclxufTtcclxudmFyIGdldFZhbHVlcyA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHZhciByZXMgPSBbXTtcclxuICAgIHZhciBpID0gMDtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICByZXNbaSsrXSA9IG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxuLyoqXHJcbiAqIFRlc3RzIHdoZXRoZXIgZXZlcnkga2V5L3ZhbHVlIHBhaXIgaW4gYW4gb2JqZWN0IHBhc3MgdGhlIHRlc3QgaW1wbGVtZW50ZWRcclxuICogYnkgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7P09iamVjdC48SyxWPn0gb2JqIE9iamVjdCB0byB0ZXN0LlxyXG4gKiBAcGFyYW0geyFmdW5jdGlvbihLLCBWKX0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBrZXkgYW5kIHZhbHVlLlxyXG4gKiBAdGVtcGxhdGUgSyxWXHJcbiAqL1xyXG52YXIgZXZlcnkgPSBmdW5jdGlvbiAob2JqLCBmbikge1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIGlmICghZm4oa2V5LCBvYmpba2V5XSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBxdWVyeXN0cmluZy1mb3JtYXR0ZWQgc3RyaW5nIChlLmcuICZhcmc9dmFsJmFyZzI9dmFsMikgZnJvbSBhIHBhcmFtc1xyXG4gKiBvYmplY3QgKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqIE5vdGU6IFlvdSBtdXN0IHByZXBlbmQgaXQgd2l0aCA/IHdoZW4gYWRkaW5nIGl0IHRvIGEgVVJMLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFPYmplY3R9IHF1ZXJ5c3RyaW5nUGFyYW1zXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnZhciBxdWVyeXN0cmluZyA9IGZ1bmN0aW9uIChxdWVyeXN0cmluZ1BhcmFtcykge1xyXG4gICAgdmFyIHBhcmFtcyA9IFtdO1xyXG4gICAgZm9yRWFjaChxdWVyeXN0cmluZ1BhcmFtcywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoYXJyYXlWYWwpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFycmF5VmFsKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwYXJhbXMubGVuZ3RoID8gJyYnICsgcGFyYW1zLmpvaW4oJyYnKSA6ICcnO1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIHF1ZXJ5c3RyaW5nIChlLmcuID9hcmc9dmFsJmFyZzI9dmFsMikgaW50byBhIHBhcmFtcyBvYmplY3QgKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeXN0cmluZ1xyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxudmFyIHF1ZXJ5c3RyaW5nRGVjb2RlID0gZnVuY3Rpb24gKHF1ZXJ5c3RyaW5nKSB7XHJcbiAgICB2YXIgb2JqID0ge307XHJcbiAgICB2YXIgdG9rZW5zID0gcXVlcnlzdHJpbmcucmVwbGFjZSgvXlxcPy8sICcnKS5zcGxpdCgnJicpO1xyXG4gICAgdG9rZW5zLmZvckVhY2goZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSB0b2tlbi5zcGxpdCgnPScpO1xyXG4gICAgICAgICAgICBvYmpba2V5WzBdXSA9IGtleVsxXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBvYmo7XHJcbn07XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBDb3B5cmlnaHQgMjAxMSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbi8vXHJcbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxyXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgQWJzdHJhY3QgY3J5cHRvZ3JhcGhpYyBoYXNoIGludGVyZmFjZS5cclxuICpcclxuICogU2VlIFNoYTEgYW5kIE1kNSBmb3Igc2FtcGxlIGltcGxlbWVudGF0aW9ucy5cclxuICpcclxuICovXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBjcnlwdG9ncmFwaGljIGhhc2ggaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAc3RydWN0XHJcbiAqL1xyXG52YXIgSGFzaCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEhhc2goKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGJsb2NrIHNpemUgZm9yIHRoZSBoYXNoZXIuXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmJsb2NrU2l6ZSA9IC0xO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEhhc2g7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2guXHJcbiAqIFZhcmlhYmxlIG5hbWVzIGZvbGxvdyB0aGUgbm90YXRpb24gaW4gRklQUyBQVUIgMTgwLTM6XHJcbiAqIGh0dHA6Ly9jc3JjLm5pc3QuZ292L3B1YmxpY2F0aW9ucy9maXBzL2ZpcHMxODAtMy9maXBzMTgwLTNfZmluYWwucGRmLlxyXG4gKlxyXG4gKiBVc2FnZTpcclxuICogICB2YXIgc2hhMSA9IG5ldyBzaGExKCk7XHJcbiAqICAgc2hhMS51cGRhdGUoYnl0ZXMpO1xyXG4gKiAgIHZhciBoYXNoID0gc2hhMS5kaWdlc3QoKTtcclxuICpcclxuICogUGVyZm9ybWFuY2U6XHJcbiAqICAgQ2hyb21lIDIzOiAgIH40MDAgTWJpdC9zXHJcbiAqICAgRmlyZWZveCAxNjogIH4yNTAgTWJpdC9zXHJcbiAqXHJcbiAqL1xyXG4vKipcclxuICogU0hBLTEgY3J5cHRvZ3JhcGhpYyBoYXNoIGNvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBUaGUgcHJvcGVydGllcyBkZWNsYXJlZCBoZXJlIGFyZSBkaXNjdXNzZWQgaW4gdGhlIGFib3ZlIGFsZ29yaXRobSBkb2N1bWVudC5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIHtIYXNofVxyXG4gKiBAZmluYWxcclxuICogQHN0cnVjdFxyXG4gKi9cclxudmFyIFNoYTEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTaGExLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU2hhMSgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhvbGRzIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgYWNjdW11bGF0ZWQgdmFyaWFibGVzIGEtZSBpbiB0aGUgY29tcHJlc3NfXHJcbiAgICAgICAgICogZnVuY3Rpb24uXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheTxudW1iZXI+fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3RoaXMuY2hhaW5fID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBidWZmZXIgaG9sZGluZyB0aGUgcGFydGlhbGx5IGNvbXB1dGVkIGhhc2ggcmVzdWx0LlxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXk8bnVtYmVyPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90aGlzLmJ1Zl8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiA4MCBieXRlcywgZWFjaCBhIHBhcnQgb2YgdGhlIG1lc3NhZ2UgdG8gYmUgaGFzaGVkLiAgUmVmZXJyZWQgdG9cclxuICAgICAgICAgKiBhcyB0aGUgbWVzc2FnZSBzY2hlZHVsZSBpbiB0aGUgZG9jcy5cclxuICAgICAgICAgKiBAdHlwZSB7IUFycmF5PG51bWJlcj59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGhpcy5XXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnRhaW5zIGRhdGEgbmVlZGVkIHRvIHBhZCBtZXNzYWdlcyBsZXNzIHRoYW4gNjQgYnl0ZXMuXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheTxudW1iZXI+fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3RoaXMucGFkXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3RoaXMuaW5idWZfID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90aGlzLnRvdGFsXyA9IDA7XHJcbiAgICAgICAgX3RoaXMuYmxvY2tTaXplID0gNTEyIC8gODtcclxuICAgICAgICBfdGhpcy5wYWRfWzBdID0gMTI4O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgX3RoaXMuYmxvY2tTaXplOyArK2kpIHtcclxuICAgICAgICAgICAgX3RoaXMucGFkX1tpXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF90aGlzLnJlc2V0KCk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgU2hhMS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAweDY3NDUyMzAxO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzFdID0gMHhlZmNkYWI4OTtcclxuICAgICAgICB0aGlzLmNoYWluX1syXSA9IDB4OThiYWRjZmU7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAweDEwMzI1NDc2O1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzRdID0gMHhjM2QyZTFmMDtcclxuICAgICAgICB0aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJuYWwgY29tcHJlc3MgaGVscGVyIGZ1bmN0aW9uLlxyXG4gICAgICogQHBhcmFtIHshQXJyYXk8bnVtYmVyPnwhVWludDhBcnJheXxzdHJpbmd9IGJ1ZiBCbG9jayB0byBjb21wcmVzcy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X29mZnNldCBPZmZzZXQgb2YgdGhlIGJsb2NrIGluIHRoZSBidWZmZXIuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBTaGExLnByb3RvdHlwZS5jb21wcmVzc18gPSBmdW5jdGlvbiAoYnVmLCBvcHRfb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKCFvcHRfb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIG9wdF9vZmZzZXQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgVyA9IHRoaXMuV187XHJcbiAgICAgICAgLy8gZ2V0IDE2IGJpZyBlbmRpYW4gd29yZHNcclxuICAgICAgICBpZiAodHlwZW9mIGJ1ZiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPKHVzZXIpOiBbYnVnIDgxNDAxMjJdIFJlY2VudCB2ZXJzaW9ucyBvZiBTYWZhcmkgZm9yIE1hYyBPUyBhbmQgaU9TXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgYnVnIHRoYXQgdHVybnMgdGhlIHBvc3QtaW5jcmVtZW50ICsrIG9wZXJhdG9yIGludG8gcHJlLWluY3JlbWVudFxyXG4gICAgICAgICAgICAgICAgLy8gZHVyaW5nIEpJVCBjb21waWxhdGlvbi4gIFdlIGhhdmUgY29kZSB0aGF0IGRlcGVuZHMgaGVhdmlseSBvbiBTSEEtMSBmb3JcclxuICAgICAgICAgICAgICAgIC8vIGNvcnJlY3RuZXNzIGFuZCB3aGljaCBpcyBhZmZlY3RlZCBieSB0aGlzIGJ1Zywgc28gSSd2ZSByZW1vdmVkIGFsbCB1c2VzXHJcbiAgICAgICAgICAgICAgICAvLyBvZiBwb3N0LWluY3JlbWVudCArKyBpbiB3aGljaCB0aGUgcmVzdWx0IHZhbHVlIGlzIHVzZWQuICBXZSBjYW4gcmV2ZXJ0XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNoYW5nZSBvbmNlIHRoZSBTYWZhcmkgYnVnXHJcbiAgICAgICAgICAgICAgICAvLyAoaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEwOTAzNikgaGFzIGJlZW4gZml4ZWQgYW5kXHJcbiAgICAgICAgICAgICAgICAvLyBtb3N0IGNsaWVudHMgaGF2ZSBiZWVuIHVwZGF0ZWQuXHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob3B0X29mZnNldCkgPDwgMjQpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9wdF9vZmZzZXQgKyAxKSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob3B0X29mZnNldCArIDIpIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmLmNoYXJDb2RlQXQob3B0X29mZnNldCArIDMpO1xyXG4gICAgICAgICAgICAgICAgb3B0X29mZnNldCArPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWZbb3B0X29mZnNldF0gPDwgMjQpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1ZltvcHRfb2Zmc2V0ICsgMV0gPDwgMTYpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1ZltvcHRfb2Zmc2V0ICsgMl0gPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZbb3B0X29mZnNldCArIDNdO1xyXG4gICAgICAgICAgICAgICAgb3B0X29mZnNldCArPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGV4cGFuZCB0byA4MCB3b3Jkc1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxNjsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHQgPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdO1xyXG4gICAgICAgICAgICBXW2ldID0gKCh0IDw8IDEpIHwgKHQgPj4+IDMxKSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYSA9IHRoaXMuY2hhaW5fWzBdO1xyXG4gICAgICAgIHZhciBiID0gdGhpcy5jaGFpbl9bMV07XHJcbiAgICAgICAgdmFyIGMgPSB0aGlzLmNoYWluX1syXTtcclxuICAgICAgICB2YXIgZCA9IHRoaXMuY2hhaW5fWzNdO1xyXG4gICAgICAgIHZhciBlID0gdGhpcy5jaGFpbl9bNF07XHJcbiAgICAgICAgdmFyIGYsIGs7XHJcbiAgICAgICAgLy8gVE9ETyh1c2VyKTogVHJ5IHRvIHVucm9sbCB0aGlzIGxvb3AgdG8gc3BlZWQgdXAgdGhlIGNvbXB1dGF0aW9uLlxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaSA8IDQwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGQgXiAoYiAmIChjIF4gZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDVhODI3OTk5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg2ZWQ5ZWJhMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpIDwgNjApIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gKGIgJiBjKSB8IChkICYgKGIgfCBjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4OGYxYmJjZGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gYiBeIGMgXiBkO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweGNhNjJjMWQ2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0ID0gKCgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZiArIGUgKyBrICsgV1tpXSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBlID0gZDtcclxuICAgICAgICAgICAgZCA9IGM7XHJcbiAgICAgICAgICAgIGMgPSAoKGIgPDwgMzApIHwgKGIgPj4+IDIpKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGIgPSBhO1xyXG4gICAgICAgICAgICBhID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAodGhpcy5jaGFpbl9bMF0gKyBhKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMV0gPSAodGhpcy5jaGFpbl9bMV0gKyBiKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAodGhpcy5jaGFpbl9bMl0gKyBjKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAodGhpcy5jaGFpbl9bM10gKyBkKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bNF0gPSAodGhpcy5jaGFpbl9bNF0gKyBlKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICB9O1xyXG4gICAgU2hhMS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ5dGVzLCBvcHRfbGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gVE9ETyhqb2hubGVueik6IHRpZ2h0ZW4gdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcmVtb3ZlIHRoaXMgY2hlY2tcclxuICAgICAgICBpZiAoYnl0ZXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRfbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb3B0X2xlbmd0aCA9IGJ5dGVzLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGxlbmd0aE1pbnVzQmxvY2sgPSBvcHRfbGVuZ3RoIC0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgdmFyIG4gPSAwO1xyXG4gICAgICAgIC8vIFVzaW5nIGxvY2FsIGluc3RlYWQgb2YgbWVtYmVyIHZhcmlhYmxlcyBnaXZlcyB+NSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LlxyXG4gICAgICAgIHZhciBidWYgPSB0aGlzLmJ1Zl87XHJcbiAgICAgICAgdmFyIGluYnVmID0gdGhpcy5pbmJ1Zl87XHJcbiAgICAgICAgLy8gVGhlIG91dGVyIHdoaWxlIGxvb3Agc2hvdWxkIGV4ZWN1dGUgYXQgbW9zdCB0d2ljZS5cclxuICAgICAgICB3aGlsZSAobiA8IG9wdF9sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gV2hlbiB3ZSBoYXZlIG5vIGRhdGEgaW4gdGhlIGJsb2NrIHRvIHRvcCB1cCwgd2UgY2FuIGRpcmVjdGx5IHByb2Nlc3MgdGhlXHJcbiAgICAgICAgICAgIC8vIGlucHV0IGJ1ZmZlciAoYXNzdW1pbmcgaXQgY29udGFpbnMgc3VmZmljaWVudCBkYXRhKS4gVGhpcyBnaXZlcyB+MjUlXHJcbiAgICAgICAgICAgIC8vIHNwZWVkdXAgb24gQ2hyb21lIDIzIGFuZCB+MTUlIHNwZWVkdXAgb24gRmlyZWZveCAxNiwgYnV0IHJlcXVpcmVzIHRoYXRcclxuICAgICAgICAgICAgLy8gdGhlIGRhdGEgaXMgcHJvdmlkZWQgaW4gbGFyZ2UgY2h1bmtzIChvciBpbiBtdWx0aXBsZXMgb2YgNjQgYnl0ZXMpLlxyXG4gICAgICAgICAgICBpZiAoaW5idWYgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPD0gbGVuZ3RoTWludXNCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ5dGVzLCBuKTtcclxuICAgICAgICAgICAgICAgICAgICBuICs9IHRoaXMuYmxvY2tTaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8IG9wdF9sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXMuY2hhckNvZGVBdChuKTtcclxuICAgICAgICAgICAgICAgICAgICArK2luYnVmO1xyXG4gICAgICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5idWYgPT0gdGhpcy5ibG9ja1NpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5idWYgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBKdW1wIHRvIHRoZSBvdXRlciBsb29wIHNvIHdlIHVzZSB0aGUgZnVsbC1ibG9jayBvcHRpbWl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDwgb3B0X2xlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZltpbmJ1Zl0gPSBieXRlc1tuXTtcclxuICAgICAgICAgICAgICAgICAgICArK2luYnVmO1xyXG4gICAgICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5idWYgPT0gdGhpcy5ibG9ja1NpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5idWYgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBKdW1wIHRvIHRoZSBvdXRlciBsb29wIHNvIHdlIHVzZSB0aGUgZnVsbC1ibG9jayBvcHRpbWl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluYnVmXyA9IGluYnVmO1xyXG4gICAgICAgIHRoaXMudG90YWxfICs9IG9wdF9sZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBvdmVycmlkZSAqL1xyXG4gICAgU2hhMS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBkaWdlc3QgPSBbXTtcclxuICAgICAgICB2YXIgdG90YWxCaXRzID0gdGhpcy50b3RhbF8gKiA4O1xyXG4gICAgICAgIC8vIEFkZCBwYWQgMHg4MCAweDAwKi5cclxuICAgICAgICBpZiAodGhpcy5pbmJ1Zl8gPCA1Nikge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIDU2IC0gdGhpcy5pbmJ1Zl8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy5wYWRfLCB0aGlzLmJsb2NrU2l6ZSAtICh0aGlzLmluYnVmXyAtIDU2KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFkZCAjIGJpdHMuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuYmxvY2tTaXplIC0gMTsgaSA+PSA1NjsgaS0tKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmX1tpXSA9IHRvdGFsQml0cyAmIDI1NTtcclxuICAgICAgICAgICAgdG90YWxCaXRzIC89IDI1NjsgLy8gRG9uJ3QgdXNlIGJpdC1zaGlmdGluZyBoZXJlIVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbXByZXNzXyh0aGlzLmJ1Zl8pO1xyXG4gICAgICAgIHZhciBuID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XHJcbiAgICAgICAgICAgICAgICBkaWdlc3Rbbl0gPSAodGhpcy5jaGFpbl9baV0gPj4gaikgJiAyNTU7XHJcbiAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRpZ2VzdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU2hhMTtcclxufShIYXNoKSk7XG5cbi8qKlxyXG4gKiBIZWxwZXIgdG8gbWFrZSBhIFN1YnNjcmliZSBmdW5jdGlvbiAoanVzdCBsaWtlIFByb21pc2UgaGVscHMgbWFrZSBhXHJcbiAqIFRoZW5hYmxlKS5cclxuICpcclxuICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXHJcbiAqICAgICBhcyBhIHByb3h5LlxyXG4gKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTdWJzY3JpYmUoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpIHtcclxuICAgIHZhciBwcm94eSA9IG5ldyBPYnNlcnZlclByb3h5KGV4ZWN1dG9yLCBvbk5vT2JzZXJ2ZXJzKTtcclxuICAgIHJldHVybiBwcm94eS5zdWJzY3JpYmUuYmluZChwcm94eSk7XHJcbn1cclxuLyoqXHJcbiAqIEltcGxlbWVudCBmYW4tb3V0IGZvciBhbnkgbnVtYmVyIG9mIE9ic2VydmVycyBhdHRhY2hlZCB2aWEgYSBzdWJzY3JpYmVcclxuICogZnVuY3Rpb24uXHJcbiAqL1xyXG52YXIgT2JzZXJ2ZXJQcm94eSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXHJcbiAgICAgKiAgICAgYXMgYSBwcm94eS5cclxuICAgICAqIEBwYXJhbSBvbk5vT2JzZXJ2ZXJzIENhbGxiYWNrIHdoZW4gY291bnQgb2YgT2JzZXJ2ZXJzIGdvZXMgdG8gemVyby5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gT2JzZXJ2ZXJQcm94eShleGVjdXRvciwgb25Ob09ic2VydmVycykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCA9IDA7XHJcbiAgICAgICAgLy8gTWljcm8tdGFzayBzY2hlZHVsaW5nIGJ5IGNhbGxpbmcgdGFzay50aGVuKCkuXHJcbiAgICAgICAgdGhpcy50YXNrID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgdGhpcy5maW5hbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uTm9PYnNlcnZlcnMgPSBvbk5vT2JzZXJ2ZXJzO1xyXG4gICAgICAgIC8vIENhbGwgdGhlIGV4ZWN1dG9yIGFzeW5jaHJvbm91c2x5IHNvIHN1YnNjcmliZXJzIHRoYXQgYXJlIGNhbGxlZFxyXG4gICAgICAgIC8vIHN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIGNyZWF0aW9uIG9mIHRoZSBzdWJzY3JpYmUgZnVuY3Rpb25cclxuICAgICAgICAvLyBjYW4gc3RpbGwgcmVjZWl2ZSB0aGUgdmVyeSBmaXJzdCB2YWx1ZSBnZW5lcmF0ZWQgaW4gdGhlIGV4ZWN1dG9yLlxyXG4gICAgICAgIHRoaXMudGFza1xyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGV4ZWN1dG9yKF90aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgX3RoaXMuZXJyb3IoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmVyUHJveHkucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsb3NlKGVycm9yKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcihmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBhZGQgYW4gT2JzZXJ2ZXIgdG8gdGhlIGZhbi1vdXQgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiAtIFdlIHJlcXVpcmUgdGhhdCBubyBldmVudCBpcyBzZW50IHRvIGEgc3Vic2NyaWJlciBzeWNocm9ub3VzbHkgdG8gdGhlaXJcclxuICAgICAqICAgY2FsbCB0byBzdWJzY3JpYmUoKS5cclxuICAgICAqL1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBvYnNlcnZlcjtcclxuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBlcnJvciA9PT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIGNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIE9ic2VydmVyLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBc3NlbWJsZSBhbiBPYnNlcnZlciBvYmplY3Qgd2hlbiBwYXNzZWQgYXMgY2FsbGJhY2sgZnVuY3Rpb25zLlxyXG4gICAgICAgIGlmIChpbXBsZW1lbnRzQW55TWV0aG9kcyhuZXh0T3JPYnNlcnZlciwgWyduZXh0JywgJ2Vycm9yJywgJ2NvbXBsZXRlJ10pKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0gbmV4dE9yT2JzZXJ2ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvYnNlcnZlciA9IHtcclxuICAgICAgICAgICAgICAgIG5leHQ6IG5leHRPck9ic2VydmVyLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5uZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5lcnJvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdW5zdWIgPSB0aGlzLnVuc3Vic2NyaWJlT25lLmJpbmQodGhpcywgdGhpcy5vYnNlcnZlcnMubGVuZ3RoKTtcclxuICAgICAgICAvLyBBdHRlbXB0IHRvIHN1YnNjcmliZSB0byBhIHRlcm1pbmF0ZWQgT2JzZXJ2YWJsZSAtIHdlXHJcbiAgICAgICAgLy8ganVzdCByZXNwb25kIHRvIHRoZSBPYnNlcnZlciB3aXRoIHRoZSBmaW5hbCBlcnJvciBvciBjb21wbGV0ZVxyXG4gICAgICAgIC8vIGV2ZW50LlxyXG4gICAgICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhc2sudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5maW5hbEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKF90aGlzLmZpbmFsRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdGhpbmdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xyXG4gICAgICAgIHJldHVybiB1bnN1YjtcclxuICAgIH07XHJcbiAgICAvLyBVbnN1YnNjcmliZSBpcyBzeW5jaHJvbm91cyAtIHdlIGd1YXJhbnRlZSB0aGF0IG5vIGV2ZW50cyBhcmUgc2VudCB0b1xyXG4gICAgLy8gYW55IHVuc3Vic2NyaWJlZCBPYnNlcnZlci5cclxuICAgIE9ic2VydmVyUHJveHkucHJvdG90eXBlLnVuc3Vic2NyaWJlT25lID0gZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9ic2VydmVyc1tpXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsZXRlIHRoaXMub2JzZXJ2ZXJzW2ldO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCAtPSAxO1xyXG4gICAgICAgIGlmICh0aGlzLm9ic2VydmVyQ291bnQgPT09IDAgJiYgdGhpcy5vbk5vT2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5mb3JFYWNoT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gQWxyZWFkeSBjbG9zZWQgYnkgcHJldmlvdXMgZXZlbnQuLi4uanVzdCBlYXQgdGhlIGFkZGl0aW9uYWwgdmFsdWVzLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNpbmNlIHNlbmRPbmUgY2FsbHMgYXN5bmNocm9ub3VzbHkgLSB0aGVyZSBpcyBubyBjaGFuY2UgdGhhdFxyXG4gICAgICAgIC8vIHRoaXMub2JzZXJ2ZXJzIHdpbGwgYmVjb21lIHVuZGVmaW5lZC5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uZShpLCBmbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIENhbGwgdGhlIE9ic2VydmVyIHZpYSBvbmUgb2YgaXQncyBjYWxsYmFjayBmdW5jdGlvbi4gV2UgYXJlIGNhcmVmdWwgdG9cclxuICAgIC8vIGNvbmZpcm0gdGhhdCB0aGUgb2JzZXJ2ZSBoYXMgbm90IGJlZW4gdW5zdWJzY3JpYmVkIHNpbmNlIHRoaXMgYXN5bmNocm9ub3VzXHJcbiAgICAvLyBmdW5jdGlvbiBoYWQgYmVlbiBxdWV1ZWQuXHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5zZW5kT25lID0gZnVuY3Rpb24gKGksIGZuKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBFeGVjdXRlIHRoZSBjYWxsYmFjayBhc3luY2hyb25vdXNseVxyXG4gICAgICAgIHRoaXMudGFzay50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLm9ic2VydmVycyAhPT0gdW5kZWZpbmVkICYmIF90aGlzLm9ic2VydmVyc1tpXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuKF90aGlzLm9ic2VydmVyc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSBleGNlcHRpb25zIHJhaXNlZCBpbiBPYnNlcnZlcnMgb3IgbWlzc2luZyBtZXRob2RzIG9mIGFuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT2JzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTG9nIGVycm9yIHRvIGNvbnNvbGUuIGIvMzE0MDQ4MDZcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoZXJyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5maW5hbEVycm9yID0gZXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcm94eSBpcyBubyBsb25nZXIgbmVlZGVkIC0gZ2FyYmFnZSBjb2xsZWN0IHJlZmVyZW5jZXNcclxuICAgICAgICB0aGlzLnRhc2sudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgX3RoaXMub25Ob09ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JzZXJ2ZXJQcm94eTtcclxufSgpKTtcclxuLyoqIFR1cm4gc3luY2hyb25vdXMgZnVuY3Rpb24gaW50byBvbmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5LiAqL1xyXG5mdW5jdGlvbiBhc3luYyhmbiwgb25FcnJvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHRydWUpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCBwYXNzZWQgaW4gaW1wbGVtZW50cyBhbnkgb2YgdGhlIG5hbWVkIG1ldGhvZHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbXBsZW1lbnRzQW55TWV0aG9kcyhvYmosIG1ldGhvZHMpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIG1ldGhvZHNfMSA9IG1ldGhvZHM7IF9pIDwgbWV0aG9kc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBtZXRob2QgPSBtZXRob2RzXzFbX2ldO1xyXG4gICAgICAgIGlmIChtZXRob2QgaW4gb2JqICYmIHR5cGVvZiBvYmpbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gbm9vcCgpIHtcclxuICAgIC8vIGRvIG5vdGhpbmdcclxufVxuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgYXBwcm9wcmlhdGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgZm9yIGEgcHVibGljIGZ1bmN0aW9uLlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgaXQgZmFpbHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSB7IW51bWJlcn0gbWluQ291bnQgVGhlIG1pbmltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBhbGxvdyBmb3IgdGhlIGZ1bmN0aW9uIGNhbGxcclxuICogQHBhcmFtIHshbnVtYmVyfSBtYXhDb3VudCBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnQgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXHJcbiAqIEBwYXJhbSB7IW51bWJlcn0gYXJnQ291bnQgVGhlIGFjdHVhbCBudW1iZXIgb2YgYXJndW1lbnRzIHByb3ZpZGVkLlxyXG4gKi9cclxudmFyIHZhbGlkYXRlQXJnQ291bnQgPSBmdW5jdGlvbiAoZm5OYW1lLCBtaW5Db3VudCwgbWF4Q291bnQsIGFyZ0NvdW50KSB7XHJcbiAgICB2YXIgYXJnRXJyb3I7XHJcbiAgICBpZiAoYXJnQ291bnQgPCBtaW5Db3VudCkge1xyXG4gICAgICAgIGFyZ0Vycm9yID0gJ2F0IGxlYXN0ICcgKyBtaW5Db3VudDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGFyZ0NvdW50ID4gbWF4Q291bnQpIHtcclxuICAgICAgICBhcmdFcnJvciA9IG1heENvdW50ID09PSAwID8gJ25vbmUnIDogJ25vIG1vcmUgdGhhbiAnICsgbWF4Q291bnQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYXJnRXJyb3IpIHtcclxuICAgICAgICB2YXIgZXJyb3IgPSBmbk5hbWUgK1xyXG4gICAgICAgICAgICAnIGZhaWxlZDogV2FzIGNhbGxlZCB3aXRoICcgK1xyXG4gICAgICAgICAgICBhcmdDb3VudCArXHJcbiAgICAgICAgICAgIChhcmdDb3VudCA9PT0gMSA/ICcgYXJndW1lbnQuJyA6ICcgYXJndW1lbnRzLicpICtcclxuICAgICAgICAgICAgJyBFeHBlY3RzICcgK1xyXG4gICAgICAgICAgICBhcmdFcnJvciArXHJcbiAgICAgICAgICAgICcuJztcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogR2VuZXJhdGVzIGEgc3RyaW5nIHRvIHByZWZpeCBhbiBlcnJvciBtZXNzYWdlIGFib3V0IGZhaWxlZCBhcmd1bWVudCB2YWxpZGF0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSB7IW51bWJlcn0gYXJndW1lbnROdW1iZXIgVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbmFsIFdoZXRoZXIgb3Igbm90IHRoZSBhcmd1bWVudCBpcyBvcHRpb25hbFxyXG4gKiBAcmV0dXJuIHshc3RyaW5nfSBUaGUgcHJlZml4IHRvIGFkZCB0byB0aGUgZXJyb3IgdGhyb3duIGZvciB2YWxpZGF0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpIHtcclxuICAgIHZhciBhcmdOYW1lID0gJyc7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50TnVtYmVyKSB7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICBhcmdOYW1lID0gb3B0aW9uYWwgPyAnZmlyc3QnIDogJ0ZpcnN0JztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICBhcmdOYW1lID0gb3B0aW9uYWwgPyAnc2Vjb25kJyA6ICdTZWNvbmQnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgIGFyZ05hbWUgPSBvcHRpb25hbCA/ICd0aGlyZCcgOiAnVGhpcmQnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgIGFyZ05hbWUgPSBvcHRpb25hbCA/ICdmb3VydGgnIDogJ0ZvdXJ0aCc7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXJyb3JQcmVmaXggY2FsbGVkIHdpdGggYXJndW1lbnROdW1iZXIgPiA0LiAgTmVlZCB0byB1cGRhdGUgaXQ/Jyk7XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3IgPSBmbk5hbWUgKyAnIGZhaWxlZDogJztcclxuICAgIGVycm9yICs9IGFyZ05hbWUgKyAnIGFyZ3VtZW50ICc7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn1cclxuLyoqXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gZm5OYW1lXHJcbiAqIEBwYXJhbSB7IW51bWJlcn0gYXJndW1lbnROdW1iZXJcclxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lc3BhY2VcclxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25hbFxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lc3BhY2UoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgbmFtZXNwYWNlLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFuYW1lc3BhY2UpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgLy9UT0RPOiBJIHNob3VsZCBkbyBtb3JlIHZhbGlkYXRpb24gaGVyZS4gV2Ugb25seSBhbGxvdyBjZXJ0YWluIGNoYXJzIGluIG5hbWVzcGFjZXMuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSArXHJcbiAgICAgICAgICAgICdtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgbmFtZXNwYWNlLicpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQ2FsbGJhY2soZm5OYW1lLCBhcmd1bWVudE51bWJlciwgY2FsbGJhY2ssIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIWNhbGxiYWNrKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSArXHJcbiAgICAgICAgICAgICdtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24uJyk7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDb250ZXh0T2JqZWN0KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIGNvbnRleHQsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIWNvbnRleHQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JyB8fCBjb250ZXh0ID09PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnbXVzdCBiZSBhIHZhbGlkIGNvbnRleHQgb2JqZWN0LicpO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBDb2RlIG9yaWdpbmFsbHkgY2FtZSBmcm9tIGdvb2cuY3J5cHQuc3RyaW5nVG9VdGY4Qnl0ZUFycmF5LCBidXQgZm9yIHNvbWUgcmVhc29uIHRoZXlcclxuLy8gYXV0b21hdGljYWxseSByZXBsYWNlZCAnXFxyXFxuJyB3aXRoICdcXG4nLCBhbmQgdGhleSBkaWRuJ3QgaGFuZGxlIHN1cnJvZ2F0ZSBwYWlycyxcclxuLy8gc28gaXQncyBiZWVuIG1vZGlmaWVkLlxyXG4vLyBOb3RlIHRoYXQgbm90IGFsbCBVbmljb2RlIGNoYXJhY3RlcnMgYXBwZWFyIGFzIHNpbmdsZSBjaGFyYWN0ZXJzIGluIEphdmFTY3JpcHQgc3RyaW5ncy5cclxuLy8gZnJvbUNoYXJDb2RlIHJldHVybnMgdGhlIFVURi0xNiBlbmNvZGluZyBvZiBhIGNoYXJhY3RlciAtIHNvIHNvbWUgVW5pY29kZSBjaGFyYWN0ZXJzXHJcbi8vIHVzZSAyIGNoYXJhY3RlcnMgaW4gSmF2YXNjcmlwdC4gIEFsbCA0LWJ5dGUgVVRGLTggY2hhcmFjdGVycyBiZWdpbiB3aXRoIGEgZmlyc3RcclxuLy8gY2hhcmFjdGVyIGluIHRoZSByYW5nZSAweEQ4MDAgLSAweERCRkYgKHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzby1jYWxsZWQgc3Vycm9nYXRlXHJcbi8vIHBhaXIpLlxyXG4vLyBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjEuM1xyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICovXHJcbnZhciBzdHJpbmdUb0J5dGVBcnJheSQxID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgdmFyIG91dCA9IFtdLCBwID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICAvLyBJcyB0aGlzIHRoZSBsZWFkIHN1cnJvZ2F0ZSBpbiBhIHN1cnJvZ2F0ZSBwYWlyP1xyXG4gICAgICAgIGlmIChjID49IDB4ZDgwMCAmJiBjIDw9IDB4ZGJmZikge1xyXG4gICAgICAgICAgICB2YXIgaGlnaCA9IGMgLSAweGQ4MDA7IC8vIHRoZSBoaWdoIDEwIGJpdHMuXHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgYXNzZXJ0KGkgPCBzdHIubGVuZ3RoLCAnU3Vycm9nYXRlIHBhaXIgbWlzc2luZyB0cmFpbCBzdXJyb2dhdGUuJyk7XHJcbiAgICAgICAgICAgIHZhciBsb3cgPSBzdHIuY2hhckNvZGVBdChpKSAtIDB4ZGMwMDsgLy8gdGhlIGxvdyAxMCBiaXRzLlxyXG4gICAgICAgICAgICBjID0gMHgxMDAwMCArIChoaWdoIDw8IDEwKSArIGxvdztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgNjU1MzYpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIENhbGN1bGF0ZSBsZW5ndGggd2l0aG91dCBhY3R1YWxseSBjb252ZXJ0aW5nOyB1c2VmdWwgZm9yIGRvaW5nIGNoZWFwZXIgdmFsaWRhdGlvbi5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xyXG52YXIgc3RyaW5nTGVuZ3RoID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgdmFyIHAgPSAwO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIHArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgcCArPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjID49IDB4ZDgwMCAmJiBjIDw9IDB4ZGJmZikge1xyXG4gICAgICAgICAgICAvLyBMZWFkIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLiAgVGhlIHBhaXIgdG9nZXRoZXIgd2lsbCB0YWtlIDQgYnl0ZXMgdG8gcmVwcmVzZW50LlxyXG4gICAgICAgICAgICBwICs9IDQ7XHJcbiAgICAgICAgICAgIGkrKzsgLy8gc2tpcCB0cmFpbCBzdXJyb2dhdGUuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwICs9IDM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHA7XHJcbn07XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xuXG5leHBvcnRzLmFzc2VydCA9IGFzc2VydDtcbmV4cG9ydHMuYXNzZXJ0aW9uRXJyb3IgPSBhc3NlcnRpb25FcnJvcjtcbmV4cG9ydHMuYmFzZTY0ID0gYmFzZTY0O1xuZXhwb3J0cy5iYXNlNjREZWNvZGUgPSBiYXNlNjREZWNvZGU7XG5leHBvcnRzLmJhc2U2NEVuY29kZSA9IGJhc2U2NEVuY29kZTtcbmV4cG9ydHMuQ09OU1RBTlRTID0gQ09OU1RBTlRTO1xuZXhwb3J0cy5kZWVwQ29weSA9IGRlZXBDb3B5O1xuZXhwb3J0cy5kZWVwRXh0ZW5kID0gZGVlcEV4dGVuZDtcbmV4cG9ydHMucGF0Y2hQcm9wZXJ0eSA9IHBhdGNoUHJvcGVydHk7XG5leHBvcnRzLkRlZmVycmVkID0gRGVmZXJyZWQ7XG5leHBvcnRzLmdldFVBID0gZ2V0VUE7XG5leHBvcnRzLmlzTW9iaWxlQ29yZG92YSA9IGlzTW9iaWxlQ29yZG92YTtcbmV4cG9ydHMuaXNOb2RlU2RrID0gaXNOb2RlU2RrO1xuZXhwb3J0cy5pc1JlYWN0TmF0aXZlID0gaXNSZWFjdE5hdGl2ZTtcbmV4cG9ydHMuRXJyb3JGYWN0b3J5ID0gRXJyb3JGYWN0b3J5O1xuZXhwb3J0cy5GaXJlYmFzZUVycm9yID0gRmlyZWJhc2VFcnJvcjtcbmV4cG9ydHMucGF0Y2hDYXB0dXJlID0gcGF0Y2hDYXB0dXJlO1xuZXhwb3J0cy5qc29uRXZhbCA9IGpzb25FdmFsO1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbmV4cG9ydHMuaXNBZG1pbiA9IGlzQWRtaW47XG5leHBvcnRzLmlzc3VlZEF0VGltZSA9IGlzc3VlZEF0VGltZTtcbmV4cG9ydHMuaXNWYWxpZEZvcm1hdCA9IGlzVmFsaWRGb3JtYXQ7XG5leHBvcnRzLmlzVmFsaWRUaW1lc3RhbXAgPSBpc1ZhbGlkVGltZXN0YW1wO1xuZXhwb3J0cy5jbG9uZSA9IGNsb25lO1xuZXhwb3J0cy5jb250YWlucyA9IGNvbnRhaW5zO1xuZXhwb3J0cy5ldmVyeSA9IGV2ZXJ5O1xuZXhwb3J0cy5leHRlbmQgPSBleHRlbmQ7XG5leHBvcnRzLmZpbmRLZXkgPSBmaW5kS2V5O1xuZXhwb3J0cy5maW5kVmFsdWUgPSBmaW5kVmFsdWU7XG5leHBvcnRzLmZvckVhY2ggPSBmb3JFYWNoO1xuZXhwb3J0cy5nZXRBbnlLZXkgPSBnZXRBbnlLZXk7XG5leHBvcnRzLmdldENvdW50ID0gZ2V0Q291bnQ7XG5leHBvcnRzLmdldFZhbHVlcyA9IGdldFZhbHVlcztcbmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XG5leHBvcnRzLmlzTm9uTnVsbE9iamVjdCA9IGlzTm9uTnVsbE9iamVjdDtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5zYWZlR2V0ID0gc2FmZUdldDtcbmV4cG9ydHMucXVlcnlzdHJpbmcgPSBxdWVyeXN0cmluZztcbmV4cG9ydHMucXVlcnlzdHJpbmdEZWNvZGUgPSBxdWVyeXN0cmluZ0RlY29kZTtcbmV4cG9ydHMuU2hhMSA9IFNoYTE7XG5leHBvcnRzLmFzeW5jID0gYXN5bmM7XG5leHBvcnRzLmNyZWF0ZVN1YnNjcmliZSA9IGNyZWF0ZVN1YnNjcmliZTtcbmV4cG9ydHMuZXJyb3JQcmVmaXggPSBlcnJvclByZWZpeDtcbmV4cG9ydHMudmFsaWRhdGVBcmdDb3VudCA9IHZhbGlkYXRlQXJnQ291bnQ7XG5leHBvcnRzLnZhbGlkYXRlQ2FsbGJhY2sgPSB2YWxpZGF0ZUNhbGxiYWNrO1xuZXhwb3J0cy52YWxpZGF0ZUNvbnRleHRPYmplY3QgPSB2YWxpZGF0ZUNvbnRleHRPYmplY3Q7XG5leHBvcnRzLnZhbGlkYXRlTmFtZXNwYWNlID0gdmFsaWRhdGVOYW1lc3BhY2U7XG5leHBvcnRzLnN0cmluZ0xlbmd0aCA9IHN0cmluZ0xlbmd0aDtcbmV4cG9ydHMuc3RyaW5nVG9CeXRlQXJyYXkgPSBzdHJpbmdUb0J5dGVBcnJheSQxO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIGZpcmViYXNlID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BmaXJlYmFzZS9hcHAnKSk7XG52YXIgbG9nZ2VyID0gcmVxdWlyZSgnQGZpcmViYXNlL2xvZ2dlcicpO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIHdlYmNoYW5uZWxXcmFwcGVyID0gcmVxdWlyZSgnQGZpcmViYXNlL3dlYmNoYW5uZWwtd3JhcHBlcicpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIFRoZSBzZW12ZXIgKHd3dy5zZW12ZXIub3JnKSB2ZXJzaW9uIG9mIHRoZSBTREsuICovXHJcbnZhciBTREtfVkVSU0lPTiA9IGZpcmViYXNlLlNES19WRVJTSU9OO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIGxvZ0NsaWVudCA9IG5ldyBsb2dnZXIuTG9nZ2VyKCdAZmlyZWJhc2UvZmlyZXN0b3JlJyk7XHJcbnZhciBMb2dMZXZlbDtcclxuKGZ1bmN0aW9uIChMb2dMZXZlbCkge1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJERUJVR1wiXSA9IDBdID0gXCJERUJVR1wiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJFUlJPUlwiXSA9IDFdID0gXCJFUlJPUlwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJTSUxFTlRcIl0gPSAyXSA9IFwiU0lMRU5UXCI7XHJcbn0pKExvZ0xldmVsIHx8IChMb2dMZXZlbCA9IHt9KSk7XHJcbi8vIEhlbHBlciBtZXRob2RzIGFyZSBuZWVkZWQgYmVjYXVzZSB2YXJpYWJsZXMgY2FuJ3QgYmUgZXhwb3J0ZWQgYXMgcmVhZC93cml0ZVxyXG5mdW5jdGlvbiBnZXRMb2dMZXZlbCgpIHtcclxuICAgIGlmIChsb2dDbGllbnQubG9nTGV2ZWwgPT09IGxvZ2dlci5Mb2dMZXZlbC5ERUJVRykge1xyXG4gICAgICAgIHJldHVybiBMb2dMZXZlbC5ERUJVRztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxvZ0NsaWVudC5sb2dMZXZlbCA9PT0gbG9nZ2VyLkxvZ0xldmVsLlNJTEVOVCkge1xyXG4gICAgICAgIHJldHVybiBMb2dMZXZlbC5TSUxFTlQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gTG9nTGV2ZWwuRVJST1I7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobmV3TGV2ZWwpIHtcclxuICAgIC8qKlxyXG4gICAgICogTWFwIHRoZSBuZXcgbG9nIGxldmVsIHRvIHRoZSBhc3NvY2lhdGVkIEZpcmViYXNlIExvZyBMZXZlbFxyXG4gICAgICovXHJcbiAgICBzd2l0Y2ggKG5ld0xldmVsKSB7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5ERUJVRzpcclxuICAgICAgICAgICAgbG9nQ2xpZW50LmxvZ0xldmVsID0gbG9nZ2VyLkxvZ0xldmVsLkRFQlVHO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOlxyXG4gICAgICAgICAgICBsb2dDbGllbnQubG9nTGV2ZWwgPSBsb2dnZXIuTG9nTGV2ZWwuRVJST1I7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgTG9nTGV2ZWwuU0lMRU5UOlxyXG4gICAgICAgICAgICBsb2dDbGllbnQubG9nTGV2ZWwgPSBsb2dnZXIuTG9nTGV2ZWwuU0lMRU5UO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBsb2dDbGllbnQuZXJyb3IoXCJGaXJlc3RvcmUgKFwiICsgU0RLX1ZFUlNJT04gKyBcIik6IEludmFsaWQgdmFsdWUgcGFzc2VkIHRvIGBzZXRMb2dMZXZlbGBcIik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZGVidWcodGFnLCBtc2cpIHtcclxuICAgIHZhciBvYmogPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgb2JqW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ0NsaWVudC5sb2dMZXZlbCA8PSBsb2dnZXIuTG9nTGV2ZWwuREVCVUcpIHtcclxuICAgICAgICB2YXIgYXJncyA9IG9iai5tYXAoYXJnVG9TdHJpbmcpO1xyXG4gICAgICAgIGxvZ0NsaWVudC5kZWJ1Zy5hcHBseShsb2dDbGllbnQsIFtcIkZpcmVzdG9yZSAoXCIgKyBTREtfVkVSU0lPTiArIFwiKSBbXCIgKyB0YWcgKyBcIl06IFwiICsgbXNnXS5jb25jYXQoYXJncykpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGVycm9yKG1zZykge1xyXG4gICAgdmFyIG9iaiA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBvYmpbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAobG9nQ2xpZW50LmxvZ0xldmVsIDw9IGxvZ2dlci5Mb2dMZXZlbC5FUlJPUikge1xyXG4gICAgICAgIHZhciBhcmdzID0gb2JqLm1hcChhcmdUb1N0cmluZyk7XHJcbiAgICAgICAgbG9nQ2xpZW50LmVycm9yLmFwcGx5KGxvZ0NsaWVudCwgW1wiRmlyZXN0b3JlIChcIiArIFNES19WRVJTSU9OICsgXCIpOiBcIiArIG1zZ10uY29uY2F0KGFyZ3MpKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQ29udmVydHMgYW4gYWRkaXRpb25hbCBsb2cgcGFyYW1ldGVyIHRvIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gYXJnVG9TdHJpbmcob2JqKSB7XHJcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIHBsYXRmb3JtID0gUGxhdGZvcm1TdXBwb3J0LmdldFBsYXRmb3JtKCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHBsYXRmb3JtLmZvcm1hdEpTT04ob2JqKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gQ29udmVydGluZyB0byBKU09OIGZhaWxlZCwganVzdCBsb2cgdGhlIG9iamVjdCBkaXJlY3RseVxyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFVuY29uZGl0aW9uYWxseSBmYWlscywgdGhyb3dpbmcgYW4gRXJyb3Igd2l0aCB0aGUgZ2l2ZW4gbWVzc2FnZS5cclxuICpcclxuICogUmV0dXJucyBhbnkgc28gaXQgY2FuIGJlIHVzZWQgaW4gZXhwcmVzc2lvbnM6XHJcbiAqIEBleGFtcGxlXHJcbiAqIGxldCBmdXR1cmVWYXIgPSBmYWlsKCdub3QgaW1wbGVtZW50ZWQgeWV0Jyk7XHJcbiAqL1xyXG5mdW5jdGlvbiBmYWlsKGZhaWx1cmUpIHtcclxuICAgIC8vIExvZyB0aGUgZmFpbHVyZSBpbiBhZGRpdGlvbiB0byB0aHJvdyBhbiBleGNlcHRpb24sIGp1c3QgaW4gY2FzZSB0aGVcclxuICAgIC8vIGV4Y2VwdGlvbiBpcyBzd2FsbG93ZWQuXHJcbiAgICB2YXIgbWVzc2FnZSA9IFwiRklSRVNUT1JFIChcIiArIFNES19WRVJTSU9OICsgXCIpIElOVEVSTkFMIEFTU0VSVElPTiBGQUlMRUQ6IFwiICsgZmFpbHVyZTtcclxuICAgIGVycm9yKG1lc3NhZ2UpO1xyXG4gICAgLy8gTk9URTogV2UgZG9uJ3QgdXNlIEZpcmVzdG9yZUVycm9yIGhlcmUgYmVjYXVzZSB0aGVzZSBhcmUgaW50ZXJuYWwgZmFpbHVyZXNcclxuICAgIC8vIHRoYXQgY2Fubm90IGJlIGhhbmRsZWQgYnkgdGhlIHVzZXIuIChBbHNvIGl0IHdvdWxkIGNyZWF0ZSBhIGNpcmN1bGFyXHJcbiAgICAvLyBkZXBlbmRlbmN5IGJldHdlZW4gdGhlIGVycm9yIGFuZCBhc3NlcnQgbW9kdWxlcyB3aGljaCBkb2Vzbid0IHdvcmsuKVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG59XHJcbi8qKlxyXG4gKiBGYWlscyBpZiB0aGUgZ2l2ZW4gYXNzZXJ0aW9uIGNvbmRpdGlvbiBpcyBmYWxzZSwgdGhyb3dpbmcgYW4gRXJyb3Igd2l0aCB0aGVcclxuICogZ2l2ZW4gbWVzc2FnZSBpZiBpdCBkaWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnQoYXNzZXJ0aW9uLCBtZXNzYWdlKSB7XHJcbiAgICBpZiAoIWFzc2VydGlvbikge1xyXG4gICAgICAgIGZhaWwobWVzc2FnZSk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlcyBzaW5nbGV0b24gaGVscGVycyB3aGVyZSBzZXR1cCBjb2RlIGNhbiBpbmplY3QgYSBwbGF0Zm9ybSBhdCBydW50aW1lLlxyXG4gKiBzZXRQbGF0Zm9ybSBuZWVkcyB0byBiZSBzZXQgYmVmb3JlIEZpcmVzdG9yZSBpcyB1c2VkIGFuZCBtdXN0IGJlIHNldCBleGFjdGx5XHJcbiAqIG9uY2UuXHJcbiAqL1xyXG52YXIgUGxhdGZvcm1TdXBwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGxhdGZvcm1TdXBwb3J0KCkge1xyXG4gICAgfVxyXG4gICAgUGxhdGZvcm1TdXBwb3J0LnNldFBsYXRmb3JtID0gZnVuY3Rpb24gKHBsYXRmb3JtKSB7XHJcbiAgICAgICAgaWYgKFBsYXRmb3JtU3VwcG9ydC5wbGF0Zm9ybSkge1xyXG4gICAgICAgICAgICBmYWlsKCdQbGF0Zm9ybSBhbHJlYWR5IGRlZmluZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgUGxhdGZvcm1TdXBwb3J0LnBsYXRmb3JtID0gcGxhdGZvcm07XHJcbiAgICB9O1xyXG4gICAgUGxhdGZvcm1TdXBwb3J0LmdldFBsYXRmb3JtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghUGxhdGZvcm1TdXBwb3J0LnBsYXRmb3JtKSB7XHJcbiAgICAgICAgICAgIGZhaWwoJ1BsYXRmb3JtIG5vdCBzZXQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFBsYXRmb3JtU3VwcG9ydC5wbGF0Zm9ybTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUGxhdGZvcm1TdXBwb3J0O1xyXG59KCkpO1xyXG4vKipcclxuICogUmV0dXJucyB0aGUgcmVwcmVzZW50YXRpb24gb2YgYW4gZW1wdHkgXCJwcm90b1wiIGJ5dGUgc3RyaW5nIGZvciB0aGVcclxuICogcGxhdGZvcm0uXHJcbiAqL1xyXG5mdW5jdGlvbiBlbXB0eUJ5dGVTdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gUGxhdGZvcm1TdXBwb3J0LmdldFBsYXRmb3JtKCkuZW1wdHlCeXRlU3RyaW5nO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBUT0RPKG1jZyk6IENoYW5nZSB0byBhIHN0cmluZyBlbnVtIG9uY2Ugd2UndmUgdXBncmFkZWQgdG8gdHlwZXNjcmlwdCAyLjQuXHJcbi8vICB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZSBJbnRlbmRlZCB0byBsb29rIGxpa2UgYSBUUyAyLjQgZW51bVxyXG52YXIgQ29kZSA9IHtcclxuICAgIC8vIENhdXNlcyBhcmUgY29waWVkIGZyb206XHJcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ3JwYy9ncnBjL2Jsb2IvYmNlZWM5NGVhNGZjNWYwMDg1ZDgxMjM1ZDhlMWMwNjc5OGRjMzQxYS9pbmNsdWRlL2dycGMlMkIlMkIvaW1wbC9jb2RlZ2VuL3N0YXR1c19jb2RlX2VudW0uaFxyXG4gICAgLyoqIE5vdCBhbiBlcnJvcjsgcmV0dXJuZWQgb24gc3VjY2Vzcy4gKi9cclxuICAgIE9LOiAnb2snLFxyXG4gICAgLyoqIFRoZSBvcGVyYXRpb24gd2FzIGNhbmNlbGxlZCAodHlwaWNhbGx5IGJ5IHRoZSBjYWxsZXIpLiAqL1xyXG4gICAgQ0FOQ0VMTEVEOiAnY2FuY2VsbGVkJyxcclxuICAgIC8qKiBVbmtub3duIGVycm9yIG9yIGFuIGVycm9yIGZyb20gYSBkaWZmZXJlbnQgZXJyb3IgZG9tYWluLiAqL1xyXG4gICAgVU5LTk9XTjogJ3Vua25vd24nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGllbnQgc3BlY2lmaWVkIGFuIGludmFsaWQgYXJndW1lbnQuIE5vdGUgdGhhdCB0aGlzIGRpZmZlcnMgZnJvbVxyXG4gICAgICogRkFJTEVEX1BSRUNPTkRJVElPTi4gSU5WQUxJRF9BUkdVTUVOVCBpbmRpY2F0ZXMgYXJndW1lbnRzIHRoYXQgYXJlXHJcbiAgICAgKiBwcm9ibGVtYXRpYyByZWdhcmRsZXNzIG9mIHRoZSBzdGF0ZSBvZiB0aGUgc3lzdGVtIChlLmcuLCBhIG1hbGZvcm1lZCBmaWxlXHJcbiAgICAgKiBuYW1lKS5cclxuICAgICAqL1xyXG4gICAgSU5WQUxJRF9BUkdVTUVOVDogJ2ludmFsaWQtYXJndW1lbnQnLFxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWFkbGluZSBleHBpcmVkIGJlZm9yZSBvcGVyYXRpb24gY291bGQgY29tcGxldGUuIEZvciBvcGVyYXRpb25zIHRoYXRcclxuICAgICAqIGNoYW5nZSB0aGUgc3RhdGUgb2YgdGhlIHN5c3RlbSwgdGhpcyBlcnJvciBtYXkgYmUgcmV0dXJuZWQgZXZlbiBpZiB0aGVcclxuICAgICAqIG9wZXJhdGlvbiBoYXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4gRm9yIGV4YW1wbGUsIGEgc3VjY2Vzc2Z1bCByZXNwb25zZVxyXG4gICAgICogZnJvbSBhIHNlcnZlciBjb3VsZCBoYXZlIGJlZW4gZGVsYXllZCBsb25nIGVub3VnaCBmb3IgdGhlIGRlYWRsaW5lIHRvXHJcbiAgICAgKiBleHBpcmUuXHJcbiAgICAgKi9cclxuICAgIERFQURMSU5FX0VYQ0VFREVEOiAnZGVhZGxpbmUtZXhjZWVkZWQnLFxyXG4gICAgLyoqIFNvbWUgcmVxdWVzdGVkIGVudGl0eSAoZS5nLiwgZmlsZSBvciBkaXJlY3RvcnkpIHdhcyBub3QgZm91bmQuICovXHJcbiAgICBOT1RfRk9VTkQ6ICdub3QtZm91bmQnLFxyXG4gICAgLyoqXHJcbiAgICAgKiBTb21lIGVudGl0eSB0aGF0IHdlIGF0dGVtcHRlZCB0byBjcmVhdGUgKGUuZy4sIGZpbGUgb3IgZGlyZWN0b3J5KSBhbHJlYWR5XHJcbiAgICAgKiBleGlzdHMuXHJcbiAgICAgKi9cclxuICAgIEFMUkVBRFlfRVhJU1RTOiAnYWxyZWFkeS1leGlzdHMnLFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgY2FsbGVyIGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiB0byBleGVjdXRlIHRoZSBzcGVjaWZpZWQgb3BlcmF0aW9uLlxyXG4gICAgICogUEVSTUlTU0lPTl9ERU5JRUQgbXVzdCBub3QgYmUgdXNlZCBmb3IgcmVqZWN0aW9ucyBjYXVzZWQgYnkgZXhoYXVzdGluZ1xyXG4gICAgICogc29tZSByZXNvdXJjZSAodXNlIFJFU09VUkNFX0VYSEFVU1RFRCBpbnN0ZWFkIGZvciB0aG9zZSBlcnJvcnMpLlxyXG4gICAgICogUEVSTUlTU0lPTl9ERU5JRUQgbXVzdCBub3QgYmUgdXNlZCBpZiB0aGUgY2FsbGVyIGNhbiBub3QgYmUgaWRlbnRpZmllZFxyXG4gICAgICogKHVzZSBVTkFVVEhFTlRJQ0FURUQgaW5zdGVhZCBmb3IgdGhvc2UgZXJyb3JzKS5cclxuICAgICAqL1xyXG4gICAgUEVSTUlTU0lPTl9ERU5JRUQ6ICdwZXJtaXNzaW9uLWRlbmllZCcsXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZXF1ZXN0IGRvZXMgbm90IGhhdmUgdmFsaWQgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgZm9yIHRoZVxyXG4gICAgICogb3BlcmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBVTkFVVEhFTlRJQ0FURUQ6ICd1bmF1dGhlbnRpY2F0ZWQnLFxyXG4gICAgLyoqXHJcbiAgICAgKiBTb21lIHJlc291cmNlIGhhcyBiZWVuIGV4aGF1c3RlZCwgcGVyaGFwcyBhIHBlci11c2VyIHF1b3RhLCBvciBwZXJoYXBzIHRoZVxyXG4gICAgICogZW50aXJlIGZpbGUgc3lzdGVtIGlzIG91dCBvZiBzcGFjZS5cclxuICAgICAqL1xyXG4gICAgUkVTT1VSQ0VfRVhIQVVTVEVEOiAncmVzb3VyY2UtZXhoYXVzdGVkJyxcclxuICAgIC8qKlxyXG4gICAgICogT3BlcmF0aW9uIHdhcyByZWplY3RlZCBiZWNhdXNlIHRoZSBzeXN0ZW0gaXMgbm90IGluIGEgc3RhdGUgcmVxdWlyZWQgZm9yXHJcbiAgICAgKiB0aGUgb3BlcmF0aW9uJ3MgZXhlY3V0aW9uLiBGb3IgZXhhbXBsZSwgZGlyZWN0b3J5IHRvIGJlIGRlbGV0ZWQgbWF5IGJlXHJcbiAgICAgKiBub24tZW1wdHksIGFuIHJtZGlyIG9wZXJhdGlvbiBpcyBhcHBsaWVkIHRvIGEgbm9uLWRpcmVjdG9yeSwgZXRjLlxyXG4gICAgICpcclxuICAgICAqIEEgbGl0bXVzIHRlc3QgdGhhdCBtYXkgaGVscCBhIHNlcnZpY2UgaW1wbGVtZW50b3IgaW4gZGVjaWRpbmdcclxuICAgICAqIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiwgQUJPUlRFRCwgYW5kIFVOQVZBSUxBQkxFOlxyXG4gICAgICogIChhKSBVc2UgVU5BVkFJTEFCTEUgaWYgdGhlIGNsaWVudCBjYW4gcmV0cnkganVzdCB0aGUgZmFpbGluZyBjYWxsLlxyXG4gICAgICogIChiKSBVc2UgQUJPUlRFRCBpZiB0aGUgY2xpZW50IHNob3VsZCByZXRyeSBhdCBhIGhpZ2hlci1sZXZlbFxyXG4gICAgICogICAgICAoZS5nLiwgcmVzdGFydGluZyBhIHJlYWQtbW9kaWZ5LXdyaXRlIHNlcXVlbmNlKS5cclxuICAgICAqICAoYykgVXNlIEZBSUxFRF9QUkVDT05ESVRJT04gaWYgdGhlIGNsaWVudCBzaG91bGQgbm90IHJldHJ5IHVudGlsXHJcbiAgICAgKiAgICAgIHRoZSBzeXN0ZW0gc3RhdGUgaGFzIGJlZW4gZXhwbGljaXRseSBmaXhlZC4gRS5nLiwgaWYgYW4gXCJybWRpclwiXHJcbiAgICAgKiAgICAgIGZhaWxzIGJlY2F1c2UgdGhlIGRpcmVjdG9yeSBpcyBub24tZW1wdHksIEZBSUxFRF9QUkVDT05ESVRJT05cclxuICAgICAqICAgICAgc2hvdWxkIGJlIHJldHVybmVkIHNpbmNlIHRoZSBjbGllbnQgc2hvdWxkIG5vdCByZXRyeSB1bmxlc3NcclxuICAgICAqICAgICAgdGhleSBoYXZlIGZpcnN0IGZpeGVkIHVwIHRoZSBkaXJlY3RvcnkgYnkgZGVsZXRpbmcgZmlsZXMgZnJvbSBpdC5cclxuICAgICAqICAoZCkgVXNlIEZBSUxFRF9QUkVDT05ESVRJT04gaWYgdGhlIGNsaWVudCBwZXJmb3JtcyBjb25kaXRpb25hbFxyXG4gICAgICogICAgICBSRVNUIEdldC9VcGRhdGUvRGVsZXRlIG9uIGEgcmVzb3VyY2UgYW5kIHRoZSByZXNvdXJjZSBvbiB0aGVcclxuICAgICAqICAgICAgc2VydmVyIGRvZXMgbm90IG1hdGNoIHRoZSBjb25kaXRpb24uIEUuZy4sIGNvbmZsaWN0aW5nXHJcbiAgICAgKiAgICAgIHJlYWQtbW9kaWZ5LXdyaXRlIG9uIHRoZSBzYW1lIHJlc291cmNlLlxyXG4gICAgICovXHJcbiAgICBGQUlMRURfUFJFQ09ORElUSU9OOiAnZmFpbGVkLXByZWNvbmRpdGlvbicsXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBvcGVyYXRpb24gd2FzIGFib3J0ZWQsIHR5cGljYWxseSBkdWUgdG8gYSBjb25jdXJyZW5jeSBpc3N1ZSBsaWtlXHJcbiAgICAgKiBzZXF1ZW5jZXIgY2hlY2sgZmFpbHVyZXMsIHRyYW5zYWN0aW9uIGFib3J0cywgZXRjLlxyXG4gICAgICpcclxuICAgICAqIFNlZSBsaXRtdXMgdGVzdCBhYm92ZSBmb3IgZGVjaWRpbmcgYmV0d2VlbiBGQUlMRURfUFJFQ09ORElUSU9OLCBBQk9SVEVELFxyXG4gICAgICogYW5kIFVOQVZBSUxBQkxFLlxyXG4gICAgICovXHJcbiAgICBBQk9SVEVEOiAnYWJvcnRlZCcsXHJcbiAgICAvKipcclxuICAgICAqIE9wZXJhdGlvbiB3YXMgYXR0ZW1wdGVkIHBhc3QgdGhlIHZhbGlkIHJhbmdlLiBFLmcuLCBzZWVraW5nIG9yIHJlYWRpbmdcclxuICAgICAqIHBhc3QgZW5kIG9mIGZpbGUuXHJcbiAgICAgKlxyXG4gICAgICogVW5saWtlIElOVkFMSURfQVJHVU1FTlQsIHRoaXMgZXJyb3IgaW5kaWNhdGVzIGEgcHJvYmxlbSB0aGF0IG1heSBiZSBmaXhlZFxyXG4gICAgICogaWYgdGhlIHN5c3RlbSBzdGF0ZSBjaGFuZ2VzLiBGb3IgZXhhbXBsZSwgYSAzMi1iaXQgZmlsZSBzeXN0ZW0gd2lsbFxyXG4gICAgICogZ2VuZXJhdGUgSU5WQUxJRF9BUkdVTUVOVCBpZiBhc2tlZCB0byByZWFkIGF0IGFuIG9mZnNldCB0aGF0IGlzIG5vdCBpbiB0aGVcclxuICAgICAqIHJhbmdlIFswLDJeMzItMV0sIGJ1dCBpdCB3aWxsIGdlbmVyYXRlIE9VVF9PRl9SQU5HRSBpZiBhc2tlZCB0byByZWFkIGZyb21cclxuICAgICAqIGFuIG9mZnNldCBwYXN0IHRoZSBjdXJyZW50IGZpbGUgc2l6ZS5cclxuICAgICAqXHJcbiAgICAgKiBUaGVyZSBpcyBhIGZhaXIgYml0IG9mIG92ZXJsYXAgYmV0d2VlbiBGQUlMRURfUFJFQ09ORElUSU9OIGFuZFxyXG4gICAgICogT1VUX09GX1JBTkdFLiBXZSByZWNvbW1lbmQgdXNpbmcgT1VUX09GX1JBTkdFICh0aGUgbW9yZSBzcGVjaWZpYyBlcnJvcilcclxuICAgICAqIHdoZW4gaXQgYXBwbGllcyBzbyB0aGF0IGNhbGxlcnMgd2hvIGFyZSBpdGVyYXRpbmcgdGhyb3VnaCBhIHNwYWNlIGNhblxyXG4gICAgICogZWFzaWx5IGxvb2sgZm9yIGFuIE9VVF9PRl9SQU5HRSBlcnJvciB0byBkZXRlY3Qgd2hlbiB0aGV5IGFyZSBkb25lLlxyXG4gICAgICovXHJcbiAgICBPVVRfT0ZfUkFOR0U6ICdvdXQtb2YtcmFuZ2UnLFxyXG4gICAgLyoqIE9wZXJhdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgb3Igbm90IHN1cHBvcnRlZC9lbmFibGVkIGluIHRoaXMgc2VydmljZS4gKi9cclxuICAgIFVOSU1QTEVNRU5URUQ6ICd1bmltcGxlbWVudGVkJyxcclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJuYWwgZXJyb3JzLiBNZWFucyBzb21lIGludmFyaWFudHMgZXhwZWN0ZWQgYnkgdW5kZXJseWluZyBTeXN0ZW0gaGFzXHJcbiAgICAgKiBiZWVuIGJyb2tlbi4gSWYgeW91IHNlZSBvbmUgb2YgdGhlc2UgZXJyb3JzLCBTb21ldGhpbmcgaXMgdmVyeSBicm9rZW4uXHJcbiAgICAgKi9cclxuICAgIElOVEVSTkFMOiAnaW50ZXJuYWwnLFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2VydmljZSBpcyBjdXJyZW50bHkgdW5hdmFpbGFibGUuIFRoaXMgaXMgYSBtb3N0IGxpa2VseSBhIHRyYW5zaWVudFxyXG4gICAgICogY29uZGl0aW9uIGFuZCBtYXkgYmUgY29ycmVjdGVkIGJ5IHJldHJ5aW5nIHdpdGggYSBiYWNrb2ZmLlxyXG4gICAgICpcclxuICAgICAqIFNlZSBsaXRtdXMgdGVzdCBhYm92ZSBmb3IgZGVjaWRpbmcgYmV0d2VlbiBGQUlMRURfUFJFQ09ORElUSU9OLCBBQk9SVEVELFxyXG4gICAgICogYW5kIFVOQVZBSUxBQkxFLlxyXG4gICAgICovXHJcbiAgICBVTkFWQUlMQUJMRTogJ3VuYXZhaWxhYmxlJyxcclxuICAgIC8qKiBVbnJlY292ZXJhYmxlIGRhdGEgbG9zcyBvciBjb3JydXB0aW9uLiAqL1xyXG4gICAgREFUQV9MT1NTOiAnZGF0YS1sb3NzJ1xyXG59O1xyXG4vKipcclxuICogQW4gZXJyb3IgY2xhc3MgdXNlZCBmb3IgRmlyZXN0b3JlLWdlbmVyYXRlZCBlcnJvcnMuIElkZWFsbHkgd2Ugc2hvdWxkIGJlXHJcbiAqIHVzaW5nIEZpcmViYXNlRXJyb3IsIGJ1dCBpbnRlZ3JhdGluZyB3aXRoIGl0IGlzIG92ZXJseSBhcmR1b3VzIGF0IHRoZSBtb21lbnQsXHJcbiAqIHNvIHdlIGRlZmluZSBvdXIgb3duIGNvbXBhdGlibGUgZXJyb3IgY2xhc3MgKHdpdGggYSBgbmFtZWAgb2YgJ0ZpcmViYXNlRXJyb3InXHJcbiAqIGFuZCBjb21wYXRpYmxlIGBjb2RlYCBhbmQgYG1lc3NhZ2VgIGZpZWxkcy4pXHJcbiAqL1xyXG52YXIgRmlyZXN0b3JlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGaXJlc3RvcmVFcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZpcmVzdG9yZUVycm9yKGNvZGUsIG1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIF90aGlzLm5hbWUgPSAnRmlyZWJhc2VFcnJvcic7XHJcbiAgICAgICAgLy8gSEFDSzogV2Ugd3JpdGUgYSB0b1N0cmluZyBwcm9wZXJ0eSBkaXJlY3RseSBiZWNhdXNlIEVycm9yIGlzIG5vdCBhIHJlYWxcclxuICAgICAgICAvLyBjbGFzcyBhbmQgc28gaW5oZXJpdGFuY2UgZG9lcyBub3Qgd29yayBjb3JyZWN0bHkuIFdlIGNvdWxkIGFsdGVybmF0aXZlbHlcclxuICAgICAgICAvLyBkbyB0aGUgc2FtZSBcImJhY2stZG9vciBpbmhlcml0YW5jZVwiIHRyaWNrIHRoYXQgRmlyZWJhc2VFcnJvciBkb2VzLlxyXG4gICAgICAgIF90aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMubmFtZSArIFwiOiBbY29kZT1cIiArIF90aGlzLmNvZGUgKyBcIl06IFwiICsgX3RoaXMubWVzc2FnZTsgfTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmlyZXN0b3JlRXJyb3I7XHJcbn0oRXJyb3IpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gcHJldmVudCBpbnN0YW50aWF0aW9uIHRocm91Z2ggdGhlIGNvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBUaGlzIG1ldGhvZCBjcmVhdGVzIGEgbmV3IGNvbnN0cnVjdG9yIHRoYXQgdGhyb3dzIHdoZW4gaXQncyBpbnZva2VkLlxyXG4gKiBUaGUgcHJvdG90eXBlIG9mIHRoYXQgY29uc3RydWN0b3IgaXMgdGhlbiBzZXQgdG8gdGhlIHByb3RvdHlwZSBvZiB0aGUgaGlkZGVuXHJcbiAqIFwiY2xhc3NcIiB0byBleHBvc2UgYWxsIHRoZSBwcm90b3R5cGUgbWV0aG9kcyBhbmQgYWxsb3cgZm9yIGluc3RhbmNlb2ZcclxuICogY2hlY2tzLlxyXG4gKlxyXG4gKiBUbyBhbHNvIG1ha2UgYWxsIHRoZSBzdGF0aWMgbWV0aG9kcyBhdmFpbGFibGUsIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZVxyXG4gKiBvcmlnaW5hbCBjb25zdHJ1Y3RvciBhcmUgY29waWVkIHRvIHRoZSBuZXcgY29uc3RydWN0b3IuXHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlQ29uc3RydWN0b3JQcml2YXRlKGNscywgb3B0aW9uYWxNZXNzYWdlKSB7XHJcbiAgICBmdW5jdGlvbiBQdWJsaWNDb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB2YXIgZXJyb3IgPSAnVGhpcyBjb25zdHJ1Y3RvciBpcyBwcml2YXRlLic7XHJcbiAgICAgICAgaWYgKG9wdGlvbmFsTWVzc2FnZSkge1xyXG4gICAgICAgICAgICBlcnJvciArPSAnICc7XHJcbiAgICAgICAgICAgIGVycm9yICs9IG9wdGlvbmFsTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgLy8gTWFrZSBzdXJlIGluc3RhbmNlb2YgY2hlY2tzIHdvcmsgYW5kIGFsbCBtZXRob2RzIGFyZSBleHBvc2VkIG9uIHRoZSBwdWJsaWNcclxuICAgIC8vIGNvbnN0cnVjdG9yXHJcbiAgICBQdWJsaWNDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjbHMucHJvdG90eXBlO1xyXG4gICAgLy8gQ29weSBhbnkgc3RhdGljIG1ldGhvZHMvbWVtYmVyc1xyXG4gICAgZm9yICh2YXIgc3RhdGljUHJvcGVydHkgaW4gY2xzKSB7XHJcbiAgICAgICAgaWYgKGNscy5oYXNPd25Qcm9wZXJ0eShzdGF0aWNQcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgUHVibGljQ29uc3RydWN0b3Jbc3RhdGljUHJvcGVydHldID0gY2xzW3N0YXRpY1Byb3BlcnR5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHVibGljQ29uc3RydWN0b3I7XHJcbn1cblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGNvbnRhaW5zKG9iaiwga2V5KSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcclxufVxyXG4vKiogUmV0dXJucyB0aGUgZ2l2ZW4gdmFsdWUgaWYgaXQncyBkZWZpbmVkIG9yIHRoZSBkZWZhdWx0VmFsdWUgb3RoZXJ3aXNlLiAqL1xyXG5mdW5jdGlvbiBkZWZhdWx0ZWQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcclxufVxyXG5mdW5jdGlvbiBmb3JFYWNoTnVtYmVyKG9iaiwgZm4pIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICB2YXIgbnVtID0gTnVtYmVyKGtleSk7XHJcbiAgICAgICAgICAgIGlmICghaXNOYU4obnVtKSkge1xyXG4gICAgICAgICAgICAgICAgZm4obnVtLCBvYmpba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICAgICAgZm4oa2V5LCBvYmpba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XHJcbiAgICBhc3NlcnQob2JqICE9IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcsICdpc0VtcHR5KCkgZXhwZWN0cyBvYmplY3QgcGFyYW1ldGVyLicpO1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBzaGFsbG93Q29weShvYmopIHtcclxuICAgIGFzc2VydChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcsICdzaGFsbG93Q29weSgpIGV4cGVjdHMgb2JqZWN0IHBhcmFtZXRlci4nKTtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIGludm9jYXRpb24gb2YgZnVuY3Rpb25OYW1lIGhhcyB0aGUgZXhhY3QgbnVtYmVyIG9mIGFyZ3VtZW50cy5cclxuICpcclxuICogRm9yd2FyZCB0aGUgbWFnaWMgXCJhcmd1bWVudHNcIiB2YXJpYWJsZSBhcyBzZWNvbmQgcGFyYW1ldGVyIG9uIHdoaWNoIHRoZVxyXG4gKiBwYXJhbWV0ZXIgdmFsaWRhdGlvbiBpcyBwZXJmb3JtZWQ6XHJcbiAqIHZhbGlkYXRlRXhhY3ROdW1iZXJPZkFyZ3MoJ215RnVuY3Rpb24nLCBhcmd1bWVudHMsIDIpO1xyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncyhmdW5jdGlvbk5hbWUsIGFyZ3MsIG51bWJlck9mQXJncykge1xyXG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9PSBudW1iZXJPZkFyZ3MpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgZnVuY3Rpb25OYW1lICsgXCIoKSByZXF1aXJlcyBcIiArXHJcbiAgICAgICAgICAgIGZvcm1hdFBsdXJhbChudW1iZXJPZkFyZ3MsICdhcmd1bWVudCcpICtcclxuICAgICAgICAgICAgJywgYnV0IHdhcyBjYWxsZWQgd2l0aCAnICtcclxuICAgICAgICAgICAgZm9ybWF0UGx1cmFsKGFyZ3MubGVuZ3RoLCAnYXJndW1lbnQnKSArXHJcbiAgICAgICAgICAgICcuJyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyB0aGUgaW52b2NhdGlvbiBvZiBmdW5jdGlvbk5hbWUgaGFzIGF0IGxlYXN0IHRoZSBwcm92aWRlZCBudW1iZXIgb2ZcclxuICogYXJndW1lbnRzIChidXQgY2FuIGhhdmUgbWFueSBtb3JlKS5cclxuICpcclxuICogRm9yd2FyZCB0aGUgbWFnaWMgXCJhcmd1bWVudHNcIiB2YXJpYWJsZSBhcyBzZWNvbmQgcGFyYW1ldGVyIG9uIHdoaWNoIHRoZVxyXG4gKiBwYXJhbWV0ZXIgdmFsaWRhdGlvbiBpcyBwZXJmb3JtZWQ6XHJcbiAqIHZhbGlkYXRlQXRMZWFzdE51bWJlck9mQXJncygnbXlGdW5jdGlvbicsIGFyZ3VtZW50cywgMik7XHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZUF0TGVhc3ROdW1iZXJPZkFyZ3MoZnVuY3Rpb25OYW1lLCBhcmdzLCBtaW5OdW1iZXJPZkFyZ3MpIHtcclxuICAgIGlmIChhcmdzLmxlbmd0aCA8IG1pbk51bWJlck9mQXJncykge1xyXG4gICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyBmdW5jdGlvbk5hbWUgKyBcIigpIHJlcXVpcmVzIGF0IGxlYXN0IFwiICtcclxuICAgICAgICAgICAgZm9ybWF0UGx1cmFsKG1pbk51bWJlck9mQXJncywgJ2FyZ3VtZW50JykgK1xyXG4gICAgICAgICAgICAnLCBidXQgd2FzIGNhbGxlZCB3aXRoICcgK1xyXG4gICAgICAgICAgICBmb3JtYXRQbHVyYWwoYXJncy5sZW5ndGgsICdhcmd1bWVudCcpICtcclxuICAgICAgICAgICAgJy4nKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBpbnZvY2F0aW9uIG9mIGZ1bmN0aW9uTmFtZSBoYXMgbnVtYmVyIG9mIGFyZ3VtZW50cyBiZXR3ZWVuXHJcbiAqIHRoZSB2YWx1ZXMgcHJvdmlkZWQuXHJcbiAqXHJcbiAqIEZvcndhcmQgdGhlIG1hZ2ljIFwiYXJndW1lbnRzXCIgdmFyaWFibGUgYXMgc2Vjb25kIHBhcmFtZXRlciBvbiB3aGljaCB0aGVcclxuICogcGFyYW1ldGVyIHZhbGlkYXRpb24gaXMgcGVyZm9ybWVkOlxyXG4gKiB2YWxpZGF0ZUJldHdlZW5OdW1iZXJPZkFyZ3MoJ215RnVuY3Rpb24nLCBhcmd1bWVudHMsIDIsIDMpO1xyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVCZXR3ZWVuTnVtYmVyT2ZBcmdzKGZ1bmN0aW9uTmFtZSwgYXJncywgbWluTnVtYmVyT2ZBcmdzLCBtYXhOdW1iZXJPZkFyZ3MpIHtcclxuICAgIGlmIChhcmdzLmxlbmd0aCA8IG1pbk51bWJlck9mQXJncyB8fCBhcmdzLmxlbmd0aCA+IG1heE51bWJlck9mQXJncykge1xyXG4gICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyBmdW5jdGlvbk5hbWUgKyBcIigpIHJlcXVpcmVzIGJldHdlZW4gXCIgKyBtaW5OdW1iZXJPZkFyZ3MgKyBcIiBhbmQgXCIgK1xyXG4gICAgICAgICAgICAobWF4TnVtYmVyT2ZBcmdzICsgXCIgYXJndW1lbnRzLCBidXQgd2FzIGNhbGxlZCB3aXRoIFwiKSArXHJcbiAgICAgICAgICAgIGZvcm1hdFBsdXJhbChhcmdzLmxlbmd0aCwgJ2FyZ3VtZW50JykgK1xyXG4gICAgICAgICAgICAnLicpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHByb3ZpZGVkIGFyZ3VtZW50IGlzIGFuIGFycmF5IGFuZCBoYXMgYXMgbGVhc3QgdGhlIGV4cGVjdGVkXHJcbiAqIG51bWJlciBvZiBlbGVtZW50cy5cclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlTmFtZWRBcnJheUF0TGVhc3ROdW1iZXJPZkVsZW1lbnRzKGZ1bmN0aW9uTmFtZSwgdmFsdWUsIG5hbWUsIG1pbk51bWJlck9mRWxlbWVudHMpIHtcclxuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHx8IHZhbHVlLmxlbmd0aCA8IG1pbk51bWJlck9mRWxlbWVudHMpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgZnVuY3Rpb25OYW1lICsgXCIoKSByZXF1aXJlcyBpdHMgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgdG8gYmUgYW4gXCIgK1xyXG4gICAgICAgICAgICAnYXJyYXkgd2l0aCBhdCBsZWFzdCAnICtcclxuICAgICAgICAgICAgKGZvcm1hdFBsdXJhbChtaW5OdW1iZXJPZkVsZW1lbnRzLCAnZWxlbWVudCcpICsgXCIuXCIpKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBwcm92aWRlZCBwb3NpdGlvbmFsIGFyZ3VtZW50IGhhcyB0aGUgbmF0aXZlIEphdmFTY3JpcHQgdHlwZVxyXG4gKiB1c2luZyB0eXBlb2YgY2hlY2tzLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVBcmdUeXBlKGZ1bmN0aW9uTmFtZSwgdHlwZSwgcG9zaXRpb24sIGFyZ3VtZW50KSB7XHJcbiAgICB2YWxpZGF0ZVR5cGUoZnVuY3Rpb25OYW1lLCB0eXBlLCBvcmRpbmFsKHBvc2l0aW9uKSArIFwiIGFyZ3VtZW50XCIsIGFyZ3VtZW50KTtcclxufVxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBwcm92aWRlZCBhcmd1bWVudCBoYXMgdGhlIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGUgdXNpbmdcclxuICogdHlwZW9mIGNoZWNrcyBvciBpcyB1bmRlZmluZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbmFsQXJnVHlwZShmdW5jdGlvbk5hbWUsIHR5cGUsIHBvc2l0aW9uLCBhcmd1bWVudCkge1xyXG4gICAgaWYgKGFyZ3VtZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ1R5cGUoZnVuY3Rpb25OYW1lLCB0eXBlLCBwb3NpdGlvbiwgYXJndW1lbnQpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHByb3ZpZGVkIG5hbWVkIG9wdGlvbiBoYXMgdGhlIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGUgdXNpbmdcclxuICogdHlwZW9mIGNoZWNrcy5cclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlTmFtZWRUeXBlKGZ1bmN0aW9uTmFtZSwgdHlwZSwgb3B0aW9uTmFtZSwgYXJndW1lbnQpIHtcclxuICAgIHZhbGlkYXRlVHlwZShmdW5jdGlvbk5hbWUsIHR5cGUsIG9wdGlvbk5hbWUgKyBcIiBvcHRpb25cIiwgYXJndW1lbnQpO1xyXG59XHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHByb3ZpZGVkIG5hbWVkIG9wdGlvbiBoYXMgdGhlIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGUgdXNpbmdcclxuICogdHlwZW9mIGNoZWNrcyBvciBpcyB1bmRlZmluZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZU5hbWVkT3B0aW9uYWxUeXBlKGZ1bmN0aW9uTmFtZSwgdHlwZSwgb3B0aW9uTmFtZSwgYXJndW1lbnQpIHtcclxuICAgIGlmIChhcmd1bWVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsaWRhdGVOYW1lZFR5cGUoZnVuY3Rpb25OYW1lLCB0eXBlLCBvcHRpb25OYW1lLCBhcmd1bWVudCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVBcnJheUVsZW1lbnRzKGZ1bmN0aW9uTmFtZSwgb3B0aW9uTmFtZSwgdHlwZURlc2NyaXB0aW9uLCBhcmd1bWVudCwgdmFsaWRhdG9yKSB7XHJcbiAgICBpZiAoIShhcmd1bWVudCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyBmdW5jdGlvbk5hbWUgKyBcIigpIHJlcXVpcmVzIGl0cyBcIiArIG9wdGlvbk5hbWUgKyBcIiBcIiArXHJcbiAgICAgICAgICAgIChcIm9wdGlvbiB0byBiZSBhbiBhcnJheSwgYnV0IGl0IHdhczogXCIgKyB2YWx1ZURlc2NyaXB0aW9uKGFyZ3VtZW50KSkpO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudC5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGlmICghdmFsaWRhdG9yKGFyZ3VtZW50W2ldKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgZnVuY3Rpb25OYW1lICsgXCIoKSByZXF1aXJlcyBhbGwgXCIgKyBvcHRpb25OYW1lICsgXCIgXCIgK1xyXG4gICAgICAgICAgICAgICAgKFwiZWxlbWVudHMgdG8gYmUgXCIgKyB0eXBlRGVzY3JpcHRpb24gKyBcIiwgYnV0IHRoZSB2YWx1ZSBhdCBpbmRleCBcIiArIGkgKyBcIiBcIikgK1xyXG4gICAgICAgICAgICAgICAgKFwid2FzOiBcIiArIHZhbHVlRGVzY3JpcHRpb24oYXJndW1lbnRbaV0pKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9uYWxBcnJheUVsZW1lbnRzKGZ1bmN0aW9uTmFtZSwgb3B0aW9uTmFtZSwgdHlwZURlc2NyaXB0aW9uLCBhcmd1bWVudCwgdmFsaWRhdG9yKSB7XHJcbiAgICBpZiAoYXJndW1lbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJyYXlFbGVtZW50cyhmdW5jdGlvbk5hbWUsIG9wdGlvbk5hbWUsIHR5cGVEZXNjcmlwdGlvbiwgYXJndW1lbnQsIHZhbGlkYXRvcik7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyB0aGF0IHRoZSBwcm92aWRlZCBuYW1lZCBvcHRpb24gZXF1YWxzIG9uZSBvZiB0aGUgZXhwZWN0ZWQgdmFsdWVzLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lZFByb3BlcnR5RXF1YWxzKGZ1bmN0aW9uTmFtZSwgaW5wdXROYW1lLCBvcHRpb25OYW1lLCBpbnB1dCwgZXhwZWN0ZWQpIHtcclxuICAgIHZhciBleHBlY3RlZERlc2NyaXB0aW9uID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGV4cGVjdGVkXzEgPSBleHBlY3RlZDsgX2kgPCBleHBlY3RlZF8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciB2YWwgPSBleHBlY3RlZF8xW19pXTtcclxuICAgICAgICBpZiAodmFsID09PSBpbnB1dCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4cGVjdGVkRGVzY3JpcHRpb24ucHVzaCh2YWx1ZURlc2NyaXB0aW9uKHZhbCkpO1xyXG4gICAgfVxyXG4gICAgdmFyIGFjdHVhbERlc2NyaXB0aW9uID0gdmFsdWVEZXNjcmlwdGlvbihpbnB1dCk7XHJcbiAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgdmFsdWUgXCIgKyBhY3R1YWxEZXNjcmlwdGlvbiArIFwiIHByb3ZpZGVkIHRvIGZ1bmN0aW9uIFwiICsgZnVuY3Rpb25OYW1lICsgXCIoKSBmb3Igb3B0aW9uIFwiICtcclxuICAgICAgICAoXCJcXFwiXCIgKyBvcHRpb25OYW1lICsgXCJcXFwiLiBBY2NlcHRhYmxlIHZhbHVlczogXCIgKyBleHBlY3RlZERlc2NyaXB0aW9uLmpvaW4oJywgJykpKTtcclxufVxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoYXQgdGhlIHByb3ZpZGVkIG5hbWVkIG9wdGlvbiBlcXVhbHMgb25lIG9mIHRoZSBleHBlY3RlZCB2YWx1ZXMgb3JcclxuICogaXMgdW5kZWZpbmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lZE9wdGlvbmFsUHJvcGVydHlFcXVhbHMoZnVuY3Rpb25OYW1lLCBpbnB1dE5hbWUsIG9wdGlvbk5hbWUsIGlucHV0LCBleHBlY3RlZCkge1xyXG4gICAgaWYgKGlucHV0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YWxpZGF0ZU5hbWVkUHJvcGVydHlFcXVhbHMoZnVuY3Rpb25OYW1lLCBpbnB1dE5hbWUsIG9wdGlvbk5hbWUsIGlucHV0LCBleHBlY3RlZCk7XHJcbiAgICB9XHJcbn1cclxuLyoqIEhlbHBlciB0byB2YWxpZGF0ZSB0aGUgdHlwZSBvZiBhIHByb3ZpZGVkIGlucHV0LiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZVR5cGUoZnVuY3Rpb25OYW1lLCB0eXBlLCBpbnB1dE5hbWUsIGlucHV0KSB7XHJcbiAgICB2YXIgdmFsaWQgPSBmYWxzZTtcclxuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdChpbnB1dCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlID09PSAnbm9uLWVtcHR5IHN0cmluZycpIHtcclxuICAgICAgICB2YWxpZCA9IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgaW5wdXQgIT09ICcnO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFsaWQgPSB0eXBlb2YgaW5wdXQgPT09IHR5cGU7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZhbGlkKSB7XHJcbiAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gdmFsdWVEZXNjcmlwdGlvbihpbnB1dCk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgXCJGdW5jdGlvbiBcIiArIGZ1bmN0aW9uTmFtZSArIFwiKCkgcmVxdWlyZXMgaXRzIFwiICsgaW5wdXROYW1lICsgXCIgXCIgK1xyXG4gICAgICAgICAgICAoXCJ0byBiZSBvZiB0eXBlIFwiICsgdHlwZSArIFwiLCBidXQgaXQgd2FzOiBcIiArIGRlc2NyaXB0aW9uKSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiBpdCdzIGEgbm9uLW51bGwgb2JqZWN0IHdpdGhvdXQgYSBjdXN0b20gcHJvdG90eXBlXHJcbiAqIChpLmUuIGV4Y2x1ZGVzIEFycmF5LCBEYXRlLCBldGMuKS5cclxuICovXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaW5wdXQpIHtcclxuICAgIHJldHVybiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgIGlucHV0ICE9PSBudWxsICYmXHJcbiAgICAgICAgKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnB1dCkgPT09IE9iamVjdC5wcm90b3R5cGUgfHxcclxuICAgICAgICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKGlucHV0KSA9PT0gbnVsbCkpO1xyXG59XHJcbi8qKiBSZXR1cm5zIGEgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHR5cGUgLyB2YWx1ZSBvZiB0aGUgcHJvdmlkZWQgaW5wdXQuICovXHJcbmZ1bmN0aW9uIHZhbHVlRGVzY3JpcHRpb24oaW5wdXQpIHtcclxuICAgIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaW5wdXQgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gJ251bGwnO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiAyMCkge1xyXG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnN1YnN0cmluZygwLCAyMCkgKyBcIi4uLlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgIHJldHVybiAnJyArIGlucHV0O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnYW4gYXJyYXknO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGN1c3RvbU9iamVjdE5hbWUgPSB0cnlHZXRDdXN0b21PYmplY3RUeXBlKGlucHV0KTtcclxuICAgICAgICAgICAgaWYgKGN1c3RvbU9iamVjdE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImEgY3VzdG9tIFwiICsgY3VzdG9tT2JqZWN0TmFtZSArIFwiIG9iamVjdFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdhbiBvYmplY3QnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcmV0dXJuICdhIGZ1bmN0aW9uJztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWlsKCdVbmtub3duIHdyb25nIHR5cGU6ICcgKyB0eXBlb2YgaW5wdXQpO1xyXG4gICAgfVxyXG59XHJcbi8qKiBIYWNreSBtZXRob2QgdG8gdHJ5IHRvIGdldCB0aGUgY29uc3RydWN0b3IgbmFtZSBmb3IgYW4gb2JqZWN0LiAqL1xyXG5mdW5jdGlvbiB0cnlHZXRDdXN0b21PYmplY3RUeXBlKGlucHV0KSB7XHJcbiAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IpIHtcclxuICAgICAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccysoW15cXHMoXSspXFxzKlxcKC87XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBmdW5jTmFtZVJlZ2V4LmV4ZWMoaW5wdXQuY29uc3RydWN0b3IudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgaWYgKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzWzFdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbi8qKiBWYWxpZGF0ZXMgdGhlIHByb3ZpZGVkIGFyZ3VtZW50IGlzIGRlZmluZWQuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlRGVmaW5lZChmdW5jdGlvbk5hbWUsIHBvc2l0aW9uLCBhcmd1bWVudCkge1xyXG4gICAgaWYgKGFyZ3VtZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgZnVuY3Rpb25OYW1lICsgXCIoKSByZXF1aXJlcyBhIHZhbGlkIFwiICsgb3JkaW5hbChwb3NpdGlvbikgKyBcIiBcIiArXHJcbiAgICAgICAgICAgIFwiYXJndW1lbnQsIGJ1dCBpdCB3YXMgdW5kZWZpbmVkLlwiKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBwcm92aWRlZCBwb3NpdGlvbmFsIGFyZ3VtZW50IGlzIGFuIG9iamVjdCwgYW5kIGl0cyBrZXlzIGFuZFxyXG4gKiB2YWx1ZXMgbWF0Y2ggdGhlIGV4cGVjdGVkIGtleXMgYW5kIHR5cGVzIHByb3ZpZGVkIGluIG9wdGlvblR5cGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25OYW1lcyhmdW5jdGlvbk5hbWUsIG9wdGlvbnMsIG9wdGlvbk5hbWVzKSB7XHJcbiAgICBmb3JFYWNoKG9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIF8pIHtcclxuICAgICAgICBpZiAob3B0aW9uTmFtZXMuaW5kZXhPZihrZXkpIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIlVua25vd24gb3B0aW9uICdcIiArIGtleSArIFwiJyBwYXNzZWQgdG8gZnVuY3Rpb24gXCIgKyBmdW5jdGlvbk5hbWUgKyBcIigpLiBcIiArXHJcbiAgICAgICAgICAgICAgICAnQXZhaWxhYmxlIG9wdGlvbnM6ICcgK1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uTmFtZXMuam9pbignLCAnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIEhlbHBlciBtZXRob2QgdG8gdGhyb3cgYW4gZXJyb3IgdGhhdCB0aGUgcHJvdmlkZWQgYXJndW1lbnQgZGlkIG5vdCBwYXNzXHJcbiAqIGFuIGluc3RhbmNlb2YgY2hlY2suXHJcbiAqL1xyXG5mdW5jdGlvbiBpbnZhbGlkQ2xhc3NFcnJvcihmdW5jdGlvbk5hbWUsIHR5cGUsIHBvc2l0aW9uLCBhcmd1bWVudCkge1xyXG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdmFsdWVEZXNjcmlwdGlvbihhcmd1bWVudCk7XHJcbiAgICByZXR1cm4gbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgXCJGdW5jdGlvbiBcIiArIGZ1bmN0aW9uTmFtZSArIFwiKCkgcmVxdWlyZXMgaXRzIFwiICsgb3JkaW5hbChwb3NpdGlvbikgKyBcIiBcIiArXHJcbiAgICAgICAgKFwiYXJndW1lbnQgdG8gYmUgYSBcIiArIHR5cGUgKyBcIiwgYnV0IGl0IHdhczogXCIgKyBkZXNjcmlwdGlvbikpO1xyXG59XHJcbi8qKiBDb252ZXJ0cyBhIG51bWJlciB0byBpdHMgZW5nbGlzaCB3b3JkIHJlcHJlc2VudGF0aW9uICovXHJcbmZ1bmN0aW9uIG9yZGluYWwobnVtKSB7XHJcbiAgICBzd2l0Y2ggKG51bSkge1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgcmV0dXJuICdmaXJzdCc7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICByZXR1cm4gJ3NlY29uZCc7XHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICByZXR1cm4gJ3RoaXJkJztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gbnVtICsgJ3RoJztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRm9ybWF0cyB0aGUgZ2l2ZW4gd29yZCBhcyBwbHVyYWwgY29uZGl0aW9uYWxseSBnaXZlbiB0aGUgcHJlY2VkaW5nIG51bWJlci5cclxuICovXHJcbmZ1bmN0aW9uIGZvcm1hdFBsdXJhbChudW0sIHN0cikge1xyXG4gICAgcmV0dXJuIG51bSArIFwiIFwiICsgc3RyICsgKG51bSA9PT0gMSA/ICcnIDogJ3MnKTtcclxufVxuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNsYXNzLWFzLW5hbWVzcGFjZVxyXG52YXIgQXV0b0lkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXV0b0lkKCkge1xyXG4gICAgfVxyXG4gICAgQXV0b0lkLm5ld0lkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIEFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzXHJcbiAgICAgICAgdmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcclxuICAgICAgICB2YXIgYXV0b0lkID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGF1dG9JZCArPSBjaGFycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcnMubGVuZ3RoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFzc2VydChhdXRvSWQubGVuZ3RoID09PSAyMCwgJ0ludmFsaWQgYXV0byBJRDogJyArIGF1dG9JZCk7XHJcbiAgICAgICAgcmV0dXJuIGF1dG9JZDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQXV0b0lkO1xyXG59KCkpO1xyXG5mdW5jdGlvbiBwcmltaXRpdmVDb21wYXJhdG9yKGxlZnQsIHJpZ2h0KSB7XHJcbiAgICBpZiAobGVmdCA8IHJpZ2h0KVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIGlmIChsZWZ0ID4gcmlnaHQpXHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICByZXR1cm4gMDtcclxufVxyXG4vKiogSGVscGVyIHRvIGNvbXBhcmUgbnVsbGFibGUgKG9yIHVuZGVmaW5lZC1hYmxlKSBvYmplY3RzIHVzaW5nIGlzRXF1YWwoKS4gKi9cclxuZnVuY3Rpb24gZXF1YWxzKGxlZnQsIHJpZ2h0KSB7XHJcbiAgICBpZiAobGVmdCAhPT0gbnVsbCAmJiBsZWZ0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gISEocmlnaHQgJiYgbGVmdC5pc0VxdWFsKHJpZ2h0KSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBIQUNLOiBFeHBsaWNpdGx5IGNhc3Qgc2luY2UgVHlwZVNjcmlwdCdzIHR5cGUgbmFycm93aW5nIGFwcGFyZW50bHkgaXNuJ3RcclxuICAgICAgICAvLyBzbWFydCBlbm91Z2guXHJcbiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0O1xyXG4gICAgfVxyXG59XHJcbi8qKiBIZWxwZXIgdG8gY29tcGFyZSBhcnJheXMgdXNpbmcgaXNFcXVhbCgpLiAqL1xyXG5mdW5jdGlvbiBhcnJheUVxdWFscyhsZWZ0LCByaWdodCkge1xyXG4gICAgaWYgKGxlZnQubGVuZ3RoICE9PSByaWdodC5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlZnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoIWxlZnRbaV0uaXNFcXVhbChyaWdodFtpXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbW1lZGlhdGUgbGV4aWNvZ3JhcGhpY2FsbHktZm9sbG93aW5nIHN0cmluZy4gVGhpcyBpcyB1c2VmdWwgdG9cclxuICogY29uc3RydWN0IGFuIGluY2x1c2l2ZSByYW5nZSBmb3IgaW5kZXhlZGRiIGl0ZXJhdG9ycy5cclxuICovXHJcbmZ1bmN0aW9uIGltbWVkaWF0ZVN1Y2Nlc3NvcihzKSB7XHJcbiAgICAvLyBSZXR1cm4gdGhlIGlucHV0IHN0cmluZywgd2l0aCBhbiBhZGRpdGlvbmFsIE5VTCBieXRlIGFwcGVuZGVkLlxyXG4gICAgcmV0dXJuIHMgKyAnXFwwJztcclxufVxuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIEhlbHBlciBmdW5jdGlvbiB0byBhc3NlcnQgVWludDhBcnJheSBpcyBhdmFpbGFibGUgYXQgcnVudGltZS4gKi9cclxuZnVuY3Rpb24gYXNzZXJ0VWludDhBcnJheUF2YWlsYWJsZSgpIHtcclxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5VTklNUExFTUVOVEVELCAnVWludDhBcnJheXMgYXJlIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudC4nKTtcclxuICAgIH1cclxufVxyXG4vKiogSGVscGVyIGZ1bmN0aW9uIHRvIGFzc2VydCBCYXNlNjQgZnVuY3Rpb25zIGFyZSBhdmFpbGFibGUgYXQgcnVudGltZS4gKi9cclxuZnVuY3Rpb24gYXNzZXJ0QmFzZTY0QXZhaWxhYmxlKCkge1xyXG4gICAgaWYgKCFQbGF0Zm9ybVN1cHBvcnQuZ2V0UGxhdGZvcm0oKS5iYXNlNjRBdmFpbGFibGUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5VTklNUExFTUVOVEVELCAnQmxvYnMgYXJlIHVuYXZhaWxhYmxlIGluIEZpcmVzdG9yZSBpbiB0aGlzIGVudmlyb25tZW50LicpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBJbW11dGFibGUgY2xhc3MgaG9sZGluZyBhIGJsb2IgKGJpbmFyeSBkYXRhKS5cclxuICogVGhpcyBjbGFzcyBpcyBkaXJlY3RseSBleHBvc2VkIGluIHRoZSBwdWJsaWMgQVBJLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgd2hpbGUgeW91IGNhbid0IGhpZGUgdGhlIGNvbnN0cnVjdG9yIGluIEphdmFTY3JpcHQgY29kZSwgd2UgYXJlXHJcbiAqIHVzaW5nIHRoZSBoYWNrIGFib3ZlIHRvIG1ha2Ugc3VyZSBuby1vbmUgb3V0c2lkZSB0aGlzIG1vZHVsZSBjYW4gY2FsbCBpdC5cclxuICovXHJcbnZhciBCbG9iID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQmxvYihiaW5hcnlTdHJpbmcpIHtcclxuICAgICAgICBhc3NlcnRCYXNlNjRBdmFpbGFibGUoKTtcclxuICAgICAgICB0aGlzLl9iaW5hcnlTdHJpbmcgPSBiaW5hcnlTdHJpbmc7XHJcbiAgICB9XHJcbiAgICBCbG9iLmZyb21CYXNlNjRTdHJpbmcgPSBmdW5jdGlvbiAoYmFzZTY0KSB7XHJcbiAgICAgICAgdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncygnQmxvYi5mcm9tQmFzZTY0U3RyaW5nJywgYXJndW1lbnRzLCAxKTtcclxuICAgICAgICB2YWxpZGF0ZUFyZ1R5cGUoJ0Jsb2IuZnJvbUJhc2U2NFN0cmluZycsICdzdHJpbmcnLCAxLCBiYXNlNjQpO1xyXG4gICAgICAgIGFzc2VydEJhc2U2NEF2YWlsYWJsZSgpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBiaW5hcnlTdHJpbmcgPSBQbGF0Zm9ybVN1cHBvcnQuZ2V0UGxhdGZvcm0oKS5hdG9iKGJhc2U2NCk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQmxvYihiaW5hcnlTdHJpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnRmFpbGVkIHRvIGNvbnN0cnVjdCBCbG9iIGZyb20gQmFzZTY0IHN0cmluZzogJyArIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCbG9iLmZyb21VaW50OEFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XHJcbiAgICAgICAgdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncygnQmxvYi5mcm9tVWludDhBcnJheScsIGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgYXNzZXJ0VWludDhBcnJheUF2YWlsYWJsZSgpO1xyXG4gICAgICAgIGlmICghKGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgaW52YWxpZENsYXNzRXJyb3IoJ0Jsb2IuZnJvbVVpbnQ4QXJyYXknLCAnVWludDhBcnJheScsIDEsIGFycmF5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gV2UgY2FuJ3QgY2FsbCBhcnJheS5tYXAgZGlyZWN0bHkgYmVjYXVzZSBpdCBleHBlY3RzIHRoZSByZXR1cm4gdHlwZSB0b1xyXG4gICAgICAgIC8vIGJlIGEgVWludDhBcnJheSwgd2hlcmVhcyB3ZSBjYW4gY29udmVydCBpdCB0byBhIHJlZ3VsYXIgYXJyYXkgYnkgaW52b2tpbmdcclxuICAgICAgICAvLyBtYXAgb24gdGhlIEFycmF5IHByb3RvdHlwZS5cclxuICAgICAgICB2YXIgYmluYXJ5U3RyaW5nID0gQXJyYXkucHJvdG90eXBlLm1hcFxyXG4gICAgICAgICAgICAuY2FsbChhcnJheSwgZnVuY3Rpb24gKGNoYXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhcik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmpvaW4oJycpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmxvYihiaW5hcnlTdHJpbmcpO1xyXG4gICAgfTtcclxuICAgIEJsb2IucHJvdG90eXBlLnRvQmFzZTY0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlRXhhY3ROdW1iZXJPZkFyZ3MoJ0Jsb2IudG9CYXNlNjQnLCBhcmd1bWVudHMsIDApO1xyXG4gICAgICAgIGFzc2VydEJhc2U2NEF2YWlsYWJsZSgpO1xyXG4gICAgICAgIHJldHVybiBQbGF0Zm9ybVN1cHBvcnQuZ2V0UGxhdGZvcm0oKS5idG9hKHRoaXMuX2JpbmFyeVN0cmluZyk7XHJcbiAgICB9O1xyXG4gICAgQmxvYi5wcm90b3R5cGUudG9VaW50OEFycmF5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlRXhhY3ROdW1iZXJPZkFyZ3MoJ0Jsb2IudG9VaW50OEFycmF5JywgYXJndW1lbnRzLCAwKTtcclxuICAgICAgICBhc3NlcnRVaW50OEFycmF5QXZhaWxhYmxlKCk7XHJcbiAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2JpbmFyeVN0cmluZy5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fYmluYXJ5U3RyaW5nLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltpXSA9IHRoaXMuX2JpbmFyeVN0cmluZy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnVmZmVyO1xyXG4gICAgfTtcclxuICAgIEJsb2IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnQmxvYihiYXNlNjQ6ICcgKyB0aGlzLnRvQmFzZTY0KCkgKyAnKSc7XHJcbiAgICB9O1xyXG4gICAgQmxvYi5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5hcnlTdHJpbmcgPT09IG90aGVyLl9iaW5hcnlTdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBY3R1YWxseSBwcml2YXRlIHRvIEpTIGNvbnN1bWVycyBvZiBvdXIgQVBJLCBzbyB0aGlzIGZ1bmN0aW9uIGlzIHByZWZpeGVkXHJcbiAgICAgKiB3aXRoIGFuIHVuZGVyc2NvcmUuXHJcbiAgICAgKi9cclxuICAgIEJsb2IucHJvdG90eXBlLl9jb21wYXJlVG8gPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gcHJpbWl0aXZlQ29tcGFyYXRvcih0aGlzLl9iaW5hcnlTdHJpbmcsIG90aGVyLl9iaW5hcnlTdHJpbmcpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCbG9iO1xyXG59KCkpO1xyXG4vLyBQdWJsaWMgaW5zdGFuY2UgdGhhdCBkaXNhbGxvd3MgY29uc3RydWN0aW9uIGF0IHJ1bnRpbWUuIFRoaXMgY29uc3RydWN0b3IgaXNcclxuLy8gdXNlZCB3aGVuIGV4cG9ydGluZyBCbG9iIG9uIGZpcmViYXNlLmZpcmVzdG9yZS5CbG9iIGFuZCB3aWxsIGJlIGNhbGxlZCBCbG9iXHJcbi8vIHB1YmxpY2x5LiBJbnRlcm5hbGx5IHdlIHN0aWxsIHVzZSBCbG9iIHdoaWNoIGhhcyBhIHR5cGUgY2hlY2tlZCBwcml2YXRlXHJcbi8vIGNvbnN0cnVjdG9yLiBOb3RlIHRoYXQgQmxvYiBhbmQgUHVibGljQmxvYiBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgaW5cclxuLy8gaW5zdGFuY2VvZiBjaGVja3MuXHJcbi8vIEZvciBvdXIgaW50ZXJuYWwgVHlwZVNjcmlwdCBjb2RlIFB1YmxpY0Jsb2IgZG9lc24ndCBleGlzdCBhcyBhIHR5cGUsIGFuZCBzb1xyXG4vLyB3ZSBuZWVkIHRvIHVzZSBCbG9iIGFzIHR5cGUgYW5kIGV4cG9ydCBpdCB0b28uXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lIFdlJ3JlIHRyZWF0aW5nIHRoaXMgYXMgYSBjbGFzcyBuYW1lLlxyXG52YXIgUHVibGljQmxvYiA9IG1ha2VDb25zdHJ1Y3RvclByaXZhdGUoQmxvYiwgJ1VzZSBCbG9iLmZyb21VaW50OEFycmF5KCkgb3IgQmxvYi5mcm9tQmFzZTY0U3RyaW5nKCkgaW5zdGVhZC4nKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBJbW11dGFibGUgY2xhc3MgcmVwcmVzZW50aW5nIGEgZ2VvIHBvaW50IGFzIGxhdGl0dWRlLWxvbmdpdHVkZSBwYWlyLlxyXG4gKiBUaGlzIGNsYXNzIGlzIGRpcmVjdGx5IGV4cG9zZWQgaW4gdGhlIHB1YmxpYyBBUEksIGluY2x1ZGluZyBpdHMgY29uc3RydWN0b3IuXHJcbiAqL1xyXG52YXIgR2VvUG9pbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBHZW9Qb2ludChsYXRpdHVkZSwgbG9uZ2l0dWRlKSB7XHJcbiAgICAgICAgdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncygnR2VvUG9pbnQnLCBhcmd1bWVudHMsIDIpO1xyXG4gICAgICAgIHZhbGlkYXRlQXJnVHlwZSgnR2VvUG9pbnQnLCAnbnVtYmVyJywgMSwgbGF0aXR1ZGUpO1xyXG4gICAgICAgIHZhbGlkYXRlQXJnVHlwZSgnR2VvUG9pbnQnLCAnbnVtYmVyJywgMiwgbG9uZ2l0dWRlKTtcclxuICAgICAgICBpZiAoIWlzRmluaXRlKGxhdGl0dWRlKSB8fCBsYXRpdHVkZSA8IC05MCB8fCBsYXRpdHVkZSA+IDkwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdMYXRpdHVkZSBtdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gLTkwIGFuZCA5MCwgYnV0IHdhczogJyArIGxhdGl0dWRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc0Zpbml0ZShsb25naXR1ZGUpIHx8IGxvbmdpdHVkZSA8IC0xODAgfHwgbG9uZ2l0dWRlID4gMTgwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdMb25naXR1ZGUgbXVzdCBiZSBhIG51bWJlciBiZXR3ZWVuIC0xODAgYW5kIDE4MCwgYnV0IHdhczogJyArIGxvbmdpdHVkZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xhdCA9IGxhdGl0dWRlO1xyXG4gICAgICAgIHRoaXMuX2xvbmcgPSBsb25naXR1ZGU7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoR2VvUG9pbnQucHJvdG90eXBlLCBcImxhdGl0dWRlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBsYXRpdHVkZSBvZiB0aGlzIGdlbyBwb2ludCwgYSBudW1iZXIgYmV0d2VlbiAtOTAgYW5kIDkwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGF0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEdlb1BvaW50LnByb3RvdHlwZSwgXCJsb25naXR1ZGVcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgdGhlIGxvbmdpdHVkZSBvZiB0aGlzIGdlbyBwb2ludCwgYSBudW1iZXIgYmV0d2VlbiAtMTgwIGFuZCAxODAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb25nO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgR2VvUG9pbnQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGF0ID09PSBvdGhlci5fbGF0ICYmIHRoaXMuX2xvbmcgPT09IG90aGVyLl9sb25nO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWN0dWFsbHkgcHJpdmF0ZSB0byBKUyBjb25zdW1lcnMgb2Ygb3VyIEFQSSwgc28gdGhpcyBmdW5jdGlvbiBpcyBwcmVmaXhlZFxyXG4gICAgICogd2l0aCBhbiB1bmRlcnNjb3JlLlxyXG4gICAgICovXHJcbiAgICBHZW9Qb2ludC5wcm90b3R5cGUuX2NvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAocHJpbWl0aXZlQ29tcGFyYXRvcih0aGlzLl9sYXQsIG90aGVyLl9sYXQpIHx8XHJcbiAgICAgICAgICAgIHByaW1pdGl2ZUNvbXBhcmF0b3IodGhpcy5fbG9uZywgb3RoZXIuX2xvbmcpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gR2VvUG9pbnQ7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgVGltZXN0YW1wID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGltZXN0YW1wKHNlY29uZHMsIG5hbm9zZWNvbmRzKSB7XHJcbiAgICAgICAgdGhpcy5zZWNvbmRzID0gc2Vjb25kcztcclxuICAgICAgICB0aGlzLm5hbm9zZWNvbmRzID0gbmFub3NlY29uZHM7XHJcbiAgICAgICAgaWYgKG5hbm9zZWNvbmRzIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnVGltZXN0YW1wIG5hbm9zZWNvbmRzIG91dCBvZiByYW5nZTogJyArIG5hbm9zZWNvbmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5hbm9zZWNvbmRzID49IDFlOSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnVGltZXN0YW1wIG5hbm9zZWNvbmRzIG91dCBvZiByYW5nZTogJyArIG5hbm9zZWNvbmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTWlkbmlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiAxLzEvMSBpcyB0aGUgZWFybGllc3QgRmlyZXN0b3JlIHN1cHBvcnRzLlxyXG4gICAgICAgIGlmIChzZWNvbmRzIDwgLTYyMTM1NTk2ODAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdUaW1lc3RhbXAgc2Vjb25kcyBvdXQgb2YgcmFuZ2U6ICcgKyBzZWNvbmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVGhpcyB3aWxsIGJyZWFrIGluIHRoZSB5ZWFyIDEwLDAwMC5cclxuICAgICAgICBpZiAoc2Vjb25kcyA+PSAyNTM0MDIzMDA4MDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ1RpbWVzdGFtcCBzZWNvbmRzIG91dCBvZiByYW5nZTogJyArIHNlY29uZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFRpbWVzdGFtcC5ub3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tTWlsbGlzKERhdGUubm93KCkpO1xyXG4gICAgfTtcclxuICAgIFRpbWVzdGFtcC5mcm9tRGF0ZSA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIFRpbWVzdGFtcC5mcm9tTWlsbGlzKGRhdGUuZ2V0VGltZSgpKTtcclxuICAgIH07XHJcbiAgICBUaW1lc3RhbXAuZnJvbU1pbGxpcyA9IGZ1bmN0aW9uIChtaWxsaXNlY29uZHMpIHtcclxuICAgICAgICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XHJcbiAgICAgICAgdmFyIG5hbm9zID0gKG1pbGxpc2Vjb25kcyAtIHNlY29uZHMgKiAxMDAwKSAqIDFlNjtcclxuICAgICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChzZWNvbmRzLCBuYW5vcyk7XHJcbiAgICB9O1xyXG4gICAgVGltZXN0YW1wLnByb3RvdHlwZS50b0RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudG9NaWxsaXMoKSk7XHJcbiAgICB9O1xyXG4gICAgVGltZXN0YW1wLnByb3RvdHlwZS50b01pbGxpcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZWNvbmRzICogMTAwMCArIHRoaXMubmFub3NlY29uZHMgLyAxZTY7XHJcbiAgICB9O1xyXG4gICAgVGltZXN0YW1wLnByb3RvdHlwZS5fY29tcGFyZVRvID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2Vjb25kcyA9PT0gb3RoZXIuc2Vjb25kcykge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJpbWl0aXZlQ29tcGFyYXRvcih0aGlzLm5hbm9zZWNvbmRzLCBvdGhlci5uYW5vc2Vjb25kcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcmltaXRpdmVDb21wYXJhdG9yKHRoaXMuc2Vjb25kcywgb3RoZXIuc2Vjb25kcyk7XHJcbiAgICB9O1xyXG4gICAgVGltZXN0YW1wLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChvdGhlci5zZWNvbmRzID09PSB0aGlzLnNlY29uZHMgJiYgb3RoZXIubmFub3NlY29uZHMgPT09IHRoaXMubmFub3NlY29uZHMpO1xyXG4gICAgfTtcclxuICAgIFRpbWVzdGFtcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICgnVGltZXN0YW1wKHNlY29uZHM9JyArXHJcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kcyArXHJcbiAgICAgICAgICAgICcsIG5hbm9zZWNvbmRzPScgK1xyXG4gICAgICAgICAgICB0aGlzLm5hbm9zZWNvbmRzICtcclxuICAgICAgICAgICAgJyknKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVGltZXN0YW1wO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIERhdGFiYXNlSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0cyBhIERhdGFiYXNlSW5mbyB1c2luZyB0aGUgcHJvdmlkZWQgaG9zdCwgZGF0YWJhc2VJZCBhbmRcclxuICAgICAqIHBlcnNpc3RlbmNlS2V5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBkYXRhYmFzZUlkIFRoZSBkYXRhYmFzZSB0byB1c2UuXHJcbiAgICAgKiBAcGFyYW0gcGVyc2lzdGVuY2VLZXkgQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBGaXJlc3RvcmUncyBsb2NhbFxyXG4gICAgICogc3RvcmFnZSAodXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBkYXRhYmFzZUlkKS5cclxuICAgICAqIEBwYXJhbSBob3N0IFRoZSBGaXJlc3RvcmUgYmFja2VuZCBob3N0IHRvIGNvbm5lY3QgdG8uXHJcbiAgICAgKiBAcGFyYW0gc3NsIFdoZXRoZXIgdG8gdXNlIFNTTCB3aGVuIGNvbm5lY3RpbmcuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIERhdGFiYXNlSW5mbyhkYXRhYmFzZUlkLCBwZXJzaXN0ZW5jZUtleSwgaG9zdCwgc3NsKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhYmFzZUlkID0gZGF0YWJhc2VJZDtcclxuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlS2V5ID0gcGVyc2lzdGVuY2VLZXk7XHJcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcclxuICAgICAgICB0aGlzLnNzbCA9IHNzbDtcclxuICAgIH1cclxuICAgIHJldHVybiBEYXRhYmFzZUluZm87XHJcbn0oKSk7XHJcbi8qKiBUaGUgZGVmYXVsdCBkYXRhYmFzZSBuYW1lIGZvciBhIHByb2plY3QuICovXHJcbnZhciBERUZBVUxUX0RBVEFCQVNFX05BTUUgPSAnKGRlZmF1bHQpJztcclxuLyoqIFJlcHJlc2VudHMgdGhlIGRhdGFiYXNlIElEIGEgRmlyZXN0b3JlIGNsaWVudCBpcyBhc3NvY2lhdGVkIHdpdGguICovXHJcbnZhciBEYXRhYmFzZUlkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGF0YWJhc2VJZChwcm9qZWN0SWQsIGRhdGFiYXNlKSB7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XHJcbiAgICAgICAgdGhpcy5kYXRhYmFzZSA9IGRhdGFiYXNlID8gZGF0YWJhc2UgOiBERUZBVUxUX0RBVEFCQVNFX05BTUU7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YWJhc2VJZC5wcm90b3R5cGUsIFwiaXNEZWZhdWx0RGF0YWJhc2VcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhYmFzZSA9PT0gREVGQVVMVF9EQVRBQkFTRV9OQU1FO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRGF0YWJhc2VJZC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAob3RoZXIgaW5zdGFuY2VvZiBEYXRhYmFzZUlkICYmXHJcbiAgICAgICAgICAgIG90aGVyLnByb2plY3RJZCA9PT0gdGhpcy5wcm9qZWN0SWQgJiZcclxuICAgICAgICAgICAgb3RoZXIuZGF0YWJhc2UgPT09IHRoaXMuZGF0YWJhc2UpO1xyXG4gICAgfTtcclxuICAgIERhdGFiYXNlSWQucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAocHJpbWl0aXZlQ29tcGFyYXRvcih0aGlzLnByb2plY3RJZCwgb3RoZXIucHJvamVjdElkKSB8fFxyXG4gICAgICAgICAgICBwcmltaXRpdmVDb21wYXJhdG9yKHRoaXMuZGF0YWJhc2UsIG90aGVyLmRhdGFiYXNlKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERhdGFiYXNlSWQ7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgRE9DVU1FTlRfS0VZX05BTUUgPSAnX19uYW1lX18nO1xyXG4vKipcclxuICogUGF0aCByZXByZXNlbnRzIGFuIG9yZGVyZWQgc2VxdWVuY2Ugb2Ygc3RyaW5nIHNlZ21lbnRzLlxyXG4gKi9cclxudmFyIFBhdGggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQYXRoKHNlZ21lbnRzLCBvZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMuaW5pdChzZWdtZW50cywgb2Zmc2V0LCBsZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBpbml0aWFsaXphdGlvbiBtZXRob2QgdGhhdCBjYW4gYmUgY2FsbGVkIGZyb20gb3V0c2lkZSB0aGUgY29uc3RydWN0b3IuXHJcbiAgICAgKiBXZSBuZWVkIHRoaXMgc28gdGhhdCB3ZSBjYW4gaGF2ZSBhIG5vbi1zdGF0aWMgY29uc3RydWN0IG1ldGhvZCB0aGF0IHJldHVybnNcclxuICAgICAqIHRoZSBwb2x5bW9ycGhpYyBgdGhpc2AgdHlwZS5cclxuICAgICAqL1xyXG4gICAgUGF0aC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChzZWdtZW50cywgb2Zmc2V0LCBsZW5ndGgpIHtcclxuICAgICAgICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob2Zmc2V0ID4gc2VnbWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZhaWwoJ29mZnNldCAnICsgb2Zmc2V0ICsgJyBvdXQgb2YgcmFuZ2UgJyArIHNlZ21lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGggLSBvZmZzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxlbmd0aCA+IHNlZ21lbnRzLmxlbmd0aCAtIG9mZnNldCkge1xyXG4gICAgICAgICAgICBmYWlsKCdsZW5ndGggJyArIGxlbmd0aCArICcgb3V0IG9mIHJhbmdlICcgKyAoc2VnbWVudHMubGVuZ3RoIC0gb2Zmc2V0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VnbWVudHMgPSBzZWdtZW50cztcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICB0aGlzLmxlbiA9IGxlbmd0aDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2YgUGF0aCB1c2luZyB0aGUgc2FtZSBjb25jcmV0ZSB0eXBlIGFzIGB0aGlzYC5cclxuICAgICAqIFdlIG5lZWQgdGhpcyBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBub3JtYWwgY29uc3RydWN0b3IsIGJlY2F1c2UgcG9seW1vcnBoaWNcclxuICAgICAqIGB0aGlzYCBkb2Vzbid0IHdvcmsgb24gc3RhdGljIG1ldGhvZHMuXHJcbiAgICAgKi9cclxuICAgIFBhdGgucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uIChzZWdtZW50cywgb2Zmc2V0LCBsZW5ndGgpIHtcclxuICAgICAgICB2YXIgcGF0aCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpKTtcclxuICAgICAgICBwYXRoLmluaXQoc2VnbWVudHMsIG9mZnNldCwgbGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gcGF0aDtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGF0aC5wcm90b3R5cGUsIFwibGVuZ3RoXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgUGF0aC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiBQYXRoLmNvbXBhcmF0b3IodGhpcywgb3RoZXIpID09PSAwO1xyXG4gICAgfTtcclxuICAgIFBhdGgucHJvdG90eXBlLmNoaWxkID0gZnVuY3Rpb24gKG5hbWVPclBhdGgpIHtcclxuICAgICAgICB2YXIgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmxpbWl0KCkpO1xyXG4gICAgICAgIGlmIChuYW1lT3JQYXRoIGluc3RhbmNlb2YgUGF0aCkge1xyXG4gICAgICAgICAgICBuYW1lT3JQYXRoLmZvckVhY2goZnVuY3Rpb24gKHNlZ21lbnQpIHtcclxuICAgICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbmFtZU9yUGF0aCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgc2VnbWVudHMucHVzaChuYW1lT3JQYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZhaWwoJ1Vua25vd24gcGFyYW1ldGVyIHR5cGUgZm9yIFBhdGguY2hpbGQoKTogJyArIG5hbWVPclBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Qoc2VnbWVudHMpO1xyXG4gICAgfTtcclxuICAgIC8qKiBUaGUgaW5kZXggb2Ygb25lIHBhc3QgdGhlIGxhc3Qgc2VnbWVudCBvZiB0aGUgcGF0aC4gKi9cclxuICAgIFBhdGgucHJvdG90eXBlLmxpbWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldCArIHRoaXMubGVuZ3RoO1xyXG4gICAgfTtcclxuICAgIFBhdGgucHJvdG90eXBlLnBvcEZpcnN0ID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICAgICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gMSA6IHNpemU7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMubGVuZ3RoID49IHNpemUsIFwiQ2FuJ3QgY2FsbCBwb3BGaXJzdCgpIHdpdGggbGVzcyBzZWdtZW50c1wiKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3QodGhpcy5zZWdtZW50cywgdGhpcy5vZmZzZXQgKyBzaXplLCB0aGlzLmxlbmd0aCAtIHNpemUpO1xyXG4gICAgfTtcclxuICAgIFBhdGgucHJvdG90eXBlLnBvcExhc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLmlzRW1wdHkoKSwgXCJDYW4ndCBjYWxsIHBvcExhc3QoKSBvbiBlbXB0eSBwYXRoXCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdCh0aGlzLnNlZ21lbnRzLCB0aGlzLm9mZnNldCwgdGhpcy5sZW5ndGggLSAxKTtcclxuICAgIH07XHJcbiAgICBQYXRoLnByb3RvdHlwZS5maXJzdFNlZ21lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLmlzRW1wdHkoKSwgXCJDYW4ndCBjYWxsIGZpcnN0U2VnbWVudCgpIG9uIGVtcHR5IHBhdGhcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VnbWVudHNbdGhpcy5vZmZzZXRdO1xyXG4gICAgfTtcclxuICAgIFBhdGgucHJvdG90eXBlLmxhc3RTZWdtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFzc2VydCghdGhpcy5pc0VtcHR5KCksIFwiQ2FuJ3QgY2FsbCBsYXN0U2VnbWVudCgpIG9uIGVtcHR5IHBhdGhcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VnbWVudHNbdGhpcy5saW1pdCgpIC0gMV07XHJcbiAgICB9O1xyXG4gICAgUGF0aC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgYXNzZXJ0KGluZGV4IDwgdGhpcy5sZW5ndGgsICdJbmRleCBvdXQgb2YgcmFuZ2UnKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50c1t0aGlzLm9mZnNldCArIGluZGV4XTtcclxuICAgIH07XHJcbiAgICBQYXRoLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMDtcclxuICAgIH07XHJcbiAgICBQYXRoLnByb3RvdHlwZS5pc1ByZWZpeE9mID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKG90aGVyLmxlbmd0aCA8IHRoaXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdldChpKSAhPT0gb3RoZXIuZ2V0KGkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgUGF0aC5wcm90b3R5cGUuaXNJbW1lZGlhdGVQYXJlbnRPZiA9IGZ1bmN0aW9uIChwb3RlbnRpYWxDaGlsZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCArIDEgIT09IHBvdGVudGlhbENoaWxkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5nZXQoaSkgIT09IHBvdGVudGlhbENoaWxkLmdldChpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIFBhdGgucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5vZmZzZXQsIGVuZCA9IHRoaXMubGltaXQoKTsgaSA8IGVuZDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZuKHRoaXMuc2VnbWVudHNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQYXRoLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmxpbWl0KCkpO1xyXG4gICAgfTtcclxuICAgIFBhdGguY29tcGFyYXRvciA9IGZ1bmN0aW9uIChwMSwgcDIpIHtcclxuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4ocDEubGVuZ3RoLCBwMi5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGxlZnQgPSBwMS5nZXQoaSk7XHJcbiAgICAgICAgICAgIHZhciByaWdodCA9IHAyLmdldChpKTtcclxuICAgICAgICAgICAgaWYgKGxlZnQgPCByaWdodClcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgaWYgKGxlZnQgPiByaWdodClcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocDEubGVuZ3RoIDwgcDIubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgaWYgKHAxLmxlbmd0aCA+IHAyLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBhdGg7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBIHNsYXNoLXNlcGFyYXRlZCBwYXRoIGZvciBuYXZpZ2F0aW5nIHJlc291cmNlcyAoZG9jdW1lbnRzIGFuZCBjb2xsZWN0aW9ucylcclxuICogd2l0aGluIEZpcmVzdG9yZS5cclxuICovXHJcbnZhciBSZXNvdXJjZVBhdGggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZXNvdXJjZVBhdGgsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBSZXNvdXJjZVBhdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgUmVzb3VyY2VQYXRoLnByb3RvdHlwZS5jYW5vbmljYWxTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gTk9URTogVGhlIGNsaWVudCBpcyBpZ25vcmFudCBvZiBhbnkgcGF0aCBzZWdtZW50cyBjb250YWluaW5nIGVzY2FwZVxyXG4gICAgICAgIC8vIHNlcXVlbmNlcyAoZS5nLiBfX2lkMTIzX18pIGFuZCBqdXN0IHBhc3NlcyB0aGVtIHRocm91Z2ggcmF3ICh0aGV5IGV4aXN0XHJcbiAgICAgICAgLy8gZm9yIGxlZ2FjeSByZWFzb25zIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgZnJlcXVlbnRseSkuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLmpvaW4oJy8nKTtcclxuICAgIH07XHJcbiAgICBSZXNvdXJjZVBhdGgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbm9uaWNhbFN0cmluZygpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIHJlc291cmNlIHBhdGggZnJvbSB0aGUgZ2l2ZW4gc2xhc2gtZGVsaW1pdGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgUmVzb3VyY2VQYXRoLmZyb21TdHJpbmcgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIC8vIE5PVEU6IFRoZSBjbGllbnQgaXMgaWdub3JhbnQgb2YgYW55IHBhdGggc2VnbWVudHMgY29udGFpbmluZyBlc2NhcGVcclxuICAgICAgICAvLyBzZXF1ZW5jZXMgKGUuZy4gX19pZDEyM19fKSBhbmQganVzdCBwYXNzZXMgdGhlbSB0aHJvdWdoIHJhdyAodGhleSBleGlzdFxyXG4gICAgICAgIC8vIGZvciBsZWdhY3kgcmVhc29ucyBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIGZyZXF1ZW50bHkpLlxyXG4gICAgICAgIGlmIChwYXRoLmluZGV4T2YoJy8vJykgPj0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcGF0aCAoXCIgKyBwYXRoICsgXCIpLiBQYXRocyBtdXN0IG5vdCBjb250YWluIC8vIGluIHRoZW0uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBXZSBtYXkgc3RpbGwgaGF2ZSBhbiBlbXB0eSBzZWdtZW50IGF0IHRoZSBiZWdpbm5pbmcgb3IgZW5kIGlmIHRoZXkgaGFkIGFcclxuICAgICAgICAvLyBsZWFkaW5nIG9yIHRyYWlsaW5nIHNsYXNoICh3aGljaCB3ZSBhbGxvdykuXHJcbiAgICAgICAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLycpLmZpbHRlcihmdW5jdGlvbiAoc2VnbWVudCkgeyByZXR1cm4gc2VnbWVudC5sZW5ndGggPiAwOyB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IFJlc291cmNlUGF0aChzZWdtZW50cyk7XHJcbiAgICB9O1xyXG4gICAgUmVzb3VyY2VQYXRoLkVNUFRZX1BBVEggPSBuZXcgUmVzb3VyY2VQYXRoKFtdKTtcclxuICAgIHJldHVybiBSZXNvdXJjZVBhdGg7XHJcbn0oUGF0aCkpO1xyXG52YXIgaWRlbnRpZmllclJlZ0V4cCA9IC9eW19hLXpBLVpdW19hLXpBLVowLTldKiQvO1xyXG4vKiogQSBkb3Qtc2VwYXJhdGVkIHBhdGggZm9yIG5hdmlnYXRpbmcgc3ViLW9iamVjdHMgd2l0aGluIGEgZG9jdW1lbnQuICovXHJcbnZhciBGaWVsZFBhdGggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGaWVsZFBhdGgsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGaWVsZFBhdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHN0cmluZyBjb3VsZCBiZSB1c2VkIGFzIGEgc2VnbWVudCBpbiBhIGZpZWxkIHBhdGhcclxuICAgICAqIHdpdGhvdXQgZXNjYXBpbmcuXHJcbiAgICAgKi9cclxuICAgIEZpZWxkUGF0aC5pc1ZhbGlkSWRlbnRpZmllciA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGlkZW50aWZpZXJSZWdFeHAudGVzdChzZWdtZW50KTtcclxuICAgIH07XHJcbiAgICBGaWVsZFBhdGgucHJvdG90eXBlLmNhbm9uaWNhbFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KClcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCdcXFxcJywgJ1xcXFxcXFxcJykucmVwbGFjZSgnYCcsICdcXFxcYCcpO1xyXG4gICAgICAgICAgICBpZiAoIUZpZWxkUGF0aC5pc1ZhbGlkSWRlbnRpZmllcihzdHIpKSB7XHJcbiAgICAgICAgICAgICAgICBzdHIgPSAnYCcgKyBzdHIgKyAnYCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuam9pbignLicpO1xyXG4gICAgfTtcclxuICAgIEZpZWxkUGF0aC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2Fub25pY2FsU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBmaWVsZCByZWZlcmVuY2VzIHRoZSBrZXkgb2YgYSBkb2N1bWVudC5cclxuICAgICAqL1xyXG4gICAgRmllbGRQYXRoLnByb3RvdHlwZS5pc0tleUZpZWxkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLmdldCgwKSA9PT0gRE9DVU1FTlRfS0VZX05BTUU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZmllbGQgZGVzaWduYXRpbmcgdGhlIGtleSBvZiBhIGRvY3VtZW50LlxyXG4gICAgICovXHJcbiAgICBGaWVsZFBhdGgua2V5RmllbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZFBhdGgoW0RPQ1VNRU5UX0tFWV9OQU1FXSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgYSBmaWVsZCBzdHJpbmcgZnJvbSB0aGUgZ2l2ZW4gc2VydmVyLWZvcm1hdHRlZCBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogLSBTcGxpdHRpbmcgdGhlIGVtcHR5IHN0cmluZyBpcyBub3QgYWxsb3dlZCAoZm9yIG5vdyBhdCBsZWFzdCkuXHJcbiAgICAgKiAtIEVtcHR5IHNlZ21lbnRzIHdpdGhpbiB0aGUgc3RyaW5nIChlLmcuIGlmIHRoZXJlIGFyZSB0d28gY29uc2VjdXRpdmVcclxuICAgICAqICAgc2VwYXJhdG9ycykgYXJlIG5vdCBhbGxvd2VkLlxyXG4gICAgICpcclxuICAgICAqIFRPRE8oYi8zNzI0NDE1Nyk6IHdlIHNob3VsZCBtYWtlIHRoaXMgbW9yZSBzdHJpY3QuIFJpZ2h0IG5vdywgaXQgYWxsb3dzXHJcbiAgICAgKiBub24taWRlbnRpZmllciBwYXRoIGNvbXBvbmVudHMsIGV2ZW4gaWYgdGhleSBhcmVuJ3QgZXNjYXBlZC5cclxuICAgICAqL1xyXG4gICAgRmllbGRQYXRoLmZyb21TZXJ2ZXJGb3JtYXQgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHZhciBzZWdtZW50cyA9IFtdO1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gJyc7XHJcbiAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgIHZhciBhZGRDdXJyZW50U2VnbWVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgZmllbGQgcGF0aCAoXCIgKyBwYXRoICsgXCIpLiBQYXRocyBtdXN0IG5vdCBiZSBlbXB0eSwgYmVnaW4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwid2l0aCAnLicsIGVuZCB3aXRoICcuJywgb3IgY29udGFpbiAnLi4nXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goY3VycmVudCk7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSAnJztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBpbkJhY2t0aWNrcyA9IGZhbHNlO1xyXG4gICAgICAgIHdoaWxlIChpIDwgcGF0aC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIGMgPSBwYXRoW2ldO1xyXG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1xcXFwnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPT09IHBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ1BhdGggaGFzIHRyYWlsaW5nIGVzY2FwZSBjaGFyYWN0ZXI6ICcgKyBwYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gcGF0aFtpICsgMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIShuZXh0ID09PSAnXFxcXCcgfHwgbmV4dCA9PT0gJy4nIHx8IG5leHQgPT09ICdgJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnUGF0aCBoYXMgaW52YWxpZCBlc2NhcGUgc2VxdWVuY2U6ICcgKyBwYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgKz0gbmV4dDtcclxuICAgICAgICAgICAgICAgIGkgKz0gMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjID09PSAnYCcpIHtcclxuICAgICAgICAgICAgICAgIGluQmFja3RpY2tzID0gIWluQmFja3RpY2tzO1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGMgPT09ICcuJyAmJiAhaW5CYWNrdGlja3MpIHtcclxuICAgICAgICAgICAgICAgIGFkZEN1cnJlbnRTZWdtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ICs9IGM7XHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYWRkQ3VycmVudFNlZ21lbnQoKTtcclxuICAgICAgICBpZiAoaW5CYWNrdGlja3MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ1VudGVybWluYXRlZCBgIGluIHBhdGg6ICcgKyBwYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZFBhdGgoc2VnbWVudHMpO1xyXG4gICAgfTtcclxuICAgIEZpZWxkUGF0aC5FTVBUWV9QQVRIID0gbmV3IEZpZWxkUGF0aChbXSk7XHJcbiAgICByZXR1cm4gRmllbGRQYXRoO1xyXG59KFBhdGgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBEb2N1bWVudEtleSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERvY3VtZW50S2V5KHBhdGgpIHtcclxuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xyXG4gICAgICAgIGFzc2VydChEb2N1bWVudEtleS5pc0RvY3VtZW50S2V5KHBhdGgpLCAnSW52YWxpZCBEb2N1bWVudEtleSB3aXRoIGFuIG9kZCBudW1iZXIgb2Ygc2VnbWVudHM6ICcgK1xyXG4gICAgICAgICAgICBwYXRoLnRvQXJyYXkoKS5qb2luKCcvJykpO1xyXG4gICAgfVxyXG4gICAgRG9jdW1lbnRLZXkucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gKG90aGVyICE9PSBudWxsICYmIFJlc291cmNlUGF0aC5jb21wYXJhdG9yKHRoaXMucGF0aCwgb3RoZXIucGF0aCkgPT09IDApO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50S2V5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLnRvU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRLZXkuY29tcGFyYXRvciA9IGZ1bmN0aW9uIChrMSwgazIpIHtcclxuICAgICAgICByZXR1cm4gUmVzb3VyY2VQYXRoLmNvbXBhcmF0b3IoazEucGF0aCwgazIucGF0aCk7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRLZXkuaXNEb2N1bWVudEtleSA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoICUgMiA9PT0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgZG9jdW1lbnQga2V5IHdpdGggdGhlIGdpdmVuIHNlZ21lbnRzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBzZWdtZW50cyBvZiB0aGUgcGF0aCB0byB0aGUgZG9jdW1lbnRcclxuICAgICAqIEByZXR1cm4gQSBuZXcgaW5zdGFuY2Ugb2YgRG9jdW1lbnRLZXlcclxuICAgICAqL1xyXG4gICAgRG9jdW1lbnRLZXkuZnJvbVNlZ21lbnRzID0gZnVuY3Rpb24gKHNlZ21lbnRzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEtleShuZXcgUmVzb3VyY2VQYXRoKHNlZ21lbnRzLnNsaWNlKCkpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgZG9jdW1lbnQga2V5IHVzaW5nICcvJyB0byBzcGxpdCB0aGUgc3RyaW5nIGludG9cclxuICAgICAqIHNlZ21lbnRzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBzbGFzaC1zZXBhcmF0ZWQgcGF0aCBzdHJpbmcgdG8gdGhlIGRvY3VtZW50XHJcbiAgICAgKiBAcmV0dXJuIEEgbmV3IGluc3RhbmNlIG9mIERvY3VtZW50S2V5XHJcbiAgICAgKi9cclxuICAgIERvY3VtZW50S2V5LmZyb21QYXRoU3RyaW5nID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50S2V5KFJlc291cmNlUGF0aC5mcm9tU3RyaW5nKHBhdGgpKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudEtleS5FTVBUWSA9IG5ldyBEb2N1bWVudEtleShuZXcgUmVzb3VyY2VQYXRoKFtdKSk7XHJcbiAgICByZXR1cm4gRG9jdW1lbnRLZXk7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIHJlc3VsdCBvZiBhIGxvb2t1cCBmb3IgYSBnaXZlbiBwYXRoIG1heSBiZSBhbiBleGlzdGluZyBkb2N1bWVudCBvciBhXHJcbiAqIG1hcmtlciB0aGF0IHRoaXMgZG9jdW1lbnQgZG9lcyBub3QgZXhpc3QgYXQgYSBnaXZlbiB2ZXJzaW9uLlxyXG4gKi9cclxudmFyIE1heWJlRG9jdW1lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNYXliZURvY3VtZW50KGtleSwgdmVyc2lvbikge1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XHJcbiAgICB9XHJcbiAgICBNYXliZURvY3VtZW50LmNvbXBhcmVCeUtleSA9IGZ1bmN0aW9uIChkMSwgZDIpIHtcclxuICAgICAgICByZXR1cm4gRG9jdW1lbnRLZXkuY29tcGFyYXRvcihkMS5rZXksIGQyLmtleSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1heWJlRG9jdW1lbnQ7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgZG9jdW1lbnQgaW4gRmlyZXN0b3JlIHdpdGggYSBrZXksIHZlcnNpb24sIGRhdGEgYW5kIHdoZXRoZXIgdGhlXHJcbiAqIGRhdGEgaGFzIGxvY2FsIG11dGF0aW9ucyBhcHBsaWVkIHRvIGl0LlxyXG4gKi9cclxudmFyIERvY3VtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRG9jdW1lbnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEb2N1bWVudChrZXksIHZlcnNpb24sIGRhdGEsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBrZXksIHZlcnNpb24pIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgX3RoaXMuaGFzTG9jYWxNdXRhdGlvbnMgPSAhIW9wdGlvbnMuaGFzTG9jYWxNdXRhdGlvbnM7XHJcbiAgICAgICAgX3RoaXMuaGFzQ29tbWl0dGVkTXV0YXRpb25zID0gISFvcHRpb25zLmhhc0NvbW1pdHRlZE11dGF0aW9ucztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBEb2N1bWVudC5wcm90b3R5cGUuZmllbGQgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZmllbGQocGF0aCk7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnQucHJvdG90eXBlLmZpZWxkVmFsdWUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHZhciBmaWVsZCA9IHRoaXMuZmllbGQocGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkID8gZmllbGQudmFsdWUoKSA6IHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudC5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS52YWx1ZSgpO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChvdGhlciBpbnN0YW5jZW9mIERvY3VtZW50ICYmXHJcbiAgICAgICAgICAgIHRoaXMua2V5LmlzRXF1YWwob3RoZXIua2V5KSAmJlxyXG4gICAgICAgICAgICB0aGlzLnZlcnNpb24uaXNFcXVhbChvdGhlci52ZXJzaW9uKSAmJlxyXG4gICAgICAgICAgICB0aGlzLmRhdGEuaXNFcXVhbChvdGhlci5kYXRhKSAmJlxyXG4gICAgICAgICAgICB0aGlzLmhhc0xvY2FsTXV0YXRpb25zID09PSBvdGhlci5oYXNMb2NhbE11dGF0aW9ucyAmJlxyXG4gICAgICAgICAgICB0aGlzLmhhc0NvbW1pdHRlZE11dGF0aW9ucyA9PT0gb3RoZXIuaGFzQ29tbWl0dGVkTXV0YXRpb25zKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcIkRvY3VtZW50KFwiICsgdGhpcy5rZXkgKyBcIiwgXCIgKyB0aGlzLnZlcnNpb24gKyBcIiwgXCIgKyB0aGlzLmRhdGEudG9TdHJpbmcoKSArIFwiLCBcIiArXHJcbiAgICAgICAgICAgIChcIntoYXNMb2NhbE11dGF0aW9uczogXCIgKyB0aGlzLmhhc0xvY2FsTXV0YXRpb25zICsgXCJ9KSwgXCIpICtcclxuICAgICAgICAgICAgKFwie2hhc0NvbW1pdHRlZE11dGF0aW9uczogXCIgKyB0aGlzLmhhc0NvbW1pdHRlZE11dGF0aW9ucyArIFwifSlcIikpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEb2N1bWVudC5wcm90b3R5cGUsIFwiaGFzUGVuZGluZ1dyaXRlc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc0xvY2FsTXV0YXRpb25zIHx8IHRoaXMuaGFzQ29tbWl0dGVkTXV0YXRpb25zO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRG9jdW1lbnQuY29tcGFyZUJ5RmllbGQgPSBmdW5jdGlvbiAoZmllbGQsIGQxLCBkMikge1xyXG4gICAgICAgIHZhciB2MSA9IGQxLmZpZWxkKGZpZWxkKTtcclxuICAgICAgICB2YXIgdjIgPSBkMi5maWVsZChmaWVsZCk7XHJcbiAgICAgICAgaWYgKHYxICE9PSB1bmRlZmluZWQgJiYgdjIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdjEuY29tcGFyZVRvKHYyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsKFwiVHJ5aW5nIHRvIGNvbXBhcmUgZG9jdW1lbnRzIG9uIGZpZWxkcyB0aGF0IGRvbid0IGV4aXN0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRG9jdW1lbnQ7XHJcbn0oTWF5YmVEb2N1bWVudCkpO1xyXG4vKipcclxuICogQSBjbGFzcyByZXByZXNlbnRpbmcgYSBkZWxldGVkIGRvY3VtZW50LlxyXG4gKiBWZXJzaW9uIGlzIHNldCB0byAwIGlmIHdlIGRvbid0IHBvaW50IHRvIGFueSBzcGVjaWZpYyB0aW1lLCBvdGhlcndpc2UgaXRcclxuICogZGVub3RlcyB0aW1lIHdlIGtub3cgaXQgZGlkbid0IGV4aXN0IGF0LlxyXG4gKi9cclxudmFyIE5vRG9jdW1lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhOb0RvY3VtZW50LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTm9Eb2N1bWVudChrZXksIHZlcnNpb24sIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBrZXksIHZlcnNpb24pIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuaGFzQ29tbWl0dGVkTXV0YXRpb25zID0gISEob3B0aW9ucyAmJiBvcHRpb25zLmhhc0NvbW1pdHRlZE11dGF0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgTm9Eb2N1bWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiTm9Eb2N1bWVudChcIiArIHRoaXMua2V5ICsgXCIsIFwiICsgdGhpcy52ZXJzaW9uICsgXCIpXCI7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vRG9jdW1lbnQucHJvdG90eXBlLCBcImhhc1BlbmRpbmdXcml0ZXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYXNDb21taXR0ZWRNdXRhdGlvbnM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBOb0RvY3VtZW50LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChvdGhlciBpbnN0YW5jZW9mIE5vRG9jdW1lbnQgJiZcclxuICAgICAgICAgICAgb3RoZXIudmVyc2lvbi5pc0VxdWFsKHRoaXMudmVyc2lvbikgJiZcclxuICAgICAgICAgICAgb3RoZXIua2V5LmlzRXF1YWwodGhpcy5rZXkpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTm9Eb2N1bWVudDtcclxufShNYXliZURvY3VtZW50KSk7XHJcbi8qKlxyXG4gKiBBIGNsYXNzIHJlcHJlc2VudGluZyBhbiBleGlzdGluZyBkb2N1bWVudCB3aG9zZSBkYXRhIGlzIHVua25vd24gKGUuZy4gYVxyXG4gKiBkb2N1bWVudCB0aGF0IHdhcyB1cGRhdGVkIHdpdGhvdXQgYSBrbm93biBiYXNlIGRvY3VtZW50KS5cclxuICovXHJcbnZhciBVbmtub3duRG9jdW1lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhVbmtub3duRG9jdW1lbnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBVbmtub3duRG9jdW1lbnQoa2V5LCB2ZXJzaW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGtleSwgdmVyc2lvbikgfHwgdGhpcztcclxuICAgIH1cclxuICAgIFVua25vd25Eb2N1bWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiVW5rbm93bkRvY3VtZW50KFwiICsgdGhpcy5rZXkgKyBcIiwgXCIgKyB0aGlzLnZlcnNpb24gKyBcIilcIjtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVW5rbm93bkRvY3VtZW50LnByb3RvdHlwZSwgXCJoYXNQZW5kaW5nV3JpdGVzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBVbmtub3duRG9jdW1lbnQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gKG90aGVyIGluc3RhbmNlb2YgVW5rbm93bkRvY3VtZW50ICYmXHJcbiAgICAgICAgICAgIG90aGVyLnZlcnNpb24uaXNFcXVhbCh0aGlzLnZlcnNpb24pICYmXHJcbiAgICAgICAgICAgIG90aGVyLmtleS5pc0VxdWFsKHRoaXMua2V5KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFVua25vd25Eb2N1bWVudDtcclxufShNYXliZURvY3VtZW50KSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBBbiBpbW11dGFibGUgc29ydGVkIG1hcCBpbXBsZW1lbnRhdGlvbiwgYmFzZWQgb24gYSBMZWZ0LWxlYW5pbmcgUmVkLUJsYWNrXHJcbi8vIHRyZWUuXHJcbnZhciBTb3J0ZWRNYXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTb3J0ZWRNYXAoY29tcGFyYXRvciwgcm9vdCkge1xyXG4gICAgICAgIHRoaXMuY29tcGFyYXRvciA9IGNvbXBhcmF0b3I7XHJcbiAgICAgICAgdGhpcy5yb290ID0gcm9vdCA/IHJvb3QgOiBMTFJCTm9kZS5FTVBUWTtcclxuICAgIH1cclxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBtYXAsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkvdmFsdWUgYWRkZWQgb3IgcmVwbGFjZWQuXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXAodGhpcy5jb21wYXJhdG9yLCB0aGlzLnJvb3RcclxuICAgICAgICAgICAgLmluc2VydChrZXksIHZhbHVlLCB0aGlzLmNvbXBhcmF0b3IpXHJcbiAgICAgICAgICAgIC5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLkJMQUNLLCBudWxsLCBudWxsKSk7XHJcbiAgICB9O1xyXG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIG1hcCwgd2l0aCB0aGUgc3BlY2lmaWVkIGtleSByZW1vdmVkLlxyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXAodGhpcy5jb21wYXJhdG9yLCB0aGlzLnJvb3RcclxuICAgICAgICAgICAgLnJlbW92ZShrZXksIHRoaXMuY29tcGFyYXRvcilcclxuICAgICAgICAgICAgLmNvcHkobnVsbCwgbnVsbCwgTExSQk5vZGUuQkxBQ0ssIG51bGwsIG51bGwpKTtcclxuICAgIH07XHJcbiAgICAvLyBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgbm9kZSB3aXRoIHRoZSBnaXZlbiBrZXksIG9yIG51bGwuXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMucm9vdDtcclxuICAgICAgICB3aGlsZSAoIW5vZGUuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHZhciBjbXAgPSB0aGlzLmNvbXBhcmF0b3Ioa2V5LCBub2RlLmtleSk7XHJcbiAgICAgICAgICAgIGlmIChjbXAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNtcCA8IDApIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21wID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgLy8gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgaW4gdGhpcyBzb3J0ZWQgbWFwLCBvciAtMSBpZiBpdCBkb2Vzbid0XHJcbiAgICAvLyBleGlzdC5cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAvLyBOdW1iZXIgb2Ygbm9kZXMgdGhhdCB3ZXJlIHBydW5lZCB3aGVuIGRlc2NlbmRpbmcgcmlnaHRcclxuICAgICAgICB2YXIgcHJ1bmVkTm9kZXMgPSAwO1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5yb290O1xyXG4gICAgICAgIHdoaWxlICghbm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdmFyIGNtcCA9IHRoaXMuY29tcGFyYXRvcihrZXksIG5vZGUua2V5KTtcclxuICAgICAgICAgICAgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBydW5lZE5vZGVzICsgbm9kZS5sZWZ0LnNpemU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21wIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIENvdW50IGFsbCBub2RlcyBsZWZ0IG9mIHRoZSBub2RlIHBsdXMgdGhlIG5vZGUgaXRzZWxmXHJcbiAgICAgICAgICAgICAgICBwcnVuZWROb2RlcyArPSBub2RlLmxlZnQuc2l6ZSArIDE7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBOb2RlIG5vdCBmb3VuZFxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH07XHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5pc0VtcHR5KCk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvcnRlZE1hcC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XHJcbiAgICAgICAgLy8gUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSBtYXAuXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvb3Quc2l6ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8vIFJldHVybnMgdGhlIG1pbmltdW0ga2V5IGluIHRoZSBtYXAuXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLm1pbktleSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290Lm1pbktleSgpO1xyXG4gICAgfTtcclxuICAgIC8vIFJldHVybnMgdGhlIG1heGltdW0ga2V5IGluIHRoZSBtYXAuXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLm1heEtleSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290Lm1heEtleSgpO1xyXG4gICAgfTtcclxuICAgIC8vIFRyYXZlcnNlcyB0aGUgbWFwIGluIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cclxuICAgIC8vIGZvciBlYWNoIGtleS92YWx1ZSBwYWlyLiBJZiBhY3Rpb24gcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cclxuICAgIC8vIFJldHVybnMgdGhlIGZpcnN0IHRydXRoeSB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24sIG9yIHRoZSBsYXN0IGZhbHNleVxyXG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5pbm9yZGVyVHJhdmVyc2FsID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuaW5vcmRlclRyYXZlcnNhbChhY3Rpb24pO1xyXG4gICAgfTtcclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIHRoaXMuaW5vcmRlclRyYXZlcnNhbChmdW5jdGlvbiAoaywgdikge1xyXG4gICAgICAgICAgICBmbihrLCB2KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIFRyYXZlcnNlcyB0aGUgbWFwIGluIHJldmVyc2Uga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvblxyXG4gICAgLy8gZnVuY3Rpb24gZm9yIGVhY2gga2V5L3ZhbHVlIHBhaXIuIElmIGFjdGlvbiByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpc1xyXG4gICAgLy8gYWJvcnRlZC5cclxuICAgIC8vIFJldHVybnMgdGhlIGZpcnN0IHRydXRoeSB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24sIG9yIHRoZSBsYXN0IGZhbHNleVxyXG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5yZXZlcnNlVHJhdmVyc2FsID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QucmV2ZXJzZVRyYXZlcnNhbChhY3Rpb24pO1xyXG4gICAgfTtcclxuICAgIC8vIFJldHVybnMgYW4gaXRlcmF0b3Igb3ZlciB0aGUgU29ydGVkTWFwLlxyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5nZXRJdGVyYXRvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcEl0ZXJhdG9yKHRoaXMucm9vdCwgbnVsbCwgdGhpcy5jb21wYXJhdG9yLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5nZXRJdGVyYXRvckZyb20gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXBJdGVyYXRvcih0aGlzLnJvb3QsIGtleSwgdGhpcy5jb21wYXJhdG9yLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5nZXRSZXZlcnNlSXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXBJdGVyYXRvcih0aGlzLnJvb3QsIG51bGwsIHRoaXMuY29tcGFyYXRvciwgdHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5nZXRSZXZlcnNlSXRlcmF0b3JGcm9tID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU29ydGVkTWFwSXRlcmF0b3IodGhpcy5yb290LCBrZXksIHRoaXMuY29tcGFyYXRvciwgdHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNvcnRlZE1hcDtcclxufSgpKTsgLy8gZW5kIFNvcnRlZE1hcFxyXG4vLyBBbiBpdGVyYXRvciBvdmVyIGFuIExMUkJOb2RlLlxyXG52YXIgU29ydGVkTWFwSXRlcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTb3J0ZWRNYXBJdGVyYXRvcihub2RlLCBzdGFydEtleSwgY29tcGFyYXRvciwgaXNSZXZlcnNlKSB7XHJcbiAgICAgICAgdGhpcy5pc1JldmVyc2UgPSBpc1JldmVyc2U7XHJcbiAgICAgICAgdGhpcy5ub2RlU3RhY2sgPSBbXTtcclxuICAgICAgICB2YXIgY21wID0gMTtcclxuICAgICAgICB3aGlsZSAoIW5vZGUuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIGNtcCA9IHN0YXJ0S2V5ID8gY29tcGFyYXRvcihub2RlLmtleSwgc3RhcnRLZXkpIDogMTtcclxuICAgICAgICAgICAgLy8gZmxpcCB0aGUgY29tcGFyaXNvbiBpZiB3ZSdyZSBnb2luZyBpbiByZXZlcnNlXHJcbiAgICAgICAgICAgIGlmIChpc1JldmVyc2UpXHJcbiAgICAgICAgICAgICAgICBjbXAgKj0gLTE7XHJcbiAgICAgICAgICAgIGlmIChjbXAgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgbGVzcyB0aGFuIG91ciBzdGFydCBrZXkuIGlnbm9yZSBpdFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSZXZlcnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIGV4YWN0bHkgZXF1YWwgdG8gb3VyIHN0YXJ0IGtleS4gUHVzaCBpdCBvbiB0aGUgc3RhY2ssXHJcbiAgICAgICAgICAgICAgICAvLyBidXQgc3RvcCBpdGVyYXRpbmc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTdGFjay5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgZ3JlYXRlciB0aGFuIG91ciBzdGFydCBrZXksIGFkZCBpdCB0byB0aGUgc3RhY2sgYW5kIG1vdmVcclxuICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBuZXh0IG9uZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2sucHVzaChub2RlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFNvcnRlZE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5nZXROZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLm5vZGVTdGFjay5sZW5ndGggPiAwLCAnZ2V0TmV4dCgpIGNhbGxlZCBvbiBpdGVyYXRvciB3aGVuIGhhc05leHQoKSBpcyBmYWxzZS4nKTtcclxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZVN0YWNrLnBvcCgpO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7IGtleTogbm9kZS5rZXksIHZhbHVlOiBub2RlLnZhbHVlIH07XHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZXZlcnNlKSB7XHJcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XHJcbiAgICAgICAgICAgIHdoaWxlICghbm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7XHJcbiAgICAgICAgICAgIHdoaWxlICghbm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkTWFwSXRlcmF0b3IucHJvdG90eXBlLmhhc05leHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZVN0YWNrLmxlbmd0aCA+IDA7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkTWFwSXRlcmF0b3IucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZVN0YWNrLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVTdGFja1t0aGlzLm5vZGVTdGFjay5sZW5ndGggLSAxXTtcclxuICAgICAgICByZXR1cm4geyBrZXk6IG5vZGUua2V5LCB2YWx1ZTogbm9kZS52YWx1ZSB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTb3J0ZWRNYXBJdGVyYXRvcjtcclxufSgpKTsgLy8gZW5kIFNvcnRlZE1hcEl0ZXJhdG9yXHJcbi8vIFJlcHJlc2VudHMgYSBub2RlIGluIGEgTGVmdC1sZWFuaW5nIFJlZC1CbGFjayB0cmVlLlxyXG52YXIgTExSQk5vZGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMTFJCTm9kZShrZXksIHZhbHVlLCBjb2xvciwgbGVmdCwgcmlnaHQpIHtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yICE9IG51bGwgPyBjb2xvciA6IExMUkJOb2RlLlJFRDtcclxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0ICE9IG51bGwgPyBsZWZ0IDogTExSQk5vZGUuRU1QVFk7XHJcbiAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0ICE9IG51bGwgPyByaWdodCA6IExMUkJOb2RlLkVNUFRZO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMubGVmdC5zaXplICsgMSArIHRoaXMucmlnaHQuc2l6ZTtcclxuICAgIH1cclxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IG5vZGUsIG9wdGlvbmFsbHkgcmVwbGFjaW5nIHBpZWNlcyBvZiBpdC5cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNvbG9yLCBsZWZ0LCByaWdodCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5ICE9IG51bGwgPyBrZXkgOiB0aGlzLmtleSwgdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogdGhpcy52YWx1ZSwgY29sb3IgIT0gbnVsbCA/IGNvbG9yIDogdGhpcy5jb2xvciwgbGVmdCAhPSBudWxsID8gbGVmdCA6IHRoaXMubGVmdCwgcmlnaHQgIT0gbnVsbCA/IHJpZ2h0IDogdGhpcy5yaWdodCk7XHJcbiAgICB9O1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8vIFRyYXZlcnNlcyB0aGUgdHJlZSBpbiBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXHJcbiAgICAvLyBmb3IgZWFjaCBub2RlLiBJZiBhY3Rpb24gcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cclxuICAgIC8vIFJldHVybnMgdGhlIGZpcnN0IHRydXRoeSB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24sIG9yIHRoZSBsYXN0IGZhbHNleVxyXG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmlub3JkZXJUcmF2ZXJzYWwgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmxlZnQuaW5vcmRlclRyYXZlcnNhbChhY3Rpb24pIHx8XHJcbiAgICAgICAgICAgIGFjdGlvbih0aGlzLmtleSwgdGhpcy52YWx1ZSkgfHxcclxuICAgICAgICAgICAgdGhpcy5yaWdodC5pbm9yZGVyVHJhdmVyc2FsKGFjdGlvbikpO1xyXG4gICAgfTtcclxuICAgIC8vIFRyYXZlcnNlcyB0aGUgdHJlZSBpbiByZXZlcnNlIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb25cclxuICAgIC8vIGZ1bmN0aW9uIGZvciBlYWNoIG5vZGUuIElmIGFjdGlvbiByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpcyBhYm9ydGVkLlxyXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XHJcbiAgICAvLyB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24uXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUucmV2ZXJzZVRyYXZlcnNhbCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucmlnaHQucmV2ZXJzZVRyYXZlcnNhbChhY3Rpb24pIHx8XHJcbiAgICAgICAgICAgIGFjdGlvbih0aGlzLmtleSwgdGhpcy52YWx1ZSkgfHxcclxuICAgICAgICAgICAgdGhpcy5sZWZ0LnJldmVyc2VUcmF2ZXJzYWwoYWN0aW9uKSk7XHJcbiAgICB9O1xyXG4gICAgLy8gUmV0dXJucyB0aGUgbWluaW11bSBub2RlIGluIHRoZSB0cmVlLlxyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0LmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZnQubWluKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIFJldHVybnMgdGhlIG1heGltdW0ga2V5IGluIHRoZSB0cmVlLlxyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLm1pbktleSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5taW4oKS5rZXk7XHJcbiAgICB9O1xyXG4gICAgLy8gUmV0dXJucyB0aGUgbWF4aW11bSBrZXkgaW4gdGhlIHRyZWUuXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUubWF4S2V5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnJpZ2h0LmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5rZXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yaWdodC5tYXhLZXkoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gUmV0dXJucyBuZXcgdHJlZSwgd2l0aCB0aGUga2V5L3ZhbHVlIGFkZGVkLlxyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xyXG4gICAgICAgIHZhciBjbXAgPSBjb21wYXJhdG9yKGtleSwgbi5rZXkpO1xyXG4gICAgICAgIGlmIChjbXAgPCAwKSB7XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbi5sZWZ0Lmluc2VydChrZXksIHZhbHVlLCBjb21wYXJhdG9yKSwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICBuID0gbi5jb3B5KG51bGwsIHZhbHVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbi5yaWdodC5pbnNlcnQoa2V5LCB2YWx1ZSwgY29tcGFyYXRvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbi5maXhVcCgpO1xyXG4gICAgfTtcclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5yZW1vdmVNaW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGVmdC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIExMUkJOb2RlLkVNUFRZO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbiA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCFuLmxlZnQuaXNSZWQoKSAmJiAhbi5sZWZ0LmxlZnQuaXNSZWQoKSlcclxuICAgICAgICAgICAgbiA9IG4ubW92ZVJlZExlZnQoKTtcclxuICAgICAgICBuID0gbi5jb3B5KG51bGwsIG51bGwsIG51bGwsIG4ubGVmdC5yZW1vdmVNaW4oKSwgbnVsbCk7XHJcbiAgICAgICAgcmV0dXJuIG4uZml4VXAoKTtcclxuICAgIH07XHJcbiAgICAvLyBSZXR1cm5zIG5ldyB0cmVlLCB3aXRoIHRoZSBzcGVjaWZpZWQgaXRlbSByZW1vdmVkLlxyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXksIGNvbXBhcmF0b3IpIHtcclxuICAgICAgICB2YXIgc21hbGxlc3Q7XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xyXG4gICAgICAgIGlmIChjb21wYXJhdG9yKGtleSwgbi5rZXkpIDwgMCkge1xyXG4gICAgICAgICAgICBpZiAoIW4ubGVmdC5pc0VtcHR5KCkgJiYgIW4ubGVmdC5pc1JlZCgpICYmICFuLmxlZnQubGVmdC5pc1JlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBuID0gbi5tb3ZlUmVkTGVmdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbi5sZWZ0LnJlbW92ZShrZXksIGNvbXBhcmF0b3IpLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChuLmxlZnQuaXNSZWQoKSlcclxuICAgICAgICAgICAgICAgIG4gPSBuLnJvdGF0ZVJpZ2h0KCk7XHJcbiAgICAgICAgICAgIGlmICghbi5yaWdodC5pc0VtcHR5KCkgJiYgIW4ucmlnaHQuaXNSZWQoKSAmJiAhbi5yaWdodC5sZWZ0LmlzUmVkKCkpIHtcclxuICAgICAgICAgICAgICAgIG4gPSBuLm1vdmVSZWRSaWdodCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb21wYXJhdG9yKGtleSwgbi5rZXkpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobi5yaWdodC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTExSQk5vZGUuRU1QVFk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzbWFsbGVzdCA9IG4ucmlnaHQubWluKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IG4uY29weShzbWFsbGVzdC5rZXksIHNtYWxsZXN0LnZhbHVlLCBudWxsLCBudWxsLCBuLnJpZ2h0LnJlbW92ZU1pbigpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuID0gbi5jb3B5KG51bGwsIG51bGwsIG51bGwsIG51bGwsIG4ucmlnaHQucmVtb3ZlKGtleSwgY29tcGFyYXRvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbi5maXhVcCgpO1xyXG4gICAgfTtcclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5pc1JlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2xvcjtcclxuICAgIH07XHJcbiAgICAvLyBSZXR1cm5zIG5ldyB0cmVlIGFmdGVyIHBlcmZvcm1pbmcgYW55IG5lZWRlZCByb3RhdGlvbnMuXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUuZml4VXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xyXG4gICAgICAgIGlmIChuLnJpZ2h0LmlzUmVkKCkgJiYgIW4ubGVmdC5pc1JlZCgpKVxyXG4gICAgICAgICAgICBuID0gbi5yb3RhdGVMZWZ0KCk7XHJcbiAgICAgICAgaWYgKG4ubGVmdC5pc1JlZCgpICYmIG4ubGVmdC5sZWZ0LmlzUmVkKCkpXHJcbiAgICAgICAgICAgIG4gPSBuLnJvdGF0ZVJpZ2h0KCk7XHJcbiAgICAgICAgaWYgKG4ubGVmdC5pc1JlZCgpICYmIG4ucmlnaHQuaXNSZWQoKSlcclxuICAgICAgICAgICAgbiA9IG4uY29sb3JGbGlwKCk7XHJcbiAgICAgICAgcmV0dXJuIG47XHJcbiAgICB9O1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLm1vdmVSZWRMZWZ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuID0gdGhpcy5jb2xvckZsaXAoKTtcclxuICAgICAgICBpZiAobi5yaWdodC5sZWZ0LmlzUmVkKCkpIHtcclxuICAgICAgICAgICAgbiA9IG4uY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCBuLnJpZ2h0LnJvdGF0ZVJpZ2h0KCkpO1xyXG4gICAgICAgICAgICBuID0gbi5yb3RhdGVMZWZ0KCk7XHJcbiAgICAgICAgICAgIG4gPSBuLmNvbG9yRmxpcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbjtcclxuICAgIH07XHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUubW92ZVJlZFJpZ2h0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuID0gdGhpcy5jb2xvckZsaXAoKTtcclxuICAgICAgICBpZiAobi5sZWZ0LmxlZnQuaXNSZWQoKSkge1xyXG4gICAgICAgICAgICBuID0gbi5yb3RhdGVSaWdodCgpO1xyXG4gICAgICAgICAgICBuID0gbi5jb2xvckZsaXAoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG47XHJcbiAgICB9O1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLnJvdGF0ZUxlZnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG5sID0gdGhpcy5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLlJFRCwgbnVsbCwgdGhpcy5yaWdodC5sZWZ0KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yaWdodC5jb3B5KG51bGwsIG51bGwsIHRoaXMuY29sb3IsIG5sLCBudWxsKTtcclxuICAgIH07XHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUucm90YXRlUmlnaHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG5yID0gdGhpcy5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLlJFRCwgdGhpcy5sZWZ0LnJpZ2h0LCBudWxsKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmNvcHkobnVsbCwgbnVsbCwgdGhpcy5jb2xvciwgbnVsbCwgbnIpO1xyXG4gICAgfTtcclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5jb2xvckZsaXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGxlZnQgPSB0aGlzLmxlZnQuY29weShudWxsLCBudWxsLCAhdGhpcy5sZWZ0LmNvbG9yLCBudWxsLCBudWxsKTtcclxuICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLnJpZ2h0LmNvcHkobnVsbCwgbnVsbCwgIXRoaXMucmlnaHQuY29sb3IsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvcHkobnVsbCwgbnVsbCwgIXRoaXMuY29sb3IsIGxlZnQsIHJpZ2h0KTtcclxuICAgIH07XHJcbiAgICAvLyBGb3IgdGVzdGluZy5cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5jaGVja01heERlcHRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBibGFja0RlcHRoID0gdGhpcy5jaGVjaygpO1xyXG4gICAgICAgIGlmIChNYXRoLnBvdygyLjAsIGJsYWNrRGVwdGgpIDw9IHRoaXMuc2l6ZSArIDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIEluIGEgYmFsYW5jZWQgUkIgdHJlZSwgdGhlIGJsYWNrLWRlcHRoIChudW1iZXIgb2YgYmxhY2sgbm9kZXMpIGZyb20gcm9vdCB0b1xyXG4gICAgLy8gbGVhdmVzIGlzIGVxdWFsIG9uIGJvdGggc2lkZXMuICBUaGlzIGZ1bmN0aW9uIHZlcmlmaWVzIHRoYXQgb3IgYXNzZXJ0cy5cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1JlZCgpICYmIHRoaXMubGVmdC5pc1JlZCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IGZhaWwoJ1JlZCBub2RlIGhhcyByZWQgY2hpbGQoJyArIHRoaXMua2V5ICsgJywnICsgdGhpcy52YWx1ZSArICcpJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJpZ2h0LmlzUmVkKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgZmFpbCgnUmlnaHQgY2hpbGQgb2YgKCcgKyB0aGlzLmtleSArICcsJyArIHRoaXMudmFsdWUgKyAnKSBpcyByZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJsYWNrRGVwdGggPSB0aGlzLmxlZnQuY2hlY2soKTtcclxuICAgICAgICBpZiAoYmxhY2tEZXB0aCAhPT0gdGhpcy5yaWdodC5jaGVjaygpKSB7XHJcbiAgICAgICAgICAgIHRocm93IGZhaWwoJ0JsYWNrIGRlcHRocyBkaWZmZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBibGFja0RlcHRoICsgKHRoaXMuaXNSZWQoKSA/IDAgOiAxKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBFbXB0eSBub2RlIGlzIHNoYXJlZCBiZXR3ZWVuIGFsbCBMTFJCIHRyZWVzLlxyXG4gICAgTExSQk5vZGUuRU1QVFkgPSBudWxsO1xyXG4gICAgTExSQk5vZGUuUkVEID0gdHJ1ZTtcclxuICAgIExMUkJOb2RlLkJMQUNLID0gZmFsc2U7XHJcbiAgICByZXR1cm4gTExSQk5vZGU7XHJcbn0oKSk7IC8vIGVuZCBMTFJCTm9kZVxyXG4vLyBSZXByZXNlbnRzIGFuIGVtcHR5IG5vZGUgKGEgbGVhZiBub2RlIGluIHRoZSBSZWQtQmxhY2sgVHJlZSkuXHJcbnZhciBMTFJCRW1wdHlOb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTExSQkVtcHR5Tm9kZSgpIHtcclxuICAgICAgICB0aGlzLnNpemUgPSAwO1xyXG4gICAgfVxyXG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgbm9kZS5cclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgY29sb3IsIGxlZnQsIHJpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIHRyZWUsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkvdmFsdWUgYWRkZWQuXHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5LCB2YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIHRyZWUsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkgcmVtb3ZlZC5cclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXksIGNvbXBhcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLmlub3JkZXJUcmF2ZXJzYWwgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLnJldmVyc2VUcmF2ZXJzYWwgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLm1pbktleSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5tYXhLZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUuaXNSZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8vIEZvciB0ZXN0aW5nLlxyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUuY2hlY2tNYXhEZXB0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTExSQkVtcHR5Tm9kZTtcclxufSgpKTsgLy8gZW5kIExMUkJFbXB0eU5vZGVcclxuTExSQk5vZGUuRU1QVFkgPSBuZXcgTExSQkVtcHR5Tm9kZSgpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIFR5cGVPcmRlcjtcclxuKGZ1bmN0aW9uIChUeXBlT3JkZXIpIHtcclxuICAgIC8vIFRoaXMgb3JkZXIgaXMgZGVmaW5lZCBieSB0aGUgYmFja2VuZC5cclxuICAgIFR5cGVPcmRlcltUeXBlT3JkZXJbXCJOdWxsVmFsdWVcIl0gPSAwXSA9IFwiTnVsbFZhbHVlXCI7XHJcbiAgICBUeXBlT3JkZXJbVHlwZU9yZGVyW1wiQm9vbGVhblZhbHVlXCJdID0gMV0gPSBcIkJvb2xlYW5WYWx1ZVwiO1xyXG4gICAgVHlwZU9yZGVyW1R5cGVPcmRlcltcIk51bWJlclZhbHVlXCJdID0gMl0gPSBcIk51bWJlclZhbHVlXCI7XHJcbiAgICBUeXBlT3JkZXJbVHlwZU9yZGVyW1wiVGltZXN0YW1wVmFsdWVcIl0gPSAzXSA9IFwiVGltZXN0YW1wVmFsdWVcIjtcclxuICAgIFR5cGVPcmRlcltUeXBlT3JkZXJbXCJTdHJpbmdWYWx1ZVwiXSA9IDRdID0gXCJTdHJpbmdWYWx1ZVwiO1xyXG4gICAgVHlwZU9yZGVyW1R5cGVPcmRlcltcIkJsb2JWYWx1ZVwiXSA9IDVdID0gXCJCbG9iVmFsdWVcIjtcclxuICAgIFR5cGVPcmRlcltUeXBlT3JkZXJbXCJSZWZWYWx1ZVwiXSA9IDZdID0gXCJSZWZWYWx1ZVwiO1xyXG4gICAgVHlwZU9yZGVyW1R5cGVPcmRlcltcIkdlb1BvaW50VmFsdWVcIl0gPSA3XSA9IFwiR2VvUG9pbnRWYWx1ZVwiO1xyXG4gICAgVHlwZU9yZGVyW1R5cGVPcmRlcltcIkFycmF5VmFsdWVcIl0gPSA4XSA9IFwiQXJyYXlWYWx1ZVwiO1xyXG4gICAgVHlwZU9yZGVyW1R5cGVPcmRlcltcIk9iamVjdFZhbHVlXCJdID0gOV0gPSBcIk9iamVjdFZhbHVlXCI7XHJcbn0pKFR5cGVPcmRlciB8fCAoVHlwZU9yZGVyID0ge30pKTtcclxuLyoqIERlZmluZXMgdGhlIHJldHVybiB2YWx1ZSBmb3IgcGVuZGluZyBzZXJ2ZXIgdGltZXN0YW1wcy4gKi9cclxudmFyIFNlcnZlclRpbWVzdGFtcEJlaGF2aW9yO1xyXG4oZnVuY3Rpb24gKFNlcnZlclRpbWVzdGFtcEJlaGF2aW9yKSB7XHJcbiAgICBTZXJ2ZXJUaW1lc3RhbXBCZWhhdmlvcltTZXJ2ZXJUaW1lc3RhbXBCZWhhdmlvcltcIkRlZmF1bHRcIl0gPSAwXSA9IFwiRGVmYXVsdFwiO1xyXG4gICAgU2VydmVyVGltZXN0YW1wQmVoYXZpb3JbU2VydmVyVGltZXN0YW1wQmVoYXZpb3JbXCJFc3RpbWF0ZVwiXSA9IDFdID0gXCJFc3RpbWF0ZVwiO1xyXG4gICAgU2VydmVyVGltZXN0YW1wQmVoYXZpb3JbU2VydmVyVGltZXN0YW1wQmVoYXZpb3JbXCJQcmV2aW91c1wiXSA9IDJdID0gXCJQcmV2aW91c1wiO1xyXG59KShTZXJ2ZXJUaW1lc3RhbXBCZWhhdmlvciB8fCAoU2VydmVyVGltZXN0YW1wQmVoYXZpb3IgPSB7fSkpO1xyXG4vKiogSG9sZHMgcHJvcGVydGllcyB0aGF0IGRlZmluZSBmaWVsZCB2YWx1ZSBkZXNlcmlhbGl6YXRpb24gb3B0aW9ucy4gKi9cclxudmFyIEZpZWxkVmFsdWVPcHRpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmllbGRWYWx1ZU9wdGlvbnMoc2VydmVyVGltZXN0YW1wQmVoYXZpb3IsIHRpbWVzdGFtcHNJblNuYXBzaG90cykge1xyXG4gICAgICAgIHRoaXMuc2VydmVyVGltZXN0YW1wQmVoYXZpb3IgPSBzZXJ2ZXJUaW1lc3RhbXBCZWhhdmlvcjtcclxuICAgICAgICB0aGlzLnRpbWVzdGFtcHNJblNuYXBzaG90cyA9IHRpbWVzdGFtcHNJblNuYXBzaG90cztcclxuICAgIH1cclxuICAgIEZpZWxkVmFsdWVPcHRpb25zLmZyb21TbmFwc2hvdE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucywgdGltZXN0YW1wc0luU25hcHNob3RzKSB7XHJcbiAgICAgICAgc3dpdGNoIChvcHRpb25zLnNlcnZlclRpbWVzdGFtcHMpIHtcclxuICAgICAgICAgICAgY2FzZSAnZXN0aW1hdGUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGaWVsZFZhbHVlT3B0aW9ucyhTZXJ2ZXJUaW1lc3RhbXBCZWhhdmlvci5Fc3RpbWF0ZSwgdGltZXN0YW1wc0luU25hcHNob3RzKTtcclxuICAgICAgICAgICAgY2FzZSAncHJldmlvdXMnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGaWVsZFZhbHVlT3B0aW9ucyhTZXJ2ZXJUaW1lc3RhbXBCZWhhdmlvci5QcmV2aW91cywgdGltZXN0YW1wc0luU25hcHNob3RzKTtcclxuICAgICAgICAgICAgY2FzZSAnbm9uZSc6IC8vIEZhbGwtdGhyb3VnaCBpbnRlbmRlZC5cclxuICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZpZWxkVmFsdWVPcHRpb25zKFNlcnZlclRpbWVzdGFtcEJlaGF2aW9yLkRlZmF1bHQsIHRpbWVzdGFtcHNJblNuYXBzaG90cyk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFpbCgnZnJvbVNuYXBzaG90T3B0aW9ucygpIGNhbGxlZCB3aXRoIGludmFsaWQgb3B0aW9ucy4nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpZWxkVmFsdWVPcHRpb25zO1xyXG59KCkpO1xyXG4vKipcclxuICogQSBmaWVsZCB2YWx1ZSByZXByZXNlbnRzIGEgZGF0YXR5cGUgYXMgc3RvcmVkIGJ5IEZpcmVzdG9yZS5cclxuICovXHJcbnZhciBGaWVsZFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmllbGRWYWx1ZSgpIHtcclxuICAgIH1cclxuICAgIEZpZWxkVmFsdWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2YWwgPSB0aGlzLnZhbHVlKCk7XHJcbiAgICAgICAgcmV0dXJuIHZhbCA9PT0gbnVsbCA/ICdudWxsJyA6IHZhbC50b1N0cmluZygpO1xyXG4gICAgfTtcclxuICAgIEZpZWxkVmFsdWUucHJvdG90eXBlLmRlZmF1bHRDb21wYXJlVG8gPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy50eXBlT3JkZXIgIT09IG90aGVyLnR5cGVPcmRlciwgJ0RlZmF1bHQgY29tcGFyZVRvIHNob3VsZCBub3QgYmUgdXNlZCBmb3IgdmFsdWVzIG9mIHNhbWUgdHlwZS4nKTtcclxuICAgICAgICB2YXIgY21wID0gcHJpbWl0aXZlQ29tcGFyYXRvcih0aGlzLnR5cGVPcmRlciwgb3RoZXIudHlwZU9yZGVyKTtcclxuICAgICAgICByZXR1cm4gY21wO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGaWVsZFZhbHVlO1xyXG59KCkpO1xyXG52YXIgTnVsbFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTnVsbFZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTnVsbFZhbHVlKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMudHlwZU9yZGVyID0gVHlwZU9yZGVyLk51bGxWYWx1ZTtcclxuICAgICAgICAvLyBpbnRlcm5hbFZhbHVlIGlzIHVudXNlZCBidXQgd2UgYWRkIGl0IHRvIHdvcmsgYXJvdW5kXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xNTU4NVxyXG4gICAgICAgIF90aGlzLmludGVybmFsVmFsdWUgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE51bGxWYWx1ZS5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIE51bGxWYWx1ZS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIE51bGxWYWx1ZTtcclxuICAgIH07XHJcbiAgICBOdWxsVmFsdWUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIE51bGxWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdENvbXBhcmVUbyhvdGhlcik7XHJcbiAgICB9O1xyXG4gICAgTnVsbFZhbHVlLklOU1RBTkNFID0gbmV3IE51bGxWYWx1ZSgpO1xyXG4gICAgcmV0dXJuIE51bGxWYWx1ZTtcclxufShGaWVsZFZhbHVlKSk7XHJcbnZhciBCb29sZWFuVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCb29sZWFuVmFsdWUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBCb29sZWFuVmFsdWUoaW50ZXJuYWxWYWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuaW50ZXJuYWxWYWx1ZSA9IGludGVybmFsVmFsdWU7XHJcbiAgICAgICAgX3RoaXMudHlwZU9yZGVyID0gVHlwZU9yZGVyLkJvb2xlYW5WYWx1ZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBCb29sZWFuVmFsdWUucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFZhbHVlO1xyXG4gICAgfTtcclxuICAgIEJvb2xlYW5WYWx1ZS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAob3RoZXIgaW5zdGFuY2VvZiBCb29sZWFuVmFsdWUgJiZcclxuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFZhbHVlID09PSBvdGhlci5pbnRlcm5hbFZhbHVlKTtcclxuICAgIH07XHJcbiAgICBCb29sZWFuVmFsdWUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIEJvb2xlYW5WYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJpbWl0aXZlQ29tcGFyYXRvcih0aGlzLCBvdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRDb21wYXJlVG8ob3RoZXIpO1xyXG4gICAgfTtcclxuICAgIEJvb2xlYW5WYWx1ZS5vZiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA/IEJvb2xlYW5WYWx1ZS5UUlVFIDogQm9vbGVhblZhbHVlLkZBTFNFO1xyXG4gICAgfTtcclxuICAgIEJvb2xlYW5WYWx1ZS5UUlVFID0gbmV3IEJvb2xlYW5WYWx1ZSh0cnVlKTtcclxuICAgIEJvb2xlYW5WYWx1ZS5GQUxTRSA9IG5ldyBCb29sZWFuVmFsdWUoZmFsc2UpO1xyXG4gICAgcmV0dXJuIEJvb2xlYW5WYWx1ZTtcclxufShGaWVsZFZhbHVlKSk7XHJcbi8qKiBCYXNlIGNsYXNzIGZvciBJbnRlZ2VyVmFsdWUgYW5kIERvdWJsZVZhbHVlLiAqL1xyXG52YXIgTnVtYmVyVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhOdW1iZXJWYWx1ZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE51bWJlclZhbHVlKGludGVybmFsVmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmludGVybmFsVmFsdWUgPSBpbnRlcm5hbFZhbHVlO1xyXG4gICAgICAgIF90aGlzLnR5cGVPcmRlciA9IFR5cGVPcmRlci5OdW1iZXJWYWx1ZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBOdW1iZXJWYWx1ZS5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsVmFsdWU7XHJcbiAgICB9O1xyXG4gICAgTnVtYmVyVmFsdWUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIE51bWJlclZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1lcmljQ29tcGFyYXRvcih0aGlzLmludGVybmFsVmFsdWUsIG90aGVyLmludGVybmFsVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0Q29tcGFyZVRvKG90aGVyKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTnVtYmVyVmFsdWU7XHJcbn0oRmllbGRWYWx1ZSkpO1xyXG4vKiogVXRpbGl0eSBmdW5jdGlvbiB0byBjb21wYXJlIGRvdWJsZXMgKHVzaW5nIEZpcmVzdG9yZSBzZW1hbnRpY3MgZm9yIE5hTikuICovXHJcbmZ1bmN0aW9uIG51bWVyaWNDb21wYXJhdG9yKGxlZnQsIHJpZ2h0KSB7XHJcbiAgICBpZiAobGVmdCA8IHJpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobGVmdCA+IHJpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChsZWZ0ID09PSByaWdodCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gb25lIG9yIGJvdGggYXJlIE5hTi5cclxuICAgICAgICBpZiAoaXNOYU4obGVmdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzTmFOKHJpZ2h0KSA/IDAgOiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBjaGVjayBudW1iZXJzIGZvciBlcXVhbGl0eSB1c2luZyBGaXJlc3RvcmUgc2VtYW50aWNzXHJcbiAqIChOYU4gPT09IE5hTiwgLTAuMCAhPT0gMC4wKS5cclxuICovXHJcbmZ1bmN0aW9uIG51bWVyaWNFcXVhbHMobGVmdCwgcmlnaHQpIHtcclxuICAgIC8vIEltcGxlbWVudGVkIGJhc2VkIG9uIE9iamVjdC5pcygpIHBvbHlmaWxsIGZyb21cclxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xyXG4gICAgaWYgKGxlZnQgPT09IHJpZ2h0KSB7XHJcbiAgICAgICAgLy8gKzAgIT0gLTBcclxuICAgICAgICByZXR1cm4gbGVmdCAhPT0gMCB8fCAxIC8gbGVmdCA9PT0gMSAvIHJpZ2h0O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gTmFOID09IE5hTlxyXG4gICAgICAgIHJldHVybiBsZWZ0ICE9PSBsZWZ0ICYmIHJpZ2h0ICE9PSByaWdodDtcclxuICAgIH1cclxufVxyXG52YXIgSW50ZWdlclZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSW50ZWdlclZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gSW50ZWdlclZhbHVlKGludGVybmFsVmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgaW50ZXJuYWxWYWx1ZSkgfHwgdGhpcztcclxuICAgIH1cclxuICAgIEludGVnZXJWYWx1ZS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIC8vIE5PVEU6IERvdWJsZVZhbHVlIGFuZCBJbnRlZ2VyVmFsdWUgaW5zdGFuY2VzIG1heSBjb21wYXJlVG8oKSB0aGUgc2FtZSxcclxuICAgICAgICAvLyBidXQgdGhhdCBkb2Vzbid0IG1ha2UgdGhlbSBlcXVhbCB2aWEgaXNFcXVhbCgpLlxyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIEludGVnZXJWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtZXJpY0VxdWFscyh0aGlzLmludGVybmFsVmFsdWUsIG90aGVyLmludGVybmFsVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gSW50ZWdlclZhbHVlO1xyXG59KE51bWJlclZhbHVlKSk7XHJcbnZhciBEb3VibGVWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKERvdWJsZVZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRG91YmxlVmFsdWUoaW50ZXJuYWxWYWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGludGVybmFsVmFsdWUpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuaW50ZXJuYWxWYWx1ZSA9IGludGVybmFsVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgRG91YmxlVmFsdWUucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICAvLyBOT1RFOiBEb3VibGVWYWx1ZSBhbmQgSW50ZWdlclZhbHVlIGluc3RhbmNlcyBtYXkgY29tcGFyZVRvKCkgdGhlIHNhbWUsXHJcbiAgICAgICAgLy8gYnV0IHRoYXQgZG9lc24ndCBtYWtlIHRoZW0gZXF1YWwgdmlhIGlzRXF1YWwoKS5cclxuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBEb3VibGVWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtZXJpY0VxdWFscyh0aGlzLmludGVybmFsVmFsdWUsIG90aGVyLmludGVybmFsVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEb3VibGVWYWx1ZS5OQU4gPSBuZXcgRG91YmxlVmFsdWUoTmFOKTtcclxuICAgIERvdWJsZVZhbHVlLlBPU0lUSVZFX0lORklOSVRZID0gbmV3IERvdWJsZVZhbHVlKEluZmluaXR5KTtcclxuICAgIERvdWJsZVZhbHVlLk5FR0FUSVZFX0lORklOSVRZID0gbmV3IERvdWJsZVZhbHVlKC1JbmZpbml0eSk7XHJcbiAgICByZXR1cm4gRG91YmxlVmFsdWU7XHJcbn0oTnVtYmVyVmFsdWUpKTtcclxuLy8gVE9ETyhiLzM3MjY3ODg1KTogQWRkIHRydW5jYXRpb24gc3VwcG9ydFxyXG52YXIgU3RyaW5nVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdHJpbmdWYWx1ZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFN0cmluZ1ZhbHVlKGludGVybmFsVmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmludGVybmFsVmFsdWUgPSBpbnRlcm5hbFZhbHVlO1xyXG4gICAgICAgIF90aGlzLnR5cGVPcmRlciA9IFR5cGVPcmRlci5TdHJpbmdWYWx1ZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBTdHJpbmdWYWx1ZS5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsVmFsdWU7XHJcbiAgICB9O1xyXG4gICAgU3RyaW5nVmFsdWUucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gKG90aGVyIGluc3RhbmNlb2YgU3RyaW5nVmFsdWUgJiYgdGhpcy5pbnRlcm5hbFZhbHVlID09PSBvdGhlci5pbnRlcm5hbFZhbHVlKTtcclxuICAgIH07XHJcbiAgICBTdHJpbmdWYWx1ZS5wcm90b3R5cGUuY29tcGFyZVRvID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgU3RyaW5nVmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByaW1pdGl2ZUNvbXBhcmF0b3IodGhpcy5pbnRlcm5hbFZhbHVlLCBvdGhlci5pbnRlcm5hbFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdENvbXBhcmVUbyhvdGhlcik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN0cmluZ1ZhbHVlO1xyXG59KEZpZWxkVmFsdWUpKTtcclxudmFyIFRpbWVzdGFtcFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGltZXN0YW1wVmFsdWUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBUaW1lc3RhbXBWYWx1ZShpbnRlcm5hbFZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5pbnRlcm5hbFZhbHVlID0gaW50ZXJuYWxWYWx1ZTtcclxuICAgICAgICBfdGhpcy50eXBlT3JkZXIgPSBUeXBlT3JkZXIuVGltZXN0YW1wVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgVGltZXN0YW1wVmFsdWUucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRpbWVzdGFtcHNJblNuYXBzaG90cykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxWYWx1ZS50b0RhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVGltZXN0YW1wVmFsdWUucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gKG90aGVyIGluc3RhbmNlb2YgVGltZXN0YW1wVmFsdWUgJiZcclxuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFZhbHVlLmlzRXF1YWwob3RoZXIuaW50ZXJuYWxWYWx1ZSkpO1xyXG4gICAgfTtcclxuICAgIFRpbWVzdGFtcFZhbHVlLnByb3RvdHlwZS5jb21wYXJlVG8gPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBUaW1lc3RhbXBWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFZhbHVlLl9jb21wYXJlVG8ob3RoZXIuaW50ZXJuYWxWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG90aGVyIGluc3RhbmNlb2YgU2VydmVyVGltZXN0YW1wVmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gQ29uY3JldGUgdGltZXN0YW1wcyBjb21lIGJlZm9yZSBzZXJ2ZXIgdGltZXN0YW1wcy5cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdENvbXBhcmVUbyhvdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBUaW1lc3RhbXBWYWx1ZTtcclxufShGaWVsZFZhbHVlKSk7XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgbG9jYWxseS1hcHBsaWVkIFNlcnZlclRpbWVzdGFtcC5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gU2VydmVyVGltZXN0YW1wVmFsdWUgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYVxyXG4gKiAgIFRyYW5zZm9ybU11dGF0aW9uIChzZWUgVHJhbnNmb3JtTXV0YXRpb24uYXBwbHlUbygpKS4gVGhleSBjYW4gb25seSBleGlzdCBpblxyXG4gKiAgIHRoZSBsb2NhbCB2aWV3IG9mIGEgZG9jdW1lbnQuIFRoZXJlZm9yZSB0aGV5IGRvIG5vdCBuZWVkIHRvIGJlIHBhcnNlZCBvclxyXG4gKiAgIHNlcmlhbGl6ZWQuXHJcbiAqIC0gV2hlbiBldmFsdWF0ZWQgbG9jYWxseSAoZS5nLiBmb3Igc25hcHNob3QuZGF0YSgpKSwgdGhleSBieSBkZWZhdWx0XHJcbiAqICAgZXZhbHVhdGUgdG8gYG51bGxgLiBUaGlzIGJlaGF2aW9yIGNhbiBiZSBjb25maWd1cmVkIGJ5IHBhc3NpbmcgY3VzdG9tXHJcbiAqICAgRmllbGRWYWx1ZU9wdGlvbnMgdG8gdmFsdWUoKS5cclxuICogLSBXaXRoIHJlc3BlY3QgdG8gb3RoZXIgU2VydmVyVGltZXN0YW1wVmFsdWVzLCB0aGV5IHNvcnQgYnkgdGhlaXJcclxuICogICBsb2NhbFdyaXRlVGltZS5cclxuICovXHJcbnZhciBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFNlcnZlclRpbWVzdGFtcFZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU2VydmVyVGltZXN0YW1wVmFsdWUobG9jYWxXcml0ZVRpbWUsIHByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmxvY2FsV3JpdGVUaW1lID0gbG9jYWxXcml0ZVRpbWU7XHJcbiAgICAgICAgX3RoaXMucHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVmFsdWU7XHJcbiAgICAgICAgX3RoaXMudHlwZU9yZGVyID0gVHlwZU9yZGVyLlRpbWVzdGFtcFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIFNlcnZlclRpbWVzdGFtcFZhbHVlLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiZcclxuICAgICAgICAgICAgb3B0aW9ucy5zZXJ2ZXJUaW1lc3RhbXBCZWhhdmlvciA9PT0gU2VydmVyVGltZXN0YW1wQmVoYXZpb3IuRXN0aW1hdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUaW1lc3RhbXBWYWx1ZSh0aGlzLmxvY2FsV3JpdGVUaW1lKS52YWx1ZShvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucyAmJlxyXG4gICAgICAgICAgICBvcHRpb25zLnNlcnZlclRpbWVzdGFtcEJlaGF2aW9yID09PSBTZXJ2ZXJUaW1lc3RhbXBCZWhhdmlvci5QcmV2aW91cykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91c1ZhbHVlID8gdGhpcy5wcmV2aW91c1ZhbHVlLnZhbHVlKG9wdGlvbnMpIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAob3RoZXIgaW5zdGFuY2VvZiBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZSAmJlxyXG4gICAgICAgICAgICB0aGlzLmxvY2FsV3JpdGVUaW1lLmlzRXF1YWwob3RoZXIubG9jYWxXcml0ZVRpbWUpKTtcclxuICAgIH07XHJcbiAgICBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZS5wcm90b3R5cGUuY29tcGFyZVRvID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgU2VydmVyVGltZXN0YW1wVmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxXcml0ZVRpbWUuX2NvbXBhcmVUbyhvdGhlci5sb2NhbFdyaXRlVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG90aGVyIGluc3RhbmNlb2YgVGltZXN0YW1wVmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gU2VydmVyIHRpbWVzdGFtcHMgY29tZSBhZnRlciBhbGwgY29uY3JldGUgdGltZXN0YW1wcy5cclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0Q29tcGFyZVRvKG90aGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU2VydmVyVGltZXN0YW1wVmFsdWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnPFNlcnZlclRpbWVzdGFtcCBsb2NhbFRpbWU9JyArIHRoaXMubG9jYWxXcml0ZVRpbWUudG9TdHJpbmcoKSArICc+JztcclxuICAgIH07XHJcbiAgICByZXR1cm4gU2VydmVyVGltZXN0YW1wVmFsdWU7XHJcbn0oRmllbGRWYWx1ZSkpO1xyXG52YXIgQmxvYlZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQmxvYlZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQmxvYlZhbHVlKGludGVybmFsVmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmludGVybmFsVmFsdWUgPSBpbnRlcm5hbFZhbHVlO1xyXG4gICAgICAgIF90aGlzLnR5cGVPcmRlciA9IFR5cGVPcmRlci5CbG9iVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgQmxvYlZhbHVlLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxWYWx1ZTtcclxuICAgIH07XHJcbiAgICBCbG9iVmFsdWUucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gKG90aGVyIGluc3RhbmNlb2YgQmxvYlZhbHVlICYmXHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxWYWx1ZS5pc0VxdWFsKG90aGVyLmludGVybmFsVmFsdWUpKTtcclxuICAgIH07XHJcbiAgICBCbG9iVmFsdWUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIEJsb2JWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFZhbHVlLl9jb21wYXJlVG8ob3RoZXIuaW50ZXJuYWxWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRDb21wYXJlVG8ob3RoZXIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCbG9iVmFsdWU7XHJcbn0oRmllbGRWYWx1ZSkpO1xyXG52YXIgUmVmVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZWZWYWx1ZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFJlZlZhbHVlKGRhdGFiYXNlSWQsIGtleSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZGF0YWJhc2VJZCA9IGRhdGFiYXNlSWQ7XHJcbiAgICAgICAgX3RoaXMua2V5ID0ga2V5O1xyXG4gICAgICAgIF90aGlzLnR5cGVPcmRlciA9IFR5cGVPcmRlci5SZWZWYWx1ZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBSZWZWYWx1ZS5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmtleTtcclxuICAgIH07XHJcbiAgICBSZWZWYWx1ZS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIFJlZlZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5rZXkuaXNFcXVhbChvdGhlci5rZXkpICYmIHRoaXMuZGF0YWJhc2VJZC5pc0VxdWFsKG90aGVyLmRhdGFiYXNlSWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVmVmFsdWUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIFJlZlZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciBjbXAgPSB0aGlzLmRhdGFiYXNlSWQuY29tcGFyZVRvKG90aGVyLmRhdGFiYXNlSWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gY21wICE9PSAwID8gY21wIDogRG9jdW1lbnRLZXkuY29tcGFyYXRvcih0aGlzLmtleSwgb3RoZXIua2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdENvbXBhcmVUbyhvdGhlcik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlZlZhbHVlO1xyXG59KEZpZWxkVmFsdWUpKTtcclxudmFyIEdlb1BvaW50VmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHZW9Qb2ludFZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gR2VvUG9pbnRWYWx1ZShpbnRlcm5hbFZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5pbnRlcm5hbFZhbHVlID0gaW50ZXJuYWxWYWx1ZTtcclxuICAgICAgICBfdGhpcy50eXBlT3JkZXIgPSBUeXBlT3JkZXIuR2VvUG9pbnRWYWx1ZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBHZW9Qb2ludFZhbHVlLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxWYWx1ZTtcclxuICAgIH07XHJcbiAgICBHZW9Qb2ludFZhbHVlLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChvdGhlciBpbnN0YW5jZW9mIEdlb1BvaW50VmFsdWUgJiZcclxuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFZhbHVlLmlzRXF1YWwob3RoZXIuaW50ZXJuYWxWYWx1ZSkpO1xyXG4gICAgfTtcclxuICAgIEdlb1BvaW50VmFsdWUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIEdlb1BvaW50VmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxWYWx1ZS5fY29tcGFyZVRvKG90aGVyLmludGVybmFsVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0Q29tcGFyZVRvKG90aGVyKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gR2VvUG9pbnRWYWx1ZTtcclxufShGaWVsZFZhbHVlKSk7XHJcbnZhciBPYmplY3RWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKE9iamVjdFZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gT2JqZWN0VmFsdWUoaW50ZXJuYWxWYWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuaW50ZXJuYWxWYWx1ZSA9IGludGVybmFsVmFsdWU7XHJcbiAgICAgICAgX3RoaXMudHlwZU9yZGVyID0gVHlwZU9yZGVyLk9iamVjdFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdFZhbHVlLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxWYWx1ZS5pbm9yZGVyVHJhdmVyc2FsKGZ1bmN0aW9uIChrZXksIHZhbCkge1xyXG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbC52YWx1ZShvcHRpb25zKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIE9iamVjdFZhbHVlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxWYWx1ZS5pbm9yZGVyVHJhdmVyc2FsKGFjdGlvbik7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0VmFsdWUucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBPYmplY3RWYWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgaXQxID0gdGhpcy5pbnRlcm5hbFZhbHVlLmdldEl0ZXJhdG9yKCk7XHJcbiAgICAgICAgICAgIHZhciBpdDIgPSBvdGhlci5pbnRlcm5hbFZhbHVlLmdldEl0ZXJhdG9yKCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChpdDEuaGFzTmV4dCgpICYmIGl0Mi5oYXNOZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXh0MSA9IGl0MS5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dDIgPSBpdDIuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQxLmtleSAhPT0gbmV4dDIua2V5IHx8ICFuZXh0MS52YWx1ZS5pc0VxdWFsKG5leHQyLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gIWl0MS5oYXNOZXh0KCkgJiYgIWl0Mi5oYXNOZXh0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBPYmplY3RWYWx1ZS5wcm90b3R5cGUuY29tcGFyZVRvID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgT2JqZWN0VmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIGl0MSA9IHRoaXMuaW50ZXJuYWxWYWx1ZS5nZXRJdGVyYXRvcigpO1xyXG4gICAgICAgICAgICB2YXIgaXQyID0gb3RoZXIuaW50ZXJuYWxWYWx1ZS5nZXRJdGVyYXRvcigpO1xyXG4gICAgICAgICAgICB3aGlsZSAoaXQxLmhhc05leHQoKSAmJiBpdDIuaGFzTmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dDEgPSBpdDEuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5leHQyID0gaXQyLmdldE5leHQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBjbXAgPSBwcmltaXRpdmVDb21wYXJhdG9yKG5leHQxLmtleSwgbmV4dDIua2V5KSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHQxLnZhbHVlLmNvbXBhcmVUbyhuZXh0Mi52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNtcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBPbmx5IGVxdWFsIGlmIGJvdGggaXRlcmF0b3JzIGFyZSBleGhhdXN0ZWRcclxuICAgICAgICAgICAgcmV0dXJuIHByaW1pdGl2ZUNvbXBhcmF0b3IoaXQxLmhhc05leHQoKSwgaXQyLmhhc05leHQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0Q29tcGFyZVRvKG90aGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0VmFsdWUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChwYXRoLCB0bykge1xyXG4gICAgICAgIGFzc2VydCghcGF0aC5pc0VtcHR5KCksICdDYW5ub3Qgc2V0IGZpZWxkIGZvciBlbXB0eSBwYXRoIG9uIE9iamVjdFZhbHVlJyk7XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoaWxkKHBhdGguZmlyc3RTZWdtZW50KCksIHRvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGQocGF0aC5maXJzdFNlZ21lbnQoKSk7XHJcbiAgICAgICAgICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgT2JqZWN0VmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZCA9IE9iamVjdFZhbHVlLkVNUFRZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBuZXdDaGlsZCA9IGNoaWxkLnNldChwYXRoLnBvcEZpcnN0KCksIHRvKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hpbGQocGF0aC5maXJzdFNlZ21lbnQoKSwgbmV3Q2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYmplY3RWYWx1ZS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICBhc3NlcnQoIXBhdGguaXNFbXB0eSgpLCAnQ2Fubm90IGRlbGV0ZSBmaWVsZCBmb3IgZW1wdHkgcGF0aCBvbiBPYmplY3RWYWx1ZScpO1xyXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE9iamVjdFZhbHVlKHRoaXMuaW50ZXJuYWxWYWx1ZS5yZW1vdmUocGF0aC5maXJzdFNlZ21lbnQoKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gbmVzdGVkIGZpZWxkXHJcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGQocGF0aC5maXJzdFNlZ21lbnQoKSk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIE9iamVjdFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGQgPSBjaGlsZC5kZWxldGUocGF0aC5wb3BGaXJzdCgpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgT2JqZWN0VmFsdWUodGhpcy5pbnRlcm5hbFZhbHVlLmluc2VydChwYXRoLmZpcnN0U2VnbWVudCgpLCBuZXdDaGlsZCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgYWN0dWFsbHkgY2hhbmdlIGEgcHJpbWl0aXZlIHZhbHVlIHRvIGFuIG9iamVjdCBmb3IgYSBkZWxldGVcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9iamVjdFZhbHVlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQocGF0aCkgIT09IHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBPYmplY3RWYWx1ZS5wcm90b3R5cGUuZmllbGQgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGFzc2VydCghcGF0aC5pc0VtcHR5KCksIFwiQ2FuJ3QgZ2V0IGZpZWxkIG9mIGVtcHR5IHBhdGhcIik7XHJcbiAgICAgICAgdmFyIGZpZWxkID0gdGhpcztcclxuICAgICAgICBwYXRoLmZvckVhY2goZnVuY3Rpb24gKHBhdGhTZWdtZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChmaWVsZCBpbnN0YW5jZW9mIE9iamVjdFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZCA9IGZpZWxkLmludGVybmFsVmFsdWUuZ2V0KHBhdGhTZWdtZW50KSB8fCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmaWVsZDtcclxuICAgIH07XHJcbiAgICBPYmplY3RWYWx1ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWUoKSk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0VmFsdWUucHJvdG90eXBlLmNoaWxkID0gZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsVmFsdWUuZ2V0KGNoaWxkTmFtZSkgfHwgdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIE9iamVjdFZhbHVlLnByb3RvdHlwZS5zZXRDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZE5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RWYWx1ZSh0aGlzLmludGVybmFsVmFsdWUuaW5zZXJ0KGNoaWxkTmFtZSwgdmFsdWUpKTtcclxuICAgIH07XHJcbiAgICBPYmplY3RWYWx1ZS5FTVBUWSA9IG5ldyBPYmplY3RWYWx1ZShuZXcgU29ydGVkTWFwKHByaW1pdGl2ZUNvbXBhcmF0b3IpKTtcclxuICAgIHJldHVybiBPYmplY3RWYWx1ZTtcclxufShGaWVsZFZhbHVlKSk7XHJcbnZhciBBcnJheVZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXJyYXlWYWx1ZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEFycmF5VmFsdWUoaW50ZXJuYWxWYWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuaW50ZXJuYWxWYWx1ZSA9IGludGVybmFsVmFsdWU7XHJcbiAgICAgICAgX3RoaXMudHlwZU9yZGVyID0gVHlwZU9yZGVyLkFycmF5VmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgQXJyYXlWYWx1ZS5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsVmFsdWUubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LnZhbHVlKG9wdGlvbnMpOyB9KTtcclxuICAgIH07XHJcbiAgICBBcnJheVZhbHVlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxWYWx1ZS5mb3JFYWNoKGFjdGlvbik7XHJcbiAgICB9O1xyXG4gICAgQXJyYXlWYWx1ZS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIEFycmF5VmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJuYWxWYWx1ZS5sZW5ndGggIT09IG90aGVyLmludGVybmFsVmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmludGVybmFsVmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbnRlcm5hbFZhbHVlW2ldLmlzRXF1YWwob3RoZXIuaW50ZXJuYWxWYWx1ZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBBcnJheVZhbHVlLnByb3RvdHlwZS5jb21wYXJlVG8gPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBBcnJheVZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciBtaW5MZW5ndGggPSBNYXRoLm1pbih0aGlzLmludGVybmFsVmFsdWUubGVuZ3RoLCBvdGhlci5pbnRlcm5hbFZhbHVlLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWluTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjbXAgPSB0aGlzLmludGVybmFsVmFsdWVbaV0uY29tcGFyZVRvKG90aGVyLmludGVybmFsVmFsdWVbaV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNtcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbXA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHByaW1pdGl2ZUNvbXBhcmF0b3IodGhpcy5pbnRlcm5hbFZhbHVlLmxlbmd0aCwgb3RoZXIuaW50ZXJuYWxWYWx1ZS5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdENvbXBhcmVUbyhvdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFycmF5VmFsdWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlKCkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBcnJheVZhbHVlO1xyXG59KEZpZWxkVmFsdWUpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIFVudHlwZWQgTnVtYmVyIGFsaWFzIHdlIGNhbiB1c2UgdG8gY2hlY2sgZm9yIEVTNiBtZXRob2RzIC8gcHJvcGVydGllcy5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSB2YXJpYWJsZS1uYW1lXHJcbnZhciBOdW1iZXJBc0FueSA9IE51bWJlcjtcclxuLyoqXHJcbiAqIE1pbmltdW0gc2FmZSBpbnRlZ2VyIGluIEphdmFzY3JpcHQgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBwcmVjaXNpb24uXHJcbiAqIEFkZGVkIHRvIG5vdCByZWx5IG9uIEVTNiBmZWF0dXJlcy5cclxuICovXHJcbnZhciBNSU5fU0FGRV9JTlRFR0VSID0gTnVtYmVyQXNBbnkuTUlOX1NBRkVfSU5URUdFUiB8fCAtKE1hdGgucG93KDIsIDUzKSAtIDEpO1xyXG4vKipcclxuICogTWF4aW11bSBzYWZlIGludGVnZXIgaW4gSmF2YXNjcmlwdCBiZWNhdXNlIG9mIGZsb2F0aW5nIHBvaW50IHByZWNpc2lvbi5cclxuICogQWRkZWQgdG8gbm90IHJlbHkgb24gRVM2IGZlYXR1cmVzLlxyXG4gKi9cclxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSBOdW1iZXJBc0FueS5NQVhfU0FGRV9JTlRFR0VSIHx8IE1hdGgucG93KDIsIDUzKSAtIDE7XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgYW4gbnVtYmVyIGlzIGFuIGludGVnZXIsIHVzZXMgbmF0aXZlIGltcGxlbWVudGF0aW9uIGlmXHJcbiAqIGF2YWlsYWJsZS5cclxuICogQWRkZWQgdG8gbm90IHJlbHkgb24gRVM2IGZlYXR1cmVzLlxyXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QgZm9yIGJlaW5nIGFuIGludGVnZXJcclxuICovXHJcbnZhciBpc0ludGVnZXIgPSBOdW1iZXJBc0FueS5pc0ludGVnZXIgfHxcclxuICAgIChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAgICAgICBpc0Zpbml0ZSh2YWx1ZSkgJiZcclxuICAgICAgICAgICAgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xyXG4gICAgfSk7XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgYSB2YXJpYWJsZSBpcyBlaXRoZXIgdW5kZWZpbmVkIG9yIG51bGwuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBhIHZhbHVlIGlzIGFuIGludGVnZXIgYW5kIGluIHRoZSBzYWZlIGludGVnZXIgcmFuZ2VcclxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byB0ZXN0IGZvciBiZWluZyBhbiBpbnRlZ2VyIGFuZCBpbiB0aGUgc2FmZSByYW5nZVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIChpc0ludGVnZXIodmFsdWUpICYmXHJcbiAgICAgICAgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUiAmJlxyXG4gICAgICAgIHZhbHVlID49IE1JTl9TQUZFX0lOVEVHRVIpO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgUXVlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBRdWVyeShwYXRoLCBleHBsaWNpdE9yZGVyQnksIGZpbHRlcnMsIGxpbWl0LCBzdGFydEF0LCBlbmRBdCkge1xyXG4gICAgICAgIGlmIChleHBsaWNpdE9yZGVyQnkgPT09IHZvaWQgMCkgeyBleHBsaWNpdE9yZGVyQnkgPSBbXTsgfVxyXG4gICAgICAgIGlmIChmaWx0ZXJzID09PSB2b2lkIDApIHsgZmlsdGVycyA9IFtdOyB9XHJcbiAgICAgICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKHN0YXJ0QXQgPT09IHZvaWQgMCkgeyBzdGFydEF0ID0gbnVsbDsgfVxyXG4gICAgICAgIGlmIChlbmRBdCA9PT0gdm9pZCAwKSB7IGVuZEF0ID0gbnVsbDsgfVxyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICAgICAgdGhpcy5leHBsaWNpdE9yZGVyQnkgPSBleHBsaWNpdE9yZGVyQnk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gZmlsdGVycztcclxuICAgICAgICB0aGlzLmxpbWl0ID0gbGltaXQ7XHJcbiAgICAgICAgdGhpcy5zdGFydEF0ID0gc3RhcnRBdDtcclxuICAgICAgICB0aGlzLmVuZEF0ID0gZW5kQXQ7XHJcbiAgICAgICAgdGhpcy5tZW1vaXplZENhbm9uaWNhbElkID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1lbW9pemVkT3JkZXJCeSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRBdCkge1xyXG4gICAgICAgICAgICB0aGlzLmFzc2VydFZhbGlkQm91bmQodGhpcy5zdGFydEF0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZW5kQXQpIHtcclxuICAgICAgICAgICAgdGhpcy5hc3NlcnRWYWxpZEJvdW5kKHRoaXMuZW5kQXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFF1ZXJ5LmF0UGF0aCA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeShwYXRoKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUXVlcnkucHJvdG90eXBlLCBcIm9yZGVyQnlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tZW1vaXplZE9yZGVyQnkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmVxdWFsaXR5RmllbGQgPSB0aGlzLmdldEluZXF1YWxpdHlGaWx0ZXJGaWVsZCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0T3JkZXJCeUZpZWxkID0gdGhpcy5nZXRGaXJzdE9yZGVyQnlGaWVsZCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZXF1YWxpdHlGaWVsZCAhPT0gbnVsbCAmJiBmaXJzdE9yZGVyQnlGaWVsZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIGltcGxpY2l0bHkgYWRkIGtleSBvcmRlcmluZywgd2UgbXVzdCBhbHNvIGFkZCB0aGVcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbmVxdWFsaXR5IGZpbHRlciBmaWVsZCBmb3IgaXQgdG8gYmUgYSB2YWxpZCBxdWVyeS5cclxuICAgICAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhlIGRlZmF1bHQgaW5lcXVhbGl0eSBmaWVsZCBhbmQga2V5IG9yZGVyaW5nIGlzIGFzY2VuZGluZy5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5lcXVhbGl0eUZpZWxkLmlzS2V5RmllbGQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbW9pemVkT3JkZXJCeSA9IFtLRVlfT1JERVJJTkdfQVNDXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVtb2l6ZWRPcmRlckJ5ID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE9yZGVyQnkoaW5lcXVhbGl0eUZpZWxkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtFWV9PUkRFUklOR19BU0NcclxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoaW5lcXVhbGl0eUZpZWxkID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChmaXJzdE9yZGVyQnlGaWVsZCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5lcXVhbGl0eUZpZWxkLmlzRXF1YWwoZmlyc3RPcmRlckJ5RmllbGQpKSwgJ0ZpcnN0IG9yZGVyQnkgc2hvdWxkIG1hdGNoIGluZXF1YWxpdHkgZmllbGQuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW1vaXplZE9yZGVyQnkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmRLZXlPcmRlcmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmV4cGxpY2l0T3JkZXJCeTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yZGVyQnkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVtb2l6ZWRPcmRlckJ5LnB1c2gob3JkZXJCeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlckJ5LmZpZWxkLmlzS2V5RmllbGQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRLZXlPcmRlcmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3VuZEtleU9yZGVyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBvcmRlciBvZiB0aGUgaW1wbGljaXQga2V5IG9yZGVyaW5nIGFsd2F5cyBtYXRjaGVzIHRoZSBsYXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cGxpY2l0IG9yZGVyIGJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0RGlyZWN0aW9uID0gdGhpcy5leHBsaWNpdE9yZGVyQnkubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmV4cGxpY2l0T3JkZXJCeVt0aGlzLmV4cGxpY2l0T3JkZXJCeS5sZW5ndGggLSAxXS5kaXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogRGlyZWN0aW9uLkFTQ0VORElORztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW1vaXplZE9yZGVyQnkucHVzaChsYXN0RGlyZWN0aW9uID09PSBEaXJlY3Rpb24uQVNDRU5ESU5HXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IEtFWV9PUkRFUklOR19BU0NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogS0VZX09SREVSSU5HX0RFU0MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZW1vaXplZE9yZGVyQnk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBRdWVyeS5wcm90b3R5cGUuYWRkRmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlcikge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLmdldEluZXF1YWxpdHlGaWx0ZXJGaWVsZCgpID09IG51bGwgfHxcclxuICAgICAgICAgICAgIShmaWx0ZXIgaW5zdGFuY2VvZiBSZWxhdGlvbkZpbHRlcikgfHxcclxuICAgICAgICAgICAgIWZpbHRlci5pc0luZXF1YWxpdHkoKSB8fFxyXG4gICAgICAgICAgICBmaWx0ZXIuZmllbGQuaXNFcXVhbCh0aGlzLmdldEluZXF1YWxpdHlGaWx0ZXJGaWVsZCgpKSwgJ1F1ZXJ5IG11c3Qgb25seSBoYXZlIG9uZSBpbmVxdWFsaXR5IGZpZWxkLicpO1xyXG4gICAgICAgIGFzc2VydCghRG9jdW1lbnRLZXkuaXNEb2N1bWVudEtleSh0aGlzLnBhdGgpLCAnTm8gZmlsdGVyaW5nIGFsbG93ZWQgZm9yIGRvY3VtZW50IHF1ZXJ5Jyk7XHJcbiAgICAgICAgdmFyIG5ld0ZpbHRlcnMgPSB0aGlzLmZpbHRlcnMuY29uY2F0KFtmaWx0ZXJdKTtcclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5KHRoaXMucGF0aCwgdGhpcy5leHBsaWNpdE9yZGVyQnkuc2xpY2UoKSwgbmV3RmlsdGVycywgdGhpcy5saW1pdCwgdGhpcy5zdGFydEF0LCB0aGlzLmVuZEF0KTtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUuYWRkT3JkZXJCeSA9IGZ1bmN0aW9uIChvcmRlckJ5KSB7XHJcbiAgICAgICAgYXNzZXJ0KCFEb2N1bWVudEtleS5pc0RvY3VtZW50S2V5KHRoaXMucGF0aCksICdObyBvcmRlcmluZyBhbGxvd2VkIGZvciBkb2N1bWVudCBxdWVyeScpO1xyXG4gICAgICAgIGFzc2VydCghdGhpcy5zdGFydEF0ICYmICF0aGlzLmVuZEF0LCAnQm91bmRzIG11c3QgYmUgc2V0IGFmdGVyIG9yZGVyQnknKTtcclxuICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IHZhbGlkYXRlIHRoYXQgb3JkZXJCeSBkb2VzIG5vdCBsaXN0IHRoZSBzYW1lIGtleSB0d2ljZS5cclxuICAgICAgICB2YXIgbmV3T3JkZXJCeSA9IHRoaXMuZXhwbGljaXRPcmRlckJ5LmNvbmNhdChbb3JkZXJCeV0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkodGhpcy5wYXRoLCBuZXdPcmRlckJ5LCB0aGlzLmZpbHRlcnMuc2xpY2UoKSwgdGhpcy5saW1pdCwgdGhpcy5zdGFydEF0LCB0aGlzLmVuZEF0KTtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUud2l0aExpbWl0ID0gZnVuY3Rpb24gKGxpbWl0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSh0aGlzLnBhdGgsIHRoaXMuZXhwbGljaXRPcmRlckJ5LnNsaWNlKCksIHRoaXMuZmlsdGVycy5zbGljZSgpLCBsaW1pdCwgdGhpcy5zdGFydEF0LCB0aGlzLmVuZEF0KTtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUud2l0aFN0YXJ0QXQgPSBmdW5jdGlvbiAoYm91bmQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5KHRoaXMucGF0aCwgdGhpcy5leHBsaWNpdE9yZGVyQnkuc2xpY2UoKSwgdGhpcy5maWx0ZXJzLnNsaWNlKCksIHRoaXMubGltaXQsIGJvdW5kLCB0aGlzLmVuZEF0KTtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUud2l0aEVuZEF0ID0gZnVuY3Rpb24gKGJvdW5kKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSh0aGlzLnBhdGgsIHRoaXMuZXhwbGljaXRPcmRlckJ5LnNsaWNlKCksIHRoaXMuZmlsdGVycy5zbGljZSgpLCB0aGlzLmxpbWl0LCB0aGlzLnN0YXJ0QXQsIGJvdW5kKTtcclxuICAgIH07XHJcbiAgICAvLyBUT0RPKGIvMjkxODMxNjUpOiBUaGlzIGlzIHVzZWQgdG8gZ2V0IGEgdW5pcXVlIHN0cmluZyBmcm9tIGEgcXVlcnkgdG8sIGZvclxyXG4gICAgLy8gZXhhbXBsZSwgdXNlIGFzIGEgZGljdGlvbmFyeSBrZXksIGJ1dCB0aGUgaW1wbGVtZW50YXRpb24gaXMgc3ViamVjdCB0b1xyXG4gICAgLy8gY29sbGlzaW9ucy4gTWFrZSBpdCBjb2xsaXNpb24tZnJlZS5cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5jYW5vbmljYWxJZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5tZW1vaXplZENhbm9uaWNhbElkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBjYW5vbmljYWxJZCA9IHRoaXMucGF0aC5jYW5vbmljYWxTdHJpbmcoKTtcclxuICAgICAgICAgICAgY2Fub25pY2FsSWQgKz0gJ3xmOic7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmZpbHRlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgY2Fub25pY2FsSWQgKz0gZmlsdGVyLmNhbm9uaWNhbElkKCk7XHJcbiAgICAgICAgICAgICAgICBjYW5vbmljYWxJZCArPSAnLCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2Fub25pY2FsSWQgKz0gJ3xvYjonO1xyXG4gICAgICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IG1ha2UgdGhpcyBjb2xsaXNpb24gcmVzaXN0YW50XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSB0aGlzLm9yZGVyQnk7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3JkZXJCeSA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgIGNhbm9uaWNhbElkICs9IG9yZGVyQnkuY2Fub25pY2FsSWQoKTtcclxuICAgICAgICAgICAgICAgIGNhbm9uaWNhbElkICs9ICcsJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHRoaXMubGltaXQpKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5vbmljYWxJZCArPSAnfGw6JztcclxuICAgICAgICAgICAgICAgIGNhbm9uaWNhbElkICs9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRBdCkge1xyXG4gICAgICAgICAgICAgICAgY2Fub25pY2FsSWQgKz0gJ3xsYjonO1xyXG4gICAgICAgICAgICAgICAgY2Fub25pY2FsSWQgKz0gdGhpcy5zdGFydEF0LmNhbm9uaWNhbElkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5kQXQpIHtcclxuICAgICAgICAgICAgICAgIGNhbm9uaWNhbElkICs9ICd8dWI6JztcclxuICAgICAgICAgICAgICAgIGNhbm9uaWNhbElkICs9IHRoaXMuZW5kQXQuY2Fub25pY2FsSWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1lbW9pemVkQ2Fub25pY2FsSWQgPSBjYW5vbmljYWxJZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVtb2l6ZWRDYW5vbmljYWxJZDtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHN0ciA9ICdRdWVyeSgnICsgdGhpcy5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBzdHIgKz0gXCIsIGZpbHRlcnM6IFtcIiArIHRoaXMuZmlsdGVycy5qb2luKCcsICcpICsgXCJdXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQodGhpcy5saW1pdCkpIHtcclxuICAgICAgICAgICAgc3RyICs9ICcsIGxpbWl0OiAnICsgdGhpcy5saW1pdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZXhwbGljaXRPcmRlckJ5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgc3RyICs9IFwiLCBvcmRlckJ5OiBbXCIgKyB0aGlzLmV4cGxpY2l0T3JkZXJCeS5qb2luKCcsICcpICsgXCJdXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0QXQpIHtcclxuICAgICAgICAgICAgc3RyICs9ICcsIHN0YXJ0QXQ6ICcgKyB0aGlzLnN0YXJ0QXQuY2Fub25pY2FsSWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZW5kQXQpIHtcclxuICAgICAgICAgICAgc3RyICs9ICcsIGVuZEF0OiAnICsgdGhpcy5lbmRBdC5jYW5vbmljYWxJZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RyICsgJyknO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGltaXQgIT09IG90aGVyLmxpbWl0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub3JkZXJCeS5sZW5ndGggIT09IG90aGVyLm9yZGVyQnkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9yZGVyQnkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9yZGVyQnlbaV0uaXNFcXVhbChvdGhlci5vcmRlckJ5W2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoICE9PSBvdGhlci5maWx0ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5maWx0ZXJzW2ldLmlzRXF1YWwob3RoZXIuZmlsdGVyc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMucGF0aC5pc0VxdWFsKG90aGVyLnBhdGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRBdCAhPT0gbnVsbFxyXG4gICAgICAgICAgICA/ICF0aGlzLnN0YXJ0QXQuaXNFcXVhbChvdGhlci5zdGFydEF0KVxyXG4gICAgICAgICAgICA6IG90aGVyLnN0YXJ0QXQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbmRBdCAhPT0gbnVsbFxyXG4gICAgICAgICAgICA/IHRoaXMuZW5kQXQuaXNFcXVhbChvdGhlci5lbmRBdClcclxuICAgICAgICAgICAgOiBvdGhlci5lbmRBdCA9PT0gbnVsbDtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUuZG9jQ29tcGFyYXRvciA9IGZ1bmN0aW9uIChkMSwgZDIpIHtcclxuICAgICAgICB2YXIgY29tcGFyZWRPbktleUZpZWxkID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMub3JkZXJCeTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG9yZGVyQnkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIHZhciBjb21wID0gb3JkZXJCeS5jb21wYXJlKGQxLCBkMik7XHJcbiAgICAgICAgICAgIGlmIChjb21wICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXA7XHJcbiAgICAgICAgICAgIGNvbXBhcmVkT25LZXlGaWVsZCA9IGNvbXBhcmVkT25LZXlGaWVsZCB8fCBvcmRlckJ5LmZpZWxkLmlzS2V5RmllbGQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXNzZXJ0IHRoYXQgd2UgYWN0dWFsbHkgY29tcGFyZWQgYnkga2V5XHJcbiAgICAgICAgYXNzZXJ0KGNvbXBhcmVkT25LZXlGaWVsZCwgXCJvcmRlckJ5IHVzZWQgdGhhdCBkb2Vzbid0IGNvbXBhcmUgb24ga2V5IGZpZWxkXCIpO1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKGRvYykge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5tYXRjaGVzQW5jZXN0b3IoZG9jKSAmJlxyXG4gICAgICAgICAgICB0aGlzLm1hdGNoZXNPcmRlckJ5KGRvYykgJiZcclxuICAgICAgICAgICAgdGhpcy5tYXRjaGVzRmlsdGVycyhkb2MpICYmXHJcbiAgICAgICAgICAgIHRoaXMubWF0Y2hlc0JvdW5kcyhkb2MpKTtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUuaGFzTGltaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICFpc051bGxPclVuZGVmaW5lZCh0aGlzLmxpbWl0KTtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUuZ2V0Rmlyc3RPcmRlckJ5RmllbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwbGljaXRPcmRlckJ5Lmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgPyB0aGlzLmV4cGxpY2l0T3JkZXJCeVswXS5maWVsZFxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICB9O1xyXG4gICAgUXVlcnkucHJvdG90eXBlLmdldEluZXF1YWxpdHlGaWx0ZXJGaWVsZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5maWx0ZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVyIGluc3RhbmNlb2YgUmVsYXRpb25GaWx0ZXIgJiYgZmlsdGVyLmlzSW5lcXVhbGl0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyLmZpZWxkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5oYXNBcnJheUNvbnRhaW5zRmlsdGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5maWx0ZXJzLmZpbmQoZnVuY3Rpb24gKGZpbHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyIGluc3RhbmNlb2YgUmVsYXRpb25GaWx0ZXIgJiZcclxuICAgICAgICAgICAgICAgIGZpbHRlci5vcCA9PT0gUmVsYXRpb25PcC5BUlJBWV9DT05UQUlOUztcclxuICAgICAgICB9KSAhPT0gdW5kZWZpbmVkKTtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUuaXNEb2N1bWVudFF1ZXJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBEb2N1bWVudEtleS5pc0RvY3VtZW50S2V5KHRoaXMucGF0aCkgJiYgdGhpcy5maWx0ZXJzLmxlbmd0aCA9PT0gMDtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUubWF0Y2hlc0FuY2VzdG9yID0gZnVuY3Rpb24gKGRvYykge1xyXG4gICAgICAgIHZhciBkb2NQYXRoID0gZG9jLmtleS5wYXRoO1xyXG4gICAgICAgIGlmIChEb2N1bWVudEtleS5pc0RvY3VtZW50S2V5KHRoaXMucGF0aCkpIHtcclxuICAgICAgICAgICAgLy8gZXhhY3QgbWF0Y2ggZm9yIGRvY3VtZW50IHF1ZXJpZXNcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aC5pc0VxdWFsKGRvY1BhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gc2hhbGxvdyBhbmNlc3RvciBxdWVyaWVzIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnBhdGguaXNQcmVmaXhPZihkb2NQYXRoKSAmJiB0aGlzLnBhdGgubGVuZ3RoID09PSBkb2NQYXRoLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEEgZG9jdW1lbnQgbXVzdCBoYXZlIGEgdmFsdWUgZm9yIGV2ZXJ5IG9yZGVyaW5nIGNsYXVzZSBpbiBvcmRlciB0byBzaG93IHVwXHJcbiAgICAgKiBpbiB0aGUgcmVzdWx0cy5cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLm1hdGNoZXNPcmRlckJ5ID0gZnVuY3Rpb24gKGRvYykge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmV4cGxpY2l0T3JkZXJCeTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG9yZGVyQnkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIC8vIG9yZGVyIGJ5IGtleSBhbHdheXMgbWF0Y2hlc1xyXG4gICAgICAgICAgICBpZiAoIW9yZGVyQnkuZmllbGQuaXNLZXlGaWVsZCgpICYmXHJcbiAgICAgICAgICAgICAgICBkb2MuZmllbGQob3JkZXJCeS5maWVsZCkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5tYXRjaGVzRmlsdGVycyA9IGZ1bmN0aW9uIChkb2MpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5maWx0ZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoIWZpbHRlci5tYXRjaGVzKGRvYykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE1ha2VzIHN1cmUgYSBkb2N1bWVudCBpcyB3aXRoaW4gdGhlIGJvdW5kcywgaWYgcHJvdmlkZWQuXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5tYXRjaGVzQm91bmRzID0gZnVuY3Rpb24gKGRvYykge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0QXQgJiYgIXRoaXMuc3RhcnRBdC5zb3J0c0JlZm9yZURvY3VtZW50KHRoaXMub3JkZXJCeSwgZG9jKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmVuZEF0ICYmIHRoaXMuZW5kQXQuc29ydHNCZWZvcmVEb2N1bWVudCh0aGlzLm9yZGVyQnksIGRvYykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBRdWVyeS5wcm90b3R5cGUuYXNzZXJ0VmFsaWRCb3VuZCA9IGZ1bmN0aW9uIChib3VuZCkge1xyXG4gICAgICAgIGFzc2VydChib3VuZC5wb3NpdGlvbi5sZW5ndGggPD0gdGhpcy5vcmRlckJ5Lmxlbmd0aCwgJ0JvdW5kIGlzIGxvbmdlciB0aGFuIG9yZGVyQnknKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUXVlcnk7XHJcbn0oKSk7XHJcbnZhciBGaWx0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaWx0ZXIoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBmaWx0ZXIgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cclxuICAgICAqL1xyXG4gICAgRmlsdGVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChmaWVsZCwgb3AsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlLmlzRXF1YWwoTnVsbFZhbHVlLklOU1RBTkNFKSkge1xyXG4gICAgICAgICAgICBpZiAob3AgIT09IFJlbGF0aW9uT3AuRVFVQUwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdJbnZhbGlkIHF1ZXJ5LiBZb3UgY2FuIG9ubHkgcGVyZm9ybSBlcXVhbHMgY29tcGFyaXNvbnMgb24gbnVsbC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE51bGxGaWx0ZXIoZmllbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZS5pc0VxdWFsKERvdWJsZVZhbHVlLk5BTikpIHtcclxuICAgICAgICAgICAgaWYgKG9wICE9PSBSZWxhdGlvbk9wLkVRVUFMKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnSW52YWxpZCBxdWVyeS4gWW91IGNhbiBvbmx5IHBlcmZvcm0gZXF1YWxzIGNvbXBhcmlzb25zIG9uIE5hTi4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5hbkZpbHRlcihmaWVsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlbGF0aW9uRmlsdGVyKGZpZWxkLCBvcCwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlsdGVyO1xyXG59KCkpO1xyXG52YXIgUmVsYXRpb25PcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlbGF0aW9uT3AobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcbiAgICBSZWxhdGlvbk9wLmZyb21TdHJpbmcgPSBmdW5jdGlvbiAob3ApIHtcclxuICAgICAgICBzd2l0Y2ggKG9wKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJzwnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbGF0aW9uT3AuTEVTU19USEFOO1xyXG4gICAgICAgICAgICBjYXNlICc8PSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsYXRpb25PcC5MRVNTX1RIQU5fT1JfRVFVQUw7XHJcbiAgICAgICAgICAgIGNhc2UgJz09JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZWxhdGlvbk9wLkVRVUFMO1xyXG4gICAgICAgICAgICBjYXNlICc+PSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsYXRpb25PcC5HUkVBVEVSX1RIQU5fT1JfRVFVQUw7XHJcbiAgICAgICAgICAgIGNhc2UgJz4nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbGF0aW9uT3AuR1JFQVRFUl9USEFOO1xyXG4gICAgICAgICAgICBjYXNlICdhcnJheS1jb250YWlucyc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsYXRpb25PcC5BUlJBWV9DT05UQUlOUztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKCdVbmtub3duIHJlbGF0aW9uOiAnICsgb3ApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWxhdGlvbk9wLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfTtcclxuICAgIFJlbGF0aW9uT3AucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lID09PSBvdGhlci5uYW1lO1xyXG4gICAgfTtcclxuICAgIFJlbGF0aW9uT3AuTEVTU19USEFOID0gbmV3IFJlbGF0aW9uT3AoJzwnKTtcclxuICAgIFJlbGF0aW9uT3AuTEVTU19USEFOX09SX0VRVUFMID0gbmV3IFJlbGF0aW9uT3AoJzw9Jyk7XHJcbiAgICBSZWxhdGlvbk9wLkVRVUFMID0gbmV3IFJlbGF0aW9uT3AoJz09Jyk7XHJcbiAgICBSZWxhdGlvbk9wLkdSRUFURVJfVEhBTiA9IG5ldyBSZWxhdGlvbk9wKCc+Jyk7XHJcbiAgICBSZWxhdGlvbk9wLkdSRUFURVJfVEhBTl9PUl9FUVVBTCA9IG5ldyBSZWxhdGlvbk9wKCc+PScpO1xyXG4gICAgUmVsYXRpb25PcC5BUlJBWV9DT05UQUlOUyA9IG5ldyBSZWxhdGlvbk9wKCdhcnJheS1jb250YWlucycpO1xyXG4gICAgcmV0dXJuIFJlbGF0aW9uT3A7XHJcbn0oKSk7XHJcbnZhciBSZWxhdGlvbkZpbHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFJlbGF0aW9uRmlsdGVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUmVsYXRpb25GaWx0ZXIoZmllbGQsIG9wLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZmllbGQgPSBmaWVsZDtcclxuICAgICAgICBfdGhpcy5vcCA9IG9wO1xyXG4gICAgICAgIF90aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgUmVsYXRpb25GaWx0ZXIucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmllbGQuaXNLZXlGaWVsZCgpKSB7XHJcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLnZhbHVlIGluc3RhbmNlb2YgUmVmVmFsdWUsICdDb21wYXJpbmcgb24ga2V5LCBidXQgZmlsdGVyIHZhbHVlIG5vdCBhIFJlZlZhbHVlJyk7XHJcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLm9wICE9PSBSZWxhdGlvbk9wLkFSUkFZX0NPTlRBSU5TLCBcImFycmF5LWNvbnRhaW5zIHF1ZXJpZXMgZG9uJ3QgbWFrZSBzZW5zZSBvbiBkb2N1bWVudCBrZXlzLlwiKTtcclxuICAgICAgICAgICAgdmFyIHJlZlZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgdmFyIGNvbXBhcmlzb24gPSBEb2N1bWVudEtleS5jb21wYXJhdG9yKGRvYy5rZXksIHJlZlZhbHVlLmtleSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hdGNoZXNDb21wYXJpc29uKGNvbXBhcmlzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IGRvYy5maWVsZCh0aGlzLmZpZWxkKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkICYmIHRoaXMubWF0Y2hlc1ZhbHVlKHZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlbGF0aW9uRmlsdGVyLnByb3RvdHlwZS5tYXRjaGVzVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLm9wID09PSBSZWxhdGlvbk9wLkFSUkFZX0NPTlRBSU5TKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheVZhbHVlICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5pbnRlcm5hbFZhbHVlLmZpbmQoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuaXNFcXVhbChfdGhpcy52YWx1ZSk7IH0pICE9PVxyXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBPbmx5IGNvbXBhcmUgdHlwZXMgd2l0aCBtYXRjaGluZyBiYWNrZW5kIG9yZGVyIChzdWNoIGFzIGRvdWJsZSBhbmQgaW50KS5cclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnZhbHVlLnR5cGVPcmRlciA9PT0gdmFsdWUudHlwZU9yZGVyICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXNDb21wYXJpc29uKHZhbHVlLmNvbXBhcmVUbyh0aGlzLnZhbHVlKSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWxhdGlvbkZpbHRlci5wcm90b3R5cGUubWF0Y2hlc0NvbXBhcmlzb24gPSBmdW5jdGlvbiAoY29tcGFyaXNvbikge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5vcCkge1xyXG4gICAgICAgICAgICBjYXNlIFJlbGF0aW9uT3AuTEVTU19USEFOOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmlzb24gPCAwO1xyXG4gICAgICAgICAgICBjYXNlIFJlbGF0aW9uT3AuTEVTU19USEFOX09SX0VRVUFMOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmlzb24gPD0gMDtcclxuICAgICAgICAgICAgY2FzZSBSZWxhdGlvbk9wLkVRVUFMOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmlzb24gPT09IDA7XHJcbiAgICAgICAgICAgIGNhc2UgUmVsYXRpb25PcC5HUkVBVEVSX1RIQU46XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGFyaXNvbiA+IDA7XHJcbiAgICAgICAgICAgIGNhc2UgUmVsYXRpb25PcC5HUkVBVEVSX1RIQU5fT1JfRVFVQUw6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGFyaXNvbiA+PSAwO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ1Vua25vd24gcmVsYXRpb24gb3AnICsgdGhpcy5vcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlbGF0aW9uRmlsdGVyLnByb3RvdHlwZS5pc0luZXF1YWxpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLm9wICE9PSBSZWxhdGlvbk9wLkVRVUFMICYmIHRoaXMub3AgIT09IFJlbGF0aW9uT3AuQVJSQVlfQ09OVEFJTlMpO1xyXG4gICAgfTtcclxuICAgIFJlbGF0aW9uRmlsdGVyLnByb3RvdHlwZS5jYW5vbmljYWxJZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBUT0RPKGIvMjkxODMxNjUpOiBUZWNobmljYWxseSwgdGhpcyB3b24ndCBiZSB1bmlxdWUgaWYgdHdvIHZhbHVlcyBoYXZlXHJcbiAgICAgICAgLy8gdGhlIHNhbWUgZGVzY3JpcHRpb24sIHN1Y2ggYXMgdGhlIGludCAzIGFuZCB0aGUgc3RyaW5nIFwiM1wiLiBTbyB3ZSBzaG91bGRcclxuICAgICAgICAvLyBhZGQgdGhlIHR5cGVzIGluIGhlcmUgc29tZWhvdywgdG9vLlxyXG4gICAgICAgIHJldHVybiAodGhpcy5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSArIHRoaXMub3AudG9TdHJpbmcoKSArIHRoaXMudmFsdWUudG9TdHJpbmcoKSk7XHJcbiAgICB9O1xyXG4gICAgUmVsYXRpb25GaWx0ZXIucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBSZWxhdGlvbkZpbHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMub3AuaXNFcXVhbChvdGhlci5vcCkgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQuaXNFcXVhbChvdGhlci5maWVsZCkgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUuaXNFcXVhbChvdGhlci52YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWxhdGlvbkZpbHRlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQuY2Fub25pY2FsU3RyaW5nKCkgKyBcIiBcIiArIHRoaXMub3AgKyBcIiBcIiArIHRoaXMudmFsdWUudmFsdWUoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVsYXRpb25GaWx0ZXI7XHJcbn0oRmlsdGVyKSk7XHJcbi8qKlxyXG4gKiBGaWx0ZXIgdGhhdCBtYXRjaGVzICdudWxsJyB2YWx1ZXMuXHJcbiAqL1xyXG52YXIgTnVsbEZpbHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKE51bGxGaWx0ZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBOdWxsRmlsdGVyKGZpZWxkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5maWVsZCA9IGZpZWxkO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE51bGxGaWx0ZXIucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgdmFyIHZhbCA9IGRvYy5maWVsZCh0aGlzLmZpZWxkKTtcclxuICAgICAgICByZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgJiYgdmFsLnZhbHVlKCkgPT09IG51bGw7XHJcbiAgICB9O1xyXG4gICAgTnVsbEZpbHRlci5wcm90b3R5cGUuY2Fub25pY2FsSWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQuY2Fub25pY2FsU3RyaW5nKCkgKyAnIElTIG51bGwnO1xyXG4gICAgfTtcclxuICAgIE51bGxGaWx0ZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLmNhbm9uaWNhbFN0cmluZygpICsgXCIgSVMgbnVsbFwiO1xyXG4gICAgfTtcclxuICAgIE51bGxGaWx0ZXIucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBOdWxsRmlsdGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkLmlzRXF1YWwob3RoZXIuZmllbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gTnVsbEZpbHRlcjtcclxufShGaWx0ZXIpKTtcclxuLyoqXHJcbiAqIEZpbHRlciB0aGF0IG1hdGNoZXMgJ05hTicgdmFsdWVzLlxyXG4gKi9cclxudmFyIE5hbkZpbHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKE5hbkZpbHRlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE5hbkZpbHRlcihmaWVsZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZmllbGQgPSBmaWVsZDtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBOYW5GaWx0ZXIucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgdmFyIGZpZWxkID0gZG9jLmZpZWxkKHRoaXMuZmllbGQpO1xyXG4gICAgICAgIHZhciB2YWwgPSBmaWVsZCAmJiBmaWVsZC52YWx1ZSgpO1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpO1xyXG4gICAgfTtcclxuICAgIE5hbkZpbHRlci5wcm90b3R5cGUuY2Fub25pY2FsSWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQuY2Fub25pY2FsU3RyaW5nKCkgKyAnIElTIE5hTic7XHJcbiAgICB9O1xyXG4gICAgTmFuRmlsdGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSArIFwiIElTIE5hTlwiO1xyXG4gICAgfTtcclxuICAgIE5hbkZpbHRlci5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIE5hbkZpbHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZC5pc0VxdWFsKG90aGVyLmZpZWxkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE5hbkZpbHRlcjtcclxufShGaWx0ZXIpKTtcclxuLyoqXHJcbiAqIFRoZSBkaXJlY3Rpb24gb2Ygc29ydGluZyBpbiBhbiBvcmRlciBieS5cclxuICovXHJcbnZhciBEaXJlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEaXJlY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcbiAgICBEaXJlY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9O1xyXG4gICAgRGlyZWN0aW9uLkFTQ0VORElORyA9IG5ldyBEaXJlY3Rpb24oJ2FzYycpO1xyXG4gICAgRGlyZWN0aW9uLkRFU0NFTkRJTkcgPSBuZXcgRGlyZWN0aW9uKCdkZXNjJyk7XHJcbiAgICByZXR1cm4gRGlyZWN0aW9uO1xyXG59KCkpO1xyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGJvdW5kIG9mIGEgcXVlcnkuXHJcbiAqXHJcbiAqIFRoZSBib3VuZCBpcyBzcGVjaWZpZWQgd2l0aCB0aGUgZ2l2ZW4gY29tcG9uZW50cyByZXByZXNlbnRpbmcgYSBwb3NpdGlvbiBhbmRcclxuICogd2hldGhlciBpdCdzIGp1c3QgYmVmb3JlIG9yIGp1c3QgYWZ0ZXIgdGhlIHBvc2l0aW9uIChyZWxhdGl2ZSB0byB3aGF0ZXZlciB0aGVcclxuICogcXVlcnkgb3JkZXIgaXMpLlxyXG4gKlxyXG4gKiBUaGUgcG9zaXRpb24gcmVwcmVzZW50cyBhIGxvZ2ljYWwgaW5kZXggcG9zaXRpb24gZm9yIGEgcXVlcnkuIEl0J3MgYSBwcmVmaXhcclxuICogb2YgdmFsdWVzIGZvciB0aGUgKHBvdGVudGlhbGx5IGltcGxpY2l0KSBvcmRlciBieSBjbGF1c2VzIG9mIGEgcXVlcnkuXHJcbiAqXHJcbiAqIEJvdW5kIHByb3ZpZGVzIGEgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkb2N1bWVudCBjb21lcyBiZWZvcmUgb3JcclxuICogYWZ0ZXIgYSBib3VuZC4gVGhpcyBpcyBpbmZsdWVuY2VkIGJ5IHdoZXRoZXIgdGhlIHBvc2l0aW9uIGlzIGp1c3QgYmVmb3JlIG9yXHJcbiAqIGp1c3QgYWZ0ZXIgdGhlIHByb3ZpZGVkIHZhbHVlcy5cclxuICovXHJcbnZhciBCb3VuZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJvdW5kKHBvc2l0aW9uLCBiZWZvcmUpIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICAgICAgdGhpcy5iZWZvcmUgPSBiZWZvcmU7XHJcbiAgICB9XHJcbiAgICBCb3VuZC5wcm90b3R5cGUuY2Fub25pY2FsSWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gVE9ETyhiLzI5MTgzMTY1KTogTWFrZSB0aGlzIGNvbGxpc2lvbiByb2J1c3QuXHJcbiAgICAgICAgdmFyIGNhbm9uaWNhbElkID0gdGhpcy5iZWZvcmUgPyAnYjonIDogJ2E6JztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5wb3NpdGlvbjsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IF9hW19pXTtcclxuICAgICAgICAgICAgY2Fub25pY2FsSWQgKz0gY29tcG9uZW50LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjYW5vbmljYWxJZDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhIGRvY3VtZW50IHNvcnRzIGJlZm9yZSBhIGJvdW5kIHVzaW5nIHRoZSBwcm92aWRlZCBzb3J0XHJcbiAgICAgKiBvcmRlci5cclxuICAgICAqL1xyXG4gICAgQm91bmQucHJvdG90eXBlLnNvcnRzQmVmb3JlRG9jdW1lbnQgPSBmdW5jdGlvbiAob3JkZXJCeSwgZG9jKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMucG9zaXRpb24ubGVuZ3RoIDw9IG9yZGVyQnkubGVuZ3RoLCBcIkJvdW5kIGhhcyBtb3JlIGNvbXBvbmVudHMgdGhhbiBxdWVyeSdzIG9yZGVyQnlcIik7XHJcbiAgICAgICAgdmFyIGNvbXBhcmlzb24gPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wb3NpdGlvbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgb3JkZXJCeUNvbXBvbmVudCA9IG9yZGVyQnlbaV07XHJcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLnBvc2l0aW9uW2ldO1xyXG4gICAgICAgICAgICBpZiAob3JkZXJCeUNvbXBvbmVudC5maWVsZC5pc0tleUZpZWxkKCkpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydChjb21wb25lbnQgaW5zdGFuY2VvZiBSZWZWYWx1ZSwgJ0JvdW5kIGhhcyBhIG5vbi1rZXkgdmFsdWUgd2hlcmUgdGhlIGtleSBwYXRoIGlzIGJlaW5nIHVzZWQuJyk7XHJcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gRG9jdW1lbnRLZXkuY29tcGFyYXRvcihjb21wb25lbnQua2V5LCBkb2Mua2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBkb2NWYWx1ZSA9IGRvYy5maWVsZChvcmRlckJ5Q29tcG9uZW50LmZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydChkb2NWYWx1ZSAhPT0gdW5kZWZpbmVkLCAnRmllbGQgc2hvdWxkIGV4aXN0IHNpbmNlIGRvY3VtZW50IG1hdGNoZWQgdGhlIG9yZGVyQnkgYWxyZWFkeS4nKTtcclxuICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSBjb21wb25lbnQuY29tcGFyZVRvKGRvY1ZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob3JkZXJCeUNvbXBvbmVudC5kaXIgPT09IERpcmVjdGlvbi5ERVNDRU5ESU5HKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gY29tcGFyaXNvbiAqIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb21wYXJpc29uICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5iZWZvcmUgPyBjb21wYXJpc29uIDw9IDAgOiBjb21wYXJpc29uIDwgMDtcclxuICAgIH07XHJcbiAgICBCb3VuZC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmJlZm9yZSAhPT0gb3RoZXIuYmVmb3JlIHx8XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ubGVuZ3RoICE9PSBvdGhlci5wb3NpdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucG9zaXRpb24ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHRoaXNQb3NpdGlvbiA9IHRoaXMucG9zaXRpb25baV07XHJcbiAgICAgICAgICAgIHZhciBvdGhlclBvc2l0aW9uID0gb3RoZXIucG9zaXRpb25baV07XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzUG9zaXRpb24uaXNFcXVhbChvdGhlclBvc2l0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJvdW5kO1xyXG59KCkpO1xyXG4vKipcclxuICogQW4gb3JkZXJpbmcgb24gYSBmaWVsZCwgaW4gc29tZSBEaXJlY3Rpb24uIERpcmVjdGlvbiBkZWZhdWx0cyB0byBBU0NFTkRJTkcuXHJcbiAqL1xyXG52YXIgT3JkZXJCeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9yZGVyQnkoZmllbGQsIGRpcikge1xyXG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcclxuICAgICAgICBpZiAoZGlyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZGlyID0gRGlyZWN0aW9uLkFTQ0VORElORztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kaXIgPSBkaXI7XHJcbiAgICAgICAgdGhpcy5pc0tleU9yZGVyQnkgPSBmaWVsZC5pc0tleUZpZWxkKCk7XHJcbiAgICB9XHJcbiAgICBPcmRlckJ5LnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKGQxLCBkMikge1xyXG4gICAgICAgIHZhciBjb21wYXJpc29uID0gdGhpcy5pc0tleU9yZGVyQnlcclxuICAgICAgICAgICAgPyBEb2N1bWVudC5jb21wYXJlQnlLZXkoZDEsIGQyKVxyXG4gICAgICAgICAgICA6IERvY3VtZW50LmNvbXBhcmVCeUZpZWxkKHRoaXMuZmllbGQsIGQxLCBkMik7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmRpcikge1xyXG4gICAgICAgICAgICBjYXNlIERpcmVjdGlvbi5BU0NFTkRJTkc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGFyaXNvbjtcclxuICAgICAgICAgICAgY2FzZSBEaXJlY3Rpb24uREVTQ0VORElORzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMSAqIGNvbXBhcmlzb247XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFpbCgnVW5rbm93biBkaXJlY3Rpb246ICcgKyB0aGlzLmRpcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9yZGVyQnkucHJvdG90eXBlLmNhbm9uaWNhbElkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFRPRE8oYi8yOTE4MzE2NSk6IE1ha2UgdGhpcyBjb2xsaXNpb24gcm9idXN0LlxyXG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLmNhbm9uaWNhbFN0cmluZygpICsgdGhpcy5kaXIudG9TdHJpbmcoKTtcclxuICAgIH07XHJcbiAgICBPcmRlckJ5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSArIFwiIChcIiArIHRoaXMuZGlyICsgXCIpXCI7XHJcbiAgICB9O1xyXG4gICAgT3JkZXJCeS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRpciA9PT0gb3RoZXIuZGlyICYmIHRoaXMuZmllbGQuaXNFcXVhbChvdGhlci5maWVsZCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9yZGVyQnk7XHJcbn0oKSk7XHJcbnZhciBLRVlfT1JERVJJTkdfQVNDID0gbmV3IE9yZGVyQnkoRmllbGRQYXRoLmtleUZpZWxkKCksIERpcmVjdGlvbi5BU0NFTkRJTkcpO1xyXG52YXIgS0VZX09SREVSSU5HX0RFU0MgPSBuZXcgT3JkZXJCeShGaWVsZFBhdGgua2V5RmllbGQoKSwgRGlyZWN0aW9uLkRFU0NFTkRJTkcpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgdmVyc2lvbiBvZiBhIGRvY3VtZW50IGluIEZpcmVzdG9yZS4gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgdmVyc2lvblxyXG4gKiB0aW1lc3RhbXAsIHN1Y2ggYXMgdXBkYXRlX3RpbWUgb3IgcmVhZF90aW1lLlxyXG4gKi9cclxudmFyIFNuYXBzaG90VmVyc2lvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNuYXBzaG90VmVyc2lvbih0aW1lc3RhbXApIHtcclxuICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcclxuICAgIH1cclxuICAgIC8vIFRPRE8oYi8zNDE3NjM0NCk6IE9uY2Ugd2Ugbm8gbG9uZ2VyIG5lZWQgdG8gdXNlIHRoZSBvbGQgYWxwaGEgcHJvdG9zLFxyXG4gICAgLy8gZGVsZXRlIHRoaXMgY29uc3RydWN0b3IgYW5kIHVzZSBhIHRpbWVzdGFtcC1iYWNrZWQgdmVyc2lvbiBldmVyeXdoZXJlLlxyXG4gICAgU25hcHNob3RWZXJzaW9uLmZyb21NaWNyb3NlY29uZHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IodmFsdWUgLyAxZTYpO1xyXG4gICAgICAgIHZhciBuYW5vcyA9ICh2YWx1ZSAlIDFlNikgKiAxZTM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTbmFwc2hvdFZlcnNpb24obmV3IFRpbWVzdGFtcChzZWNvbmRzLCBuYW5vcykpO1xyXG4gICAgfTtcclxuICAgIFNuYXBzaG90VmVyc2lvbi5mcm9tVGltZXN0YW1wID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTbmFwc2hvdFZlcnNpb24odmFsdWUpO1xyXG4gICAgfTtcclxuICAgIFNuYXBzaG90VmVyc2lvbi5mb3JEZWxldGVkRG9jID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBTbmFwc2hvdFZlcnNpb24uTUlOO1xyXG4gICAgfTtcclxuICAgIFNuYXBzaG90VmVyc2lvbi5wcm90b3R5cGUuY29tcGFyZVRvID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZXN0YW1wLl9jb21wYXJlVG8ob3RoZXIudGltZXN0YW1wKTtcclxuICAgIH07XHJcbiAgICBTbmFwc2hvdFZlcnNpb24ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXAuaXNFcXVhbChvdGhlci50aW1lc3RhbXApO1xyXG4gICAgfTtcclxuICAgIC8qKiBSZXR1cm5zIGEgbnVtYmVyIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZXJzaW9uIGZvciB1c2UgaW4gc3BlYyB0ZXN0cy4gKi9cclxuICAgIFNuYXBzaG90VmVyc2lvbi5wcm90b3R5cGUudG9NaWNyb3NlY29uZHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQ29udmVydCB0byBtaWNyb3NlY29uZHMuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZXN0YW1wLnNlY29uZHMgKiAxZTYgKyB0aGlzLnRpbWVzdGFtcC5uYW5vc2Vjb25kcyAvIDEwMDA7XHJcbiAgICB9O1xyXG4gICAgU25hcHNob3RWZXJzaW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJ1NuYXBzaG90VmVyc2lvbignICsgdGhpcy50aW1lc3RhbXAudG9TdHJpbmcoKSArICcpJztcclxuICAgIH07XHJcbiAgICBTbmFwc2hvdFZlcnNpb24ucHJvdG90eXBlLnRvVGltZXN0YW1wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVzdGFtcDtcclxuICAgIH07XHJcbiAgICBTbmFwc2hvdFZlcnNpb24uTUlOID0gbmV3IFNuYXBzaG90VmVyc2lvbihuZXcgVGltZXN0YW1wKDAsIDApKTtcclxuICAgIHJldHVybiBTbmFwc2hvdFZlcnNpb247XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKiogQW4gZW51bWVyYXRpb24gb2YgdGhlIGRpZmZlcmVudCBwdXJwb3NlcyB3ZSBoYXZlIGZvciBxdWVyaWVzLiAqL1xyXG52YXIgUXVlcnlQdXJwb3NlO1xyXG4oZnVuY3Rpb24gKFF1ZXJ5UHVycG9zZSkge1xyXG4gICAgLyoqIEEgcmVndWxhciwgbm9ybWFsIHF1ZXJ5LiAqL1xyXG4gICAgUXVlcnlQdXJwb3NlW1F1ZXJ5UHVycG9zZVtcIkxpc3RlblwiXSA9IDBdID0gXCJMaXN0ZW5cIjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHF1ZXJ5IHdhcyB1c2VkIHRvIHJlZmlsbCBhIHF1ZXJ5IGFmdGVyIGFuIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2guXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UHVycG9zZVtRdWVyeVB1cnBvc2VbXCJFeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaFwiXSA9IDFdID0gXCJFeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaFwiO1xyXG4gICAgLyoqIFRoZSBxdWVyeSB3YXMgdXNlZCB0byByZXNvbHZlIGEgbGltYm8gZG9jdW1lbnQuICovXHJcbiAgICBRdWVyeVB1cnBvc2VbUXVlcnlQdXJwb3NlW1wiTGltYm9SZXNvbHV0aW9uXCJdID0gMl0gPSBcIkxpbWJvUmVzb2x1dGlvblwiO1xyXG59KShRdWVyeVB1cnBvc2UgfHwgKFF1ZXJ5UHVycG9zZSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBbiBpbW11dGFibGUgc2V0IG9mIG1ldGFkYXRhIHRoYXQgdGhlIGxvY2FsIHN0b3JlIHRyYWNrcyBmb3IgZWFjaCBxdWVyeS5cclxuICovXHJcbnZhciBRdWVyeURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBRdWVyeURhdGEoXHJcbiAgICAvKiogVGhlIHF1ZXJ5IGJlaW5nIGxpc3RlbmVkIHRvLiAqL1xyXG4gICAgcXVlcnksIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdGFyZ2V0IElEIHRvIHdoaWNoIHRoZSBxdWVyeSBjb3JyZXNwb25kczsgQXNzaWduZWQgYnkgdGhlXHJcbiAgICAgKiBMb2NhbFN0b3JlIGZvciB1c2VyIGxpc3RlbnMgYW5kIGJ5IHRoZSBTeW5jRW5naW5lIGZvciBsaW1ibyB3YXRjaGVzLlxyXG4gICAgICovXHJcbiAgICB0YXJnZXRJZCwgXHJcbiAgICAvKiogVGhlIHB1cnBvc2Ugb2YgdGhlIHF1ZXJ5LiAqL1xyXG4gICAgcHVycG9zZSwgXHJcbiAgICAvKiogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgbGFzdCB0cmFuc2FjdGlvbiBkdXJpbmcgd2hpY2ggdGhpcyBxdWVyeSBkYXRhIHdhcyBtb2RpZmllZCAqL1xyXG4gICAgc2VxdWVuY2VOdW1iZXIsIFxyXG4gICAgLyoqIFRoZSBsYXRlc3Qgc25hcHNob3QgdmVyc2lvbiBzZWVuIGZvciB0aGlzIHRhcmdldC4gKi9cclxuICAgIHNuYXBzaG90VmVyc2lvbiwgXHJcbiAgICAvKipcclxuICAgICAqIEFuIG9wYXF1ZSwgc2VydmVyLWFzc2lnbmVkIHRva2VuIHRoYXQgYWxsb3dzIHdhdGNoaW5nIGEgcXVlcnkgdG8gYmVcclxuICAgICAqIHJlc3VtZWQgYWZ0ZXIgZGlzY29ubmVjdGluZyB3aXRob3V0IHJldHJhbnNtaXR0aW5nIGFsbCB0aGUgZGF0YSB0aGF0XHJcbiAgICAgKiBtYXRjaGVzIHRoZSBxdWVyeS4gVGhlIHJlc3VtZSB0b2tlbiBlc3NlbnRpYWxseSBpZGVudGlmaWVzIGEgcG9pbnQgaW5cclxuICAgICAqIHRpbWUgZnJvbSB3aGljaCB0aGUgc2VydmVyIHNob3VsZCByZXN1bWUgc2VuZGluZyByZXN1bHRzLlxyXG4gICAgICovXHJcbiAgICByZXN1bWVUb2tlbikge1xyXG4gICAgICAgIGlmIChzbmFwc2hvdFZlcnNpb24gPT09IHZvaWQgMCkgeyBzbmFwc2hvdFZlcnNpb24gPSBTbmFwc2hvdFZlcnNpb24uTUlOOyB9XHJcbiAgICAgICAgaWYgKHJlc3VtZVRva2VuID09PSB2b2lkIDApIHsgcmVzdW1lVG9rZW4gPSBlbXB0eUJ5dGVTdHJpbmcoKTsgfVxyXG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgICAgICB0aGlzLnRhcmdldElkID0gdGFyZ2V0SWQ7XHJcbiAgICAgICAgdGhpcy5wdXJwb3NlID0gcHVycG9zZTtcclxuICAgICAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gc2VxdWVuY2VOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5zbmFwc2hvdFZlcnNpb24gPSBzbmFwc2hvdFZlcnNpb247XHJcbiAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IHJlc3VtZVRva2VuO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHF1ZXJ5IGRhdGEgaW5zdGFuY2Ugd2l0aCBhbiB1cGRhdGVkIHNuYXBzaG90IHZlcnNpb24gYW5kXHJcbiAgICAgKiByZXN1bWUgdG9rZW4uXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5RGF0YS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChvdmVyd3JpdGUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5RGF0YSh0aGlzLnF1ZXJ5LCB0aGlzLnRhcmdldElkLCB0aGlzLnB1cnBvc2UsIG92ZXJ3cml0ZS5zZXF1ZW5jZU51bWJlciA9PT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgID8gdGhpcy5zZXF1ZW5jZU51bWJlclxyXG4gICAgICAgICAgICA6IG92ZXJ3cml0ZS5zZXF1ZW5jZU51bWJlciwgb3ZlcndyaXRlLnNuYXBzaG90VmVyc2lvbiA9PT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgID8gdGhpcy5zbmFwc2hvdFZlcnNpb25cclxuICAgICAgICAgICAgOiBvdmVyd3JpdGUuc25hcHNob3RWZXJzaW9uLCBvdmVyd3JpdGUucmVzdW1lVG9rZW4gPT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICA/IHRoaXMucmVzdW1lVG9rZW5cclxuICAgICAgICAgICAgOiBvdmVyd3JpdGUucmVzdW1lVG9rZW4pO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5RGF0YS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAodGhpcy50YXJnZXRJZCA9PT0gb3RoZXIudGFyZ2V0SWQgJiZcclxuICAgICAgICAgICAgdGhpcy5wdXJwb3NlID09PSBvdGhlci5wdXJwb3NlICYmXHJcbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VOdW1iZXIgPT09IG90aGVyLnNlcXVlbmNlTnVtYmVyICYmXHJcbiAgICAgICAgICAgIHRoaXMuc25hcHNob3RWZXJzaW9uLmlzRXF1YWwob3RoZXIuc25hcHNob3RWZXJzaW9uKSAmJlxyXG4gICAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID09PSBvdGhlci5yZXN1bWVUb2tlbiAmJlxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5LmlzRXF1YWwob3RoZXIucXVlcnkpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUXVlcnlEYXRhO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGVzIGEgc2V0IG9mIGZpZWxkcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHBhcnRpYWxseSBwYXRjaCBhIGRvY3VtZW50LlxyXG4gKiBGaWVsZE1hc2sgaXMgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIE9iamVjdFZhbHVlLlxyXG4gKiBFeGFtcGxlczpcclxuICogICBmb28gLSBPdmVyd3JpdGVzIGZvbyBlbnRpcmVseSB3aXRoIHRoZSBwcm92aWRlZCB2YWx1ZS4gSWYgZm9vIGlzIG5vdFxyXG4gKiAgICAgICAgIHByZXNlbnQgaW4gdGhlIGNvbXBhbmlvbiBPYmplY3RWYWx1ZSwgdGhlIGZpZWxkIGlzIGRlbGV0ZWQuXHJcbiAqICAgZm9vLmJhciAtIE92ZXJ3cml0ZXMgb25seSB0aGUgZmllbGQgYmFyIG9mIHRoZSBvYmplY3QgZm9vLlxyXG4gKiAgICAgICAgICAgICBJZiBmb28gaXMgbm90IGFuIG9iamVjdCwgZm9vIGlzIHJlcGxhY2VkIHdpdGggYW4gb2JqZWN0XHJcbiAqICAgICAgICAgICAgIGNvbnRhaW5pbmcgZm9vXHJcbiAqL1xyXG52YXIgRmllbGRNYXNrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmllbGRNYXNrKGZpZWxkcykge1xyXG4gICAgICAgIHRoaXMuZmllbGRzID0gZmllbGRzO1xyXG4gICAgICAgIC8vIFRPRE8oZGltb25kKTogdmFsaWRhdGlvbiBvZiBGaWVsZE1hc2tcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVmVyaWZpZXMgdGhhdCBgZmllbGRQYXRoYCBpcyBpbmNsdWRlZCBieSBhdCBsZWFzdCBvbmUgZmllbGQgaW4gdGhpcyBmaWVsZFxyXG4gICAgICogbWFzay5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIGlzIGFuIE8obikgb3BlcmF0aW9uLCB3aGVyZSBgbmAgaXMgdGhlIHNpemUgb2YgdGhlIGZpZWxkIG1hc2suXHJcbiAgICAgKi9cclxuICAgIEZpZWxkTWFzay5wcm90b3R5cGUuY292ZXJzID0gZnVuY3Rpb24gKGZpZWxkUGF0aCkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmZpZWxkczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGZpZWxkTWFza1BhdGggPSBfYVtfaV07XHJcbiAgICAgICAgICAgIGlmIChmaWVsZE1hc2tQYXRoLmlzUHJlZml4T2YoZmllbGRQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIEZpZWxkTWFzay5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiBhcnJheUVxdWFscyh0aGlzLmZpZWxkcywgb3RoZXIuZmllbGRzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmllbGRNYXNrO1xyXG59KCkpO1xyXG4vKiogQSBmaWVsZCBwYXRoIGFuZCB0aGUgVHJhbnNmb3JtT3BlcmF0aW9uIHRvIHBlcmZvcm0gdXBvbiBpdC4gKi9cclxudmFyIEZpZWxkVHJhbnNmb3JtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmllbGRUcmFuc2Zvcm0oZmllbGQsIHRyYW5zZm9ybSkge1xyXG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcclxuICAgIH1cclxuICAgIEZpZWxkVHJhbnNmb3JtLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmZpZWxkLmlzRXF1YWwob3RoZXIuZmllbGQpICYmIHRoaXMudHJhbnNmb3JtLmlzRXF1YWwob3RoZXIudHJhbnNmb3JtKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpZWxkVHJhbnNmb3JtO1xyXG59KCkpO1xyXG4vKiogVGhlIHJlc3VsdCBvZiBzdWNjZXNzZnVsbHkgYXBwbHlpbmcgYSBtdXRhdGlvbiB0byB0aGUgYmFja2VuZC4gKi9cclxudmFyIE11dGF0aW9uUmVzdWx0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTXV0YXRpb25SZXN1bHQoXHJcbiAgICAvKipcclxuICAgICAqIFRoZSB2ZXJzaW9uIGF0IHdoaWNoIHRoZSBtdXRhdGlvbiB3YXMgY29tbWl0dGVkOlxyXG4gICAgICpcclxuICAgICAqIC0gRm9yIG1vc3Qgb3BlcmF0aW9ucywgdGhpcyBpcyB0aGUgdXBkYXRlVGltZSBpbiB0aGUgV3JpdGVSZXN1bHQuXHJcbiAgICAgKiAtIEZvciBkZWxldGVzLCB0aGUgY29tbWl0VGltZSBvZiB0aGUgV3JpdGVSZXNwb25zZSAoYmVjYXVzZSBkZWxldGVzIGFyZVxyXG4gICAgICogICBub3Qgc3RvcmVkIGFuZCBoYXZlIG5vIHVwZGF0ZVRpbWUpLlxyXG4gICAgICpcclxuICAgICAqIE5vdGUgdGhhdCB0aGVzZSB2ZXJzaW9ucyBjYW4gYmUgZGlmZmVyZW50OiBOby1vcCB3cml0ZXMgd2lsbCBub3QgY2hhbmdlXHJcbiAgICAgKiB0aGUgdXBkYXRlVGltZSBldmVuIHRob3VnaCB0aGUgY29tbWl0VGltZSBhZHZhbmNlcy5cclxuICAgICAqL1xyXG4gICAgdmVyc2lvbiwgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZXN1bHRpbmcgZmllbGRzIHJldHVybmVkIGZyb20gdGhlIGJhY2tlbmQgYWZ0ZXIgYVxyXG4gICAgICogVHJhbnNmb3JtTXV0YXRpb24gaGFzIGJlZW4gY29tbWl0dGVkLiBDb250YWlucyBvbmUgRmllbGRWYWx1ZSBmb3IgZWFjaFxyXG4gICAgICogRmllbGRUcmFuc2Zvcm0gdGhhdCB3YXMgaW4gdGhlIG11dGF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIFdpbGwgYmUgbnVsbCBpZiB0aGUgbXV0YXRpb24gd2FzIG5vdCBhIFRyYW5zZm9ybU11dGF0aW9uLlxyXG4gICAgICovXHJcbiAgICB0cmFuc2Zvcm1SZXN1bHRzKSB7XHJcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybVJlc3VsdHMgPSB0cmFuc2Zvcm1SZXN1bHRzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE11dGF0aW9uUmVzdWx0O1xyXG59KCkpO1xyXG52YXIgTXV0YXRpb25UeXBlO1xyXG4oZnVuY3Rpb24gKE11dGF0aW9uVHlwZSkge1xyXG4gICAgTXV0YXRpb25UeXBlW011dGF0aW9uVHlwZVtcIlNldFwiXSA9IDBdID0gXCJTZXRcIjtcclxuICAgIE11dGF0aW9uVHlwZVtNdXRhdGlvblR5cGVbXCJQYXRjaFwiXSA9IDFdID0gXCJQYXRjaFwiO1xyXG4gICAgTXV0YXRpb25UeXBlW011dGF0aW9uVHlwZVtcIlRyYW5zZm9ybVwiXSA9IDJdID0gXCJUcmFuc2Zvcm1cIjtcclxuICAgIE11dGF0aW9uVHlwZVtNdXRhdGlvblR5cGVbXCJEZWxldGVcIl0gPSAzXSA9IFwiRGVsZXRlXCI7XHJcbn0pKE11dGF0aW9uVHlwZSB8fCAoTXV0YXRpb25UeXBlID0ge30pKTtcclxuLyoqXHJcbiAqIEVuY29kZXMgYSBwcmVjb25kaXRpb24gZm9yIGEgbXV0YXRpb24uIFRoaXMgZm9sbG93cyB0aGUgbW9kZWwgdGhhdCB0aGVcclxuICogYmFja2VuZCBhY2NlcHRzIHdpdGggdGhlIHNwZWNpYWwgY2FzZSBvZiBhbiBleHBsaWNpdCBcImVtcHR5XCIgcHJlY29uZGl0aW9uXHJcbiAqIChtZWFuaW5nIG5vIHByZWNvbmRpdGlvbikuXHJcbiAqL1xyXG52YXIgUHJlY29uZGl0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJlY29uZGl0aW9uKHVwZGF0ZVRpbWUsIGV4aXN0cykge1xyXG4gICAgICAgIHRoaXMudXBkYXRlVGltZSA9IHVwZGF0ZVRpbWU7XHJcbiAgICAgICAgdGhpcy5leGlzdHMgPSBleGlzdHM7XHJcbiAgICAgICAgYXNzZXJ0KHVwZGF0ZVRpbWUgPT09IHVuZGVmaW5lZCB8fCBleGlzdHMgPT09IHVuZGVmaW5lZCwgJ1ByZWNvbmRpdGlvbiBjYW4gc3BlY2lmeSBcImV4aXN0c1wiIG9yIFwidXBkYXRlVGltZVwiIGJ1dCBub3QgYm90aCcpO1xyXG4gICAgfVxyXG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgUHJlY29uZGl0aW9uIHdpdGggYW4gZXhpc3RzIGZsYWcuICovXHJcbiAgICBQcmVjb25kaXRpb24uZXhpc3RzID0gZnVuY3Rpb24gKGV4aXN0cykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlY29uZGl0aW9uKHVuZGVmaW5lZCwgZXhpc3RzKTtcclxuICAgIH07XHJcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBQcmVjb25kaXRpb24gYmFzZWQgb24gYSB2ZXJzaW9uIGEgZG9jdW1lbnQgZXhpc3RzIGF0LiAqL1xyXG4gICAgUHJlY29uZGl0aW9uLnVwZGF0ZVRpbWUgPSBmdW5jdGlvbiAodmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlY29uZGl0aW9uKHZlcnNpb24pO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcmVjb25kaXRpb24ucHJvdG90eXBlLCBcImlzTm9uZVwiLCB7XHJcbiAgICAgICAgLyoqIFJldHVybnMgd2hldGhlciB0aGlzIFByZWNvbmRpdGlvbiBpcyBlbXB0eS4gKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlVGltZSA9PT0gdW5kZWZpbmVkICYmIHRoaXMuZXhpc3RzID09PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJlY29uZGl0aW9ucyBpcyB2YWxpZCBmb3IgdGhlIGdpdmVuIGRvY3VtZW50XHJcbiAgICAgKiAob3IgbnVsbCBpZiBubyBkb2N1bWVudCBpcyBhdmFpbGFibGUpLlxyXG4gICAgICovXHJcbiAgICBQcmVjb25kaXRpb24ucHJvdG90eXBlLmlzVmFsaWRGb3IgPSBmdW5jdGlvbiAobWF5YmVEb2MpIHtcclxuICAgICAgICBpZiAodGhpcy51cGRhdGVUaW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChtYXliZURvYyBpbnN0YW5jZW9mIERvY3VtZW50ICYmXHJcbiAgICAgICAgICAgICAgICBtYXliZURvYy52ZXJzaW9uLmlzRXF1YWwodGhpcy51cGRhdGVUaW1lKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZXhpc3RzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhpc3RzID09PSBtYXliZURvYyBpbnN0YW5jZW9mIERvY3VtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuaXNOb25lLCAnUHJlY29uZGl0aW9uIHNob3VsZCBiZSBlbXB0eScpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUHJlY29uZGl0aW9uLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChlcXVhbHModGhpcy51cGRhdGVUaW1lLCBvdGhlci51cGRhdGVUaW1lKSAmJlxyXG4gICAgICAgICAgICB0aGlzLmV4aXN0cyA9PT0gb3RoZXIuZXhpc3RzKTtcclxuICAgIH07XHJcbiAgICBQcmVjb25kaXRpb24uTk9ORSA9IG5ldyBQcmVjb25kaXRpb24oKTtcclxuICAgIHJldHVybiBQcmVjb25kaXRpb247XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBIG11dGF0aW9uIGRlc2NyaWJlcyBhIHNlbGYtY29udGFpbmVkIGNoYW5nZSB0byBhIGRvY3VtZW50LiBNdXRhdGlvbnMgY2FuXHJcbiAqIGNyZWF0ZSwgcmVwbGFjZSwgZGVsZXRlLCBhbmQgdXBkYXRlIHN1YnNldHMgb2YgZG9jdW1lbnRzLlxyXG4gKlxyXG4gKiBNdXRhdGlvbnMgbm90IG9ubHkgYWN0IG9uIHRoZSB2YWx1ZSBvZiB0aGUgZG9jdW1lbnQgYnV0IGFsc28gaXQgdmVyc2lvbi5cclxuICpcclxuICogRm9yIGxvY2FsIG11dGF0aW9ucyAobXV0YXRpb25zIHRoYXQgaGF2ZW4ndCBiZWVuIGNvbW1pdHRlZCB5ZXQpLCB3ZSBwcmVzZXJ2ZVxyXG4gKiB0aGUgZXhpc3RpbmcgdmVyc2lvbiBmb3IgU2V0LCBQYXRjaCwgYW5kIFRyYW5zZm9ybSBtdXRhdGlvbnMuIEZvciBEZWxldGVcclxuICogbXV0YXRpb25zLCB3ZSByZXNldCB0aGUgdmVyc2lvbiB0byAwLlxyXG4gKlxyXG4gKiBIZXJlJ3MgdGhlIGV4cGVjdGVkIHRyYW5zaXRpb24gdGFibGUuXHJcbiAqXHJcbiAqIE1VVEFUSU9OICAgICAgICAgICBBUFBMSUVEIFRPICAgICAgICAgICAgUkVTVUxUUyBJTlxyXG4gKlxyXG4gKiBTZXRNdXRhdGlvbiAgICAgICAgRG9jdW1lbnQodjMpICAgICAgICAgIERvY3VtZW50KHYzKVxyXG4gKiBTZXRNdXRhdGlvbiAgICAgICAgTm9Eb2N1bWVudCh2MykgICAgICAgIERvY3VtZW50KHYwKVxyXG4gKiBTZXRNdXRhdGlvbiAgICAgICAgbnVsbCAgICAgICAgICAgICAgICAgIERvY3VtZW50KHYwKVxyXG4gKiBQYXRjaE11dGF0aW9uICAgICAgRG9jdW1lbnQodjMpICAgICAgICAgIERvY3VtZW50KHYzKVxyXG4gKiBQYXRjaE11dGF0aW9uICAgICAgTm9Eb2N1bWVudCh2MykgICAgICAgIE5vRG9jdW1lbnQodjMpXHJcbiAqIFBhdGNoTXV0YXRpb24gICAgICBudWxsICAgICAgICAgICAgICAgICAgbnVsbFxyXG4gKiBUcmFuc2Zvcm1NdXRhdGlvbiAgRG9jdW1lbnQodjMpICAgICAgICAgIERvY3VtZW50KHYzKVxyXG4gKiBUcmFuc2Zvcm1NdXRhdGlvbiAgTm9Eb2N1bWVudCh2MykgICAgICAgIE5vRG9jdW1lbnQodjMpXHJcbiAqIFRyYW5zZm9ybU11dGF0aW9uICBudWxsICAgICAgICAgICAgICAgICAgbnVsbFxyXG4gKiBEZWxldGVNdXRhdGlvbiAgICAgRG9jdW1lbnQodjMpICAgICAgICAgIE5vRG9jdW1lbnQodjApXHJcbiAqIERlbGV0ZU11dGF0aW9uICAgICBOb0RvY3VtZW50KHYzKSAgICAgICAgTm9Eb2N1bWVudCh2MClcclxuICogRGVsZXRlTXV0YXRpb24gICAgIG51bGwgICAgICAgICAgICAgICAgICBOb0RvY3VtZW50KHYwKVxyXG4gKlxyXG4gKiBGb3IgYWNrbm93bGVkZ2VkIG11dGF0aW9ucywgd2UgdXNlIHRoZSB1cGRhdGVUaW1lIG9mIHRoZSBXcml0ZVJlc3BvbnNlIGFzXHJcbiAqIHRoZSByZXN1bHRpbmcgdmVyc2lvbiBmb3IgU2V0LCBQYXRjaCwgYW5kIFRyYW5zZm9ybSBtdXRhdGlvbnMuIEFzIGRlbGV0ZXNcclxuICogaGF2ZSBubyBleHBsaWNpdCB1cGRhdGUgdGltZSwgd2UgdXNlIHRoZSBjb21taXRUaW1lIG9mIHRoZSBXcml0ZVJlc3BvbnNlIGZvclxyXG4gKiBEZWxldGUgbXV0YXRpb25zLlxyXG4gKlxyXG4gKiBJZiBhIG11dGF0aW9uIGlzIGFja25vd2xlZGdlZCBieSB0aGUgYmFja2VuZCBidXQgZmFpbHMgdGhlIHByZWNvbmRpdGlvbiBjaGVja1xyXG4gKiBsb2NhbGx5LCB3ZSByZXR1cm4gYW4gYFVua25vd25Eb2N1bWVudGAgYW5kIHJlbHkgb24gV2F0Y2ggdG8gc2VuZCB1cyB0aGVcclxuICogdXBkYXRlZCB2ZXJzaW9uLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgVHJhbnNmb3JtTXV0YXRpb25zIGRvbid0IGNyZWF0ZSBEb2N1bWVudHMgKGluIHRoZSBjYXNlIG9mIGJlaW5nXHJcbiAqIGFwcGxpZWQgdG8gYSBOb0RvY3VtZW50KSwgZXZlbiB0aG91Z2ggdGhleSB3b3VsZCBvbiB0aGUgYmFja2VuZC4gVGhpcyBpc1xyXG4gKiBiZWNhdXNlIHRoZSBjbGllbnQgYWx3YXlzIGNvbWJpbmVzIHRoZSBUcmFuc2Zvcm1NdXRhdGlvbiB3aXRoIGEgU2V0TXV0YXRpb25cclxuICogb3IgUGF0Y2hNdXRhdGlvbiBhbmQgd2Ugb25seSB3YW50IHRvIGFwcGx5IHRoZSB0cmFuc2Zvcm0gaWYgdGhlIHByaW9yXHJcbiAqIG11dGF0aW9uIHJlc3VsdGVkIGluIGEgRG9jdW1lbnQgKGFsd2F5cyB0cnVlIGZvciBhIFNldE11dGF0aW9uLCBidXQgbm90XHJcbiAqIG5lY2Vzc2FyaWx5IGZvciBhIFBhdGNoTXV0YXRpb24pLlxyXG4gKlxyXG4gKiAjIyBTdWJjbGFzc2luZyBOb3Rlc1xyXG4gKlxyXG4gKiBTdWJjbGFzc2VzIG9mIE11dGF0aW9uIG5lZWQgdG8gaW1wbGVtZW50IGFwcGx5VG9SZW1vdGVEb2N1bWVudCgpIGFuZFxyXG4gKiBhcHBseVRvTG9jYWxWaWV3KCkgdG8gaW1wbGVtZW50IHRoZSBhY3R1YWwgYmVoYXZpb3Igb2YgYXBwbHlpbmcgdGhlIG11dGF0aW9uXHJcbiAqIHRvIHNvbWUgc291cmNlIGRvY3VtZW50LlxyXG4gKi9cclxudmFyIE11dGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTXV0YXRpb24oKSB7XHJcbiAgICB9XHJcbiAgICBNdXRhdGlvbi5wcm90b3R5cGUudmVyaWZ5S2V5TWF0Y2hlcyA9IGZ1bmN0aW9uIChtYXliZURvYykge1xyXG4gICAgICAgIGlmIChtYXliZURvYyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFzc2VydChtYXliZURvYy5rZXkuaXNFcXVhbCh0aGlzLmtleSksICdDYW4gb25seSBhcHBseSBhIG11dGF0aW9uIHRvIGEgZG9jdW1lbnQgd2l0aCB0aGUgc2FtZSBrZXknKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSB2ZXJzaW9uIGZyb20gdGhlIGdpdmVuIGRvY3VtZW50IGZvciB1c2UgYXMgdGhlIHJlc3VsdCBvZiBhXHJcbiAgICAgKiBtdXRhdGlvbi4gTXV0YXRpb25zIGFyZSBkZWZpbmVkIHRvIHJldHVybiB0aGUgdmVyc2lvbiBvZiB0aGUgYmFzZSBkb2N1bWVudFxyXG4gICAgICogb25seSBpZiBpdCBpcyBhbiBleGlzdGluZyBkb2N1bWVudC4gRGVsZXRlZCBhbmQgdW5rbm93biBkb2N1bWVudHMgaGF2ZSBhXHJcbiAgICAgKiBwb3N0LW11dGF0aW9uIHZlcnNpb24gb2YgU25hcHNob3RWZXJzaW9uLk1JTi5cclxuICAgICAqL1xyXG4gICAgTXV0YXRpb24uZ2V0UG9zdE11dGF0aW9uVmVyc2lvbiA9IGZ1bmN0aW9uIChtYXliZURvYykge1xyXG4gICAgICAgIGlmIChtYXliZURvYyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXliZURvYy52ZXJzaW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNuYXBzaG90VmVyc2lvbi5NSU47XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBNdXRhdGlvbjtcclxufSgpKTtcclxuLyoqXHJcbiAqIEEgbXV0YXRpb24gdGhhdCBjcmVhdGVzIG9yIHJlcGxhY2VzIHRoZSBkb2N1bWVudCBhdCB0aGUgZ2l2ZW4ga2V5IHdpdGggdGhlXHJcbiAqIG9iamVjdCB2YWx1ZSBjb250ZW50cy5cclxuICovXHJcbnZhciBTZXRNdXRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFNldE11dGF0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU2V0TXV0YXRpb24oa2V5LCB2YWx1ZSwgcHJlY29uZGl0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgX3RoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBfdGhpcy5wcmVjb25kaXRpb24gPSBwcmVjb25kaXRpb247XHJcbiAgICAgICAgX3RoaXMudHlwZSA9IE11dGF0aW9uVHlwZS5TZXQ7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgU2V0TXV0YXRpb24ucHJvdG90eXBlLmFwcGx5VG9SZW1vdGVEb2N1bWVudCA9IGZ1bmN0aW9uIChtYXliZURvYywgbXV0YXRpb25SZXN1bHQpIHtcclxuICAgICAgICB0aGlzLnZlcmlmeUtleU1hdGNoZXMobWF5YmVEb2MpO1xyXG4gICAgICAgIGFzc2VydChtdXRhdGlvblJlc3VsdC50cmFuc2Zvcm1SZXN1bHRzID09IG51bGwsICdUcmFuc2Zvcm0gcmVzdWx0cyByZWNlaXZlZCBieSBTZXRNdXRhdGlvbi4nKTtcclxuICAgICAgICAvLyBVbmxpa2UgYXBwbHlUb0xvY2FsVmlldywgaWYgd2UncmUgYXBwbHlpbmcgYSBtdXRhdGlvbiB0byBhIHJlbW90ZVxyXG4gICAgICAgIC8vIGRvY3VtZW50IHRoZSBzZXJ2ZXIgaGFzIGFjY2VwdGVkIHRoZSBtdXRhdGlvbiBzbyB0aGUgcHJlY29uZGl0aW9uIG11c3RcclxuICAgICAgICAvLyBoYXZlIGhlbGQuXHJcbiAgICAgICAgdmFyIHZlcnNpb24gPSBtdXRhdGlvblJlc3VsdC52ZXJzaW9uO1xyXG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnQodGhpcy5rZXksIHZlcnNpb24sIHRoaXMudmFsdWUsIHtcclxuICAgICAgICAgICAgaGFzQ29tbWl0dGVkTXV0YXRpb25zOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU2V0TXV0YXRpb24ucHJvdG90eXBlLmFwcGx5VG9Mb2NhbFZpZXcgPSBmdW5jdGlvbiAobWF5YmVEb2MsIGJhc2VEb2MsIGxvY2FsV3JpdGVUaW1lKSB7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlLZXlNYXRjaGVzKG1heWJlRG9jKTtcclxuICAgICAgICBpZiAoIXRoaXMucHJlY29uZGl0aW9uLmlzVmFsaWRGb3IobWF5YmVEb2MpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXliZURvYztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZlcnNpb24gPSBNdXRhdGlvbi5nZXRQb3N0TXV0YXRpb25WZXJzaW9uKG1heWJlRG9jKTtcclxuICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50KHRoaXMua2V5LCB2ZXJzaW9uLCB0aGlzLnZhbHVlLCB7XHJcbiAgICAgICAgICAgIGhhc0xvY2FsTXV0YXRpb25zOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU2V0TXV0YXRpb24ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gKG90aGVyIGluc3RhbmNlb2YgU2V0TXV0YXRpb24gJiZcclxuICAgICAgICAgICAgdGhpcy5rZXkuaXNFcXVhbChvdGhlci5rZXkpICYmXHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUuaXNFcXVhbChvdGhlci52YWx1ZSkgJiZcclxuICAgICAgICAgICAgdGhpcy5wcmVjb25kaXRpb24uaXNFcXVhbChvdGhlci5wcmVjb25kaXRpb24pKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU2V0TXV0YXRpb247XHJcbn0oTXV0YXRpb24pKTtcclxuLyoqXHJcbiAqIEEgbXV0YXRpb24gdGhhdCBtb2RpZmllcyBmaWVsZHMgb2YgdGhlIGRvY3VtZW50IGF0IHRoZSBnaXZlbiBrZXkgd2l0aCB0aGVcclxuICogZ2l2ZW4gdmFsdWVzLiBUaGUgdmFsdWVzIGFyZSBhcHBsaWVkIHRocm91Z2ggYSBmaWVsZCBtYXNrOlxyXG4gKlxyXG4gKiAgKiBXaGVuIGEgZmllbGQgaXMgaW4gYm90aCB0aGUgbWFzayBhbmQgdGhlIHZhbHVlcywgdGhlIGNvcnJlc3BvbmRpbmcgZmllbGRcclxuICogICAgaXMgdXBkYXRlZC5cclxuICogICogV2hlbiBhIGZpZWxkIGlzIGluIG5laXRoZXIgdGhlIG1hc2sgbm9yIHRoZSB2YWx1ZXMsIHRoZSBjb3JyZXNwb25kaW5nXHJcbiAqICAgIGZpZWxkIGlzIHVubW9kaWZpZWQuXHJcbiAqICAqIFdoZW4gYSBmaWVsZCBpcyBpbiB0aGUgbWFzayBidXQgbm90IGluIHRoZSB2YWx1ZXMsIHRoZSBjb3JyZXNwb25kaW5nIGZpZWxkXHJcbiAqICAgIGlzIGRlbGV0ZWQuXHJcbiAqICAqIFdoZW4gYSBmaWVsZCBpcyBub3QgaW4gdGhlIG1hc2sgYnV0IGlzIGluIHRoZSB2YWx1ZXMsIHRoZSB2YWx1ZXMgbWFwIGlzXHJcbiAqICAgIGlnbm9yZWQuXHJcbiAqL1xyXG52YXIgUGF0Y2hNdXRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFBhdGNoTXV0YXRpb24sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQYXRjaE11dGF0aW9uKGtleSwgZGF0YSwgZmllbGRNYXNrLCBwcmVjb25kaXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmtleSA9IGtleTtcclxuICAgICAgICBfdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICBfdGhpcy5maWVsZE1hc2sgPSBmaWVsZE1hc2s7XHJcbiAgICAgICAgX3RoaXMucHJlY29uZGl0aW9uID0gcHJlY29uZGl0aW9uO1xyXG4gICAgICAgIF90aGlzLnR5cGUgPSBNdXRhdGlvblR5cGUuUGF0Y2g7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgUGF0Y2hNdXRhdGlvbi5wcm90b3R5cGUuYXBwbHlUb1JlbW90ZURvY3VtZW50ID0gZnVuY3Rpb24gKG1heWJlRG9jLCBtdXRhdGlvblJlc3VsdCkge1xyXG4gICAgICAgIHRoaXMudmVyaWZ5S2V5TWF0Y2hlcyhtYXliZURvYyk7XHJcbiAgICAgICAgYXNzZXJ0KG11dGF0aW9uUmVzdWx0LnRyYW5zZm9ybVJlc3VsdHMgPT0gbnVsbCwgJ1RyYW5zZm9ybSByZXN1bHRzIHJlY2VpdmVkIGJ5IFBhdGNoTXV0YXRpb24uJyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByZWNvbmRpdGlvbi5pc1ZhbGlkRm9yKG1heWJlRG9jKSkge1xyXG4gICAgICAgICAgICAvLyBTaW5jZSB0aGUgbXV0YXRpb24gd2FzIG5vdCByZWplY3RlZCwgd2Uga25vdyB0aGF0IHRoZSAgcHJlY29uZGl0aW9uXHJcbiAgICAgICAgICAgIC8vIG1hdGNoZWQgb24gdGhlIGJhY2tlbmQuIFdlIHRoZXJlZm9yZSBtdXN0IG5vdCBoYXZlIHRoZSBleHBlY3RlZCB2ZXJzaW9uXHJcbiAgICAgICAgICAgIC8vIG9mIHRoZSBkb2N1bWVudCBpbiBvdXIgY2FjaGUgYW5kIHJldHVybiBhbiBVbmtub3duRG9jdW1lbnQgd2l0aCB0aGVcclxuICAgICAgICAgICAgLy8ga25vd24gdXBkYXRlVGltZS5cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVbmtub3duRG9jdW1lbnQodGhpcy5rZXksIG11dGF0aW9uUmVzdWx0LnZlcnNpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmV3RGF0YSA9IHRoaXMucGF0Y2hEb2N1bWVudChtYXliZURvYyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudCh0aGlzLmtleSwgbXV0YXRpb25SZXN1bHQudmVyc2lvbiwgbmV3RGF0YSwge1xyXG4gICAgICAgICAgICBoYXNDb21taXR0ZWRNdXRhdGlvbnM6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBQYXRjaE11dGF0aW9uLnByb3RvdHlwZS5hcHBseVRvTG9jYWxWaWV3ID0gZnVuY3Rpb24gKG1heWJlRG9jLCBiYXNlRG9jLCBsb2NhbFdyaXRlVGltZSkge1xyXG4gICAgICAgIHRoaXMudmVyaWZ5S2V5TWF0Y2hlcyhtYXliZURvYyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByZWNvbmRpdGlvbi5pc1ZhbGlkRm9yKG1heWJlRG9jKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF5YmVEb2M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2ZXJzaW9uID0gTXV0YXRpb24uZ2V0UG9zdE11dGF0aW9uVmVyc2lvbihtYXliZURvYyk7XHJcbiAgICAgICAgdmFyIG5ld0RhdGEgPSB0aGlzLnBhdGNoRG9jdW1lbnQobWF5YmVEb2MpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnQodGhpcy5rZXksIHZlcnNpb24sIG5ld0RhdGEsIHtcclxuICAgICAgICAgICAgaGFzTG9jYWxNdXRhdGlvbnM6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBQYXRjaE11dGF0aW9uLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChvdGhlciBpbnN0YW5jZW9mIFBhdGNoTXV0YXRpb24gJiZcclxuICAgICAgICAgICAgdGhpcy5rZXkuaXNFcXVhbChvdGhlci5rZXkpICYmXHJcbiAgICAgICAgICAgIHRoaXMuZmllbGRNYXNrLmlzRXF1YWwob3RoZXIuZmllbGRNYXNrKSAmJlxyXG4gICAgICAgICAgICB0aGlzLnByZWNvbmRpdGlvbi5pc0VxdWFsKG90aGVyLnByZWNvbmRpdGlvbikpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUGF0Y2hlcyB0aGUgZGF0YSBvZiBkb2N1bWVudCBpZiBhdmFpbGFibGUgb3IgY3JlYXRlcyBhIG5ldyBkb2N1bWVudC4gTm90ZVxyXG4gICAgICogdGhhdCB0aGlzIGRvZXMgbm90IGNoZWNrIHdoZXRoZXIgb3Igbm90IHRoZSBwcmVjb25kaXRpb24gb2YgdGhpcyBwYXRjaFxyXG4gICAgICogaG9sZHMuXHJcbiAgICAgKi9cclxuICAgIFBhdGNoTXV0YXRpb24ucHJvdG90eXBlLnBhdGNoRG9jdW1lbnQgPSBmdW5jdGlvbiAobWF5YmVEb2MpIHtcclxuICAgICAgICB2YXIgZGF0YTtcclxuICAgICAgICBpZiAobWF5YmVEb2MgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xyXG4gICAgICAgICAgICBkYXRhID0gbWF5YmVEb2MuZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBPYmplY3RWYWx1ZS5FTVBUWTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0Y2hPYmplY3QoZGF0YSk7XHJcbiAgICB9O1xyXG4gICAgUGF0Y2hNdXRhdGlvbi5wcm90b3R5cGUucGF0Y2hPYmplY3QgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmZpZWxkTWFzay5maWVsZHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBmaWVsZFBhdGggPSBfYVtfaV07XHJcbiAgICAgICAgICAgIGlmICghZmllbGRQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5kYXRhLmZpZWxkKGZpZWxkUGF0aCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLnNldChmaWVsZFBhdGgsIG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLmRlbGV0ZShmaWVsZFBhdGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQYXRjaE11dGF0aW9uO1xyXG59KE11dGF0aW9uKSk7XHJcbi8qKlxyXG4gKiBBIG11dGF0aW9uIHRoYXQgbW9kaWZpZXMgc3BlY2lmaWMgZmllbGRzIG9mIHRoZSBkb2N1bWVudCB3aXRoIHRyYW5zZm9ybVxyXG4gKiBvcGVyYXRpb25zLiBDdXJyZW50bHkgdGhlIG9ubHkgc3VwcG9ydGVkIHRyYW5zZm9ybSBpcyBhIHNlcnZlciB0aW1lc3RhbXAsIGJ1dFxyXG4gKiBJUCBBZGRyZXNzLCBpbmNyZW1lbnQobiksIGV0Yy4gY291bGQgYmUgc3VwcG9ydGVkIGluIHRoZSBmdXR1cmUuXHJcbiAqXHJcbiAqIEl0IGlzIHNvbWV3aGF0IHNpbWlsYXIgdG8gYSBQYXRjaE11dGF0aW9uIGluIHRoYXQgaXQgcGF0Y2hlcyBzcGVjaWZpYyBmaWVsZHNcclxuICogYW5kIGhhcyBubyBlZmZlY3Qgd2hlbiBhcHBsaWVkIHRvIGEgbnVsbCBvciBOb0RvY3VtZW50IChzZWUgY29tbWVudCBvblxyXG4gKiBNdXRhdGlvbiBmb3IgcmF0aW9uYWxlKS5cclxuICovXHJcbnZhciBUcmFuc2Zvcm1NdXRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFRyYW5zZm9ybU11dGF0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gVHJhbnNmb3JtTXV0YXRpb24oa2V5LCBmaWVsZFRyYW5zZm9ybXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmtleSA9IGtleTtcclxuICAgICAgICBfdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBmaWVsZFRyYW5zZm9ybXM7XHJcbiAgICAgICAgX3RoaXMudHlwZSA9IE11dGF0aW9uVHlwZS5UcmFuc2Zvcm07XHJcbiAgICAgICAgLy8gTk9URTogV2Ugc2V0IGEgcHJlY29uZGl0aW9uIG9mIGV4aXN0czogdHJ1ZSBhcyBhIHNhZmV0eS1jaGVjaywgc2luY2Ugd2VcclxuICAgICAgICAvLyBhbHdheXMgY29tYmluZSBUcmFuc2Zvcm1NdXRhdGlvbnMgd2l0aCBhIFNldE11dGF0aW9uIG9yIFBhdGNoTXV0YXRpb24gd2hpY2hcclxuICAgICAgICAvLyAoaWYgc3VjY2Vzc2Z1bCkgc2hvdWxkIGVuZCB1cCB3aXRoIGFuIGV4aXN0aW5nIGRvY3VtZW50LlxyXG4gICAgICAgIF90aGlzLnByZWNvbmRpdGlvbiA9IFByZWNvbmRpdGlvbi5leGlzdHModHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgVHJhbnNmb3JtTXV0YXRpb24ucHJvdG90eXBlLmFwcGx5VG9SZW1vdGVEb2N1bWVudCA9IGZ1bmN0aW9uIChtYXliZURvYywgbXV0YXRpb25SZXN1bHQpIHtcclxuICAgICAgICB0aGlzLnZlcmlmeUtleU1hdGNoZXMobWF5YmVEb2MpO1xyXG4gICAgICAgIGFzc2VydChtdXRhdGlvblJlc3VsdC50cmFuc2Zvcm1SZXN1bHRzICE9IG51bGwsICdUcmFuc2Zvcm0gcmVzdWx0cyBtaXNzaW5nIGZvciBUcmFuc2Zvcm1NdXRhdGlvbi4nKTtcclxuICAgICAgICBpZiAoIXRoaXMucHJlY29uZGl0aW9uLmlzVmFsaWRGb3IobWF5YmVEb2MpKSB7XHJcbiAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBtdXRhdGlvbiB3YXMgbm90IHJlamVjdGVkLCB3ZSBrbm93IHRoYXQgdGhlICBwcmVjb25kaXRpb25cclxuICAgICAgICAgICAgLy8gbWF0Y2hlZCBvbiB0aGUgYmFja2VuZC4gV2UgdGhlcmVmb3JlIG11c3Qgbm90IGhhdmUgdGhlIGV4cGVjdGVkIHZlcnNpb25cclxuICAgICAgICAgICAgLy8gb2YgdGhlIGRvY3VtZW50IGluIG91ciBjYWNoZSBhbmQgcmV0dXJuIGFuIFVua25vd25Eb2N1bWVudCB3aXRoIHRoZVxyXG4gICAgICAgICAgICAvLyBrbm93biB1cGRhdGVUaW1lLlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVua25vd25Eb2N1bWVudCh0aGlzLmtleSwgbXV0YXRpb25SZXN1bHQudmVyc2lvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkb2MgPSB0aGlzLnJlcXVpcmVEb2N1bWVudChtYXliZURvYyk7XHJcbiAgICAgICAgdmFyIHRyYW5zZm9ybVJlc3VsdHMgPSB0aGlzLnNlcnZlclRyYW5zZm9ybVJlc3VsdHMobWF5YmVEb2MsIG11dGF0aW9uUmVzdWx0LnRyYW5zZm9ybVJlc3VsdHMpO1xyXG4gICAgICAgIHZhciB2ZXJzaW9uID0gbXV0YXRpb25SZXN1bHQudmVyc2lvbjtcclxuICAgICAgICB2YXIgbmV3RGF0YSA9IHRoaXMudHJhbnNmb3JtT2JqZWN0KGRvYy5kYXRhLCB0cmFuc2Zvcm1SZXN1bHRzKTtcclxuICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50KHRoaXMua2V5LCB2ZXJzaW9uLCBuZXdEYXRhLCB7XHJcbiAgICAgICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFRyYW5zZm9ybU11dGF0aW9uLnByb3RvdHlwZS5hcHBseVRvTG9jYWxWaWV3ID0gZnVuY3Rpb24gKG1heWJlRG9jLCBiYXNlRG9jLCBsb2NhbFdyaXRlVGltZSkge1xyXG4gICAgICAgIHRoaXMudmVyaWZ5S2V5TWF0Y2hlcyhtYXliZURvYyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByZWNvbmRpdGlvbi5pc1ZhbGlkRm9yKG1heWJlRG9jKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF5YmVEb2M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkb2MgPSB0aGlzLnJlcXVpcmVEb2N1bWVudChtYXliZURvYyk7XHJcbiAgICAgICAgdmFyIHRyYW5zZm9ybVJlc3VsdHMgPSB0aGlzLmxvY2FsVHJhbnNmb3JtUmVzdWx0cyhsb2NhbFdyaXRlVGltZSwgYmFzZURvYyk7XHJcbiAgICAgICAgdmFyIG5ld0RhdGEgPSB0aGlzLnRyYW5zZm9ybU9iamVjdChkb2MuZGF0YSwgdHJhbnNmb3JtUmVzdWx0cyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudCh0aGlzLmtleSwgZG9jLnZlcnNpb24sIG5ld0RhdGEsIHtcclxuICAgICAgICAgICAgaGFzTG9jYWxNdXRhdGlvbnM6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBUcmFuc2Zvcm1NdXRhdGlvbi5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAob3RoZXIgaW5zdGFuY2VvZiBUcmFuc2Zvcm1NdXRhdGlvbiAmJlxyXG4gICAgICAgICAgICB0aGlzLmtleS5pc0VxdWFsKG90aGVyLmtleSkgJiZcclxuICAgICAgICAgICAgYXJyYXlFcXVhbHModGhpcy5maWVsZFRyYW5zZm9ybXMsIG90aGVyLmZpZWxkVHJhbnNmb3JtcykgJiZcclxuICAgICAgICAgICAgdGhpcy5wcmVjb25kaXRpb24uaXNFcXVhbChvdGhlci5wcmVjb25kaXRpb24pKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gTWF5YmVEb2N1bWVudCBpcyBhY3R1YWxseSBhIERvY3VtZW50IGFuZCB2ZXJpZmllc1xyXG4gICAgICogdGhhdCBpdCBtYXRjaGVzIHRoZSBrZXkgZm9yIHRoaXMgbXV0YXRpb24uIFNpbmNlIHdlIG9ubHkgc3VwcG9ydFxyXG4gICAgICogdHJhbnNmb3JtYXRpb25zIHdpdGggcHJlY29uZGl0aW9uIGV4aXN0cyB0aGlzIG1ldGhvZCBpcyBndWFyYW50ZWVkIHRvIGJlXHJcbiAgICAgKiBzYWZlLlxyXG4gICAgICovXHJcbiAgICBUcmFuc2Zvcm1NdXRhdGlvbi5wcm90b3R5cGUucmVxdWlyZURvY3VtZW50ID0gZnVuY3Rpb24gKG1heWJlRG9jKSB7XHJcbiAgICAgICAgYXNzZXJ0KG1heWJlRG9jIGluc3RhbmNlb2YgRG9jdW1lbnQsICdVbmtub3duIE1heWJlRG9jdW1lbnQgdHlwZSAnICsgbWF5YmVEb2MpO1xyXG4gICAgICAgIHZhciBkb2MgPSBtYXliZURvYztcclxuICAgICAgICBhc3NlcnQoZG9jLmtleS5pc0VxdWFsKHRoaXMua2V5KSwgJ0NhbiBvbmx5IHRyYW5zZm9ybSBhIGRvY3VtZW50IHdpdGggdGhlIHNhbWUga2V5Jyk7XHJcbiAgICAgICAgcmV0dXJuIGRvYztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBsaXN0IG9mIFwidHJhbnNmb3JtIHJlc3VsdHNcIiAoYSB0cmFuc2Zvcm0gcmVzdWx0IGlzIGEgZmllbGQgdmFsdWVcclxuICAgICAqIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIGEgdHJhbnNmb3JtKSBmb3IgdXNlIGFmdGVyIGFcclxuICAgICAqIFRyYW5zZm9ybU11dGF0aW9uIGhhcyBiZWVuIGFja25vd2xlZGdlZCBieSB0aGUgc2VydmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBiYXNlRG9jIFRoZSBkb2N1bWVudCBwcmlvciB0byBhcHBseWluZyB0aGlzIG11dGF0aW9uIGJhdGNoLlxyXG4gICAgICogQHBhcmFtIHNlcnZlclRyYW5zZm9ybVJlc3VsdHMgVGhlIHRyYW5zZm9ybSByZXN1bHRzIHJlY2VpdmVkIGJ5IHRoZSBzZXJ2ZXIuXHJcbiAgICAgKiBAcmV0dXJuIFRoZSB0cmFuc2Zvcm0gcmVzdWx0cyBsaXN0LlxyXG4gICAgICovXHJcbiAgICBUcmFuc2Zvcm1NdXRhdGlvbi5wcm90b3R5cGUuc2VydmVyVHJhbnNmb3JtUmVzdWx0cyA9IGZ1bmN0aW9uIChiYXNlRG9jLCBzZXJ2ZXJUcmFuc2Zvcm1SZXN1bHRzKSB7XHJcbiAgICAgICAgdmFyIHRyYW5zZm9ybVJlc3VsdHMgPSBbXTtcclxuICAgICAgICBhc3NlcnQodGhpcy5maWVsZFRyYW5zZm9ybXMubGVuZ3RoID09PSBzZXJ2ZXJUcmFuc2Zvcm1SZXN1bHRzLmxlbmd0aCwgXCJzZXJ2ZXIgdHJhbnNmb3JtIHJlc3VsdCBjb3VudCAoXCIgKyBzZXJ2ZXJUcmFuc2Zvcm1SZXN1bHRzLmxlbmd0aCArIFwiKSBcIiArXHJcbiAgICAgICAgICAgIChcInNob3VsZCBtYXRjaCBmaWVsZCB0cmFuc2Zvcm0gY291bnQgKFwiICsgdGhpcy5maWVsZFRyYW5zZm9ybXMubGVuZ3RoICsgXCIpXCIpKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcnZlclRyYW5zZm9ybVJlc3VsdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGZpZWxkVHJhbnNmb3JtID0gdGhpcy5maWVsZFRyYW5zZm9ybXNbaV07XHJcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBmaWVsZFRyYW5zZm9ybS50cmFuc2Zvcm07XHJcbiAgICAgICAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKGJhc2VEb2MgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGJhc2VEb2MuZmllbGQoZmllbGRUcmFuc2Zvcm0uZmllbGQpIHx8IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJhbnNmb3JtUmVzdWx0cy5wdXNoKHRyYW5zZm9ybS5hcHBseVRvUmVtb3RlRG9jdW1lbnQocHJldmlvdXNWYWx1ZSwgc2VydmVyVHJhbnNmb3JtUmVzdWx0c1tpXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtUmVzdWx0cztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBsaXN0IG9mIFwidHJhbnNmb3JtIHJlc3VsdHNcIiAoYSB0cmFuc2Zvcm0gcmVzdWx0IGlzIGEgZmllbGQgdmFsdWVcclxuICAgICAqIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIGEgdHJhbnNmb3JtKSBmb3IgdXNlIHdoZW4gYXBwbHlpbmcgYVxyXG4gICAgICogVHJhbnNmb3JtTXV0YXRpb24gbG9jYWxseS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbG9jYWxXcml0ZVRpbWUgVGhlIGxvY2FsIHRpbWUgb2YgdGhlIHRyYW5zZm9ybSBtdXRhdGlvbiAodXNlZCB0b1xyXG4gICAgICogICAgIGdlbmVyYXRlIFNlcnZlclRpbWVzdGFtcFZhbHVlcykuXHJcbiAgICAgKiBAcGFyYW0gYmFzZURvYyBUaGUgZG9jdW1lbnQgcHJpb3IgdG8gYXBwbHlpbmcgdGhpcyBtdXRhdGlvbiBiYXRjaC5cclxuICAgICAqIEByZXR1cm4gVGhlIHRyYW5zZm9ybSByZXN1bHRzIGxpc3QuXHJcbiAgICAgKi9cclxuICAgIFRyYW5zZm9ybU11dGF0aW9uLnByb3RvdHlwZS5sb2NhbFRyYW5zZm9ybVJlc3VsdHMgPSBmdW5jdGlvbiAobG9jYWxXcml0ZVRpbWUsIGJhc2VEb2MpIHtcclxuICAgICAgICB2YXIgdHJhbnNmb3JtUmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmZpZWxkVHJhbnNmb3JtczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGZpZWxkVHJhbnNmb3JtID0gX2FbX2ldO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gZmllbGRUcmFuc2Zvcm0udHJhbnNmb3JtO1xyXG4gICAgICAgICAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChiYXNlRG9jIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBiYXNlRG9jLmZpZWxkKGZpZWxkVHJhbnNmb3JtLmZpZWxkKSB8fCBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVJlc3VsdHMucHVzaCh0cmFuc2Zvcm0uYXBwbHlUb0xvY2FsVmlldyhwcmV2aW91c1ZhbHVlLCBsb2NhbFdyaXRlVGltZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtUmVzdWx0cztcclxuICAgIH07XHJcbiAgICBUcmFuc2Zvcm1NdXRhdGlvbi5wcm90b3R5cGUudHJhbnNmb3JtT2JqZWN0ID0gZnVuY3Rpb24gKGRhdGEsIHRyYW5zZm9ybVJlc3VsdHMpIHtcclxuICAgICAgICBhc3NlcnQodHJhbnNmb3JtUmVzdWx0cy5sZW5ndGggPT09IHRoaXMuZmllbGRUcmFuc2Zvcm1zLmxlbmd0aCwgJ1RyYW5zZm9ybVJlc3VsdHMgbGVuZ3RoIG1pc21hdGNoLicpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWVsZFRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGZpZWxkVHJhbnNmb3JtID0gdGhpcy5maWVsZFRyYW5zZm9ybXNbaV07XHJcbiAgICAgICAgICAgIHZhciBmaWVsZFBhdGggPSBmaWVsZFRyYW5zZm9ybS5maWVsZDtcclxuICAgICAgICAgICAgZGF0YSA9IGRhdGEuc2V0KGZpZWxkUGF0aCwgdHJhbnNmb3JtUmVzdWx0c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBUcmFuc2Zvcm1NdXRhdGlvbjtcclxufShNdXRhdGlvbikpO1xyXG4vKiogQSBtdXRhdGlvbiB0aGF0IGRlbGV0ZXMgdGhlIGRvY3VtZW50IGF0IHRoZSBnaXZlbiBrZXkuICovXHJcbnZhciBEZWxldGVNdXRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKERlbGV0ZU11dGF0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRGVsZXRlTXV0YXRpb24oa2V5LCBwcmVjb25kaXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmtleSA9IGtleTtcclxuICAgICAgICBfdGhpcy5wcmVjb25kaXRpb24gPSBwcmVjb25kaXRpb247XHJcbiAgICAgICAgX3RoaXMudHlwZSA9IE11dGF0aW9uVHlwZS5EZWxldGU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgRGVsZXRlTXV0YXRpb24ucHJvdG90eXBlLmFwcGx5VG9SZW1vdGVEb2N1bWVudCA9IGZ1bmN0aW9uIChtYXliZURvYywgbXV0YXRpb25SZXN1bHQpIHtcclxuICAgICAgICB0aGlzLnZlcmlmeUtleU1hdGNoZXMobWF5YmVEb2MpO1xyXG4gICAgICAgIGFzc2VydChtdXRhdGlvblJlc3VsdC50cmFuc2Zvcm1SZXN1bHRzID09IG51bGwsICdUcmFuc2Zvcm0gcmVzdWx0cyByZWNlaXZlZCBieSBEZWxldGVNdXRhdGlvbi4nKTtcclxuICAgICAgICAvLyBVbmxpa2UgYXBwbHlUb0xvY2FsVmlldywgaWYgd2UncmUgYXBwbHlpbmcgYSBtdXRhdGlvbiB0byBhIHJlbW90ZVxyXG4gICAgICAgIC8vIGRvY3VtZW50IHRoZSBzZXJ2ZXIgaGFzIGFjY2VwdGVkIHRoZSBtdXRhdGlvbiBzbyB0aGUgcHJlY29uZGl0aW9uIG11c3RcclxuICAgICAgICAvLyBoYXZlIGhlbGQuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBOb0RvY3VtZW50KHRoaXMua2V5LCBtdXRhdGlvblJlc3VsdC52ZXJzaW9uLCB7XHJcbiAgICAgICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIERlbGV0ZU11dGF0aW9uLnByb3RvdHlwZS5hcHBseVRvTG9jYWxWaWV3ID0gZnVuY3Rpb24gKG1heWJlRG9jLCBiYXNlRG9jLCBsb2NhbFdyaXRlVGltZSkge1xyXG4gICAgICAgIHRoaXMudmVyaWZ5S2V5TWF0Y2hlcyhtYXliZURvYyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByZWNvbmRpdGlvbi5pc1ZhbGlkRm9yKG1heWJlRG9jKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF5YmVEb2M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtYXliZURvYykge1xyXG4gICAgICAgICAgICBhc3NlcnQobWF5YmVEb2Mua2V5LmlzRXF1YWwodGhpcy5rZXkpLCAnQ2FuIG9ubHkgYXBwbHkgbXV0YXRpb24gdG8gZG9jdW1lbnQgd2l0aCBzYW1lIGtleScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IE5vRG9jdW1lbnQodGhpcy5rZXksIFNuYXBzaG90VmVyc2lvbi5mb3JEZWxldGVkRG9jKCkpO1xyXG4gICAgfTtcclxuICAgIERlbGV0ZU11dGF0aW9uLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChvdGhlciBpbnN0YW5jZW9mIERlbGV0ZU11dGF0aW9uICYmXHJcbiAgICAgICAgICAgIHRoaXMua2V5LmlzRXF1YWwob3RoZXIua2V5KSAmJlxyXG4gICAgICAgICAgICB0aGlzLnByZWNvbmRpdGlvbi5pc0VxdWFsKG90aGVyLnByZWNvbmRpdGlvbikpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEZWxldGVNdXRhdGlvbjtcclxufShNdXRhdGlvbikpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIFRyYW5zZm9ybXMgYSB2YWx1ZSBpbnRvIGEgc2VydmVyLWdlbmVyYXRlZCB0aW1lc3RhbXAuICovXHJcbnZhciBTZXJ2ZXJUaW1lc3RhbXBUcmFuc2Zvcm0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTZXJ2ZXJUaW1lc3RhbXBUcmFuc2Zvcm0oKSB7XHJcbiAgICB9XHJcbiAgICBTZXJ2ZXJUaW1lc3RhbXBUcmFuc2Zvcm0ucHJvdG90eXBlLmFwcGx5VG9Mb2NhbFZpZXcgPSBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgbG9jYWxXcml0ZVRpbWUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNlcnZlclRpbWVzdGFtcFZhbHVlKGxvY2FsV3JpdGVUaW1lLCBwcmV2aW91c1ZhbHVlKTtcclxuICAgIH07XHJcbiAgICBTZXJ2ZXJUaW1lc3RhbXBUcmFuc2Zvcm0ucHJvdG90eXBlLmFwcGx5VG9SZW1vdGVEb2N1bWVudCA9IGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCB0cmFuc2Zvcm1SZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtUmVzdWx0O1xyXG4gICAgfTtcclxuICAgIFNlcnZlclRpbWVzdGFtcFRyYW5zZm9ybS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFNlcnZlclRpbWVzdGFtcFRyYW5zZm9ybTtcclxuICAgIH07XHJcbiAgICBTZXJ2ZXJUaW1lc3RhbXBUcmFuc2Zvcm0uaW5zdGFuY2UgPSBuZXcgU2VydmVyVGltZXN0YW1wVHJhbnNmb3JtKCk7XHJcbiAgICByZXR1cm4gU2VydmVyVGltZXN0YW1wVHJhbnNmb3JtO1xyXG59KCkpO1xyXG4vKiogVHJhbnNmb3JtcyBhbiBhcnJheSB2YWx1ZSB2aWEgYSB1bmlvbiBvcGVyYXRpb24uICovXHJcbnZhciBBcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXJyYXlVbmlvblRyYW5zZm9ybU9wZXJhdGlvbihlbGVtZW50cykge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcclxuICAgIH1cclxuICAgIEFycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24ucHJvdG90eXBlLmFwcGx5VG9Mb2NhbFZpZXcgPSBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgbG9jYWxXcml0ZVRpbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseShwcmV2aW91c1ZhbHVlKTtcclxuICAgIH07XHJcbiAgICBBcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uLnByb3RvdHlwZS5hcHBseVRvUmVtb3RlRG9jdW1lbnQgPSBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgdHJhbnNmb3JtUmVzdWx0KSB7XHJcbiAgICAgICAgLy8gVGhlIHNlcnZlciBqdXN0IHNlbmRzIG51bGwgYXMgdGhlIHRyYW5zZm9ybSByZXN1bHQgZm9yIGFycmF5IG9wZXJhdGlvbnMsXHJcbiAgICAgICAgLy8gc28gd2UgaGF2ZSB0byBjYWxjdWxhdGUgYSByZXN1bHQgdGhlIHNhbWUgYXMgd2UgZG8gZm9yIGxvY2FsXHJcbiAgICAgICAgLy8gYXBwbGljYXRpb25zLlxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHByZXZpb3VzVmFsdWUpO1xyXG4gICAgfTtcclxuICAgIEFycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24ucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gY29lcmNlZEZpZWxkVmFsdWVzQXJyYXkocHJldmlvdXNWYWx1ZSk7XHJcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAodG9Vbmlvbikge1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5maW5kKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LmlzRXF1YWwodG9Vbmlvbik7IH0pKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0b1VuaW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuZWxlbWVudHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB0b1VuaW9uID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBfbG9vcF8xKHRvVW5pb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEFycmF5VmFsdWUocmVzdWx0KTtcclxuICAgIH07XHJcbiAgICBBcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChvdGhlciBpbnN0YW5jZW9mIEFycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24gJiZcclxuICAgICAgICAgICAgYXJyYXlFcXVhbHMob3RoZXIuZWxlbWVudHMsIHRoaXMuZWxlbWVudHMpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQXJyYXlVbmlvblRyYW5zZm9ybU9wZXJhdGlvbjtcclxufSgpKTtcclxuLyoqIFRyYW5zZm9ybXMgYW4gYXJyYXkgdmFsdWUgdmlhIGEgcmVtb3ZlIG9wZXJhdGlvbi4gKi9cclxudmFyIEFycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXJyYXlSZW1vdmVUcmFuc2Zvcm1PcGVyYXRpb24oZWxlbWVudHMpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XHJcbiAgICB9XHJcbiAgICBBcnJheVJlbW92ZVRyYW5zZm9ybU9wZXJhdGlvbi5wcm90b3R5cGUuYXBwbHlUb0xvY2FsVmlldyA9IGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBsb2NhbFdyaXRlVGltZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHByZXZpb3VzVmFsdWUpO1xyXG4gICAgfTtcclxuICAgIEFycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uLnByb3RvdHlwZS5hcHBseVRvUmVtb3RlRG9jdW1lbnQgPSBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgdHJhbnNmb3JtUmVzdWx0KSB7XHJcbiAgICAgICAgLy8gVGhlIHNlcnZlciBqdXN0IHNlbmRzIG51bGwgYXMgdGhlIHRyYW5zZm9ybSByZXN1bHQgZm9yIGFycmF5IG9wZXJhdGlvbnMsXHJcbiAgICAgICAgLy8gc28gd2UgaGF2ZSB0byBjYWxjdWxhdGUgYSByZXN1bHQgdGhlIHNhbWUgYXMgd2UgZG8gZm9yIGxvY2FsXHJcbiAgICAgICAgLy8gYXBwbGljYXRpb25zLlxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHByZXZpb3VzVmFsdWUpO1xyXG4gICAgfTtcclxuICAgIEFycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvZXJjZWRGaWVsZFZhbHVlc0FycmF5KHByZXZpb3VzVmFsdWUpO1xyXG4gICAgICAgIHZhciBfbG9vcF8yID0gZnVuY3Rpb24gKHRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuICFlbGVtZW50LmlzRXF1YWwodG9SZW1vdmUpOyB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmVsZW1lbnRzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgdG9SZW1vdmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIF9sb29wXzIodG9SZW1vdmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEFycmF5VmFsdWUocmVzdWx0KTtcclxuICAgIH07XHJcbiAgICBBcnJheVJlbW92ZVRyYW5zZm9ybU9wZXJhdGlvbi5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAob3RoZXIgaW5zdGFuY2VvZiBBcnJheVJlbW92ZVRyYW5zZm9ybU9wZXJhdGlvbiAmJlxyXG4gICAgICAgICAgICBhcnJheUVxdWFscyhvdGhlci5lbGVtZW50cywgdGhpcy5lbGVtZW50cykpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBcnJheVJlbW92ZVRyYW5zZm9ybU9wZXJhdGlvbjtcclxufSgpKTtcclxuZnVuY3Rpb24gY29lcmNlZEZpZWxkVmFsdWVzQXJyYXkodmFsdWUpIHtcclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5VmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuaW50ZXJuYWxWYWx1ZS5zbGljZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gY29lcmNlIHRvIGVtcHR5IGFycmF5LlxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIEV4aXN0ZW5jZUZpbHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFRPRE8oYi8zMzA3ODE2Myk6IGp1c3QgdXNlIHNpbXBsZXN0IGZvcm0gb2YgZXhpc3RlbmNlIGZpbHRlciBmb3Igbm93XHJcbiAgICBmdW5jdGlvbiBFeGlzdGVuY2VGaWx0ZXIoY291bnQpIHtcclxuICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XHJcbiAgICB9XHJcbiAgICBFeGlzdGVuY2VGaWx0ZXIucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gb3RoZXIgJiYgb3RoZXIuY291bnQgPT09IHRoaXMuY291bnQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEV4aXN0ZW5jZUZpbHRlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFcnJvciBDb2RlcyBkZXNjcmliaW5nIHRoZSBkaWZmZXJlbnQgd2F5cyBHUlBDIGNhbiBmYWlsLiBUaGVzZSBhcmUgY29waWVkXHJcbiAqIGRpcmVjdGx5IGZyb20gR1JQQydzIHNvdXJjZXMgaGVyZTpcclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL2dycGMvZ3JwYy9ibG9iL2JjZWVjOTRlYTRmYzVmMDA4NWQ4MTIzNWQ4ZTFjMDY3OThkYzM0MWEvaW5jbHVkZS9ncnBjJTJCJTJCL2ltcGwvY29kZWdlbi9zdGF0dXNfY29kZV9lbnVtLmhcclxuICpcclxuICogSW1wb3J0YW50ISBUaGUgbmFtZXMgb2YgdGhlc2UgaWRlbnRpZmllcnMgbWF0dGVyIGJlY2F1c2UgdGhlIHN0cmluZyBmb3Jtc1xyXG4gKiBhcmUgdXNlZCBmb3IgcmV2ZXJzZSBsb29rdXBzIGZyb20gdGhlIHdlYmNoYW5uZWwgc3RyZWFtLiBEbyBOT1QgY2hhbmdlIHRoZVxyXG4gKiBuYW1lcyBvZiB0aGVzZSBpZGVudGlmaWVycy5cclxuICovXHJcbnZhciBScGNDb2RlO1xyXG4oZnVuY3Rpb24gKFJwY0NvZGUpIHtcclxuICAgIFJwY0NvZGVbUnBjQ29kZVtcIk9LXCJdID0gMF0gPSBcIk9LXCI7XHJcbiAgICBScGNDb2RlW1JwY0NvZGVbXCJDQU5DRUxMRURcIl0gPSAxXSA9IFwiQ0FOQ0VMTEVEXCI7XHJcbiAgICBScGNDb2RlW1JwY0NvZGVbXCJVTktOT1dOXCJdID0gMl0gPSBcIlVOS05PV05cIjtcclxuICAgIFJwY0NvZGVbUnBjQ29kZVtcIklOVkFMSURfQVJHVU1FTlRcIl0gPSAzXSA9IFwiSU5WQUxJRF9BUkdVTUVOVFwiO1xyXG4gICAgUnBjQ29kZVtScGNDb2RlW1wiREVBRExJTkVfRVhDRUVERURcIl0gPSA0XSA9IFwiREVBRExJTkVfRVhDRUVERURcIjtcclxuICAgIFJwY0NvZGVbUnBjQ29kZVtcIk5PVF9GT1VORFwiXSA9IDVdID0gXCJOT1RfRk9VTkRcIjtcclxuICAgIFJwY0NvZGVbUnBjQ29kZVtcIkFMUkVBRFlfRVhJU1RTXCJdID0gNl0gPSBcIkFMUkVBRFlfRVhJU1RTXCI7XHJcbiAgICBScGNDb2RlW1JwY0NvZGVbXCJQRVJNSVNTSU9OX0RFTklFRFwiXSA9IDddID0gXCJQRVJNSVNTSU9OX0RFTklFRFwiO1xyXG4gICAgUnBjQ29kZVtScGNDb2RlW1wiVU5BVVRIRU5USUNBVEVEXCJdID0gMTZdID0gXCJVTkFVVEhFTlRJQ0FURURcIjtcclxuICAgIFJwY0NvZGVbUnBjQ29kZVtcIlJFU09VUkNFX0VYSEFVU1RFRFwiXSA9IDhdID0gXCJSRVNPVVJDRV9FWEhBVVNURURcIjtcclxuICAgIFJwY0NvZGVbUnBjQ29kZVtcIkZBSUxFRF9QUkVDT05ESVRJT05cIl0gPSA5XSA9IFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiO1xyXG4gICAgUnBjQ29kZVtScGNDb2RlW1wiQUJPUlRFRFwiXSA9IDEwXSA9IFwiQUJPUlRFRFwiO1xyXG4gICAgUnBjQ29kZVtScGNDb2RlW1wiT1VUX09GX1JBTkdFXCJdID0gMTFdID0gXCJPVVRfT0ZfUkFOR0VcIjtcclxuICAgIFJwY0NvZGVbUnBjQ29kZVtcIlVOSU1QTEVNRU5URURcIl0gPSAxMl0gPSBcIlVOSU1QTEVNRU5URURcIjtcclxuICAgIFJwY0NvZGVbUnBjQ29kZVtcIklOVEVSTkFMXCJdID0gMTNdID0gXCJJTlRFUk5BTFwiO1xyXG4gICAgUnBjQ29kZVtScGNDb2RlW1wiVU5BVkFJTEFCTEVcIl0gPSAxNF0gPSBcIlVOQVZBSUxBQkxFXCI7XHJcbiAgICBScGNDb2RlW1JwY0NvZGVbXCJEQVRBX0xPU1NcIl0gPSAxNV0gPSBcIkRBVEFfTE9TU1wiO1xyXG59KShScGNDb2RlIHx8IChScGNDb2RlID0ge30pKTtcclxuZnVuY3Rpb24gaXNQZXJtYW5lbnRFcnJvcihjb2RlKSB7XHJcbiAgICBzd2l0Y2ggKGNvZGUpIHtcclxuICAgICAgICBjYXNlIENvZGUuT0s6XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsKCdUcmVhdGVkIHN0YXR1cyBPSyBhcyBlcnJvcicpO1xyXG4gICAgICAgIGNhc2UgQ29kZS5DQU5DRUxMRUQ6XHJcbiAgICAgICAgY2FzZSBDb2RlLlVOS05PV046XHJcbiAgICAgICAgY2FzZSBDb2RlLkRFQURMSU5FX0VYQ0VFREVEOlxyXG4gICAgICAgIGNhc2UgQ29kZS5SRVNPVVJDRV9FWEhBVVNURUQ6XHJcbiAgICAgICAgY2FzZSBDb2RlLklOVEVSTkFMOlxyXG4gICAgICAgIGNhc2UgQ29kZS5VTkFWQUlMQUJMRTpcclxuICAgICAgICAvLyBVbmF1dGhlbnRpY2F0ZWQgbWVhbnMgc29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCBvdXIgdG9rZW4gYW5kIHdlIG5lZWRcclxuICAgICAgICAvLyB0byByZXRyeSB3aXRoIG5ldyBjcmVkZW50aWFscyB3aGljaCB3aWxsIGhhcHBlbiBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICAgIGNhc2UgQ29kZS5VTkFVVEhFTlRJQ0FURUQ6XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBjYXNlIENvZGUuSU5WQUxJRF9BUkdVTUVOVDpcclxuICAgICAgICBjYXNlIENvZGUuTk9UX0ZPVU5EOlxyXG4gICAgICAgIGNhc2UgQ29kZS5BTFJFQURZX0VYSVNUUzpcclxuICAgICAgICBjYXNlIENvZGUuUEVSTUlTU0lPTl9ERU5JRUQ6XHJcbiAgICAgICAgY2FzZSBDb2RlLkZBSUxFRF9QUkVDT05ESVRJT046XHJcbiAgICAgICAgLy8gQWJvcnRlZCBtaWdodCBiZSByZXRyaWVkIGluIHNvbWUgc2NlbmFyaW9zLCBidXQgdGhhdCBpcyBkZXBlbmRhbnQgb25cclxuICAgICAgICAvLyB0aGUgY29udGV4dCBhbmQgc2hvdWxkIGhhbmRsZWQgaW5kaXZpZHVhbGx5IGJ5IHRoZSBjYWxsaW5nIGNvZGUuXHJcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9hcGlzL2Rlc2lnbi9lcnJvcnMuXHJcbiAgICAgICAgY2FzZSBDb2RlLkFCT1JURUQ6XHJcbiAgICAgICAgY2FzZSBDb2RlLk9VVF9PRl9SQU5HRTpcclxuICAgICAgICBjYXNlIENvZGUuVU5JTVBMRU1FTlRFRDpcclxuICAgICAgICBjYXNlIENvZGUuREFUQV9MT1NTOlxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gZmFpbCgnVW5rbm93biBzdGF0dXMgY29kZTogJyArIGNvZGUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBNYXBzIGFuIGVycm9yIENvZGUgZnJvbSBhIEdSUEMgc3RhdHVzIGlkZW50aWZpZXIgbGlrZSAnTk9UX0ZPVU5EJy5cclxuICpcclxuICogQHJldHVybnMgVGhlIENvZGUgZXF1aXZhbGVudCB0byB0aGUgZ2l2ZW4gc3RhdHVzIHN0cmluZyBvciB1bmRlZmluZWQgaWZcclxuICogICAgIHRoZXJlIGlzIG5vIG1hdGNoLlxyXG4gKi9cclxuZnVuY3Rpb24gbWFwQ29kZUZyb21ScGNTdGF0dXMoc3RhdHVzKSB7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGxvb2t1cCBieSBzdHJpbmdcclxuICAgIHZhciBjb2RlID0gUnBjQ29kZVtzdGF0dXNdO1xyXG4gICAgaWYgKGNvZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFwQ29kZUZyb21ScGNDb2RlKGNvZGUpO1xyXG59XHJcbi8qKlxyXG4gKiBNYXBzIGFuIGVycm9yIENvZGUgZnJvbSBHUlBDIHN0YXR1cyBjb2RlIG51bWJlciwgbGlrZSAwLCAxLCBvciAxNC4gVGhlc2VcclxuICogYXJlIG5vdCB0aGUgc2FtZSBhcyBIVFRQIHN0YXR1cyBjb2Rlcy5cclxuICpcclxuICogQHJldHVybnMgVGhlIENvZGUgZXF1aXZhbGVudCB0byB0aGUgZ2l2ZW4gR1JQQyBzdGF0dXMgY29kZS4gRmFpbHMgaWYgdGhlcmVcclxuICogICAgIGlzIG5vIG1hdGNoLlxyXG4gKi9cclxuZnVuY3Rpb24gbWFwQ29kZUZyb21ScGNDb2RlKGNvZGUpIHtcclxuICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAvLyBUaGlzIHNob3VsZG4ndCBub3JtYWxseSBoYXBwZW4sIGJ1dCBpbiBjZXJ0YWluIGVycm9yIGNhc2VzIChsaWtlIHRyeWluZ1xyXG4gICAgICAgIC8vIHRvIHNlbmQgaW52YWxpZCBwcm90byBtZXNzYWdlcykgd2UgbWF5IGdldCBhbiBlcnJvciB3aXRoIG5vIEdSUEMgY29kZS5cclxuICAgICAgICBlcnJvcignR1JQQyBlcnJvciBoYXMgbm8gLmNvZGUnKTtcclxuICAgICAgICByZXR1cm4gQ29kZS5VTktOT1dOO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChjb2RlKSB7XHJcbiAgICAgICAgY2FzZSBScGNDb2RlLk9LOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5PSztcclxuICAgICAgICBjYXNlIFJwY0NvZGUuQ0FOQ0VMTEVEOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5DQU5DRUxMRUQ7XHJcbiAgICAgICAgY2FzZSBScGNDb2RlLlVOS05PV046XHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVOS05PV047XHJcbiAgICAgICAgY2FzZSBScGNDb2RlLkRFQURMSU5FX0VYQ0VFREVEOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5ERUFETElORV9FWENFRURFRDtcclxuICAgICAgICBjYXNlIFJwY0NvZGUuUkVTT1VSQ0VfRVhIQVVTVEVEOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5SRVNPVVJDRV9FWEhBVVNURUQ7XHJcbiAgICAgICAgY2FzZSBScGNDb2RlLklOVEVSTkFMOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5JTlRFUk5BTDtcclxuICAgICAgICBjYXNlIFJwY0NvZGUuVU5BVkFJTEFCTEU6XHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVOQVZBSUxBQkxFO1xyXG4gICAgICAgIGNhc2UgUnBjQ29kZS5VTkFVVEhFTlRJQ0FURUQ6XHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVOQVVUSEVOVElDQVRFRDtcclxuICAgICAgICBjYXNlIFJwY0NvZGUuSU5WQUxJRF9BUkdVTUVOVDpcclxuICAgICAgICAgICAgcmV0dXJuIENvZGUuSU5WQUxJRF9BUkdVTUVOVDtcclxuICAgICAgICBjYXNlIFJwY0NvZGUuTk9UX0ZPVU5EOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5OT1RfRk9VTkQ7XHJcbiAgICAgICAgY2FzZSBScGNDb2RlLkFMUkVBRFlfRVhJU1RTOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5BTFJFQURZX0VYSVNUUztcclxuICAgICAgICBjYXNlIFJwY0NvZGUuUEVSTUlTU0lPTl9ERU5JRUQ6XHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlBFUk1JU1NJT05fREVOSUVEO1xyXG4gICAgICAgIGNhc2UgUnBjQ29kZS5GQUlMRURfUFJFQ09ORElUSU9OOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5GQUlMRURfUFJFQ09ORElUSU9OO1xyXG4gICAgICAgIGNhc2UgUnBjQ29kZS5BQk9SVEVEOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5BQk9SVEVEO1xyXG4gICAgICAgIGNhc2UgUnBjQ29kZS5PVVRfT0ZfUkFOR0U6XHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLk9VVF9PRl9SQU5HRTtcclxuICAgICAgICBjYXNlIFJwY0NvZGUuVU5JTVBMRU1FTlRFRDpcclxuICAgICAgICAgICAgcmV0dXJuIENvZGUuVU5JTVBMRU1FTlRFRDtcclxuICAgICAgICBjYXNlIFJwY0NvZGUuREFUQV9MT1NTOlxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5EQVRBX0xPU1M7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ1Vua25vd24gc3RhdHVzIGNvZGU6ICcgKyBjb2RlKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogTWFwcyBhbiBSUEMgY29kZSBmcm9tIGEgQ29kZS4gVGhpcyBpcyB0aGUgcmV2ZXJzZSBvcGVyYXRpb24gZnJvbVxyXG4gKiBtYXBDb2RlRnJvbVJwY0NvZGUgYW5kIHNob3VsZCByZWFsbHkgb25seSBiZSB1c2VkIGluIHRlc3RzLlxyXG4gKi9cclxuZnVuY3Rpb24gbWFwUnBjQ29kZUZyb21Db2RlKGNvZGUpIHtcclxuICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gUnBjQ29kZS5PSztcclxuICAgIH1cclxuICAgIHN3aXRjaCAoY29kZSkge1xyXG4gICAgICAgIGNhc2UgQ29kZS5PSzpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuT0s7XHJcbiAgICAgICAgY2FzZSBDb2RlLkNBTkNFTExFRDpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuQ0FOQ0VMTEVEO1xyXG4gICAgICAgIGNhc2UgQ29kZS5VTktOT1dOOlxyXG4gICAgICAgICAgICByZXR1cm4gUnBjQ29kZS5VTktOT1dOO1xyXG4gICAgICAgIGNhc2UgQ29kZS5ERUFETElORV9FWENFRURFRDpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuREVBRExJTkVfRVhDRUVERUQ7XHJcbiAgICAgICAgY2FzZSBDb2RlLlJFU09VUkNFX0VYSEFVU1RFRDpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuUkVTT1VSQ0VfRVhIQVVTVEVEO1xyXG4gICAgICAgIGNhc2UgQ29kZS5JTlRFUk5BTDpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuSU5URVJOQUw7XHJcbiAgICAgICAgY2FzZSBDb2RlLlVOQVZBSUxBQkxFOlxyXG4gICAgICAgICAgICByZXR1cm4gUnBjQ29kZS5VTkFWQUlMQUJMRTtcclxuICAgICAgICBjYXNlIENvZGUuVU5BVVRIRU5USUNBVEVEOlxyXG4gICAgICAgICAgICByZXR1cm4gUnBjQ29kZS5VTkFVVEhFTlRJQ0FURUQ7XHJcbiAgICAgICAgY2FzZSBDb2RlLklOVkFMSURfQVJHVU1FTlQ6XHJcbiAgICAgICAgICAgIHJldHVybiBScGNDb2RlLklOVkFMSURfQVJHVU1FTlQ7XHJcbiAgICAgICAgY2FzZSBDb2RlLk5PVF9GT1VORDpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuTk9UX0ZPVU5EO1xyXG4gICAgICAgIGNhc2UgQ29kZS5BTFJFQURZX0VYSVNUUzpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuQUxSRUFEWV9FWElTVFM7XHJcbiAgICAgICAgY2FzZSBDb2RlLlBFUk1JU1NJT05fREVOSUVEOlxyXG4gICAgICAgICAgICByZXR1cm4gUnBjQ29kZS5QRVJNSVNTSU9OX0RFTklFRDtcclxuICAgICAgICBjYXNlIENvZGUuRkFJTEVEX1BSRUNPTkRJVElPTjpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuRkFJTEVEX1BSRUNPTkRJVElPTjtcclxuICAgICAgICBjYXNlIENvZGUuQUJPUlRFRDpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuQUJPUlRFRDtcclxuICAgICAgICBjYXNlIENvZGUuT1VUX09GX1JBTkdFOlxyXG4gICAgICAgICAgICByZXR1cm4gUnBjQ29kZS5PVVRfT0ZfUkFOR0U7XHJcbiAgICAgICAgY2FzZSBDb2RlLlVOSU1QTEVNRU5URUQ6XHJcbiAgICAgICAgICAgIHJldHVybiBScGNDb2RlLlVOSU1QTEVNRU5URUQ7XHJcbiAgICAgICAgY2FzZSBDb2RlLkRBVEFfTE9TUzpcclxuICAgICAgICAgICAgcmV0dXJuIFJwY0NvZGUuREFUQV9MT1NTO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsKCdVbmtub3duIHN0YXR1cyBjb2RlOiAnICsgY29kZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIENvbnZlcnRzIGFuIEhUVFAgU3RhdHVzIENvZGUgdG8gdGhlIGVxdWl2YWxlbnQgZXJyb3IgY29kZS5cclxuICpcclxuICogQHBhcmFtIHN0YXR1cyBBbiBIVFRQIFN0YXR1cyBDb2RlLCBsaWtlIDIwMCwgNDA0LCA1MDMsIGV0Yy5cclxuICogQHJldHVybnMgVGhlIGVxdWl2YWxlbnQgQ29kZS4gVW5rbm93biBzdGF0dXMgY29kZXMgYXJlIG1hcHBlZCB0b1xyXG4gKiAgICAgQ29kZS5VTktOT1dOLlxyXG4gKi9cclxuZnVuY3Rpb24gbWFwQ29kZUZyb21IdHRwU3RhdHVzKHN0YXR1cykge1xyXG4gICAgLy8gVGhlIGNhbm9uaWNhbCBlcnJvciBjb2RlcyBmb3IgR29vZ2xlIEFQSXMgWzFdIHNwZWNpZnkgbWFwcGluZyBvbnRvIEhUVFBcclxuICAgIC8vIHN0YXR1cyBjb2RlcyBidXQgdGhlIG1hcHBpbmcgaXMgbm90IGJpamVjdGl2ZS4gSW4gZWFjaCBjYXNlIG9mIGFtYmlndWl0eVxyXG4gICAgLy8gdGhpcyBmdW5jdGlvbiBjaG9vc2VzIGEgcHJpbWFyeSBlcnJvci5cclxuICAgIC8vXHJcbiAgICAvLyBbMV1cclxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVhcGlzL2dvb2dsZWFwaXMvYmxvYi9tYXN0ZXIvZ29vZ2xlL3JwYy9jb2RlLnByb3RvXHJcbiAgICBzd2l0Y2ggKHN0YXR1cykge1xyXG4gICAgICAgIGNhc2UgMjAwOiAvLyBPS1xyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5PSztcclxuICAgICAgICBjYXNlIDQwMDogLy8gQmFkIFJlcXVlc3RcclxuICAgICAgICAgICAgcmV0dXJuIENvZGUuSU5WQUxJRF9BUkdVTUVOVDtcclxuICAgICAgICAvLyBPdGhlciBwb3NzaWJpbGl0aWVzIGJhc2VkIG9uIHRoZSBmb3J3YXJkIG1hcHBpbmdcclxuICAgICAgICAvLyByZXR1cm4gQ29kZS5GQUlMRURfUFJFQ09ORElUSU9OO1xyXG4gICAgICAgIC8vIHJldHVybiBDb2RlLk9VVF9PRl9SQU5HRTtcclxuICAgICAgICBjYXNlIDQwMTogLy8gVW5hdXRob3JpemVkXHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVOQVVUSEVOVElDQVRFRDtcclxuICAgICAgICBjYXNlIDQwMzogLy8gRm9yYmlkZGVuXHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlBFUk1JU1NJT05fREVOSUVEO1xyXG4gICAgICAgIGNhc2UgNDA0OiAvLyBOb3QgRm91bmRcclxuICAgICAgICAgICAgcmV0dXJuIENvZGUuTk9UX0ZPVU5EO1xyXG4gICAgICAgIGNhc2UgNDA5OiAvLyBDb25mbGljdFxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5BQk9SVEVEO1xyXG4gICAgICAgIC8vIE90aGVyIHBvc3NpYmlsaXRpZXM6XHJcbiAgICAgICAgLy8gcmV0dXJuIENvZGUuQUxSRUFEWV9FWElTVFM7XHJcbiAgICAgICAgY2FzZSA0MTY6IC8vIFJhbmdlIE5vdCBTYXRpc2ZpYWJsZVxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5PVVRfT0ZfUkFOR0U7XHJcbiAgICAgICAgY2FzZSA0Mjk6IC8vIFRvbyBNYW55IFJlcXVlc3RzXHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlJFU09VUkNFX0VYSEFVU1RFRDtcclxuICAgICAgICBjYXNlIDQ5OTogLy8gQ2xpZW50IENsb3NlZCBSZXF1ZXN0XHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLkNBTkNFTExFRDtcclxuICAgICAgICBjYXNlIDUwMDogLy8gSW50ZXJuYWwgU2VydmVyIEVycm9yXHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVOS05PV047XHJcbiAgICAgICAgLy8gT3RoZXIgcG9zc2liaWxpdGllczpcclxuICAgICAgICAvLyByZXR1cm4gQ29kZS5JTlRFUk5BTDtcclxuICAgICAgICAvLyByZXR1cm4gQ29kZS5EQVRBX0xPU1M7XHJcbiAgICAgICAgY2FzZSA1MDE6IC8vIFVuaW1wbGVtZW50ZWRcclxuICAgICAgICAgICAgcmV0dXJuIENvZGUuVU5JTVBMRU1FTlRFRDtcclxuICAgICAgICBjYXNlIDUwMzogLy8gU2VydmljZSBVbmF2YWlsYWJsZVxyXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5VTkFWQUlMQUJMRTtcclxuICAgICAgICBjYXNlIDUwNDogLy8gR2F0ZXdheSBUaW1lb3V0XHJcbiAgICAgICAgICAgIHJldHVybiBDb2RlLkRFQURMSU5FX0VYQ0VFREVEO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBDb2RlLk9LO1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID49IDQwMCAmJiBzdGF0dXMgPCA1MDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29kZS5GQUlMRURfUFJFQ09ORElUSU9OO1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID49IDUwMCAmJiBzdGF0dXMgPCA2MDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29kZS5JTlRFUk5BTDtcclxuICAgICAgICAgICAgcmV0dXJuIENvZGUuVU5LTk9XTjtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFNvcnRlZFNldCBpcyBhbiBpbW11dGFibGUgKGNvcHktb24td3JpdGUpIGNvbGxlY3Rpb24gdGhhdCBob2xkcyBlbGVtZW50c1xyXG4gKiBpbiBvcmRlciBzcGVjaWZpZWQgYnkgdGhlIHByb3ZpZGVkIGNvbXBhcmF0b3IuXHJcbiAqXHJcbiAqIE5PVEU6IGlmIHByb3ZpZGVkIGNvbXBhcmF0b3IgcmV0dXJucyAwIGZvciB0d28gZWxlbWVudHMsIHdlIGNvbnNpZGVyIHRoZW0gdG9cclxuICogYmUgZXF1YWwhXHJcbiAqL1xyXG52YXIgU29ydGVkU2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU29ydGVkU2V0KGNvbXBhcmF0b3IpIHtcclxuICAgICAgICB0aGlzLmNvbXBhcmF0b3IgPSBjb21wYXJhdG9yO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBTb3J0ZWRNYXAodGhpcy5jb21wYXJhdG9yKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIFNvcnRlZFNldCBmcm9tIHRoZSBrZXlzIG9mIHRoZSBtYXAuXHJcbiAgICAgKiBUaGlzIGlzIGN1cnJlbnRseSBpbXBsZW1lbnRlZCBhcyBhbiBPKG4pIGNvcHkuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZFNldC5mcm9tTWFwS2V5cyA9IGZ1bmN0aW9uIChtYXApIHtcclxuICAgICAgICB2YXIga2V5cyA9IG5ldyBTb3J0ZWRTZXQobWFwLmNvbXBhcmF0b3IpO1xyXG4gICAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAga2V5cyA9IGtleXMuYWRkKGtleSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZ2V0KGVsZW0pICE9PSBudWxsO1xyXG4gICAgfTtcclxuICAgIFNvcnRlZFNldC5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5taW5LZXkoKTtcclxuICAgIH07XHJcbiAgICBTb3J0ZWRTZXQucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tYXhLZXkoKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU29ydGVkU2V0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5zaXplO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgU29ydGVkU2V0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmluZGV4T2YoZWxlbSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEl0ZXJhdGVzIGVsZW1lbnRzIGluIG9yZGVyIGRlZmluZWQgYnkgXCJjb21wYXJhdG9yXCIgKi9cclxuICAgIFNvcnRlZFNldC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgIHRoaXMuZGF0YS5pbm9yZGVyVHJhdmVyc2FsKGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICAgICAgICAgIGNiKGspO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEl0ZXJhdGVzIG92ZXIgYGVsZW1gcyBzdWNoIHRoYXQ6IHJhbmdlWzBdIDw9IGVsZW0gPCByYW5nZVsxXS4gKi9cclxuICAgIFNvcnRlZFNldC5wcm90b3R5cGUuZm9yRWFjaEluUmFuZ2UgPSBmdW5jdGlvbiAocmFuZ2UsIGNiKSB7XHJcbiAgICAgICAgdmFyIGl0ZXIgPSB0aGlzLmRhdGEuZ2V0SXRlcmF0b3JGcm9tKHJhbmdlWzBdKTtcclxuICAgICAgICB3aGlsZSAoaXRlci5oYXNOZXh0KCkpIHtcclxuICAgICAgICAgICAgdmFyIGVsZW0gPSBpdGVyLmdldE5leHQoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcGFyYXRvcihlbGVtLmtleSwgcmFuZ2VbMV0pID49IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNiKGVsZW0ua2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGBlbGVtYHMgc3VjaCB0aGF0OiBzdGFydCA8PSBlbGVtIHVudGlsIGZhbHNlIGlzIHJldHVybmVkLlxyXG4gICAgICovXHJcbiAgICBTb3J0ZWRTZXQucHJvdG90eXBlLmZvckVhY2hXaGlsZSA9IGZ1bmN0aW9uIChjYiwgc3RhcnQpIHtcclxuICAgICAgICB2YXIgaXRlcjtcclxuICAgICAgICBpZiAoc3RhcnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpdGVyID0gdGhpcy5kYXRhLmdldEl0ZXJhdG9yRnJvbShzdGFydCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpdGVyID0gdGhpcy5kYXRhLmdldEl0ZXJhdG9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChpdGVyLmhhc05leHQoKSkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbSA9IGl0ZXIuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY2IoZWxlbS5rZXkpO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEZpbmRzIHRoZSBsZWFzdCBlbGVtZW50IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgZWxlbWAuICovXHJcbiAgICBTb3J0ZWRTZXQucHJvdG90eXBlLmZpcnN0QWZ0ZXJPckVxdWFsID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICB2YXIgaXRlciA9IHRoaXMuZGF0YS5nZXRJdGVyYXRvckZyb20oZWxlbSk7XHJcbiAgICAgICAgcmV0dXJuIGl0ZXIuaGFzTmV4dCgpID8gaXRlci5nZXROZXh0KCkua2V5IDogbnVsbDtcclxuICAgIH07XHJcbiAgICAvKiogSW5zZXJ0cyBvciB1cGRhdGVzIGFuIGVsZW1lbnQgKi9cclxuICAgIFNvcnRlZFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3B5KHRoaXMuZGF0YS5yZW1vdmUoZWxlbSkuaW5zZXJ0KGVsZW0sIHRydWUpKTtcclxuICAgIH07XHJcbiAgICAvKiogRGVsZXRlcyBhbiBlbGVtZW50ICovXHJcbiAgICBTb3J0ZWRTZXQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChlbGVtKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhhcyhlbGVtKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weSh0aGlzLmRhdGEucmVtb3ZlKGVsZW0pKTtcclxuICAgIH07XHJcbiAgICBTb3J0ZWRTZXQucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5pc0VtcHR5KCk7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkU2V0LnByb3RvdHlwZS51bmlvbldpdGggPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcztcclxuICAgICAgICBvdGhlci5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5hZGQoZWxlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICBTb3J0ZWRTZXQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNvcnRlZFNldCkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5zaXplICE9PSBvdGhlci5zaXplKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIHRoaXNJdCA9IHRoaXMuZGF0YS5nZXRJdGVyYXRvcigpO1xyXG4gICAgICAgIHZhciBvdGhlckl0ID0gb3RoZXIuZGF0YS5nZXRJdGVyYXRvcigpO1xyXG4gICAgICAgIHdoaWxlICh0aGlzSXQuaGFzTmV4dCgpKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGlzRWxlbSA9IHRoaXNJdC5nZXROZXh0KCkua2V5O1xyXG4gICAgICAgICAgICB2YXIgb3RoZXJFbGVtID0gb3RoZXJJdC5nZXROZXh0KCkua2V5O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb21wYXJhdG9yKHRoaXNFbGVtLCBvdGhlckVsZW0pICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBTb3J0ZWRTZXQucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgcmVzLnB1c2godGFyZ2V0SWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkU2V0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiByZXN1bHQucHVzaChlbGVtKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuICdTb3J0ZWRTZXQoJyArIHJlc3VsdC50b1N0cmluZygpICsgJyknO1xyXG4gICAgfTtcclxuICAgIFNvcnRlZFNldC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBTb3J0ZWRTZXQodGhpcy5jb21wYXJhdG9yKTtcclxuICAgICAgICByZXN1bHQuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU29ydGVkU2V0O1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIEVNUFRZX01BWUJFX0RPQ1VNRU5UX01BUCA9IG5ldyBTb3J0ZWRNYXAoRG9jdW1lbnRLZXkuY29tcGFyYXRvcik7XHJcbmZ1bmN0aW9uIG1heWJlRG9jdW1lbnRNYXAoKSB7XHJcbiAgICByZXR1cm4gRU1QVFlfTUFZQkVfRE9DVU1FTlRfTUFQO1xyXG59XHJcbnZhciBFTVBUWV9ET0NVTUVOVF9NQVAgPSBuZXcgU29ydGVkTWFwKERvY3VtZW50S2V5LmNvbXBhcmF0b3IpO1xyXG5mdW5jdGlvbiBkb2N1bWVudE1hcCgpIHtcclxuICAgIHJldHVybiBFTVBUWV9ET0NVTUVOVF9NQVA7XHJcbn1cclxudmFyIEVNUFRZX0RPQ1VNRU5UX1ZFUlNJT05fTUFQID0gbmV3IFNvcnRlZE1hcChEb2N1bWVudEtleS5jb21wYXJhdG9yKTtcclxuZnVuY3Rpb24gZG9jdW1lbnRWZXJzaW9uTWFwKCkge1xyXG4gICAgcmV0dXJuIEVNUFRZX0RPQ1VNRU5UX1ZFUlNJT05fTUFQO1xyXG59XHJcbnZhciBFTVBUWV9ET0NVTUVOVF9LRVlfU0VUID0gbmV3IFNvcnRlZFNldChEb2N1bWVudEtleS5jb21wYXJhdG9yKTtcclxuZnVuY3Rpb24gZG9jdW1lbnRLZXlTZXQoKSB7XHJcbiAgICByZXR1cm4gRU1QVFlfRE9DVU1FTlRfS0VZX1NFVDtcclxufVxyXG52YXIgRU1QVFlfVEFSR0VUX0lEX1NFVCA9IG5ldyBTb3J0ZWRTZXQocHJpbWl0aXZlQ29tcGFyYXRvcik7XHJcbmZ1bmN0aW9uIHRhcmdldElkU2V0KCkge1xyXG4gICAgcmV0dXJuIEVNUFRZX1RBUkdFVF9JRF9TRVQ7XHJcbn1cblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEb2N1bWVudFNldCBpcyBhbiBpbW11dGFibGUgKGNvcHktb24td3JpdGUpIGNvbGxlY3Rpb24gdGhhdCBob2xkcyBkb2N1bWVudHNcclxuICogaW4gb3JkZXIgc3BlY2lmaWVkIGJ5IHRoZSBwcm92aWRlZCBjb21wYXJhdG9yLiBXZSBhbHdheXMgYWRkIGEgZG9jdW1lbnQga2V5XHJcbiAqIGNvbXBhcmF0b3Igb24gdG9wIG9mIHdoYXQgaXMgcHJvdmlkZWQgdG8gZ3VhcmFudGVlIGRvY3VtZW50IGVxdWFsaXR5IGJhc2VkIG9uXHJcbiAqIHRoZSBrZXkuXHJcbiAqL1xyXG52YXIgRG9jdW1lbnRTZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiogVGhlIGRlZmF1bHQgb3JkZXJpbmcgaXMgYnkga2V5IGlmIHRoZSBjb21wYXJhdG9yIGlzIG9taXR0ZWQgKi9cclxuICAgIGZ1bmN0aW9uIERvY3VtZW50U2V0KGNvbXApIHtcclxuICAgICAgICAvLyBXZSBhcmUgYWRkaW5nIGRvY3VtZW50IGtleSBjb21wYXJhdG9yIHRvIHRoZSBlbmQgYXMgaXQncyB0aGUgb25seVxyXG4gICAgICAgIC8vIGd1YXJhbnRlZWQgdW5pcXVlIHByb3BlcnR5IG9mIGEgZG9jdW1lbnQuXHJcbiAgICAgICAgaWYgKGNvbXApIHtcclxuICAgICAgICAgICAgdGhpcy5jb21wYXJhdG9yID0gZnVuY3Rpb24gKGQxLCBkMikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXAoZDEsIGQyKSB8fCBEb2N1bWVudEtleS5jb21wYXJhdG9yKGQxLmtleSwgZDIua2V5KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGFyYXRvciA9IGZ1bmN0aW9uIChkMSwgZDIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEb2N1bWVudEtleS5jb21wYXJhdG9yKGQxLmtleSwgZDIua2V5KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5rZXllZE1hcCA9IGRvY3VtZW50TWFwKCk7XHJcbiAgICAgICAgdGhpcy5zb3J0ZWRTZXQgPSBuZXcgU29ydGVkTWFwKHRoaXMuY29tcGFyYXRvcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYW4gZW1wdHkgY29weSBvZiB0aGUgZXhpc3RpbmcgRG9jdW1lbnRTZXQsIHVzaW5nIHRoZSBzYW1lXHJcbiAgICAgKiBjb21wYXJhdG9yLlxyXG4gICAgICovXHJcbiAgICBEb2N1bWVudFNldC5lbXB0eVNldCA9IGZ1bmN0aW9uIChvbGRTZXQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50U2V0KG9sZFNldC5jb21wYXJhdG9yKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmtleWVkTWFwLmdldChrZXkpICE9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRTZXQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5rZXllZE1hcC5nZXQoa2V5KTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudFNldC5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydGVkU2V0Lm1pbktleSgpO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50U2V0LnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRlZFNldC5tYXhLZXkoKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudFNldC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZWRTZXQuaXNFbXB0eSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIHByb3ZpZGVkIGtleSBpbiB0aGUgZG9jdW1lbnQgc2V0LCBvciAtMSBpZiB0aGVcclxuICAgICAqIGRvY3VtZW50IGtleSBpcyBub3QgcHJlc2VudCBpbiB0aGUgc2V0O1xyXG4gICAgICovXHJcbiAgICBEb2N1bWVudFNldC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgZG9jID0gdGhpcy5rZXllZE1hcC5nZXQoa2V5KTtcclxuICAgICAgICByZXR1cm4gZG9jID8gdGhpcy5zb3J0ZWRTZXQuaW5kZXhPZihkb2MpIDogLTE7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERvY3VtZW50U2V0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29ydGVkU2V0LnNpemU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKiogSXRlcmF0ZXMgZG9jdW1lbnRzIGluIG9yZGVyIGRlZmluZWQgYnkgXCJjb21wYXJhdG9yXCIgKi9cclxuICAgIERvY3VtZW50U2V0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgICAgdGhpcy5zb3J0ZWRTZXQuaW5vcmRlclRyYXZlcnNhbChmdW5jdGlvbiAoaywgdikge1xyXG4gICAgICAgICAgICBjYihrKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBJbnNlcnRzIG9yIHVwZGF0ZXMgYSBkb2N1bWVudCB3aXRoIHRoZSBzYW1lIGtleSAqL1xyXG4gICAgRG9jdW1lbnRTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkb2MpIHtcclxuICAgICAgICAvLyBGaXJzdCByZW1vdmUgdGhlIGVsZW1lbnQgaWYgd2UgaGF2ZSBpdC5cclxuICAgICAgICB2YXIgc2V0ID0gdGhpcy5kZWxldGUoZG9jLmtleSk7XHJcbiAgICAgICAgcmV0dXJuIHNldC5jb3B5KHNldC5rZXllZE1hcC5pbnNlcnQoZG9jLmtleSwgZG9jKSwgc2V0LnNvcnRlZFNldC5pbnNlcnQoZG9jLCBudWxsKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIERlbGV0ZXMgYSBkb2N1bWVudCB3aXRoIGEgZ2l2ZW4ga2V5ICovXHJcbiAgICBEb2N1bWVudFNldC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBkb2MgPSB0aGlzLmdldChrZXkpO1xyXG4gICAgICAgIGlmICghZG9jKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb3B5KHRoaXMua2V5ZWRNYXAucmVtb3ZlKGtleSksIHRoaXMuc29ydGVkU2V0LnJlbW92ZShkb2MpKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudFNldC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgRG9jdW1lbnRTZXQpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMuc2l6ZSAhPT0gb3RoZXIuc2l6ZSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHZhciB0aGlzSXQgPSB0aGlzLnNvcnRlZFNldC5nZXRJdGVyYXRvcigpO1xyXG4gICAgICAgIHZhciBvdGhlckl0ID0gb3RoZXIuc29ydGVkU2V0LmdldEl0ZXJhdG9yKCk7XHJcbiAgICAgICAgd2hpbGUgKHRoaXNJdC5oYXNOZXh0KCkpIHtcclxuICAgICAgICAgICAgdmFyIHRoaXNEb2MgPSB0aGlzSXQuZ2V0TmV4dCgpLmtleTtcclxuICAgICAgICAgICAgdmFyIG90aGVyRG9jID0gb3RoZXJJdC5nZXROZXh0KCkua2V5O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXNEb2MuaXNFcXVhbChvdGhlckRvYykpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50U2V0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZG9jU3RyaW5ncyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgICAgIGRvY1N0cmluZ3MucHVzaChkb2MudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGRvY1N0cmluZ3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnRG9jdW1lbnRTZXQgKCknO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICdEb2N1bWVudFNldCAoXFxuICAnICsgZG9jU3RyaW5ncy5qb2luKCcgIFxcbicpICsgJ1xcbiknO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEb2N1bWVudFNldC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChrZXllZE1hcCwgc29ydGVkU2V0KSB7XHJcbiAgICAgICAgdmFyIG5ld1NldCA9IG5ldyBEb2N1bWVudFNldCgpO1xyXG4gICAgICAgIG5ld1NldC5jb21wYXJhdG9yID0gdGhpcy5jb21wYXJhdG9yO1xyXG4gICAgICAgIG5ld1NldC5rZXllZE1hcCA9IGtleWVkTWFwO1xyXG4gICAgICAgIG5ld1NldC5zb3J0ZWRTZXQgPSBzb3J0ZWRTZXQ7XHJcbiAgICAgICAgcmV0dXJuIG5ld1NldDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRG9jdW1lbnRTZXQ7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgQ2hhbmdlVHlwZTtcclxuKGZ1bmN0aW9uIChDaGFuZ2VUeXBlKSB7XHJcbiAgICBDaGFuZ2VUeXBlW0NoYW5nZVR5cGVbXCJBZGRlZFwiXSA9IDBdID0gXCJBZGRlZFwiO1xyXG4gICAgQ2hhbmdlVHlwZVtDaGFuZ2VUeXBlW1wiUmVtb3ZlZFwiXSA9IDFdID0gXCJSZW1vdmVkXCI7XHJcbiAgICBDaGFuZ2VUeXBlW0NoYW5nZVR5cGVbXCJNb2RpZmllZFwiXSA9IDJdID0gXCJNb2RpZmllZFwiO1xyXG4gICAgQ2hhbmdlVHlwZVtDaGFuZ2VUeXBlW1wiTWV0YWRhdGFcIl0gPSAzXSA9IFwiTWV0YWRhdGFcIjtcclxufSkoQ2hhbmdlVHlwZSB8fCAoQ2hhbmdlVHlwZSA9IHt9KSk7XHJcbnZhciBTeW5jU3RhdGU7XHJcbihmdW5jdGlvbiAoU3luY1N0YXRlKSB7XHJcbiAgICBTeW5jU3RhdGVbU3luY1N0YXRlW1wiTG9jYWxcIl0gPSAwXSA9IFwiTG9jYWxcIjtcclxuICAgIFN5bmNTdGF0ZVtTeW5jU3RhdGVbXCJTeW5jZWRcIl0gPSAxXSA9IFwiU3luY2VkXCI7XHJcbn0pKFN5bmNTdGF0ZSB8fCAoU3luY1N0YXRlID0ge30pKTtcclxuLyoqXHJcbiAqIERvY3VtZW50Q2hhbmdlU2V0IGtlZXBzIHRyYWNrIG9mIGEgc2V0IG9mIGNoYW5nZXMgdG8gZG9jcyBpbiBhIHF1ZXJ5LCBtZXJnaW5nXHJcbiAqIGR1cGxpY2F0ZSBldmVudHMgZm9yIHRoZSBzYW1lIGRvYy5cclxuICovXHJcbnZhciBEb2N1bWVudENoYW5nZVNldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERvY3VtZW50Q2hhbmdlU2V0KCkge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlTWFwID0gbmV3IFNvcnRlZE1hcChEb2N1bWVudEtleS5jb21wYXJhdG9yKTtcclxuICAgIH1cclxuICAgIERvY3VtZW50Q2hhbmdlU2V0LnByb3RvdHlwZS50cmFjayA9IGZ1bmN0aW9uIChjaGFuZ2UpIHtcclxuICAgICAgICB2YXIga2V5ID0gY2hhbmdlLmRvYy5rZXk7XHJcbiAgICAgICAgdmFyIG9sZENoYW5nZSA9IHRoaXMuY2hhbmdlTWFwLmdldChrZXkpO1xyXG4gICAgICAgIGlmICghb2xkQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwID0gdGhpcy5jaGFuZ2VNYXAuaW5zZXJ0KGtleSwgY2hhbmdlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBNZXJnZSB0aGUgbmV3IGNoYW5nZSB3aXRoIHRoZSBleGlzdGluZyBjaGFuZ2UuXHJcbiAgICAgICAgaWYgKGNoYW5nZS50eXBlICE9PSBDaGFuZ2VUeXBlLkFkZGVkICYmXHJcbiAgICAgICAgICAgIG9sZENoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLk1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwID0gdGhpcy5jaGFuZ2VNYXAuaW5zZXJ0KGtleSwgY2hhbmdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuTWV0YWRhdGEgJiZcclxuICAgICAgICAgICAgb2xkQ2hhbmdlLnR5cGUgIT09IENoYW5nZVR5cGUuUmVtb3ZlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZU1hcCA9IHRoaXMuY2hhbmdlTWFwLmluc2VydChrZXksIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IG9sZENoYW5nZS50eXBlLFxyXG4gICAgICAgICAgICAgICAgZG9jOiBjaGFuZ2UuZG9jXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5Nb2RpZmllZCAmJlxyXG4gICAgICAgICAgICBvbGRDaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5Nb2RpZmllZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZU1hcCA9IHRoaXMuY2hhbmdlTWFwLmluc2VydChrZXksIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IENoYW5nZVR5cGUuTW9kaWZpZWQsXHJcbiAgICAgICAgICAgICAgICBkb2M6IGNoYW5nZS5kb2NcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLk1vZGlmaWVkICYmXHJcbiAgICAgICAgICAgIG9sZENoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLkFkZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwID0gdGhpcy5jaGFuZ2VNYXAuaW5zZXJ0KGtleSwge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQ2hhbmdlVHlwZS5BZGRlZCxcclxuICAgICAgICAgICAgICAgIGRvYzogY2hhbmdlLmRvY1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuUmVtb3ZlZCAmJlxyXG4gICAgICAgICAgICBvbGRDaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5BZGRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZU1hcCA9IHRoaXMuY2hhbmdlTWFwLnJlbW92ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5SZW1vdmVkICYmXHJcbiAgICAgICAgICAgIG9sZENoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLk1vZGlmaWVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwID0gdGhpcy5jaGFuZ2VNYXAuaW5zZXJ0KGtleSwge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQ2hhbmdlVHlwZS5SZW1vdmVkLFxyXG4gICAgICAgICAgICAgICAgZG9jOiBvbGRDaGFuZ2UuZG9jXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5BZGRlZCAmJlxyXG4gICAgICAgICAgICBvbGRDaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5SZW1vdmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwID0gdGhpcy5jaGFuZ2VNYXAuaW5zZXJ0KGtleSwge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQ2hhbmdlVHlwZS5Nb2RpZmllZCxcclxuICAgICAgICAgICAgICAgIGRvYzogY2hhbmdlLmRvY1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaW5jbHVkZXMgdGhlc2UgY2FzZXMsIHdoaWNoIGRvbid0IG1ha2Ugc2Vuc2U6XHJcbiAgICAgICAgICAgIC8vIEFkZGVkLT5BZGRlZFxyXG4gICAgICAgICAgICAvLyBSZW1vdmVkLT5SZW1vdmVkXHJcbiAgICAgICAgICAgIC8vIE1vZGlmaWVkLT5BZGRlZFxyXG4gICAgICAgICAgICAvLyBSZW1vdmVkLT5Nb2RpZmllZFxyXG4gICAgICAgICAgICAvLyBNZXRhZGF0YS0+QWRkZWRcclxuICAgICAgICAgICAgLy8gUmVtb3ZlZC0+TWV0YWRhdGFcclxuICAgICAgICAgICAgZmFpbCgndW5zdXBwb3J0ZWQgY29tYmluYXRpb24gb2YgY2hhbmdlczogJyArXHJcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShjaGFuZ2UpICtcclxuICAgICAgICAgICAgICAgICcgYWZ0ZXIgJyArXHJcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShvbGRDaGFuZ2UpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRDaGFuZ2VTZXQucHJvdG90eXBlLmdldENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNoYW5nZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmNoYW5nZU1hcC5pbm9yZGVyVHJhdmVyc2FsKGZ1bmN0aW9uIChrZXksIGNoYW5nZSkge1xyXG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goY2hhbmdlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY2hhbmdlcztcclxuICAgIH07XHJcbiAgICByZXR1cm4gRG9jdW1lbnRDaGFuZ2VTZXQ7XHJcbn0oKSk7XHJcbnZhciBWaWV3U25hcHNob3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBWaWV3U25hcHNob3QocXVlcnksIGRvY3MsIG9sZERvY3MsIGRvY0NoYW5nZXMsIG11dGF0ZWRLZXlzLCBmcm9tQ2FjaGUsIHN5bmNTdGF0ZUNoYW5nZWQsIGV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzKSB7XHJcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgICAgIHRoaXMuZG9jcyA9IGRvY3M7XHJcbiAgICAgICAgdGhpcy5vbGREb2NzID0gb2xkRG9jcztcclxuICAgICAgICB0aGlzLmRvY0NoYW5nZXMgPSBkb2NDaGFuZ2VzO1xyXG4gICAgICAgIHRoaXMubXV0YXRlZEtleXMgPSBtdXRhdGVkS2V5cztcclxuICAgICAgICB0aGlzLmZyb21DYWNoZSA9IGZyb21DYWNoZTtcclxuICAgICAgICB0aGlzLnN5bmNTdGF0ZUNoYW5nZWQgPSBzeW5jU3RhdGVDaGFuZ2VkO1xyXG4gICAgICAgIHRoaXMuZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXMgPSBleGNsdWRlc01ldGFkYXRhQ2hhbmdlcztcclxuICAgIH1cclxuICAgIC8qKiBSZXR1cm5zIGEgdmlldyBzbmFwc2hvdCBhcyBpZiBhbGwgZG9jdW1lbnRzIGluIHRoZSBzbmFwc2hvdCB3ZXJlIGFkZGVkLiAqL1xyXG4gICAgVmlld1NuYXBzaG90LmZyb21Jbml0aWFsRG9jdW1lbnRzID0gZnVuY3Rpb24gKHF1ZXJ5LCBkb2N1bWVudHMsIG11dGF0ZWRLZXlzLCBmcm9tQ2FjaGUpIHtcclxuICAgICAgICB2YXIgY2hhbmdlcyA9IFtdO1xyXG4gICAgICAgIGRvY3VtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkb2MpIHtcclxuICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHsgdHlwZTogQ2hhbmdlVHlwZS5BZGRlZCwgZG9jOiBkb2MgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWaWV3U25hcHNob3QocXVlcnksIGRvY3VtZW50cywgRG9jdW1lbnRTZXQuZW1wdHlTZXQoZG9jdW1lbnRzKSwgY2hhbmdlcywgbXV0YXRlZEtleXMsIGZyb21DYWNoZSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3U25hcHNob3QucHJvdG90eXBlLCBcImhhc1BlbmRpbmdXcml0ZXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMubXV0YXRlZEtleXMuaXNFbXB0eSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgVmlld1NuYXBzaG90LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJvbUNhY2hlICE9PSBvdGhlci5mcm9tQ2FjaGUgfHxcclxuICAgICAgICAgICAgdGhpcy5zeW5jU3RhdGVDaGFuZ2VkICE9PSBvdGhlci5zeW5jU3RhdGVDaGFuZ2VkIHx8XHJcbiAgICAgICAgICAgICF0aGlzLm11dGF0ZWRLZXlzLmlzRXF1YWwob3RoZXIubXV0YXRlZEtleXMpIHx8XHJcbiAgICAgICAgICAgICF0aGlzLnF1ZXJ5LmlzRXF1YWwob3RoZXIucXVlcnkpIHx8XHJcbiAgICAgICAgICAgICF0aGlzLmRvY3MuaXNFcXVhbChvdGhlci5kb2NzKSB8fFxyXG4gICAgICAgICAgICAhdGhpcy5vbGREb2NzLmlzRXF1YWwob3RoZXIub2xkRG9jcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2hhbmdlcyA9IHRoaXMuZG9jQ2hhbmdlcztcclxuICAgICAgICB2YXIgb3RoZXJDaGFuZ2VzID0gb3RoZXIuZG9jQ2hhbmdlcztcclxuICAgICAgICBpZiAoY2hhbmdlcy5sZW5ndGggIT09IG90aGVyQ2hhbmdlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYW5nZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXNbaV0udHlwZSAhPT0gb3RoZXJDaGFuZ2VzW2ldLnR5cGUgfHxcclxuICAgICAgICAgICAgICAgICFjaGFuZ2VzW2ldLmRvYy5pc0VxdWFsKG90aGVyQ2hhbmdlc1tpXS5kb2MpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZpZXdTbmFwc2hvdDtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBbiBldmVudCBmcm9tIHRoZSBSZW1vdGVTdG9yZS4gSXQgaXMgc3BsaXQgaW50byB0YXJnZXRDaGFuZ2VzIChjaGFuZ2VzIHRvIHRoZVxyXG4gKiBzdGF0ZSBvciB0aGUgc2V0IG9mIGRvY3VtZW50cyBpbiBvdXIgd2F0Y2hlZCB0YXJnZXRzKSBhbmQgZG9jdW1lbnRVcGRhdGVzXHJcbiAqIChjaGFuZ2VzIHRvIHRoZSBhY3R1YWwgZG9jdW1lbnRzKS5cclxuICovXHJcbnZhciBSZW1vdGVFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlbW90ZUV2ZW50KFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc25hcHNob3QgdmVyc2lvbiB0aGlzIGV2ZW50IGJyaW5ncyB1cyB1cCB0bywgb3IgTUlOIGlmIG5vdCBzZXQuXHJcbiAgICAgKi9cclxuICAgIHNuYXBzaG90VmVyc2lvbiwgXHJcbiAgICAvKipcclxuICAgICAqIEEgbWFwIGZyb20gdGFyZ2V0IHRvIGNoYW5nZXMgdG8gdGhlIHRhcmdldC4gU2VlIFRhcmdldENoYW5nZS5cclxuICAgICAqL1xyXG4gICAgdGFyZ2V0Q2hhbmdlcywgXHJcbiAgICAvKipcclxuICAgICAqIEEgc2V0IG9mIHRhcmdldHMgdGhhdCBpcyBrbm93biB0byBiZSBpbmNvbnNpc3RlbnQuIExpc3RlbnMgZm9yIHRoZXNlXHJcbiAgICAgKiB0YXJnZXRzIHNob3VsZCBiZSByZS1lc3RhYmxpc2hlZCB3aXRob3V0IHJlc3VtZSB0b2tlbnMuXHJcbiAgICAgKi9cclxuICAgIHRhcmdldE1pc21hdGNoZXMsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHNldCBvZiB3aGljaCBkb2N1bWVudHMgaGF2ZSBjaGFuZ2VkIG9yIGJlZW4gZGVsZXRlZCwgYWxvbmcgd2l0aCB0aGVcclxuICAgICAqIGRvYydzIG5ldyB2YWx1ZXMgKGlmIG5vdCBkZWxldGVkKS5cclxuICAgICAqL1xyXG4gICAgZG9jdW1lbnRVcGRhdGVzLCBcclxuICAgIC8qKlxyXG4gICAgICogQSBzZXQgb2Ygd2hpY2ggZG9jdW1lbnQgdXBkYXRlcyBhcmUgZHVlIG9ubHkgdG8gbGltYm8gcmVzb2x1dGlvbiB0YXJnZXRzLlxyXG4gICAgICovXHJcbiAgICByZXNvbHZlZExpbWJvRG9jdW1lbnRzKSB7XHJcbiAgICAgICAgdGhpcy5zbmFwc2hvdFZlcnNpb24gPSBzbmFwc2hvdFZlcnNpb247XHJcbiAgICAgICAgdGhpcy50YXJnZXRDaGFuZ2VzID0gdGFyZ2V0Q2hhbmdlcztcclxuICAgICAgICB0aGlzLnRhcmdldE1pc21hdGNoZXMgPSB0YXJnZXRNaXNtYXRjaGVzO1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRVcGRhdGVzID0gZG9jdW1lbnRVcGRhdGVzO1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZWRMaW1ib0RvY3VtZW50cyA9IHJlc29sdmVkTGltYm9Eb2N1bWVudHM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhBQ0s6IFZpZXdzIHJlcXVpcmUgUmVtb3RlRXZlbnRzIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB2aWV3IGlzXHJcbiAgICAgKiBDVVJSRU5ULCBidXQgc2Vjb25kYXJ5IHRhYnMgZG9uJ3QgcmVjZWl2ZSByZW1vdGUgZXZlbnRzLiBTbyB0aGlzIG1ldGhvZCBpc1xyXG4gICAgICogdXNlZCB0byBjcmVhdGUgYSBzeW50aGVzaXplZCBSZW1vdGVFdmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIGFwcGx5IGFcclxuICAgICAqIENVUlJFTlQgc3RhdHVzIGNoYW5nZSB0byBhIFZpZXcsIGZvciBxdWVyaWVzIGV4ZWN1dGVkIGluIGEgZGlmZmVyZW50IHRhYi5cclxuICAgICAqL1xyXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seVxyXG4gICAgUmVtb3RlRXZlbnQuY3JlYXRlU3ludGhlc2l6ZWRSZW1vdGVFdmVudEZvckN1cnJlbnRDaGFuZ2UgPSBmdW5jdGlvbiAodGFyZ2V0SWQsIGN1cnJlbnQpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0Q2hhbmdlcyA9IChfYSA9IHt9LCBfYVt0YXJnZXRJZF0gPSBUYXJnZXRDaGFuZ2UuY3JlYXRlU3ludGhlc2l6ZWRUYXJnZXRDaGFuZ2VGb3JDdXJyZW50Q2hhbmdlKHRhcmdldElkLCBjdXJyZW50KSwgX2EpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVtb3RlRXZlbnQoU25hcHNob3RWZXJzaW9uLk1JTiwgdGFyZ2V0Q2hhbmdlcywgdGFyZ2V0SWRTZXQoKSwgbWF5YmVEb2N1bWVudE1hcCgpLCBkb2N1bWVudEtleVNldCgpKTtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlbW90ZUV2ZW50O1xyXG59KCkpO1xyXG4vKipcclxuICogQSBUYXJnZXRDaGFuZ2Ugc3BlY2lmaWVzIHRoZSBzZXQgb2YgY2hhbmdlcyBmb3IgYSBzcGVjaWZpYyB0YXJnZXQgYXMgcGFydCBvZlxyXG4gKiBhIFJlbW90ZUV2ZW50LiBUaGVzZSBjaGFuZ2VzIHRyYWNrIHdoaWNoIGRvY3VtZW50cyBhcmUgYWRkZWQsIG1vZGlmaWVkIG9yXHJcbiAqIHJlbW92ZWQsIGFzIHdlbGwgYXMgdGhlIHRhcmdldCdzIHJlc3VtZSB0b2tlbiBhbmQgd2hldGhlciB0aGUgdGFyZ2V0IGlzXHJcbiAqIG1hcmtlZCBDVVJSRU5ULlxyXG4gKiBUaGUgYWN0dWFsIGNoYW5nZXMgKnRvKiBkb2N1bWVudHMgYXJlIG5vdCBwYXJ0IG9mIHRoZSBUYXJnZXRDaGFuZ2Ugc2luY2VcclxuICogZG9jdW1lbnRzIG1heSBiZSBwYXJ0IG9mIG11bHRpcGxlIHRhcmdldHMuXHJcbiAqL1xyXG52YXIgVGFyZ2V0Q2hhbmdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGFyZ2V0Q2hhbmdlKFxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvcGFxdWUsIHNlcnZlci1hc3NpZ25lZCB0b2tlbiB0aGF0IGFsbG93cyB3YXRjaGluZyBhIHF1ZXJ5IHRvIGJlIHJlc3VtZWRcclxuICAgICAqIGFmdGVyIGRpc2Nvbm5lY3Rpbmcgd2l0aG91dCByZXRyYW5zbWl0dGluZyBhbGwgdGhlIGRhdGEgdGhhdCBtYXRjaGVzIHRoZVxyXG4gICAgICogcXVlcnkuIFRoZSByZXN1bWUgdG9rZW4gZXNzZW50aWFsbHkgaWRlbnRpZmllcyBhIHBvaW50IGluIHRpbWUgZnJvbSB3aGljaFxyXG4gICAgICogdGhlIHNlcnZlciBzaG91bGQgcmVzdW1lIHNlbmRpbmcgcmVzdWx0cy5cclxuICAgICAqL1xyXG4gICAgcmVzdW1lVG9rZW4sIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgXCJjdXJyZW50XCIgKHN5bmNlZCkgc3RhdHVzIG9mIHRoaXMgdGFyZ2V0LiBOb3RlIHRoYXQgXCJjdXJyZW50XCJcclxuICAgICAqIGhhcyBzcGVjaWFsIG1lYW5pbmcgaW4gdGhlIFJQQyBwcm90b2NvbCB0aGF0IGltcGxpZXMgdGhhdCBhIHRhcmdldCBpc1xyXG4gICAgICogYm90aCB1cC10by1kYXRlIGFuZCBjb25zaXN0ZW50IHdpdGggdGhlIHJlc3Qgb2YgdGhlIHdhdGNoIHN0cmVhbS5cclxuICAgICAqL1xyXG4gICAgY3VycmVudCwgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzZXQgb2YgZG9jdW1lbnRzIHRoYXQgd2VyZSBuZXdseSBhc3NpZ25lZCB0byB0aGlzIHRhcmdldCBhcyBwYXJ0IG9mXHJcbiAgICAgKiB0aGlzIHJlbW90ZSBldmVudC5cclxuICAgICAqL1xyXG4gICAgYWRkZWREb2N1bWVudHMsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2V0IG9mIGRvY3VtZW50cyB0aGF0IHdlcmUgYWxyZWFkeSBhc3NpZ25lZCB0byB0aGlzIHRhcmdldCBidXQgcmVjZWl2ZWRcclxuICAgICAqIGFuIHVwZGF0ZSBkdXJpbmcgdGhpcyByZW1vdGUgZXZlbnQuXHJcbiAgICAgKi9cclxuICAgIG1vZGlmaWVkRG9jdW1lbnRzLCBcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCB3ZXJlIHJlbW92ZWQgZnJvbSB0aGlzIHRhcmdldCBhcyBwYXJ0IG9mIHRoaXNcclxuICAgICAqIHJlbW90ZSBldmVudC5cclxuICAgICAqL1xyXG4gICAgcmVtb3ZlZERvY3VtZW50cykge1xyXG4gICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSByZXN1bWVUb2tlbjtcclxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBjdXJyZW50O1xyXG4gICAgICAgIHRoaXMuYWRkZWREb2N1bWVudHMgPSBhZGRlZERvY3VtZW50cztcclxuICAgICAgICB0aGlzLm1vZGlmaWVkRG9jdW1lbnRzID0gbW9kaWZpZWREb2N1bWVudHM7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVkRG9jdW1lbnRzID0gcmVtb3ZlZERvY3VtZW50cztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSEFDSzogVmlld3MgcmVxdWlyZSBUYXJnZXRDaGFuZ2VzIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB2aWV3IGlzXHJcbiAgICAgKiBDVVJSRU5ULCBidXQgc2Vjb25kYXJ5IHRhYnMgZG9uJ3QgcmVjZWl2ZSByZW1vdGUgZXZlbnRzLiBTbyB0aGlzIG1ldGhvZCBpc1xyXG4gICAgICogdXNlZCB0byBjcmVhdGUgYSBzeW50aGVzaXplZCBUYXJnZXRDaGFuZ2VzIHRoYXQgY2FuIGJlIHVzZWQgdG8gYXBwbHkgYVxyXG4gICAgICogQ1VSUkVOVCBzdGF0dXMgY2hhbmdlIHRvIGEgVmlldywgZm9yIHF1ZXJpZXMgZXhlY3V0ZWQgaW4gYSBkaWZmZXJlbnQgdGFiLlxyXG4gICAgICovXHJcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5XHJcbiAgICBUYXJnZXRDaGFuZ2UuY3JlYXRlU3ludGhlc2l6ZWRUYXJnZXRDaGFuZ2VGb3JDdXJyZW50Q2hhbmdlID0gZnVuY3Rpb24gKHRhcmdldElkLCBjdXJyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUYXJnZXRDaGFuZ2UoZW1wdHlCeXRlU3RyaW5nKCksIGN1cnJlbnQsIGRvY3VtZW50S2V5U2V0KCksIGRvY3VtZW50S2V5U2V0KCksIGRvY3VtZW50S2V5U2V0KCkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBUYXJnZXRDaGFuZ2U7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGNoYW5nZWQgZG9jdW1lbnQgYW5kIGEgbGlzdCBvZiB0YXJnZXQgaWRzIHRvIHdoaWNoIHRoaXMgY2hhbmdlXHJcbiAqIGFwcGxpZXMuXHJcbiAqXHJcbiAqIElmIGRvY3VtZW50IGhhcyBiZWVuIGRlbGV0ZWQgTm9Eb2N1bWVudCB3aWxsIGJlIHByb3ZpZGVkLlxyXG4gKi9cclxudmFyIERvY3VtZW50V2F0Y2hDaGFuZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEb2N1bWVudFdhdGNoQ2hhbmdlKFxyXG4gICAgLyoqIFRoZSBuZXcgZG9jdW1lbnQgYXBwbGllcyB0byBhbGwgb2YgdGhlc2UgdGFyZ2V0cy4gKi9cclxuICAgIHVwZGF0ZWRUYXJnZXRJZHMsIFxyXG4gICAgLyoqIFRoZSBuZXcgZG9jdW1lbnQgaXMgcmVtb3ZlZCBmcm9tIGFsbCBvZiB0aGVzZSB0YXJnZXRzLiAqL1xyXG4gICAgcmVtb3ZlZFRhcmdldElkcywgXHJcbiAgICAvKiogVGhlIGtleSBvZiB0aGUgZG9jdW1lbnQgZm9yIHRoaXMgY2hhbmdlLiAqL1xyXG4gICAga2V5LCBcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5ldyBkb2N1bWVudCBvciBOb0RvY3VtZW50IGlmIGl0IHdhcyBkZWxldGVkLiBJcyBudWxsIGlmIHRoZVxyXG4gICAgICogZG9jdW1lbnQgd2VudCBvdXQgb2YgdmlldyB3aXRob3V0IHRoZSBzZXJ2ZXIgc2VuZGluZyBhIG5ldyBkb2N1bWVudC5cclxuICAgICAqL1xyXG4gICAgbmV3RG9jKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVkVGFyZ2V0SWRzID0gdXBkYXRlZFRhcmdldElkcztcclxuICAgICAgICB0aGlzLnJlbW92ZWRUYXJnZXRJZHMgPSByZW1vdmVkVGFyZ2V0SWRzO1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgICAgIHRoaXMubmV3RG9jID0gbmV3RG9jO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERvY3VtZW50V2F0Y2hDaGFuZ2U7XHJcbn0oKSk7XHJcbnZhciBFeGlzdGVuY2VGaWx0ZXJDaGFuZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFeGlzdGVuY2VGaWx0ZXJDaGFuZ2UodGFyZ2V0SWQsIGV4aXN0ZW5jZUZpbHRlcikge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSB0YXJnZXRJZDtcclxuICAgICAgICB0aGlzLmV4aXN0ZW5jZUZpbHRlciA9IGV4aXN0ZW5jZUZpbHRlcjtcclxuICAgIH1cclxuICAgIHJldHVybiBFeGlzdGVuY2VGaWx0ZXJDaGFuZ2U7XHJcbn0oKSk7XHJcbnZhciBXYXRjaFRhcmdldENoYW5nZVN0YXRlO1xyXG4oZnVuY3Rpb24gKFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUpIHtcclxuICAgIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGVbV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZVtcIk5vQ2hhbmdlXCJdID0gMF0gPSBcIk5vQ2hhbmdlXCI7XHJcbiAgICBXYXRjaFRhcmdldENoYW5nZVN0YXRlW1dhdGNoVGFyZ2V0Q2hhbmdlU3RhdGVbXCJBZGRlZFwiXSA9IDFdID0gXCJBZGRlZFwiO1xyXG4gICAgV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZVtXYXRjaFRhcmdldENoYW5nZVN0YXRlW1wiUmVtb3ZlZFwiXSA9IDJdID0gXCJSZW1vdmVkXCI7XHJcbiAgICBXYXRjaFRhcmdldENoYW5nZVN0YXRlW1dhdGNoVGFyZ2V0Q2hhbmdlU3RhdGVbXCJDdXJyZW50XCJdID0gM10gPSBcIkN1cnJlbnRcIjtcclxuICAgIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGVbV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZVtcIlJlc2V0XCJdID0gNF0gPSBcIlJlc2V0XCI7XHJcbn0pKFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUgfHwgKFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUgPSB7fSkpO1xyXG52YXIgV2F0Y2hUYXJnZXRDaGFuZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXYXRjaFRhcmdldENoYW5nZShcclxuICAgIC8qKiBXaGF0IGtpbmQgb2YgY2hhbmdlIG9jY3VycmVkIHRvIHRoZSB3YXRjaCB0YXJnZXQuICovXHJcbiAgICBzdGF0ZSwgXHJcbiAgICAvKiogVGhlIHRhcmdldCBJRHMgdGhhdCB3ZXJlIGFkZGVkL3JlbW92ZWQvc2V0LiAqL1xyXG4gICAgdGFyZ2V0SWRzLCBcclxuICAgIC8qKlxyXG4gICAgICogQW4gb3BhcXVlLCBzZXJ2ZXItYXNzaWduZWQgdG9rZW4gdGhhdCBhbGxvd3Mgd2F0Y2hpbmcgYSBxdWVyeSB0byBiZVxyXG4gICAgICogcmVzdW1lZCBhZnRlciBkaXNjb25uZWN0aW5nIHdpdGhvdXQgcmV0cmFuc21pdHRpbmcgYWxsIHRoZSBkYXRhIHRoYXRcclxuICAgICAqIG1hdGNoZXMgdGhlIHF1ZXJ5LiBUaGUgcmVzdW1lIHRva2VuIGVzc2VudGlhbGx5IGlkZW50aWZpZXMgYSBwb2ludCBpblxyXG4gICAgICogdGltZSBmcm9tIHdoaWNoIHRoZSBzZXJ2ZXIgc2hvdWxkIHJlc3VtZSBzZW5kaW5nIHJlc3VsdHMuXHJcbiAgICAgKi9cclxuICAgIHJlc3VtZVRva2VuLCBcclxuICAgIC8qKiBBbiBSUEMgZXJyb3IgaW5kaWNhdGluZyB3aHkgdGhlIHdhdGNoIGZhaWxlZC4gKi9cclxuICAgIGNhdXNlKSB7XHJcbiAgICAgICAgaWYgKHJlc3VtZVRva2VuID09PSB2b2lkIDApIHsgcmVzdW1lVG9rZW4gPSBlbXB0eUJ5dGVTdHJpbmcoKTsgfVxyXG4gICAgICAgIGlmIChjYXVzZSA9PT0gdm9pZCAwKSB7IGNhdXNlID0gbnVsbDsgfVxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICB0aGlzLnRhcmdldElkcyA9IHRhcmdldElkcztcclxuICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gcmVzdW1lVG9rZW47XHJcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFdhdGNoVGFyZ2V0Q2hhbmdlO1xyXG59KCkpO1xyXG4vKiogVHJhY2tzIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBhIFdhdGNoIHRhcmdldC4gKi9cclxudmFyIFRhcmdldFN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGFyZ2V0U3RhdGUoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG51bWJlciBvZiBwZW5kaW5nIHJlc3BvbnNlcyAoYWRkcyBvciByZW1vdmVzKSB0aGF0IHdlIGFyZSB3YWl0aW5nIG9uLlxyXG4gICAgICAgICAqIFdlIG9ubHkgY29uc2lkZXIgdGFyZ2V0cyBhY3RpdmUgdGhhdCBoYXZlIG5vIHBlbmRpbmcgcmVzcG9uc2VzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucGVuZGluZ1Jlc3BvbnNlcyA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogS2VlcHMgdHJhY2sgb2YgdGhlIGRvY3VtZW50IGNoYW5nZXMgc2luY2UgdGhlIGxhc3QgcmFpc2VkIHNuYXBzaG90LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogVGhlc2UgY2hhbmdlcyBhcmUgY29udGludW91c2x5IHVwZGF0ZWQgYXMgd2UgcmVjZWl2ZSBkb2N1bWVudCB1cGRhdGVzIGFuZFxyXG4gICAgICAgICAqIGFsd2F5cyByZWZsZWN0IHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzIGFnYWluc3QgdGhlIGxhc3QgaXNzdWVkIHNuYXBzaG90LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRDaGFuZ2VzID0gc25hcHNob3RDaGFuZ2VzTWFwKCk7XHJcbiAgICAgICAgLyoqIFNlZSBwdWJsaWMgZ2V0dGVycyBmb3IgZXhwbGFuYXRpb25zIG9mIHRoZXNlIGZpZWxkcy4gKi9cclxuICAgICAgICB0aGlzLl9yZXN1bWVUb2tlbiA9IGVtcHR5Qnl0ZVN0cmluZygpO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGV0aGVyIHRoaXMgdGFyZ2V0IHN0YXRlIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgbmV4dCBzbmFwc2hvdC4gV2VcclxuICAgICAgICAgKiBpbml0aWFsaXplIHRvIHRydWUgc28gdGhhdCBuZXdseS1hZGRlZCB0YXJnZXRzIGFyZSBpbmNsdWRlZCBpbiB0aGUgbmV4dFxyXG4gICAgICAgICAqIFJlbW90ZUV2ZW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2hhc1BlbmRpbmdDaGFuZ2VzID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUYXJnZXRTdGF0ZS5wcm90b3R5cGUsIFwiY3VycmVudFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2hldGhlciB0aGlzIHRhcmdldCBoYXMgYmVlbiBtYXJrZWQgJ2N1cnJlbnQnLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogJ0N1cnJlbnQnIGhhcyBzcGVjaWFsIG1lYW5pbmcgaW4gdGhlIFJQQyBwcm90b2NvbDogSXQgaW1wbGllcyB0aGF0IHRoZVxyXG4gICAgICAgICAqIFdhdGNoIGJhY2tlbmQgaGFzIHNlbnQgdXMgYWxsIGNoYW5nZXMgdXAgdG8gdGhlIHBvaW50IGF0IHdoaWNoIHRoZSB0YXJnZXRcclxuICAgICAgICAgKiB3YXMgYWRkZWQgYW5kIHRoYXQgdGhlIHRhcmdldCBpcyBjb25zaXN0ZW50IHdpdGggdGhlIHJlc3Qgb2YgdGhlIHdhdGNoXHJcbiAgICAgICAgICogc3RyZWFtLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUYXJnZXRTdGF0ZS5wcm90b3R5cGUsIFwicmVzdW1lVG9rZW5cIiwge1xyXG4gICAgICAgIC8qKiBUaGUgbGFzdCByZXN1bWUgdG9rZW4gc2VudCB0byB1cyBmb3IgdGhpcyB0YXJnZXQuICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXN1bWVUb2tlbjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUYXJnZXRTdGF0ZS5wcm90b3R5cGUsIFwiaXNQZW5kaW5nXCIsIHtcclxuICAgICAgICAvKiogV2hldGhlciB0aGlzIHRhcmdldCBoYXMgcGVuZGluZyB0YXJnZXQgYWRkcyBvciB0YXJnZXQgcmVtb3Zlcy4gKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ1Jlc3BvbnNlcyAhPT0gMDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUYXJnZXRTdGF0ZS5wcm90b3R5cGUsIFwiaGFzUGVuZGluZ0NoYW5nZXNcIiwge1xyXG4gICAgICAgIC8qKiBXaGV0aGVyIHdlIGhhdmUgbW9kaWZpZWQgYW55IHN0YXRlIHRoYXQgc2hvdWxkIHRyaWdnZXIgYSBzbmFwc2hvdC4gKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc1BlbmRpbmdDaGFuZ2VzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWVzIHRoZSByZXN1bWUgdG9rZW4gdG8gdGhlIFRhcmdldENoYW5nZSwgYnV0IG9ubHkgd2hlbiBpdCBoYXMgYSBuZXdcclxuICAgICAqIHZhbHVlLiBFbXB0eSByZXN1bWVUb2tlbnMgYXJlIGRpc2NhcmRlZC5cclxuICAgICAqL1xyXG4gICAgVGFyZ2V0U3RhdGUucHJvdG90eXBlLnVwZGF0ZVJlc3VtZVRva2VuID0gZnVuY3Rpb24gKHJlc3VtZVRva2VuKSB7XHJcbiAgICAgICAgaWYgKHJlc3VtZVRva2VuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5faGFzUGVuZGluZ0NoYW5nZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9yZXN1bWVUb2tlbiA9IHJlc3VtZVRva2VuO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSB0YXJnZXQgY2hhbmdlIGZyb20gdGhlIGN1cnJlbnQgc2V0IG9mIGNoYW5nZXMuXHJcbiAgICAgKlxyXG4gICAgICogVG8gcmVzZXQgdGhlIGRvY3VtZW50IGNoYW5nZXMgYWZ0ZXIgcmFpc2luZyB0aGlzIHNuYXBzaG90LCBjYWxsXHJcbiAgICAgKiBgY2xlYXJQZW5kaW5nQ2hhbmdlcygpYC5cclxuICAgICAqL1xyXG4gICAgVGFyZ2V0U3RhdGUucHJvdG90eXBlLnRvVGFyZ2V0Q2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhZGRlZERvY3VtZW50cyA9IGRvY3VtZW50S2V5U2V0KCk7XHJcbiAgICAgICAgdmFyIG1vZGlmaWVkRG9jdW1lbnRzID0gZG9jdW1lbnRLZXlTZXQoKTtcclxuICAgICAgICB2YXIgcmVtb3ZlZERvY3VtZW50cyA9IGRvY3VtZW50S2V5U2V0KCk7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudENoYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBjaGFuZ2VUeXBlKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY2hhbmdlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDaGFuZ2VUeXBlLkFkZGVkOlxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGVkRG9jdW1lbnRzID0gYWRkZWREb2N1bWVudHMuYWRkKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIENoYW5nZVR5cGUuTW9kaWZpZWQ6XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWREb2N1bWVudHMgPSBtb2RpZmllZERvY3VtZW50cy5hZGQoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQ2hhbmdlVHlwZS5SZW1vdmVkOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWREb2N1bWVudHMgPSByZW1vdmVkRG9jdW1lbnRzLmFkZChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBmYWlsKCdFbmNvdW50ZXJlZCBpbnZhbGlkIGNoYW5nZSB0eXBlOiAnICsgY2hhbmdlVHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IFRhcmdldENoYW5nZSh0aGlzLl9yZXN1bWVUb2tlbiwgdGhpcy5fY3VycmVudCwgYWRkZWREb2N1bWVudHMsIG1vZGlmaWVkRG9jdW1lbnRzLCByZW1vdmVkRG9jdW1lbnRzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0cyB0aGUgZG9jdW1lbnQgY2hhbmdlcyBhbmQgc2V0cyBgaGFzUGVuZGluZ0NoYW5nZXNgIHRvIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBUYXJnZXRTdGF0ZS5wcm90b3R5cGUuY2xlYXJQZW5kaW5nQ2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9oYXNQZW5kaW5nQ2hhbmdlcyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRDaGFuZ2VzID0gc25hcHNob3RDaGFuZ2VzTWFwKCk7XHJcbiAgICB9O1xyXG4gICAgVGFyZ2V0U3RhdGUucHJvdG90eXBlLmFkZERvY3VtZW50Q2hhbmdlID0gZnVuY3Rpb24gKGtleSwgY2hhbmdlVHlwZSkge1xyXG4gICAgICAgIHRoaXMuX2hhc1BlbmRpbmdDaGFuZ2VzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmRvY3VtZW50Q2hhbmdlcyA9IHRoaXMuZG9jdW1lbnRDaGFuZ2VzLmluc2VydChrZXksIGNoYW5nZVR5cGUpO1xyXG4gICAgfTtcclxuICAgIFRhcmdldFN0YXRlLnByb3RvdHlwZS5yZW1vdmVEb2N1bWVudENoYW5nZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB0aGlzLl9oYXNQZW5kaW5nQ2hhbmdlcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudENoYW5nZXMgPSB0aGlzLmRvY3VtZW50Q2hhbmdlcy5yZW1vdmUoa2V5KTtcclxuICAgIH07XHJcbiAgICBUYXJnZXRTdGF0ZS5wcm90b3R5cGUucmVjb3JkUGVuZGluZ1RhcmdldFJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVzcG9uc2VzICs9IDE7XHJcbiAgICB9O1xyXG4gICAgVGFyZ2V0U3RhdGUucHJvdG90eXBlLnJlY29yZFRhcmdldFJlc3BvbnNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGVuZGluZ1Jlc3BvbnNlcyAtPSAxO1xyXG4gICAgfTtcclxuICAgIFRhcmdldFN0YXRlLnByb3RvdHlwZS5tYXJrQ3VycmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9oYXNQZW5kaW5nQ2hhbmdlcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudCA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRhcmdldFN0YXRlO1xyXG59KCkpO1xyXG4vKipcclxuICogQSBoZWxwZXIgY2xhc3MgdG8gYWNjdW11bGF0ZSB3YXRjaCBjaGFuZ2VzIGludG8gYSBSZW1vdGVFdmVudC5cclxuICovXHJcbnZhciBXYXRjaENoYW5nZUFnZ3JlZ2F0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXYXRjaENoYW5nZUFnZ3JlZ2F0b3IobWV0YWRhdGFQcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMubWV0YWRhdGFQcm92aWRlciA9IG1ldGFkYXRhUHJvdmlkZXI7XHJcbiAgICAgICAgLyoqIFRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBhbGwgdHJhY2tlZCB0YXJnZXRzLiAqL1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RhdGVzID0ge307XHJcbiAgICAgICAgLyoqIEtlZXBzIHRyYWNrIG9mIHRoZSBkb2N1bWVudHMgdG8gdXBkYXRlIHNpbmNlIHRoZSBsYXN0IHJhaXNlZCBzbmFwc2hvdC4gKi9cclxuICAgICAgICB0aGlzLnBlbmRpbmdEb2N1bWVudFVwZGF0ZXMgPSBtYXliZURvY3VtZW50TWFwKCk7XHJcbiAgICAgICAgLyoqIEEgbWFwcGluZyBvZiBkb2N1bWVudCBrZXlzIHRvIHRoZWlyIHNldCBvZiB0YXJnZXQgSURzLiAqL1xyXG4gICAgICAgIHRoaXMucGVuZGluZ0RvY3VtZW50VGFyZ2V0TWFwcGluZyA9IGRvY3VtZW50VGFyZ2V0TWFwKCk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsaXN0IG9mIHRhcmdldHMgd2l0aCBleGlzdGVuY2UgZmlsdGVyIG1pc21hdGNoZXMuIFRoZXNlIHRhcmdldHMgYXJlXHJcbiAgICAgICAgICoga25vd24gdG8gYmUgaW5jb25zaXN0ZW50IGFuZCB0aGVpciBsaXN0ZW5zIG5lZWRzIHRvIGJlIHJlLWVzdGFibGlzaGVkIGJ5XHJcbiAgICAgICAgICogUmVtb3RlU3RvcmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wZW5kaW5nVGFyZ2V0UmVzZXRzID0gbmV3IFNvcnRlZFNldChwcmltaXRpdmVDb21wYXJhdG9yKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2VzIGFuZCBhZGRzIHRoZSBEb2N1bWVudFdhdGNoQ2hhbmdlIHRvIHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBXYXRjaENoYW5nZUFnZ3JlZ2F0b3IucHJvdG90eXBlLmhhbmRsZURvY3VtZW50Q2hhbmdlID0gZnVuY3Rpb24gKGRvY0NoYW5nZSkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBkb2NDaGFuZ2UudXBkYXRlZFRhcmdldElkczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHRhcmdldElkID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoZG9jQ2hhbmdlLm5ld0RvYyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZERvY3VtZW50VG9UYXJnZXQodGFyZ2V0SWQsIGRvY0NoYW5nZS5uZXdEb2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRvY0NoYW5nZS5uZXdEb2MgaW5zdGFuY2VvZiBOb0RvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURvY3VtZW50RnJvbVRhcmdldCh0YXJnZXRJZCwgZG9jQ2hhbmdlLmtleSwgZG9jQ2hhbmdlLm5ld0RvYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IGRvY0NoYW5nZS5yZW1vdmVkVGFyZ2V0SWRzOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0SWQgPSBfY1tfYl07XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRG9jdW1lbnRGcm9tVGFyZ2V0KHRhcmdldElkLCBkb2NDaGFuZ2Uua2V5LCBkb2NDaGFuZ2UubmV3RG9jKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIFByb2Nlc3NlcyBhbmQgYWRkcyB0aGUgV2F0Y2hUYXJnZXRDaGFuZ2UgdG8gdGhlIGN1cnJlbnQgc2V0IG9mIGNoYW5nZXMuICovXHJcbiAgICBXYXRjaENoYW5nZUFnZ3JlZ2F0b3IucHJvdG90eXBlLmhhbmRsZVRhcmdldENoYW5nZSA9IGZ1bmN0aW9uICh0YXJnZXRDaGFuZ2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaFRhcmdldCh0YXJnZXRDaGFuZ2UsIGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0U3RhdGUgPSBfdGhpcy5lbnN1cmVUYXJnZXRTdGF0ZSh0YXJnZXRJZCk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGFyZ2V0Q2hhbmdlLnN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUuTm9DaGFuZ2U6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzQWN0aXZlVGFyZ2V0KHRhcmdldElkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRTdGF0ZS51cGRhdGVSZXN1bWVUb2tlbih0YXJnZXRDaGFuZ2UucmVzdW1lVG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5BZGRlZDpcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGRlY3JlbWVudCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciB0aGlzIHRhcmdldElkLlxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFN0YXRlLnJlY29yZFRhcmdldFJlc3BvbnNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRTdGF0ZS5pc1BlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIGZyZXNobHkgYWRkZWQgdGFyZ2V0LCBzbyB3ZSBuZWVkIHRvIHJlc2V0IGFueSBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IHdlIGhhZCBwcmV2aW91c2x5LiBUaGlzIGNhbiBoYXBwZW4gZS5nLiB3aGVuIHJlbW92ZSBhbmQgYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJhY2sgYSB0YXJnZXQgZm9yIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U3RhdGUuY2xlYXJQZW5kaW5nQ2hhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTdGF0ZS51cGRhdGVSZXN1bWVUb2tlbih0YXJnZXRDaGFuZ2UucmVzdW1lVG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBXYXRjaFRhcmdldENoYW5nZVN0YXRlLlJlbW92ZWQ6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIHJlbW92ZWQgdGFyZ2V0cyB0byB3ZSBjYW4gcG9zdC1maWx0ZXIgYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSB0YXJnZXQgY2hhbmdlcy5cclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGRlY3JlbWVudCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciB0aGlzIHRhcmdldElkLlxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFN0YXRlLnJlY29yZFRhcmdldFJlc3BvbnNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRTdGF0ZS5pc1BlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlVGFyZ2V0KHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KCF0YXJnZXRDaGFuZ2UuY2F1c2UsICdXYXRjaENoYW5nZUFnZ3JlZ2F0b3IgZG9lcyBub3QgaGFuZGxlIGVycm9yZWQgdGFyZ2V0cycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBXYXRjaFRhcmdldENoYW5nZVN0YXRlLkN1cnJlbnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzQWN0aXZlVGFyZ2V0KHRhcmdldElkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRTdGF0ZS5tYXJrQ3VycmVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRTdGF0ZS51cGRhdGVSZXN1bWVUb2tlbih0YXJnZXRDaGFuZ2UucmVzdW1lVG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5SZXNldDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNBY3RpdmVUYXJnZXQodGFyZ2V0SWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSB0YXJnZXQgYW5kIHN5bnRoZXNpemVzIHJlbW92ZXMgZm9yIGFsbCBleGlzdGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb2N1bWVudHMuIFRoZSBiYWNrZW5kIHdpbGwgcmUtYWRkIGFueSBkb2N1bWVudHMgdGhhdCBzdGlsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaCB0aGUgdGFyZ2V0IGJlZm9yZSBpdCBzZW5kcyB0aGUgbmV4dCBnbG9iYWwgc25hcHNob3QuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlc2V0VGFyZ2V0KHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U3RhdGUudXBkYXRlUmVzdW1lVG9rZW4odGFyZ2V0Q2hhbmdlLnJlc3VtZVRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGZhaWwoJ1Vua25vd24gdGFyZ2V0IHdhdGNoIGNoYW5nZSBzdGF0ZTogJyArIHRhcmdldENoYW5nZS5zdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYWxsIHRhcmdldElkcyB0aGF0IHRoZSB3YXRjaCBjaGFuZ2UgYXBwbGllcyB0bzogZWl0aGVyIHRoZVxyXG4gICAgICogdGFyZ2V0SWRzIGV4cGxpY2l0bHkgbGlzdGVkIGluIHRoZSBjaGFuZ2Ugb3IgdGhlIHRhcmdldElkcyBvZiBhbGwgY3VycmVudGx5XHJcbiAgICAgKiBhY3RpdmUgdGFyZ2V0cy5cclxuICAgICAqL1xyXG4gICAgV2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yLnByb3RvdHlwZS5mb3JFYWNoVGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldENoYW5nZSwgZm4pIHtcclxuICAgICAgICBpZiAodGFyZ2V0Q2hhbmdlLnRhcmdldElkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRhcmdldENoYW5nZS50YXJnZXRJZHMuZm9yRWFjaChmbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3JFYWNoTnVtYmVyKHRoaXMudGFyZ2V0U3RhdGVzLCBmbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBleGlzdGVuY2UgZmlsdGVycyBhbmQgc3ludGhlc2l6ZXMgZGVsZXRlcyBmb3IgZmlsdGVyIG1pc21hdGNoZXMuXHJcbiAgICAgKiBUYXJnZXRzIHRoYXQgYXJlIGludmFsaWRhdGVkIGJ5IGZpbHRlciBtaXNtYXRjaGVzIGFyZSBhZGRlZCB0b1xyXG4gICAgICogYHBlbmRpbmdUYXJnZXRSZXNldHNgLlxyXG4gICAgICovXHJcbiAgICBXYXRjaENoYW5nZUFnZ3JlZ2F0b3IucHJvdG90eXBlLmhhbmRsZUV4aXN0ZW5jZUZpbHRlciA9IGZ1bmN0aW9uICh3YXRjaENoYW5nZSkge1xyXG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHdhdGNoQ2hhbmdlLnRhcmdldElkO1xyXG4gICAgICAgIHZhciBleHBlY3RlZENvdW50ID0gd2F0Y2hDaGFuZ2UuZXhpc3RlbmNlRmlsdGVyLmNvdW50O1xyXG4gICAgICAgIHZhciBxdWVyeURhdGEgPSB0aGlzLnF1ZXJ5RGF0YUZvckFjdGl2ZVRhcmdldCh0YXJnZXRJZCk7XHJcbiAgICAgICAgaWYgKHF1ZXJ5RGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnkgPSBxdWVyeURhdGEucXVlcnk7XHJcbiAgICAgICAgICAgIGlmIChxdWVyeS5pc0RvY3VtZW50UXVlcnkoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4cGVjdGVkQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZXhpc3RlbmNlIGZpbHRlciB0b2xkIHVzIHRoZSBkb2N1bWVudCBkb2VzIG5vdCBleGlzdC4gV2UgZGVkdWNlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCB0aGlzIGRvY3VtZW50IGRvZXMgbm90IGV4aXN0IGFuZCBhcHBseSBhIGRlbGV0ZWQgZG9jdW1lbnQgdG9cclxuICAgICAgICAgICAgICAgICAgICAvLyBvdXIgdXBkYXRlcy4gV2l0aG91dCBhcHBseWluZyB0aGlzIGRlbGV0ZWQgZG9jdW1lbnQgdGhlcmUgbWlnaHQgYmVcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbm90aGVyIHF1ZXJ5IHRoYXQgd2lsbCByYWlzZSB0aGlzIGRvY3VtZW50IGFzIHBhcnQgb2YgYSBzbmFwc2hvdFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVudGlsIGl0IGlzIHJlc29sdmVkLCBlc3NlbnRpYWxseSBleHBvc2luZyBpbmNvbnNpc3RlbmN5IGJldHdlZW5cclxuICAgICAgICAgICAgICAgICAgICAvLyBxdWVyaWVzLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBuZXcgRG9jdW1lbnRLZXkocXVlcnkucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEb2N1bWVudEZyb21UYXJnZXQodGFyZ2V0SWQsIGtleSwgbmV3IE5vRG9jdW1lbnQoa2V5LCBTbmFwc2hvdFZlcnNpb24uZm9yRGVsZXRlZERvYygpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoZXhwZWN0ZWRDb3VudCA9PT0gMSwgJ1NpbmdsZSBkb2N1bWVudCBleGlzdGVuY2UgZmlsdGVyIHdpdGggY291bnQ6ICcgKyBleHBlY3RlZENvdW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U2l6ZSA9IHRoaXMuZ2V0Q3VycmVudERvY3VtZW50Q291bnRGb3JUYXJnZXQodGFyZ2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTaXplICE9PSBleHBlY3RlZENvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaDogV2UgcmVzZXQgdGhlIG1hcHBpbmcgYW5kIHJhaXNlIGEgbmV3XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc25hcHNob3Qgd2l0aCBgaXNGcm9tQ2FjaGU6dHJ1ZWAuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFRhcmdldCh0YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nVGFyZ2V0UmVzZXRzID0gdGhpcy5wZW5kaW5nVGFyZ2V0UmVzZXRzLmFkZCh0YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGUgY3VycmVudGx5IGFjY3VtdWxhdGVkIHN0YXRlIGludG8gYSByZW1vdGUgZXZlbnQgYXQgdGhlXHJcbiAgICAgKiBwcm92aWRlZCBzbmFwc2hvdCB2ZXJzaW9uLiBSZXNldHMgdGhlIGFjY3VtdWxhdGVkIGNoYW5nZXMgYmVmb3JlIHJldHVybmluZy5cclxuICAgICAqL1xyXG4gICAgV2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yLnByb3RvdHlwZS5jcmVhdGVSZW1vdGVFdmVudCA9IGZ1bmN0aW9uIChzbmFwc2hvdFZlcnNpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0YXJnZXRDaGFuZ2VzID0ge307XHJcbiAgICAgICAgZm9yRWFjaE51bWJlcih0aGlzLnRhcmdldFN0YXRlcywgZnVuY3Rpb24gKHRhcmdldElkLCB0YXJnZXRTdGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlEYXRhID0gX3RoaXMucXVlcnlEYXRhRm9yQWN0aXZlVGFyZ2V0KHRhcmdldElkKTtcclxuICAgICAgICAgICAgaWYgKHF1ZXJ5RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFN0YXRlLmN1cnJlbnQgJiYgcXVlcnlEYXRhLnF1ZXJ5LmlzRG9jdW1lbnRRdWVyeSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9jdW1lbnQgcXVlcmllcyBmb3IgZG9jdW1lbnQgdGhhdCBkb24ndCBleGlzdCBjYW4gcHJvZHVjZSBhbiBlbXB0eVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc3VsdCBzZXQuIFRvIHVwZGF0ZSBvdXIgbG9jYWwgY2FjaGUsIHdlIHN5bnRoZXNpemUgYSBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBpZiB3ZSBoYXZlIG5vdCBwcmV2aW91c2x5IHJlY2VpdmVkIHRoZSBkb2N1bWVudC4gVGhpc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdmVzIHRoZSBsaW1ibyBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQsIHJlbW92aW5nIGl0IGZyb21cclxuICAgICAgICAgICAgICAgICAgICAvLyBsaW1ib0RvY3VtZW50UmVmcy5cclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogSWRlYWxseSB3ZSB3b3VsZCBoYXZlIGFuIGV4cGxpY2l0IGxvb2t1cCBxdWVyeVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluc3RlYWQgcmVzdWx0aW5nIGluIGFuIGV4cGxpY2l0IGRlbGV0ZSBtZXNzYWdlIGFuZCB3ZSBjb3VsZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGlzIHNwZWNpYWwgbG9naWMuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IG5ldyBEb2N1bWVudEtleShxdWVyeURhdGEucXVlcnkucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnBlbmRpbmdEb2N1bWVudFVwZGF0ZXMuZ2V0KGtleSkgPT09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgIV90aGlzLnRhcmdldENvbnRhaW5zRG9jdW1lbnQodGFyZ2V0SWQsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlRG9jdW1lbnRGcm9tVGFyZ2V0KHRhcmdldElkLCBrZXksIG5ldyBOb0RvY3VtZW50KGtleSwgc25hcHNob3RWZXJzaW9uKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFN0YXRlLmhhc1BlbmRpbmdDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2hhbmdlc1t0YXJnZXRJZF0gPSB0YXJnZXRTdGF0ZS50b1RhcmdldENoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFN0YXRlLmNsZWFyUGVuZGluZ0NoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciByZXNvbHZlZExpbWJvRG9jdW1lbnRzID0gZG9jdW1lbnRLZXlTZXQoKTtcclxuICAgICAgICAvLyBXZSBleHRyYWN0IHRoZSBzZXQgb2YgbGltYm8tb25seSBkb2N1bWVudCB1cGRhdGVzIGFzIHRoZSBHQyBsb2dpY1xyXG4gICAgICAgIC8vIHNwZWNpYWwtY2FzZXMgZG9jdW1lbnRzIHRoYXQgZG8gbm90IGFwcGVhciBpbiB0aGUgcXVlcnkgY2FjaGUuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBUT0RPKGdzb2x0aXMpOiBFeHBhbmQgb24gdGhpcyBjb21tZW50IG9uY2UgR0MgaXMgYXZhaWxhYmxlIGluIHRoZSBKU1xyXG4gICAgICAgIC8vIGNsaWVudC5cclxuICAgICAgICB0aGlzLnBlbmRpbmdEb2N1bWVudFRhcmdldE1hcHBpbmcuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCB0YXJnZXRzKSB7XHJcbiAgICAgICAgICAgIHZhciBpc09ubHlMaW1ib1RhcmdldCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRhcmdldHMuZm9yRWFjaFdoaWxlKGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5RGF0YSA9IF90aGlzLnF1ZXJ5RGF0YUZvckFjdGl2ZVRhcmdldCh0YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocXVlcnlEYXRhICYmIHF1ZXJ5RGF0YS5wdXJwb3NlICE9PSBRdWVyeVB1cnBvc2UuTGltYm9SZXNvbHV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNPbmx5TGltYm9UYXJnZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChpc09ubHlMaW1ib1RhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRMaW1ib0RvY3VtZW50cyA9IHJlc29sdmVkTGltYm9Eb2N1bWVudHMuYWRkKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgcmVtb3RlRXZlbnQgPSBuZXcgUmVtb3RlRXZlbnQoc25hcHNob3RWZXJzaW9uLCB0YXJnZXRDaGFuZ2VzLCB0aGlzLnBlbmRpbmdUYXJnZXRSZXNldHMsIHRoaXMucGVuZGluZ0RvY3VtZW50VXBkYXRlcywgcmVzb2x2ZWRMaW1ib0RvY3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nRG9jdW1lbnRVcGRhdGVzID0gbWF5YmVEb2N1bWVudE1hcCgpO1xyXG4gICAgICAgIHRoaXMucGVuZGluZ0RvY3VtZW50VGFyZ2V0TWFwcGluZyA9IGRvY3VtZW50VGFyZ2V0TWFwKCk7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nVGFyZ2V0UmVzZXRzID0gbmV3IFNvcnRlZFNldChwcmltaXRpdmVDb21wYXJhdG9yKTtcclxuICAgICAgICByZXR1cm4gcmVtb3RlRXZlbnQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBwcm92aWRlZCBkb2N1bWVudCB0byB0aGUgaW50ZXJuYWwgbGlzdCBvZiBkb2N1bWVudCB1cGRhdGVzIGFuZFxyXG4gICAgICogaXRzIGRvY3VtZW50IGtleSB0byB0aGUgZ2l2ZW4gdGFyZ2V0J3MgbWFwcGluZy5cclxuICAgICAqL1xyXG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdGluZy5cclxuICAgIFdhdGNoQ2hhbmdlQWdncmVnYXRvci5wcm90b3R5cGUuYWRkRG9jdW1lbnRUb1RhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCwgZG9jdW1lbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmVUYXJnZXQodGFyZ2V0SWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNoYW5nZVR5cGUgPSB0aGlzLnRhcmdldENvbnRhaW5zRG9jdW1lbnQodGFyZ2V0SWQsIGRvY3VtZW50LmtleSlcclxuICAgICAgICAgICAgPyBDaGFuZ2VUeXBlLk1vZGlmaWVkXHJcbiAgICAgICAgICAgIDogQ2hhbmdlVHlwZS5BZGRlZDtcclxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGUgPSB0aGlzLmVuc3VyZVRhcmdldFN0YXRlKHRhcmdldElkKTtcclxuICAgICAgICB0YXJnZXRTdGF0ZS5hZGREb2N1bWVudENoYW5nZShkb2N1bWVudC5rZXksIGNoYW5nZVR5cGUpO1xyXG4gICAgICAgIHRoaXMucGVuZGluZ0RvY3VtZW50VXBkYXRlcyA9IHRoaXMucGVuZGluZ0RvY3VtZW50VXBkYXRlcy5pbnNlcnQoZG9jdW1lbnQua2V5LCBkb2N1bWVudCk7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nRG9jdW1lbnRUYXJnZXRNYXBwaW5nID0gdGhpcy5wZW5kaW5nRG9jdW1lbnRUYXJnZXRNYXBwaW5nLmluc2VydChkb2N1bWVudC5rZXksIHRoaXMuZW5zdXJlRG9jdW1lbnRUYXJnZXRNYXBwaW5nKGRvY3VtZW50LmtleSkuYWRkKHRhcmdldElkKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm92aWRlZCBkb2N1bWVudCBmcm9tIHRoZSB0YXJnZXQgbWFwcGluZy4gSWYgdGhlXHJcbiAgICAgKiBkb2N1bWVudCBubyBsb25nZXIgbWF0Y2hlcyB0aGUgdGFyZ2V0LCBidXQgdGhlIGRvY3VtZW50J3Mgc3RhdGUgaXMgc3RpbGxcclxuICAgICAqIGtub3duIChlLmcuIHdlIGtub3cgdGhhdCB0aGUgZG9jdW1lbnQgd2FzIGRlbGV0ZWQgb3Igd2UgcmVjZWl2ZWQgdGhlIGNoYW5nZVxyXG4gICAgICogdGhhdCBjYXVzZWQgdGhlIGZpbHRlciBtaXNtYXRjaCksIHRoZSBuZXcgZG9jdW1lbnQgY2FuIGJlIHByb3ZpZGVkXHJcbiAgICAgKiB0byB1cGRhdGUgdGhlIHJlbW90ZSBkb2N1bWVudCBjYWNoZS5cclxuICAgICAqL1xyXG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdGluZy5cclxuICAgIFdhdGNoQ2hhbmdlQWdncmVnYXRvci5wcm90b3R5cGUucmVtb3ZlRG9jdW1lbnRGcm9tVGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldElkLCBrZXksIHVwZGF0ZWREb2N1bWVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZVRhcmdldCh0YXJnZXRJZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGUgPSB0aGlzLmVuc3VyZVRhcmdldFN0YXRlKHRhcmdldElkKTtcclxuICAgICAgICBpZiAodGhpcy50YXJnZXRDb250YWluc0RvY3VtZW50KHRhcmdldElkLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFN0YXRlLmFkZERvY3VtZW50Q2hhbmdlKGtleSwgQ2hhbmdlVHlwZS5SZW1vdmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSBkb2N1bWVudCBtYXkgaGF2ZSBlbnRlcmVkIGFuZCBsZWZ0IHRoZSB0YXJnZXQgYmVmb3JlIHdlIHJhaXNlZCBhXHJcbiAgICAgICAgICAgIC8vIHNuYXBzaG90LCBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGNoYW5nZS5cclxuICAgICAgICAgICAgdGFyZ2V0U3RhdGUucmVtb3ZlRG9jdW1lbnRDaGFuZ2Uoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nRG9jdW1lbnRUYXJnZXRNYXBwaW5nID0gdGhpcy5wZW5kaW5nRG9jdW1lbnRUYXJnZXRNYXBwaW5nLmluc2VydChrZXksIHRoaXMuZW5zdXJlRG9jdW1lbnRUYXJnZXRNYXBwaW5nKGtleSkuZGVsZXRlKHRhcmdldElkKSk7XHJcbiAgICAgICAgaWYgKHVwZGF0ZWREb2N1bWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdEb2N1bWVudFVwZGF0ZXMgPSB0aGlzLnBlbmRpbmdEb2N1bWVudFVwZGF0ZXMuaW5zZXJ0KGtleSwgdXBkYXRlZERvY3VtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgV2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yLnByb3RvdHlwZS5yZW1vdmVUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy50YXJnZXRTdGF0ZXNbdGFyZ2V0SWRdO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBjb3VudCBvZiBkb2N1bWVudHMgaW4gdGhlIHRhcmdldC4gVGhpcyBpbmNsdWRlcyBib3RoXHJcbiAgICAgKiB0aGUgbnVtYmVyIG9mIGRvY3VtZW50cyB0aGF0IHRoZSBMb2NhbFN0b3JlIGNvbnNpZGVycyB0byBiZSBwYXJ0IG9mIHRoZVxyXG4gICAgICogdGFyZ2V0IGFzIHdlbGwgYXMgYW55IGFjY3VtdWxhdGVkIGNoYW5nZXMuXHJcbiAgICAgKi9cclxuICAgIFdhdGNoQ2hhbmdlQWdncmVnYXRvci5wcm90b3R5cGUuZ2V0Q3VycmVudERvY3VtZW50Q291bnRGb3JUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGUgPSB0aGlzLmVuc3VyZVRhcmdldFN0YXRlKHRhcmdldElkKTtcclxuICAgICAgICB2YXIgdGFyZ2V0Q2hhbmdlID0gdGFyZ2V0U3RhdGUudG9UYXJnZXRDaGFuZ2UoKTtcclxuICAgICAgICByZXR1cm4gKHRoaXMubWV0YWRhdGFQcm92aWRlci5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KHRhcmdldElkKS5zaXplICtcclxuICAgICAgICAgICAgdGFyZ2V0Q2hhbmdlLmFkZGVkRG9jdW1lbnRzLnNpemUgLVxyXG4gICAgICAgICAgICB0YXJnZXRDaGFuZ2UucmVtb3ZlZERvY3VtZW50cy5zaXplKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEluY3JlbWVudCB0aGUgbnVtYmVyIG9mIGFja3MgbmVlZGVkIGZyb20gd2F0Y2ggYmVmb3JlIHdlIGNhbiBjb25zaWRlciB0aGVcclxuICAgICAqIHNlcnZlciB0byBiZSAnaW4tc3luYycgd2l0aCB0aGUgY2xpZW50J3MgYWN0aXZlIHRhcmdldHMuXHJcbiAgICAgKi9cclxuICAgIFdhdGNoQ2hhbmdlQWdncmVnYXRvci5wcm90b3R5cGUucmVjb3JkUGVuZGluZ1RhcmdldFJlcXVlc3QgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICAvLyBGb3IgZWFjaCByZXF1ZXN0IHdlIGdldCB3ZSBuZWVkIHRvIHJlY29yZCB3ZSBuZWVkIGEgcmVzcG9uc2UgZm9yIGl0LlxyXG4gICAgICAgIHZhciB0YXJnZXRTdGF0ZSA9IHRoaXMuZW5zdXJlVGFyZ2V0U3RhdGUodGFyZ2V0SWQpO1xyXG4gICAgICAgIHRhcmdldFN0YXRlLnJlY29yZFBlbmRpbmdUYXJnZXRSZXF1ZXN0KCk7XHJcbiAgICB9O1xyXG4gICAgV2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yLnByb3RvdHlwZS5lbnN1cmVUYXJnZXRTdGF0ZSA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIGlmICghdGhpcy50YXJnZXRTdGF0ZXNbdGFyZ2V0SWRdKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0U3RhdGVzW3RhcmdldElkXSA9IG5ldyBUYXJnZXRTdGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRTdGF0ZXNbdGFyZ2V0SWRdO1xyXG4gICAgfTtcclxuICAgIFdhdGNoQ2hhbmdlQWdncmVnYXRvci5wcm90b3R5cGUuZW5zdXJlRG9jdW1lbnRUYXJnZXRNYXBwaW5nID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciB0YXJnZXRNYXBwaW5nID0gdGhpcy5wZW5kaW5nRG9jdW1lbnRUYXJnZXRNYXBwaW5nLmdldChrZXkpO1xyXG4gICAgICAgIGlmICghdGFyZ2V0TWFwcGluZykge1xyXG4gICAgICAgICAgICB0YXJnZXRNYXBwaW5nID0gbmV3IFNvcnRlZFNldChwcmltaXRpdmVDb21wYXJhdG9yKTtcclxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nRG9jdW1lbnRUYXJnZXRNYXBwaW5nID0gdGhpcy5wZW5kaW5nRG9jdW1lbnRUYXJnZXRNYXBwaW5nLmluc2VydChrZXksIHRhcmdldE1hcHBpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0TWFwcGluZztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFZlcmlmaWVzIHRoYXQgdGhlIHVzZXIgaXMgc3RpbGwgaW50ZXJlc3RlZCBpbiB0aGlzIHRhcmdldCAoYnkgY2FsbGluZ1xyXG4gICAgICogYGdldFF1ZXJ5RGF0YUZvclRhcmdldCgpYCkgYW5kIHRoYXQgd2UgYXJlIG5vdCB3YWl0aW5nIGZvciBwZW5kaW5nIEFERHNcclxuICAgICAqIGZyb20gd2F0Y2guXHJcbiAgICAgKi9cclxuICAgIFdhdGNoQ2hhbmdlQWdncmVnYXRvci5wcm90b3R5cGUuaXNBY3RpdmVUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeURhdGFGb3JBY3RpdmVUYXJnZXQodGFyZ2V0SWQpICE9PSBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgUXVlcnlEYXRhIGZvciBhbiBhY3RpdmUgdGFyZ2V0IChpLmUuIGEgdGFyZ2V0IHRoYXQgdGhlIHVzZXJcclxuICAgICAqIGlzIHN0aWxsIGludGVyZXN0ZWQgaW4gdGhhdCBoYXMgbm8gb3V0c3RhbmRpbmcgdGFyZ2V0IGNoYW5nZSByZXF1ZXN0cykuXHJcbiAgICAgKi9cclxuICAgIFdhdGNoQ2hhbmdlQWdncmVnYXRvci5wcm90b3R5cGUucXVlcnlEYXRhRm9yQWN0aXZlVGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldFN0YXRlID0gdGhpcy50YXJnZXRTdGF0ZXNbdGFyZ2V0SWRdO1xyXG4gICAgICAgIHJldHVybiB0YXJnZXRTdGF0ZSAmJiB0YXJnZXRTdGF0ZS5pc1BlbmRpbmdcclxuICAgICAgICAgICAgPyBudWxsXHJcbiAgICAgICAgICAgIDogdGhpcy5tZXRhZGF0YVByb3ZpZGVyLmdldFF1ZXJ5RGF0YUZvclRhcmdldCh0YXJnZXRJZCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldHMgdGhlIHN0YXRlIG9mIGEgV2F0Y2ggdGFyZ2V0IHRvIGl0cyBpbml0aWFsIHN0YXRlIChlLmcuIHNldHNcclxuICAgICAqICdjdXJyZW50JyB0byBmYWxzZSwgY2xlYXJzIHRoZSByZXN1bWUgdG9rZW4gYW5kIHJlbW92ZXMgaXRzIHRhcmdldCBtYXBwaW5nXHJcbiAgICAgKiBmcm9tIGFsbCBkb2N1bWVudHMpLlxyXG4gICAgICovXHJcbiAgICBXYXRjaENoYW5nZUFnZ3JlZ2F0b3IucHJvdG90eXBlLnJlc2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBhc3NlcnQoIXRoaXMudGFyZ2V0U3RhdGVzW3RhcmdldElkXS5pc1BlbmRpbmcsICdTaG91bGQgb25seSByZXNldCBhY3RpdmUgdGFyZ2V0cycpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RhdGVzW3RhcmdldElkXSA9IG5ldyBUYXJnZXRTdGF0ZSgpO1xyXG4gICAgICAgIC8vIFRyaWdnZXIgcmVtb3ZhbCBmb3IgYW55IGRvY3VtZW50cyBjdXJyZW50bHkgbWFwcGVkIHRvIHRoaXMgdGFyZ2V0LlxyXG4gICAgICAgIC8vIFRoZXNlIHJlbW92YWxzIHdpbGwgYmUgcGFydCBvZiB0aGUgaW5pdGlhbCBzbmFwc2hvdCBpZiBXYXRjaCBkb2VzIG5vdFxyXG4gICAgICAgIC8vIHJlc2VuZCB0aGVzZSBkb2N1bWVudHMuXHJcbiAgICAgICAgdmFyIGV4aXN0aW5nS2V5cyA9IHRoaXMubWV0YWRhdGFQcm92aWRlci5nZXRSZW1vdGVLZXlzRm9yVGFyZ2V0KHRhcmdldElkKTtcclxuICAgICAgICBleGlzdGluZ0tleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIF90aGlzLnJlbW92ZURvY3VtZW50RnJvbVRhcmdldCh0YXJnZXRJZCwga2V5LCAvKnVwZGF0ZWREb2N1bWVudD0qLyBudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgTG9jYWxTdG9yZSBjb25zaWRlcnMgdGhlIGRvY3VtZW50IHRvIGJlIHBhcnQgb2YgdGhlXHJcbiAgICAgKiBzcGVjaWZpZWQgdGFyZ2V0LlxyXG4gICAgICovXHJcbiAgICBXYXRjaENoYW5nZUFnZ3JlZ2F0b3IucHJvdG90eXBlLnRhcmdldENvbnRhaW5zRG9jdW1lbnQgPSBmdW5jdGlvbiAodGFyZ2V0SWQsIGtleSkge1xyXG4gICAgICAgIHZhciBleGlzdGluZ0tleXMgPSB0aGlzLm1ldGFkYXRhUHJvdmlkZXIuZ2V0UmVtb3RlS2V5c0ZvclRhcmdldCh0YXJnZXRJZCk7XHJcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nS2V5cy5oYXMoa2V5KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gV2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yO1xyXG59KCkpO1xyXG5mdW5jdGlvbiBkb2N1bWVudFRhcmdldE1hcCgpIHtcclxuICAgIHJldHVybiBuZXcgU29ydGVkTWFwKERvY3VtZW50S2V5LmNvbXBhcmF0b3IpO1xyXG59XHJcbmZ1bmN0aW9uIHNuYXBzaG90Q2hhbmdlc01hcCgpIHtcclxuICAgIHJldHVybiBuZXcgU29ydGVkTWFwKERvY3VtZW50S2V5LmNvbXBhcmF0b3IpO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgRElSRUNUSU9OUyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZGlycyA9IHt9O1xyXG4gICAgZGlyc1tEaXJlY3Rpb24uQVNDRU5ESU5HLm5hbWVdID0gJ0FTQ0VORElORyc7XHJcbiAgICBkaXJzW0RpcmVjdGlvbi5ERVNDRU5ESU5HLm5hbWVdID0gJ0RFU0NFTkRJTkcnO1xyXG4gICAgcmV0dXJuIGRpcnM7XHJcbn0pKCk7XHJcbnZhciBPUEVSQVRPUlMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG9wcyA9IHt9O1xyXG4gICAgb3BzW1JlbGF0aW9uT3AuTEVTU19USEFOLm5hbWVdID0gJ0xFU1NfVEhBTic7XHJcbiAgICBvcHNbUmVsYXRpb25PcC5MRVNTX1RIQU5fT1JfRVFVQUwubmFtZV0gPSAnTEVTU19USEFOX09SX0VRVUFMJztcclxuICAgIG9wc1tSZWxhdGlvbk9wLkdSRUFURVJfVEhBTi5uYW1lXSA9ICdHUkVBVEVSX1RIQU4nO1xyXG4gICAgb3BzW1JlbGF0aW9uT3AuR1JFQVRFUl9USEFOX09SX0VRVUFMLm5hbWVdID0gJ0dSRUFURVJfVEhBTl9PUl9FUVVBTCc7XHJcbiAgICBvcHNbUmVsYXRpb25PcC5FUVVBTC5uYW1lXSA9ICdFUVVBTCc7XHJcbiAgICBvcHNbUmVsYXRpb25PcC5BUlJBWV9DT05UQUlOUy5uYW1lXSA9ICdBUlJBWV9DT05UQUlOUyc7XHJcbiAgICByZXR1cm4gb3BzO1xyXG59KSgpO1xyXG4vLyBBIFJlZ0V4cCBtYXRjaGluZyBJU08gODYwMSBVVEMgdGltZXN0YW1wcyB3aXRoIG9wdGlvbmFsIGZyYWN0aW9uLlxyXG52YXIgSVNPX1JFR19FWFAgPSBuZXcgUmVnRXhwKC9eXFxkezR9LVxcZFxcZC1cXGRcXGRUXFxkXFxkOlxcZFxcZDpcXGRcXGQoPzpcXC4oXFxkKykpP1okLyk7XHJcbmZ1bmN0aW9uIGFzc2VydFByZXNlbnQodmFsdWUsIGRlc2NyaXB0aW9uKSB7XHJcbiAgICBhc3NlcnQoIWlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSwgZGVzY3JpcHRpb24gKyAnIGlzIG1pc3NpbmcnKTtcclxufVxyXG5mdW5jdGlvbiBwYXJzZUludDY0KHZhbHVlKSB7XHJcbiAgICAvLyBUT0RPKGJqb3JuaWNrKTogSGFuZGxlIGludDY0IGdyZWF0ZXIgdGhhbiA1MyBiaXRzLlxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFpbChcImNhbid0IHBhcnNlIFwiICsgdmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgSnNvbk9iamVjdCB2YWx1ZXMgZm9yIHRoZSBEYXRhc3RvcmUgQVBJIHN1aXRhYmxlIGZvciBzZW5kaW5nIHRvXHJcbiAqIGVpdGhlciBHUlBDIHN0dWIgbWV0aG9kcyBvciB2aWEgdGhlIEpTT04vSFRUUCBSRVNUIEFQSS5cclxuICogVE9ETyhrbGltdCk6IFdlIGNhbiByZW1vdmUgdGhlIGRhdGFiYXNlSWQgYXJndW1lbnQgaWYgd2Uga2VlcCB0aGUgZnVsbFxyXG4gKiByZXNvdXJjZSBuYW1lIGluIGRvY3VtZW50cy5cclxuICovXHJcbnZhciBKc29uUHJvdG9TZXJpYWxpemVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSnNvblByb3RvU2VyaWFsaXplcihkYXRhYmFzZUlkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhYmFzZUlkID0gZGF0YWJhc2VJZDtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfVxyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZW1wdHlCeXRlU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlUHJvdG8zSnNvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnVuc2FmZUNhc3RQcm90b0J5dGVTdHJpbmcgPSBmdW5jdGlvbiAoYnl0ZVN0cmluZykge1xyXG4gICAgICAgIC8vIGJ5dGVTdHJpbmdzIGNhbiBiZSBlaXRoZXIgc3RyaW5nIG9yIFVJbnQ4QXJyYXksIGJ1dCB0aGUgdHlwaW5ncyBzYXlcclxuICAgICAgICAvLyBpdCdzIGFsd2F5cyBhIHN0cmluZy4gQ2FzdCBhcyBzdHJpbmcgdG8gYXZvaWQgdHlwZSBjaGVjayBmYWlsaW5nXHJcbiAgICAgICAgcmV0dXJuIGJ5dGVTdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbVJwY1N0YXR1cyA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuICAgICAgICB2YXIgY29kZSA9IHN0YXR1cy5jb2RlID09PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgPyBDb2RlLlVOS05PV05cclxuICAgICAgICAgICAgOiBtYXBDb2RlRnJvbVJwY0NvZGUoc3RhdHVzLmNvZGUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRmlyZXN0b3JlRXJyb3IoY29kZSwgc3RhdHVzLm1lc3NhZ2UgfHwgJycpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHZhbHVlIGZvciBhIG51bWJlciAob3IgdW5kZWZpbmVkKSB0aGF0J3MgYXBwcm9wcmlhdGUgdG8gcHV0IGludG9cclxuICAgICAqIGEgZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUgcHJvdG8uXHJcbiAgICAgKiBETyBOT1QgVVNFIFRISVMgRk9SIEFOWVRISU5HIEVMU0UuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBjaGVhdHMuIEl0J3MgdHlwZWQgYXMgcmV0dXJuaW5nIFwibnVtYmVyXCIgYmVjYXVzZSB0aGF0J3Mgd2hhdFxyXG4gICAgICogb3VyIGdlbmVyYXRlZCBwcm90byBpbnRlcmZhY2VzIHNheSBJbnQzMlZhbHVlIG11c3QgYmUuIEJ1dCBHUlBDIGFjdHVhbGx5XHJcbiAgICAgKiBleHBlY3RzIGEgeyB2YWx1ZTogPG51bWJlcj4gfSBzdHJ1Y3QuXHJcbiAgICAgKi9cclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvSW50MzJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHZhbCkpIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBXZSBuZWVkIHRvIG1hdGNoIGdlbmVyYXRlZCBQcm90byB0eXBlcy5cclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHZhbCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgbnVtYmVyIChvciBudWxsKSBmcm9tIGEgZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUgcHJvdG8uXHJcbiAgICAgKiBETyBOT1QgVVNFIFRISVMgRk9SIEFOWVRISU5HIEVMU0UuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBjaGVhdHMuIEl0J3MgdHlwZWQgYXMgYWNjZXB0aW5nIFwibnVtYmVyXCIgYmVjYXVzZSB0aGF0J3Mgd2hhdFxyXG4gICAgICogb3VyIGdlbmVyYXRlZCBwcm90byBpbnRlcmZhY2VzIHNheSBJbnQzMlZhbHVlIG11c3QgYmUsIGJ1dCBpdCBhY3R1YWxseVxyXG4gICAgICogYWNjZXB0cyB7IHZhbHVlOiBudW1iZXIgfSB0byBtYXRjaCBvdXIgc2VyaWFsaXphdGlvbiBpbiB0b0ludDMyVmFsdWUoKS5cclxuICAgICAqL1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbUludDMyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBXZSBuZWVkIHRvIG1hdGNoIGdlbmVyYXRlZCBQcm90byB0eXBlcy5cclxuICAgICAgICAgICAgcmVzdWx0ID0gdmFsLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gV2UgYWNjZXB0IHJhdyBudW1iZXJzICh3aXRob3V0IHRoZSB7dmFsdWU6IC4uLiB9IHdyYXBwZXIpIGZvclxyXG4gICAgICAgICAgICAvLyBjb21wYXRpYmlsaXR5IHdpdGggbGVnYWN5IHBlcnNpc3RlZCBkYXRhLlxyXG4gICAgICAgICAgICByZXN1bHQgPSB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpc051bGxPclVuZGVmaW5lZChyZXN1bHQpID8gbnVsbCA6IHJlc3VsdDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSB2YWx1ZSBmb3IgYSBEYXRlIHRoYXQncyBhcHByb3ByaWF0ZSB0byBwdXQgaW50byBhIHByb3RvLlxyXG4gICAgICogRE8gTk9UIFVTRSBUSElTIEZPUiBBTllUSElORyBFTFNFLlxyXG4gICAgICogVGhpcyBtZXRob2QgY2hlYXRzLiBJdCdzIHR5cGVkIGFzIHJldHVybmluZyBcInN0cmluZ1wiIGJlY2F1c2UgdGhhdCdzIHdoYXRcclxuICAgICAqIG91ciBnZW5lcmF0ZWQgcHJvdG8gaW50ZXJmYWNlcyBzYXkgZGF0ZXMgbXVzdCBiZS4gQnV0IGl0J3MgZWFzaWVyIGFuZCBzYWZlclxyXG4gICAgICogdG8gYWN0dWFsbHkgcmV0dXJuIGEgVGltZXN0YW1wIHByb3RvLlxyXG4gICAgICovXHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b1RpbWVzdGFtcCA9IGZ1bmN0aW9uICh0aW1lc3RhbXApIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZWNvbmRzOiB0aW1lc3RhbXAuc2Vjb25kcyxcclxuICAgICAgICAgICAgbmFub3M6IHRpbWVzdGFtcC5uYW5vc2Vjb25kc1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tVGltZXN0YW1wID0gZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAvLyBUaGUganNvbiBpbnRlcmZhY2UgKGZvciB0aGUgYnJvd3Nlcikgd2lsbCByZXR1cm4gYW4gaXNvIHRpbWVzdGFtcCBzdHJpbmcsXHJcbiAgICAgICAgLy8gd2hpbGUgdGhlIHByb3RvIGpzIGxpYnJhcnkgKGZvciBub2RlKSB3aWxsIHJldHVybiBhXHJcbiAgICAgICAgLy8gZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCBpbnN0YW5jZS5cclxuICAgICAgICBpZiAodHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE8oYi8zNzI4MjIzNyk6IFVzZSBzdHJpbmdzIGZvciBQcm90bzMgdGltZXN0YW1wc1xyXG4gICAgICAgICAgICAvLyBhc3NlcnQodGhpcy5vcHRpb25zLnVzZVByb3RvM0pzb24sXHJcbiAgICAgICAgICAgIC8vICAgJ1RoZSB0aW1lc3RhbXAgc3RyaW5nIGZvcm1hdCByZXF1aXJlcyBQcm90bzMuJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21Jc284NjAxU3RyaW5nKGRhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXNzZXJ0KCEhZGF0ZSwgJ0Nhbm5vdCBkZXNlcmlhbGl6ZSBudWxsIG9yIHVuZGVmaW5lZCB0aW1lc3RhbXAuJyk7XHJcbiAgICAgICAgICAgIC8vIFRPRE8oYi8zNzI4MjIzNyk6IFVzZSBzdHJpbmdzIGZvciBQcm90bzMgdGltZXN0YW1wc1xyXG4gICAgICAgICAgICAvLyBhc3NlcnQoIXRoaXMub3B0aW9ucy51c2VQcm90bzNKc29uLFxyXG4gICAgICAgICAgICAvLyAgICdUaGUgdGltZXN0YW1wIGluc3RhbmNlIGZvcm1hdCByZXF1aXJlcyBQcm90byBKUy4nKTtcclxuICAgICAgICAgICAgdmFyIHNlY29uZHMgPSBwYXJzZUludDY0KGRhdGUuc2Vjb25kcyB8fCAnMCcpO1xyXG4gICAgICAgICAgICB2YXIgbmFub3MgPSBkYXRlLm5hbm9zIHx8IDA7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGltZXN0YW1wKHNlY29uZHMsIG5hbm9zKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbUlzbzg2MDFTdHJpbmcgPSBmdW5jdGlvbiAodXRjKSB7XHJcbiAgICAgICAgLy8gVGhlIGRhdGUgc3RyaW5nIGNhbiBoYXZlIGhpZ2hlciBwcmVjaXNpb24gKG5hbm9zKSB0aGFuIHRoZSBEYXRlIGNsYXNzXHJcbiAgICAgICAgLy8gKG1pbGxpcyksIHNvIHdlIGRvIHNvbWUgY3VzdG9tIHBhcnNpbmcgaGVyZS5cclxuICAgICAgICAvLyBQYXJzZSB0aGUgbmFub3MgcmlnaHQgb3V0IG9mIHRoZSBzdHJpbmcuXHJcbiAgICAgICAgdmFyIG5hbm9zID0gMDtcclxuICAgICAgICB2YXIgZnJhY3Rpb24gPSBJU09fUkVHX0VYUC5leGVjKHV0Yyk7XHJcbiAgICAgICAgYXNzZXJ0KCEhZnJhY3Rpb24sICdpbnZhbGlkIHRpbWVzdGFtcDogJyArIHV0Yyk7XHJcbiAgICAgICAgaWYgKGZyYWN0aW9uWzFdKSB7XHJcbiAgICAgICAgICAgIC8vIFBhZCB0aGUgZnJhY3Rpb24gb3V0IHRvIDkgZGlnaXRzIChuYW5vcykuXHJcbiAgICAgICAgICAgIHZhciBuYW5vU3RyID0gZnJhY3Rpb25bMV07XHJcbiAgICAgICAgICAgIG5hbm9TdHIgPSAobmFub1N0ciArICcwMDAwMDAwMDAnKS5zdWJzdHIoMCwgOSk7XHJcbiAgICAgICAgICAgIG5hbm9zID0gTnVtYmVyKG5hbm9TdHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQYXJzZSB0aGUgZGF0ZSB0byBnZXQgdGhlIHNlY29uZHMuXHJcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh1dGMpO1xyXG4gICAgICAgIHZhciBzZWNvbmRzID0gTWF0aC5mbG9vcihkYXRlLmdldFRpbWUoKSAvIDEwMDApO1xyXG4gICAgICAgIHJldHVybiBuZXcgVGltZXN0YW1wKHNlY29uZHMsIG5hbm9zKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSB2YWx1ZSBmb3IgYnl0ZXMgdGhhdCdzIGFwcHJvcHJpYXRlIHRvIHB1dCBpbiBhIHByb3RvLlxyXG4gICAgICogRE8gTk9UIFVTRSBUSElTIEZPUiBBTllUSElORyBFTFNFLlxyXG4gICAgICogVGhpcyBtZXRob2QgY2hlYXRzLiBJdCdzIHR5cGVkIGFzIHJldHVybmluZyBcInN0cmluZ1wiIGJlY2F1c2UgdGhhdCdzIHdoYXRcclxuICAgICAqIG91ciBnZW5lcmF0ZWQgcHJvdG8gaW50ZXJmYWNlcyBzYXkgYnl0ZXMgbXVzdCBiZS4gQnV0IGl0IHNob3VsZCByZXR1cm5cclxuICAgICAqIGFuIFVpbnQ4QXJyYXkgaW4gTm9kZS5cclxuICAgICAqL1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9CeXRlcyA9IGZ1bmN0aW9uIChieXRlcykge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlUHJvdG8zSnNvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gYnl0ZXMudG9CYXNlNjQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSB0eXBpbmdzIHNheSBpdCdzIGEgc3RyaW5nLCBidXQgaXQgbmVlZHMgdG8gYmUgYSBVaW50OEFycmF5IGluIE5vZGUuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVuc2FmZUNhc3RQcm90b0J5dGVTdHJpbmcoYnl0ZXMudG9VaW50OEFycmF5KCkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlIHRoZSBibG9iIGZyb20gdGhlIHByb3RvcyBpbnRvIHRoZSBpbnRlcm5hbCBCbG9iIGNsYXNzLiBOb3RlIHRoYXQgdGhlXHJcbiAgICAgKiB0eXBpbmdzIGFzc3VtZSBhbGwgYmxvYnMgYXJlIHN0cmluZ3MsIGJ1dCB0aGV5IGFyZSBhY3R1YWxseSBVaW50OEFycmF5c1xyXG4gICAgICogb24gTm9kZS5cclxuICAgICAqL1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbUJsb2IgPSBmdW5jdGlvbiAoYmxvYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmxvYiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYXNzZXJ0KHRoaXMub3B0aW9ucy51c2VQcm90bzNKc29uLCAnRXhwZWN0ZWQgYnl0ZXMgdG8gYmUgcGFzc2VkIGluIGFzIFVpbnQ4QXJyYXksIGJ1dCBnb3QgYSBzdHJpbmcgaW5zdGVhZC4nKTtcclxuICAgICAgICAgICAgcmV0dXJuIEJsb2IuZnJvbUJhc2U2NFN0cmluZyhibG9iKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFzc2VydCghdGhpcy5vcHRpb25zLnVzZVByb3RvM0pzb24sICdFeHBlY3RlZCBieXRlcyB0byBiZSBwYXNzZWQgaW4gYXMgc3RyaW5nLCBidXQgZ290IHNvbWV0aGluZyBlbHNlIGluc3RlYWQuJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBCbG9iLmZyb21VaW50OEFycmF5KGJsb2IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b1ZlcnNpb24gPSBmdW5jdGlvbiAodmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvVGltZXN0YW1wKHZlcnNpb24udG9UaW1lc3RhbXAoKSk7XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbVZlcnNpb24gPSBmdW5jdGlvbiAodmVyc2lvbikge1xyXG4gICAgICAgIGFzc2VydCghIXZlcnNpb24sIFwiVHJ5aW5nIHRvIGRlc2VyaWFsaXplIHZlcnNpb24gdGhhdCBpc24ndCBzZXRcIik7XHJcbiAgICAgICAgcmV0dXJuIFNuYXBzaG90VmVyc2lvbi5mcm9tVGltZXN0YW1wKHRoaXMuZnJvbVRpbWVzdGFtcCh2ZXJzaW9uKSk7XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9SZXNvdXJjZU5hbWUgPSBmdW5jdGlvbiAoZGF0YWJhc2VJZCwgcGF0aCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZ1bGx5UXVhbGlmaWVkUHJlZml4UGF0aChkYXRhYmFzZUlkKVxyXG4gICAgICAgICAgICAuY2hpbGQoJ2RvY3VtZW50cycpXHJcbiAgICAgICAgICAgIC5jaGlsZChwYXRoKVxyXG4gICAgICAgICAgICAuY2Fub25pY2FsU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbVJlc291cmNlTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgdmFyIHJlc291cmNlID0gUmVzb3VyY2VQYXRoLmZyb21TdHJpbmcobmFtZSk7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuaXNWYWxpZFJlc291cmNlTmFtZShyZXNvdXJjZSksICdUcmllZCB0byBkZXNlcmlhbGl6ZSBpbnZhbGlkIGtleSAnICsgcmVzb3VyY2UudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvTmFtZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1Jlc291cmNlTmFtZSh0aGlzLmRhdGFiYXNlSWQsIGtleS5wYXRoKTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgdmFyIHJlc291cmNlID0gdGhpcy5mcm9tUmVzb3VyY2VOYW1lKG5hbWUpO1xyXG4gICAgICAgIGFzc2VydChyZXNvdXJjZS5nZXQoMSkgPT09IHRoaXMuZGF0YWJhc2VJZC5wcm9qZWN0SWQsICdUcmllZCB0byBkZXNlcmlhbGl6ZSBrZXkgZnJvbSBkaWZmZXJlbnQgcHJvamVjdDogJyArXHJcbiAgICAgICAgICAgIHJlc291cmNlLmdldCgxKSArXHJcbiAgICAgICAgICAgICcgdnMgJyArXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YWJhc2VJZC5wcm9qZWN0SWQpO1xyXG4gICAgICAgIGFzc2VydCgoIXJlc291cmNlLmdldCgzKSAmJiAhdGhpcy5kYXRhYmFzZUlkLmRhdGFiYXNlKSB8fFxyXG4gICAgICAgICAgICByZXNvdXJjZS5nZXQoMykgPT09IHRoaXMuZGF0YWJhc2VJZC5kYXRhYmFzZSwgJ1RyaWVkIHRvIGRlc2VyaWFsaXplIGtleSBmcm9tIGRpZmZlcmVudCBkYXRhYmFzZTogJyArXHJcbiAgICAgICAgICAgIHJlc291cmNlLmdldCgzKSArXHJcbiAgICAgICAgICAgICcgdnMgJyArXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YWJhc2VJZC5kYXRhYmFzZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEtleSh0aGlzLmV4dHJhY3RMb2NhbFBhdGhGcm9tUmVzb3VyY2VOYW1lKHJlc291cmNlKSk7XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9RdWVyeVBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAvLyBJZiB0aGUgcGF0aCBpcyBlbXB0eSwgdGhlIGJhY2tlbmQgcmVxdWlyZXMgd2UgbGVhdmUgb2ZmIHRoZSAvZG9jdW1lbnRzXHJcbiAgICAgICAgICAgIC8vIGF0IHRoZSBlbmQuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZWREYXRhYmFzZUlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy50b1Jlc291cmNlTmFtZSh0aGlzLmRhdGFiYXNlSWQsIHBhdGgpO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21RdWVyeVBhdGggPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHZhciByZXNvdXJjZU5hbWUgPSB0aGlzLmZyb21SZXNvdXJjZU5hbWUobmFtZSk7XHJcbiAgICAgICAgaWYgKHJlc291cmNlTmFtZS5sZW5ndGggPT09IDQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlc291cmNlUGF0aC5FTVBUWV9QQVRIO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5leHRyYWN0TG9jYWxQYXRoRnJvbVJlc291cmNlTmFtZShyZXNvdXJjZU5hbWUpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZSwgXCJlbmNvZGVkRGF0YWJhc2VJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gbmV3IFJlc291cmNlUGF0aChbXHJcbiAgICAgICAgICAgICAgICAncHJvamVjdHMnLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZUlkLnByb2plY3RJZCxcclxuICAgICAgICAgICAgICAgICdkYXRhYmFzZXMnLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZUlkLmRhdGFiYXNlXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcGF0aC5jYW5vbmljYWxTdHJpbmcoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLmZ1bGx5UXVhbGlmaWVkUHJlZml4UGF0aCA9IGZ1bmN0aW9uIChkYXRhYmFzZUlkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvdXJjZVBhdGgoW1xyXG4gICAgICAgICAgICAncHJvamVjdHMnLFxyXG4gICAgICAgICAgICBkYXRhYmFzZUlkLnByb2plY3RJZCxcclxuICAgICAgICAgICAgJ2RhdGFiYXNlcycsXHJcbiAgICAgICAgICAgIGRhdGFiYXNlSWQuZGF0YWJhc2VcclxuICAgICAgICBdKTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5leHRyYWN0TG9jYWxQYXRoRnJvbVJlc291cmNlTmFtZSA9IGZ1bmN0aW9uIChyZXNvdXJjZU5hbWUpIHtcclxuICAgICAgICBhc3NlcnQocmVzb3VyY2VOYW1lLmxlbmd0aCA+IDQgJiYgcmVzb3VyY2VOYW1lLmdldCg0KSA9PT0gJ2RvY3VtZW50cycsICd0cmllZCB0byBkZXNlcmlhbGl6ZSBpbnZhbGlkIGtleSAnICsgcmVzb3VyY2VOYW1lLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHJldHVybiByZXNvdXJjZU5hbWUucG9wRmlyc3QoNSk7XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuaXNWYWxpZFJlc291cmNlTmFtZSA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgLy8gUmVzb3VyY2UgbmFtZXMgaGF2ZSBhdCBsZWFzdCA0IGNvbXBvbmVudHMgKHByb2plY3QgSUQsIGRhdGFiYXNlIElEKVxyXG4gICAgICAgIHJldHVybiAocGF0aC5sZW5ndGggPj0gNCAmJlxyXG4gICAgICAgICAgICBwYXRoLmdldCgwKSA9PT0gJ3Byb2plY3RzJyAmJlxyXG4gICAgICAgICAgICBwYXRoLmdldCgyKSA9PT0gJ2RhdGFiYXNlcycpO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIE51bGxWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4geyBudWxsVmFsdWU6ICdOVUxMX1ZBTFVFJyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBCb29sZWFuVmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgYm9vbGVhblZhbHVlOiB2YWwudmFsdWUoKSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBJbnRlZ2VyVmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgaW50ZWdlclZhbHVlOiAnJyArIHZhbC52YWx1ZSgpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIERvdWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciBkb3VibGVWYWx1ZSA9IHZhbC52YWx1ZSgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVzZVByb3RvM0pzb24pIHtcclxuICAgICAgICAgICAgICAgIC8vIFByb3RvIDMgbGV0J3MgdXMgZW5jb2RlIE5hTiBhbmQgSW5maW5pdHkgYXMgc3RyaW5nIHZhbHVlcyBhc1xyXG4gICAgICAgICAgICAgICAgLy8gZXhwZWN0ZWQgYnkgdGhlIGJhY2tlbmQuIFRoaXMgaXMgY3VycmVudGx5IG5vdCBjaGVja2VkIGJ5IG91ciB1bml0XHJcbiAgICAgICAgICAgICAgICAvLyB0ZXN0cyBiZWNhdXNlIHRoZXkgcmVseSBvbiBwcm90b2J1Zi5qcy5cclxuICAgICAgICAgICAgICAgIGlmIChpc05hTihkb3VibGVWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkb3VibGVWYWx1ZTogJ05hTicgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRvdWJsZVZhbHVlID09PSBJbmZpbml0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRvdWJsZVZhbHVlOiAnSW5maW5pdHknIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkb3VibGVWYWx1ZSA9PT0gLUluZmluaXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZG91YmxlVmFsdWU6ICctSW5maW5pdHknIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHsgZG91YmxlVmFsdWU6IHZhbC52YWx1ZSgpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIFN0cmluZ1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHN0cmluZ1ZhbHVlOiB2YWwudmFsdWUoKSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBPYmplY3RWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4geyBtYXBWYWx1ZTogdGhpcy50b01hcFZhbHVlKHZhbCkgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsIGluc3RhbmNlb2YgQXJyYXlWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4geyBhcnJheVZhbHVlOiB0aGlzLnRvQXJyYXlWYWx1ZSh2YWwpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIFRpbWVzdGFtcFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBWYWx1ZTogdGhpcy50b1RpbWVzdGFtcCh2YWwuaW50ZXJuYWxWYWx1ZSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsIGluc3RhbmNlb2YgR2VvUG9pbnRWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZ2VvUG9pbnRWYWx1ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiB2YWwudmFsdWUoKS5sYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHZhbC52YWx1ZSgpLmxvbmdpdHVkZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBCbG9iVmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGJ5dGVzVmFsdWU6IHRoaXMudG9CeXRlcyh2YWwudmFsdWUoKSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsIGluc3RhbmNlb2YgUmVmVmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZVZhbHVlOiB0aGlzLnRvUmVzb3VyY2VOYW1lKHZhbC5kYXRhYmFzZUlkLCB2YWwua2V5LnBhdGgpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbCgnVW5rbm93biBGaWVsZFZhbHVlICcgKyBKU09OLnN0cmluZ2lmeSh2YWwpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbVZhbHVlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG4gICAgICAgIHZhciB0eXBlID0gb2JqWyd2YWx1ZV90eXBlJ107XHJcbiAgICAgICAgaWYgKGhhc1RhZyhvYmosIHR5cGUsICdudWxsVmFsdWUnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVsbFZhbHVlLklOU1RBTkNFO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNUYWcob2JqLCB0eXBlLCAnYm9vbGVhblZhbHVlJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW5WYWx1ZS5vZihvYmouYm9vbGVhblZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaGFzVGFnKG9iaiwgdHlwZSwgJ2ludGVnZXJWYWx1ZScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50ZWdlclZhbHVlKHBhcnNlSW50NjQob2JqLmludGVnZXJWYWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNUYWcob2JqLCB0eXBlLCAnZG91YmxlVmFsdWUnKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVzZVByb3RvM0pzb24pIHtcclxuICAgICAgICAgICAgICAgIC8vIFByb3RvIDMgdXNlcyB0aGUgc3RyaW5nIHZhbHVlcyAnTmFOJyBhbmQgJ0luZmluaXR5Jy5cclxuICAgICAgICAgICAgICAgIGlmIChvYmouZG91YmxlVmFsdWUgPT09ICdOYU4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERvdWJsZVZhbHVlLk5BTjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iai5kb3VibGVWYWx1ZSA9PT0gJ0luZmluaXR5Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBEb3VibGVWYWx1ZS5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iai5kb3VibGVWYWx1ZSA9PT0gJy1JbmZpbml0eScpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRG91YmxlVmFsdWUuTkVHQVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb3VibGVWYWx1ZShvYmouZG91YmxlVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNUYWcob2JqLCB0eXBlLCAnc3RyaW5nVmFsdWUnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmluZ1ZhbHVlKG9iai5zdHJpbmdWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGhhc1RhZyhvYmosIHR5cGUsICdtYXBWYWx1ZScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21GaWVsZHMob2JqLm1hcFZhbHVlLmZpZWxkcyB8fCB7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGhhc1RhZyhvYmosIHR5cGUsICdhcnJheVZhbHVlJykpIHtcclxuICAgICAgICAgICAgLy8gXCJ2YWx1ZXNcIiBpcyBub3QgcHJlc2VudCBpZiB0aGUgYXJyYXkgaXMgZW1wdHlcclxuICAgICAgICAgICAgYXNzZXJ0UHJlc2VudChvYmouYXJyYXlWYWx1ZSwgJ2FycmF5VmFsdWUnKTtcclxuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG9iai5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheVZhbHVlKHZhbHVlcy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIF90aGlzLmZyb21WYWx1ZSh2KTsgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNUYWcob2JqLCB0eXBlLCAndGltZXN0YW1wVmFsdWUnKSkge1xyXG4gICAgICAgICAgICBhc3NlcnRQcmVzZW50KG9iai50aW1lc3RhbXBWYWx1ZSwgJ3RpbWVzdGFtcFZhbHVlJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGltZXN0YW1wVmFsdWUodGhpcy5mcm9tVGltZXN0YW1wKG9iai50aW1lc3RhbXBWYWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNUYWcob2JqLCB0eXBlLCAnZ2VvUG9pbnRWYWx1ZScpKSB7XHJcbiAgICAgICAgICAgIGFzc2VydFByZXNlbnQob2JqLmdlb1BvaW50VmFsdWUsICdnZW9Qb2ludFZhbHVlJyk7XHJcbiAgICAgICAgICAgIHZhciBsYXRpdHVkZSA9IG9iai5nZW9Qb2ludFZhbHVlLmxhdGl0dWRlIHx8IDA7XHJcbiAgICAgICAgICAgIHZhciBsb25naXR1ZGUgPSBvYmouZ2VvUG9pbnRWYWx1ZS5sb25naXR1ZGUgfHwgMDtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBHZW9Qb2ludFZhbHVlKG5ldyBHZW9Qb2ludChsYXRpdHVkZSwgbG9uZ2l0dWRlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGhhc1RhZyhvYmosIHR5cGUsICdieXRlc1ZhbHVlJykpIHtcclxuICAgICAgICAgICAgYXNzZXJ0UHJlc2VudChvYmouYnl0ZXNWYWx1ZSwgJ2J5dGVzVmFsdWUnKTtcclxuICAgICAgICAgICAgdmFyIGJsb2IgPSB0aGlzLmZyb21CbG9iKG9iai5ieXRlc1ZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCbG9iVmFsdWUoYmxvYik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGhhc1RhZyhvYmosIHR5cGUsICdyZWZlcmVuY2VWYWx1ZScpKSB7XHJcbiAgICAgICAgICAgIGFzc2VydFByZXNlbnQob2JqLnJlZmVyZW5jZVZhbHVlLCAncmVmZXJlbmNlVmFsdWUnKTtcclxuICAgICAgICAgICAgdmFyIHJlc291cmNlTmFtZSA9IHRoaXMuZnJvbVJlc291cmNlTmFtZShvYmoucmVmZXJlbmNlVmFsdWUpO1xyXG4gICAgICAgICAgICB2YXIgZGJJZCA9IG5ldyBEYXRhYmFzZUlkKHJlc291cmNlTmFtZS5nZXQoMSksIHJlc291cmNlTmFtZS5nZXQoMykpO1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gbmV3IERvY3VtZW50S2V5KHRoaXMuZXh0cmFjdExvY2FsUGF0aEZyb21SZXNvdXJjZU5hbWUocmVzb3VyY2VOYW1lKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVmVmFsdWUoZGJJZCwga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsKCdVbmtub3duIFZhbHVlIHByb3RvICcgKyBKU09OLnN0cmluZ2lmeShvYmopKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIENyZWF0ZXMgYW4gYXBpLkRvY3VtZW50IGZyb20ga2V5IGFuZCBmaWVsZHMgKGJ1dCBubyBjcmVhdGUvdXBkYXRlIHRpbWUpICovXHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b011dGF0aW9uRG9jdW1lbnQgPSBmdW5jdGlvbiAoa2V5LCBmaWVsZHMpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLnRvTmFtZShrZXkpLFxyXG4gICAgICAgICAgICBmaWVsZHM6IHRoaXMudG9GaWVsZHMoZmllbGRzKVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9Eb2N1bWVudCA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xyXG4gICAgICAgIGFzc2VydCghZG9jdW1lbnQuaGFzTG9jYWxNdXRhdGlvbnMsIFwiQ2FuJ3Qgc2VyaWFsaXplIGRvY3VtZW50cyB3aXRoIG11dGF0aW9ucy5cIik7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy50b05hbWUoZG9jdW1lbnQua2V5KSxcclxuICAgICAgICAgICAgZmllbGRzOiB0aGlzLnRvRmllbGRzKGRvY3VtZW50LmRhdGEpLFxyXG4gICAgICAgICAgICB1cGRhdGVUaW1lOiB0aGlzLnRvVGltZXN0YW1wKGRvY3VtZW50LnZlcnNpb24udG9UaW1lc3RhbXAoKSlcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21Eb2N1bWVudCA9IGZ1bmN0aW9uIChkb2N1bWVudCwgaGFzQ29tbWl0dGVkTXV0YXRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudCh0aGlzLmZyb21OYW1lKGRvY3VtZW50Lm5hbWUpLCB0aGlzLmZyb21WZXJzaW9uKGRvY3VtZW50LnVwZGF0ZVRpbWUpLCB0aGlzLmZyb21GaWVsZHMoZG9jdW1lbnQuZmllbGRzIHx8IHt9KSwgeyBoYXNDb21taXR0ZWRNdXRhdGlvbnM6ICEhaGFzQ29tbWl0dGVkTXV0YXRpb25zIH0pO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvRmllbGRzID0gZnVuY3Rpb24gKGZpZWxkcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gX3RoaXMudG9WYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tRmllbGRzID0gZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gUHJvdG8gbWFwPHN0cmluZywgVmFsdWU+IGdldHMgbWFwcGVkIHRvIE9iamVjdCwgc28gY2FzdCBpdC5cclxuICAgICAgICB2YXIgbWFwID0gb2JqZWN0O1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBPYmplY3RWYWx1ZS5FTVBUWTtcclxuICAgICAgICBmb3JFYWNoKG1hcCwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNldChuZXcgRmllbGRQYXRoKFtrZXldKSwgX3RoaXMuZnJvbVZhbHVlKHZhbHVlKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b01hcFZhbHVlID0gZnVuY3Rpb24gKG1hcCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZpZWxkczogdGhpcy50b0ZpZWxkcyhtYXApXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b0FycmF5VmFsdWUgPSBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChfdGhpcy50b1ZhbHVlKHZhbHVlKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHsgdmFsdWVzOiByZXN1bHQgfTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tRm91bmQgPSBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgYXNzZXJ0KCEhZG9jLmZvdW5kLCAnVHJpZWQgdG8gZGVzZXJpYWxpemUgYSBmb3VuZCBkb2N1bWVudCBmcm9tIGEgbWlzc2luZyBkb2N1bWVudC4nKTtcclxuICAgICAgICBhc3NlcnRQcmVzZW50KGRvYy5mb3VuZC5uYW1lLCAnZG9jLmZvdW5kLm5hbWUnKTtcclxuICAgICAgICBhc3NlcnRQcmVzZW50KGRvYy5mb3VuZC51cGRhdGVUaW1lLCAnZG9jLmZvdW5kLnVwZGF0ZVRpbWUnKTtcclxuICAgICAgICB2YXIga2V5ID0gdGhpcy5mcm9tTmFtZShkb2MuZm91bmQubmFtZSk7XHJcbiAgICAgICAgdmFyIHZlcnNpb24gPSB0aGlzLmZyb21WZXJzaW9uKGRvYy5mb3VuZC51cGRhdGVUaW1lKTtcclxuICAgICAgICB2YXIgZmllbGRzID0gdGhpcy5mcm9tRmllbGRzKGRvYy5mb3VuZC5maWVsZHMgfHwge30pO1xyXG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnQoa2V5LCB2ZXJzaW9uLCBmaWVsZHMsIHt9KTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tTWlzc2luZyA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICBhc3NlcnQoISFyZXN1bHQubWlzc2luZywgJ1RyaWVkIHRvIGRlc2VyaWFsaXplIGEgbWlzc2luZyBkb2N1bWVudCBmcm9tIGEgZm91bmQgZG9jdW1lbnQuJyk7XHJcbiAgICAgICAgYXNzZXJ0KCEhcmVzdWx0LnJlYWRUaW1lLCAnVHJpZWQgdG8gZGVzZXJpYWxpemUgYSBtaXNzaW5nIGRvY3VtZW50IHdpdGhvdXQgYSByZWFkIHRpbWUuJyk7XHJcbiAgICAgICAgdmFyIGtleSA9IHRoaXMuZnJvbU5hbWUocmVzdWx0Lm1pc3NpbmcpO1xyXG4gICAgICAgIHZhciB2ZXJzaW9uID0gdGhpcy5mcm9tVmVyc2lvbihyZXN1bHQucmVhZFRpbWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTm9Eb2N1bWVudChrZXksIHZlcnNpb24pO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21NYXliZURvY3VtZW50ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcclxuICAgICAgICB2YXIgdHlwZSA9IHJlc3VsdFsncmVzdWx0J107XHJcbiAgICAgICAgaWYgKGhhc1RhZyhyZXN1bHQsIHR5cGUsICdmb3VuZCcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21Gb3VuZChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNUYWcocmVzdWx0LCB0eXBlLCAnbWlzc2luZycpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21NaXNzaW5nKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWlsKCdpbnZhbGlkIGJhdGNoIGdldCByZXNwb25zZTogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBXYXRjaFRhcmdldENoYW5nZVN0YXRlLkFkZGVkOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdBREQnO1xyXG4gICAgICAgICAgICBjYXNlIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUuQ3VycmVudDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnQ1VSUkVOVCc7XHJcbiAgICAgICAgICAgIGNhc2UgV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5Ob0NoYW5nZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnTk9fQ0hBTkdFJztcclxuICAgICAgICAgICAgY2FzZSBXYXRjaFRhcmdldENoYW5nZVN0YXRlLlJlbW92ZWQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1JFTU9WRSc7XHJcbiAgICAgICAgICAgIGNhc2UgV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5SZXNldDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnUkVTRVQnO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ1Vua25vd24gV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZTogJyArIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9UZXN0V2F0Y2hDaGFuZ2UgPSBmdW5jdGlvbiAod2F0Y2hDaGFuZ2UpIHtcclxuICAgICAgICBpZiAod2F0Y2hDaGFuZ2UgaW5zdGFuY2VvZiBFeGlzdGVuY2VGaWx0ZXJDaGFuZ2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiB3YXRjaENoYW5nZS5leGlzdGVuY2VGaWx0ZXIuY291bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SWQ6IHdhdGNoQ2hhbmdlLnRhcmdldElkXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh3YXRjaENoYW5nZSBpbnN0YW5jZW9mIERvY3VtZW50V2F0Y2hDaGFuZ2UpIHtcclxuICAgICAgICAgICAgaWYgKHdhdGNoQ2hhbmdlLm5ld0RvYyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gd2F0Y2hDaGFuZ2UubmV3RG9jO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudENoYW5nZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy50b05hbWUoZG9jLmtleSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IHRoaXMudG9GaWVsZHMoZG9jLmRhdGEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZTogdGhpcy50b1ZlcnNpb24oZG9jLnZlcnNpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldElkczogd2F0Y2hDaGFuZ2UudXBkYXRlZFRhcmdldElkcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZFRhcmdldElkczogd2F0Y2hDaGFuZ2UucmVtb3ZlZFRhcmdldElkc1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAod2F0Y2hDaGFuZ2UubmV3RG9jIGluc3RhbmNlb2YgTm9Eb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IHdhdGNoQ2hhbmdlLm5ld0RvYztcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnREZWxldGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQ6IHRoaXMudG9OYW1lKGRvYy5rZXkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkVGltZTogdGhpcy50b1ZlcnNpb24oZG9jLnZlcnNpb24pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkVGFyZ2V0SWRzOiB3YXRjaENoYW5nZS5yZW1vdmVkVGFyZ2V0SWRzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh3YXRjaENoYW5nZS5uZXdEb2MgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRSZW1vdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQ6IHRoaXMudG9OYW1lKHdhdGNoQ2hhbmdlLmtleSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWRUYXJnZXRJZHM6IHdhdGNoQ2hhbmdlLnJlbW92ZWRUYXJnZXRJZHNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh3YXRjaENoYW5nZSBpbnN0YW5jZW9mIFdhdGNoVGFyZ2V0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHZhciBjYXVzZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgaWYgKHdhdGNoQ2hhbmdlLmNhdXNlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXVzZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBtYXBScGNDb2RlRnJvbUNvZGUod2F0Y2hDaGFuZ2UuY2F1c2UuY29kZSksXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogd2F0Y2hDaGFuZ2UuY2F1c2UubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0Q2hhbmdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2hhbmdlVHlwZTogdGhpcy50b1dhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUod2F0Y2hDaGFuZ2Uuc3RhdGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldElkczogd2F0Y2hDaGFuZ2UudGFyZ2V0SWRzLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VtZVRva2VuOiB0aGlzLnVuc2FmZUNhc3RQcm90b0J5dGVTdHJpbmcod2F0Y2hDaGFuZ2UucmVzdW1lVG9rZW4pLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhdXNlOiBjYXVzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFpbCgnVW5yZWNvZ25pemVkIHdhdGNoIGNoYW5nZTogJyArIEpTT04uc3RyaW5naWZ5KHdhdGNoQ2hhbmdlKSk7XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbVdhdGNoQ2hhbmdlID0gZnVuY3Rpb24gKGNoYW5nZSkge1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcclxuICAgICAgICB2YXIgdHlwZSA9IGNoYW5nZVsncmVzcG9uc2VfdHlwZSddO1xyXG4gICAgICAgIHZhciB3YXRjaENoYW5nZTtcclxuICAgICAgICBpZiAoaGFzVGFnKGNoYW5nZSwgdHlwZSwgJ3RhcmdldENoYW5nZScpKSB7XHJcbiAgICAgICAgICAgIGFzc2VydFByZXNlbnQoY2hhbmdlLnRhcmdldENoYW5nZSwgJ3RhcmdldENoYW5nZScpO1xyXG4gICAgICAgICAgICAvLyBwcm90bzMgZGVmYXVsdCB2YWx1ZSBpcyB1bnNldCBpbiBKU09OICh1bmRlZmluZWQpLCBzbyB1c2UgJ05PX0NIQU5HRSdcclxuICAgICAgICAgICAgLy8gaWYgdW5zZXRcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5mcm9tV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZShjaGFuZ2UudGFyZ2V0Q2hhbmdlLnRhcmdldENoYW5nZVR5cGUgfHwgJ05PX0NIQU5HRScpO1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0SWRzID0gY2hhbmdlLnRhcmdldENoYW5nZS50YXJnZXRJZHMgfHwgW107XHJcbiAgICAgICAgICAgIHZhciByZXN1bWVUb2tlbiA9IGNoYW5nZS50YXJnZXRDaGFuZ2UucmVzdW1lVG9rZW4gfHwgdGhpcy5lbXB0eUJ5dGVTdHJpbmcoKTtcclxuICAgICAgICAgICAgdmFyIGNhdXNlUHJvdG8gPSBjaGFuZ2UudGFyZ2V0Q2hhbmdlLmNhdXNlO1xyXG4gICAgICAgICAgICB2YXIgY2F1c2UgPSBjYXVzZVByb3RvICYmIHRoaXMuZnJvbVJwY1N0YXR1cyhjYXVzZVByb3RvKTtcclxuICAgICAgICAgICAgd2F0Y2hDaGFuZ2UgPSBuZXcgV2F0Y2hUYXJnZXRDaGFuZ2Uoc3RhdGUsIHRhcmdldElkcywgcmVzdW1lVG9rZW4sIGNhdXNlIHx8IG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNUYWcoY2hhbmdlLCB0eXBlLCAnZG9jdW1lbnRDaGFuZ2UnKSkge1xyXG4gICAgICAgICAgICBhc3NlcnRQcmVzZW50KGNoYW5nZS5kb2N1bWVudENoYW5nZSwgJ2RvY3VtZW50Q2hhbmdlJyk7XHJcbiAgICAgICAgICAgIGFzc2VydFByZXNlbnQoY2hhbmdlLmRvY3VtZW50Q2hhbmdlLmRvY3VtZW50LCAnZG9jdW1lbnRDaGFuZ2UubmFtZScpO1xyXG4gICAgICAgICAgICBhc3NlcnRQcmVzZW50KGNoYW5nZS5kb2N1bWVudENoYW5nZS5kb2N1bWVudC5uYW1lLCAnZG9jdW1lbnRDaGFuZ2UuZG9jdW1lbnQubmFtZScpO1xyXG4gICAgICAgICAgICBhc3NlcnRQcmVzZW50KGNoYW5nZS5kb2N1bWVudENoYW5nZS5kb2N1bWVudC51cGRhdGVUaW1lLCAnZG9jdW1lbnRDaGFuZ2UuZG9jdW1lbnQudXBkYXRlVGltZScpO1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5Q2hhbmdlID0gY2hhbmdlLmRvY3VtZW50Q2hhbmdlO1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5mcm9tTmFtZShlbnRpdHlDaGFuZ2UuZG9jdW1lbnQubmFtZSk7XHJcbiAgICAgICAgICAgIHZhciB2ZXJzaW9uID0gdGhpcy5mcm9tVmVyc2lvbihlbnRpdHlDaGFuZ2UuZG9jdW1lbnQudXBkYXRlVGltZSk7XHJcbiAgICAgICAgICAgIHZhciBmaWVsZHMgPSB0aGlzLmZyb21GaWVsZHMoZW50aXR5Q2hhbmdlLmRvY3VtZW50LmZpZWxkcyB8fCB7fSk7XHJcbiAgICAgICAgICAgIHZhciBkb2MgPSBuZXcgRG9jdW1lbnQoa2V5LCB2ZXJzaW9uLCBmaWVsZHMsIHt9KTtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZWRUYXJnZXRJZHMgPSBlbnRpdHlDaGFuZ2UudGFyZ2V0SWRzIHx8IFtdO1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZFRhcmdldElkcyA9IGVudGl0eUNoYW5nZS5yZW1vdmVkVGFyZ2V0SWRzIHx8IFtdO1xyXG4gICAgICAgICAgICB3YXRjaENoYW5nZSA9IG5ldyBEb2N1bWVudFdhdGNoQ2hhbmdlKHVwZGF0ZWRUYXJnZXRJZHMsIHJlbW92ZWRUYXJnZXRJZHMsIGRvYy5rZXksIGRvYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGhhc1RhZyhjaGFuZ2UsIHR5cGUsICdkb2N1bWVudERlbGV0ZScpKSB7XHJcbiAgICAgICAgICAgIGFzc2VydFByZXNlbnQoY2hhbmdlLmRvY3VtZW50RGVsZXRlLCAnZG9jdW1lbnREZWxldGUnKTtcclxuICAgICAgICAgICAgYXNzZXJ0UHJlc2VudChjaGFuZ2UuZG9jdW1lbnREZWxldGUuZG9jdW1lbnQsICdkb2N1bWVudERlbGV0ZS5kb2N1bWVudCcpO1xyXG4gICAgICAgICAgICB2YXIgZG9jRGVsZXRlID0gY2hhbmdlLmRvY3VtZW50RGVsZXRlO1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5mcm9tTmFtZShkb2NEZWxldGUuZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICB2YXIgdmVyc2lvbiA9IGRvY0RlbGV0ZS5yZWFkVGltZVxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLmZyb21WZXJzaW9uKGRvY0RlbGV0ZS5yZWFkVGltZSlcclxuICAgICAgICAgICAgICAgIDogU25hcHNob3RWZXJzaW9uLmZvckRlbGV0ZWREb2MoKTtcclxuICAgICAgICAgICAgdmFyIGRvYyA9IG5ldyBOb0RvY3VtZW50KGtleSwgdmVyc2lvbik7XHJcbiAgICAgICAgICAgIHZhciByZW1vdmVkVGFyZ2V0SWRzID0gZG9jRGVsZXRlLnJlbW92ZWRUYXJnZXRJZHMgfHwgW107XHJcbiAgICAgICAgICAgIHdhdGNoQ2hhbmdlID0gbmV3IERvY3VtZW50V2F0Y2hDaGFuZ2UoW10sIHJlbW92ZWRUYXJnZXRJZHMsIGRvYy5rZXksIGRvYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGhhc1RhZyhjaGFuZ2UsIHR5cGUsICdkb2N1bWVudFJlbW92ZScpKSB7XHJcbiAgICAgICAgICAgIGFzc2VydFByZXNlbnQoY2hhbmdlLmRvY3VtZW50UmVtb3ZlLCAnZG9jdW1lbnRSZW1vdmUnKTtcclxuICAgICAgICAgICAgYXNzZXJ0UHJlc2VudChjaGFuZ2UuZG9jdW1lbnRSZW1vdmUuZG9jdW1lbnQsICdkb2N1bWVudFJlbW92ZScpO1xyXG4gICAgICAgICAgICB2YXIgZG9jUmVtb3ZlID0gY2hhbmdlLmRvY3VtZW50UmVtb3ZlO1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5mcm9tTmFtZShkb2NSZW1vdmUuZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZFRhcmdldElkcyA9IGRvY1JlbW92ZS5yZW1vdmVkVGFyZ2V0SWRzIHx8IFtdO1xyXG4gICAgICAgICAgICB3YXRjaENoYW5nZSA9IG5ldyBEb2N1bWVudFdhdGNoQ2hhbmdlKFtdLCByZW1vdmVkVGFyZ2V0SWRzLCBrZXksIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNUYWcoY2hhbmdlLCB0eXBlLCAnZmlsdGVyJykpIHtcclxuICAgICAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiBpbXBsZW1lbnQgZXhpc3RlbmNlIGZpbHRlciBwYXJzaW5nIHdpdGggc3RyYXRlZ3kuXHJcbiAgICAgICAgICAgIGFzc2VydFByZXNlbnQoY2hhbmdlLmZpbHRlciwgJ2ZpbHRlcicpO1xyXG4gICAgICAgICAgICBhc3NlcnRQcmVzZW50KGNoYW5nZS5maWx0ZXIudGFyZ2V0SWQsICdmaWx0ZXIudGFyZ2V0SWQnKTtcclxuICAgICAgICAgICAgdmFyIGZpbHRlciA9IGNoYW5nZS5maWx0ZXI7XHJcbiAgICAgICAgICAgIHZhciBjb3VudCA9IGZpbHRlci5jb3VudCB8fCAwO1xyXG4gICAgICAgICAgICB2YXIgZXhpc3RlbmNlRmlsdGVyID0gbmV3IEV4aXN0ZW5jZUZpbHRlcihjb3VudCk7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXRJZCA9IGZpbHRlci50YXJnZXRJZDtcclxuICAgICAgICAgICAgd2F0Y2hDaGFuZ2UgPSBuZXcgRXhpc3RlbmNlRmlsdGVyQ2hhbmdlKHRhcmdldElkLCBleGlzdGVuY2VGaWx0ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ1Vua25vd24gY2hhbmdlIHR5cGUgJyArIEpTT04uc3RyaW5naWZ5KGNoYW5nZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd2F0Y2hDaGFuZ2U7XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbVdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICBpZiAoc3RhdGUgPT09ICdOT19DSEFOR0UnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLk5vQ2hhbmdlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gJ0FERCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFdhdGNoVGFyZ2V0Q2hhbmdlU3RhdGUuQWRkZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAnUkVNT1ZFJykge1xyXG4gICAgICAgICAgICByZXR1cm4gV2F0Y2hUYXJnZXRDaGFuZ2VTdGF0ZS5SZW1vdmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gJ0NVUlJFTlQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLkN1cnJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAnUkVTRVQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBXYXRjaFRhcmdldENoYW5nZVN0YXRlLlJlc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ0dvdCB1bmV4cGVjdGVkIFRhcmdldENoYW5nZS5zdGF0ZTogJyArIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudmVyc2lvbkZyb21MaXN0ZW5SZXNwb25zZSA9IGZ1bmN0aW9uIChjaGFuZ2UpIHtcclxuICAgICAgICAvLyBXZSBoYXZlIG9ubHkgcmVhY2hlZCBhIGNvbnNpc3RlbnQgc25hcHNob3QgZm9yIHRoZSBlbnRpcmUgc3RyZWFtIGlmIHRoZXJlXHJcbiAgICAgICAgLy8gaXMgYSByZWFkX3RpbWUgc2V0IGFuZCBpdCBhcHBsaWVzIHRvIGFsbCB0YXJnZXRzIChpLmUuIHRoZSBsaXN0IG9mXHJcbiAgICAgICAgLy8gdGFyZ2V0cyBpcyBlbXB0eSkuIFRoZSBiYWNrZW5kIGlzIGd1YXJhbnRlZWQgdG8gc2VuZCBzdWNoIHJlc3BvbnNlcy5cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICAgICAgdmFyIHR5cGUgPSBjaGFuZ2VbJ3Jlc3BvbnNlX3R5cGUnXTtcclxuICAgICAgICBpZiAoIWhhc1RhZyhjaGFuZ2UsIHR5cGUsICd0YXJnZXRDaGFuZ2UnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gU25hcHNob3RWZXJzaW9uLk1JTjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHRhcmdldENoYW5nZSA9IGNoYW5nZS50YXJnZXRDaGFuZ2U7XHJcbiAgICAgICAgaWYgKHRhcmdldENoYW5nZS50YXJnZXRJZHMgJiYgdGFyZ2V0Q2hhbmdlLnRhcmdldElkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNuYXBzaG90VmVyc2lvbi5NSU47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGFyZ2V0Q2hhbmdlLnJlYWRUaW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTbmFwc2hvdFZlcnNpb24uTUlOO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVmVyc2lvbih0YXJnZXRDaGFuZ2UucmVhZFRpbWUpO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvTXV0YXRpb24gPSBmdW5jdGlvbiAobXV0YXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgaWYgKG11dGF0aW9uIGluc3RhbmNlb2YgU2V0TXV0YXRpb24pIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB0aGlzLnRvTXV0YXRpb25Eb2N1bWVudChtdXRhdGlvbi5rZXksIG11dGF0aW9uLnZhbHVlKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChtdXRhdGlvbiBpbnN0YW5jZW9mIERlbGV0ZU11dGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHsgZGVsZXRlOiB0aGlzLnRvTmFtZShtdXRhdGlvbi5rZXkpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG11dGF0aW9uIGluc3RhbmNlb2YgUGF0Y2hNdXRhdGlvbikge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHRoaXMudG9NdXRhdGlvbkRvY3VtZW50KG11dGF0aW9uLmtleSwgbXV0YXRpb24uZGF0YSksXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVNYXNrOiB0aGlzLnRvRG9jdW1lbnRNYXNrKG11dGF0aW9uLmZpZWxkTWFzaylcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobXV0YXRpb24gaW5zdGFuY2VvZiBUcmFuc2Zvcm1NdXRhdGlvbikge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHtcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDogdGhpcy50b05hbWUobXV0YXRpb24ua2V5KSxcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZFRyYW5zZm9ybXM6IG11dGF0aW9uLmZpZWxkVHJhbnNmb3Jtcy5tYXAoZnVuY3Rpb24gKHRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudG9GaWVsZFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbCgnVW5rbm93biBtdXRhdGlvbiB0eXBlICcgKyBtdXRhdGlvbi50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFtdXRhdGlvbi5wcmVjb25kaXRpb24uaXNOb25lKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50RG9jdW1lbnQgPSB0aGlzLnRvUHJlY29uZGl0aW9uKG11dGF0aW9uLnByZWNvbmRpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbU11dGF0aW9uID0gZnVuY3Rpb24gKHByb3RvKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJlY29uZGl0aW9uID0gcHJvdG8uY3VycmVudERvY3VtZW50XHJcbiAgICAgICAgICAgID8gdGhpcy5mcm9tUHJlY29uZGl0aW9uKHByb3RvLmN1cnJlbnREb2N1bWVudClcclxuICAgICAgICAgICAgOiBQcmVjb25kaXRpb24uTk9ORTtcclxuICAgICAgICBpZiAocHJvdG8udXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGFzc2VydFByZXNlbnQocHJvdG8udXBkYXRlLm5hbWUsICduYW1lJyk7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLmZyb21OYW1lKHByb3RvLnVwZGF0ZS5uYW1lKTtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5mcm9tRmllbGRzKHByb3RvLnVwZGF0ZS5maWVsZHMgfHwge30pO1xyXG4gICAgICAgICAgICBpZiAocHJvdG8udXBkYXRlTWFzaykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkTWFzayA9IHRoaXMuZnJvbURvY3VtZW50TWFzayhwcm90by51cGRhdGVNYXNrKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGF0Y2hNdXRhdGlvbihrZXksIHZhbHVlLCBmaWVsZE1hc2ssIHByZWNvbmRpdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNldE11dGF0aW9uKGtleSwgdmFsdWUsIHByZWNvbmRpdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocHJvdG8uZGVsZXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLmZyb21OYW1lKHByb3RvLmRlbGV0ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGVsZXRlTXV0YXRpb24oa2V5LCBwcmVjb25kaXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwcm90by50cmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuZnJvbU5hbWUocHJvdG8udHJhbnNmb3JtLmRvY3VtZW50KTtcclxuICAgICAgICAgICAgdmFyIGZpZWxkVHJhbnNmb3JtcyA9IHByb3RvLnRyYW5zZm9ybS5maWVsZFRyYW5zZm9ybXMubWFwKGZ1bmN0aW9uICh0cmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mcm9tRmllbGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGFzc2VydChwcmVjb25kaXRpb24uZXhpc3RzID09PSB0cnVlLCAnVHJhbnNmb3JtcyBvbmx5IHN1cHBvcnQgcHJlY29uZGl0aW9uIFwiZXhpc3RzID09IHRydWVcIicpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybU11dGF0aW9uKGtleSwgZmllbGRUcmFuc2Zvcm1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsKCd1bmtub3duIG11dGF0aW9uIHByb3RvOiAnICsgSlNPTi5zdHJpbmdpZnkocHJvdG8pKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9QcmVjb25kaXRpb24gPSBmdW5jdGlvbiAocHJlY29uZGl0aW9uKSB7XHJcbiAgICAgICAgYXNzZXJ0KCFwcmVjb25kaXRpb24uaXNOb25lLCBcIkNhbid0IHNlcmlhbGl6ZSBhbiBlbXB0eSBwcmVjb25kaXRpb25cIik7XHJcbiAgICAgICAgaWYgKHByZWNvbmRpdGlvbi51cGRhdGVUaW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWU6IHRoaXMudG9WZXJzaW9uKHByZWNvbmRpdGlvbi51cGRhdGVUaW1lKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwcmVjb25kaXRpb24uZXhpc3RzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgZXhpc3RzOiBwcmVjb25kaXRpb24uZXhpc3RzIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbCgnVW5rbm93biBwcmVjb25kaXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbVByZWNvbmRpdGlvbiA9IGZ1bmN0aW9uIChwcmVjb25kaXRpb24pIHtcclxuICAgICAgICBpZiAocHJlY29uZGl0aW9uLnVwZGF0ZVRpbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJlY29uZGl0aW9uLnVwZGF0ZVRpbWUodGhpcy5mcm9tVmVyc2lvbihwcmVjb25kaXRpb24udXBkYXRlVGltZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwcmVjb25kaXRpb24uZXhpc3RzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByZWNvbmRpdGlvbi5leGlzdHMocHJlY29uZGl0aW9uLmV4aXN0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJlY29uZGl0aW9uLk5PTkU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21Xcml0ZVJlc3VsdCA9IGZ1bmN0aW9uIChwcm90bywgY29tbWl0VGltZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gTk9URTogRGVsZXRlcyBkb24ndCBoYXZlIGFuIHVwZGF0ZVRpbWUuXHJcbiAgICAgICAgdmFyIHZlcnNpb24gPSBwcm90by51cGRhdGVUaW1lXHJcbiAgICAgICAgICAgID8gdGhpcy5mcm9tVmVyc2lvbihwcm90by51cGRhdGVUaW1lKVxyXG4gICAgICAgICAgICA6IHRoaXMuZnJvbVZlcnNpb24oY29tbWl0VGltZSk7XHJcbiAgICAgICAgdmFyIHRyYW5zZm9ybVJlc3VsdHMgPSBudWxsO1xyXG4gICAgICAgIGlmIChwcm90by50cmFuc2Zvcm1SZXN1bHRzICYmIHByb3RvLnRyYW5zZm9ybVJlc3VsdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm1SZXN1bHRzID0gcHJvdG8udHJhbnNmb3JtUmVzdWx0cy5tYXAoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZyb21WYWx1ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNdXRhdGlvblJlc3VsdCh2ZXJzaW9uLCB0cmFuc2Zvcm1SZXN1bHRzKTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tV3JpdGVSZXN1bHRzID0gZnVuY3Rpb24gKHByb3RvcywgY29tbWl0VGltZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHByb3RvcyAmJiBwcm90b3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBhc3NlcnQoY29tbWl0VGltZSAhPT0gdW5kZWZpbmVkLCAnUmVjZWl2ZWQgYSB3cml0ZSByZXN1bHQgd2l0aG91dCBhIGNvbW1pdCB0aW1lJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm90b3MubWFwKGZ1bmN0aW9uIChwcm90bykgeyByZXR1cm4gX3RoaXMuZnJvbVdyaXRlUmVzdWx0KHByb3RvLCBjb21taXRUaW1lKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvRmllbGRUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoZmllbGRUcmFuc2Zvcm0pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBmaWVsZFRyYW5zZm9ybS50cmFuc2Zvcm07XHJcbiAgICAgICAgaWYgKHRyYW5zZm9ybSBpbnN0YW5jZW9mIFNlcnZlclRpbWVzdGFtcFRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZmllbGRQYXRoOiBmaWVsZFRyYW5zZm9ybS5maWVsZC5jYW5vbmljYWxTdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgIHNldFRvU2VydmVyVmFsdWU6ICdSRVFVRVNUX1RJTUUnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRyYW5zZm9ybSBpbnN0YW5jZW9mIEFycmF5VW5pb25UcmFuc2Zvcm1PcGVyYXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogZmllbGRUcmFuc2Zvcm0uZmllbGQuY2Fub25pY2FsU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICBhcHBlbmRNaXNzaW5nRWxlbWVudHM6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHRyYW5zZm9ybS5lbGVtZW50cy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIF90aGlzLnRvVmFsdWUodik7IH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRyYW5zZm9ybSBpbnN0YW5jZW9mIEFycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IGZpZWxkVHJhbnNmb3JtLmZpZWxkLmNhbm9uaWNhbFN0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQWxsRnJvbUFycmF5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB0cmFuc2Zvcm0uZWxlbWVudHMubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBfdGhpcy50b1ZhbHVlKHYpOyB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgZmFpbCgnVW5rbm93biB0cmFuc2Zvcm06ICcgKyBmaWVsZFRyYW5zZm9ybS50cmFuc2Zvcm0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tRmllbGRUcmFuc2Zvcm0gPSBmdW5jdGlvbiAocHJvdG8pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgV2UgbmVlZCB0byBtYXRjaCBnZW5lcmF0ZWQgUHJvdG8gdHlwZXMuXHJcbiAgICAgICAgdmFyIHR5cGUgPSBwcm90b1sndHJhbnNmb3JtX3R5cGUnXTtcclxuICAgICAgICB2YXIgdHJhbnNmb3JtID0gbnVsbDtcclxuICAgICAgICBpZiAoaGFzVGFnKHByb3RvLCB0eXBlLCAnc2V0VG9TZXJ2ZXJWYWx1ZScpKSB7XHJcbiAgICAgICAgICAgIGFzc2VydChwcm90by5zZXRUb1NlcnZlclZhbHVlID09PSAnUkVRVUVTVF9USU1FJywgJ1Vua25vd24gc2VydmVyIHZhbHVlIHRyYW5zZm9ybSBwcm90bzogJyArIEpTT04uc3RyaW5naWZ5KHByb3RvKSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IFNlcnZlclRpbWVzdGFtcFRyYW5zZm9ybS5pbnN0YW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaGFzVGFnKHByb3RvLCB0eXBlLCAnYXBwZW5kTWlzc2luZ0VsZW1lbnRzJykpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHByb3RvLmFwcGVuZE1pc3NpbmdFbGVtZW50cy52YWx1ZXMgfHwgW107XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IG5ldyBBcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uKHZhbHVlcy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIF90aGlzLmZyb21WYWx1ZSh2KTsgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNUYWcocHJvdG8sIHR5cGUsICdyZW1vdmVBbGxGcm9tQXJyYXknKSkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gcHJvdG8ucmVtb3ZlQWxsRnJvbUFycmF5LnZhbHVlcyB8fCBbXTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtID0gbmV3IEFycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uKHZhbHVlcy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIF90aGlzLmZyb21WYWx1ZSh2KTsgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZmFpbCgnVW5rbm93biB0cmFuc2Zvcm0gcHJvdG86ICcgKyBKU09OLnN0cmluZ2lmeShwcm90bykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZmllbGRQYXRoID0gRmllbGRQYXRoLmZyb21TZXJ2ZXJGb3JtYXQocHJvdG8uZmllbGRQYXRoKTtcclxuICAgICAgICByZXR1cm4gbmV3IEZpZWxkVHJhbnNmb3JtKGZpZWxkUGF0aCwgdHJhbnNmb3JtKTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b0RvY3VtZW50c1RhcmdldCA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHJldHVybiB7IGRvY3VtZW50czogW3RoaXMudG9RdWVyeVBhdGgocXVlcnkucGF0aCldIH07XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbURvY3VtZW50c1RhcmdldCA9IGZ1bmN0aW9uIChkb2N1bWVudHNUYXJnZXQpIHtcclxuICAgICAgICB2YXIgY291bnQgPSBkb2N1bWVudHNUYXJnZXQuZG9jdW1lbnRzLmxlbmd0aDtcclxuICAgICAgICBhc3NlcnQoY291bnQgPT09IDEsICdEb2N1bWVudHNUYXJnZXQgY29udGFpbmVkIG90aGVyIHRoYW4gMSBkb2N1bWVudDogJyArIGNvdW50KTtcclxuICAgICAgICB2YXIgbmFtZSA9IGRvY3VtZW50c1RhcmdldC5kb2N1bWVudHNbMF07XHJcbiAgICAgICAgcmV0dXJuIFF1ZXJ5LmF0UGF0aCh0aGlzLmZyb21RdWVyeVBhdGgobmFtZSkpO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvUXVlcnlUYXJnZXQgPSBmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICAvLyBEaXNzZWN0IHRoZSBwYXRoIGludG8gcGFyZW50LCBjb2xsZWN0aW9uSWQsIGFuZCBvcHRpb25hbCBrZXkgZmlsdGVyLlxyXG4gICAgICAgIHZhciByZXN1bHQgPSB7IHN0cnVjdHVyZWRRdWVyeToge30gfTtcclxuICAgICAgICBpZiAocXVlcnkucGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnBhcmVudCA9IHRoaXMudG9RdWVyeVBhdGgoUmVzb3VyY2VQYXRoLkVNUFRZX1BBVEgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHBhdGggPSBxdWVyeS5wYXRoO1xyXG4gICAgICAgICAgICBhc3NlcnQocGF0aC5sZW5ndGggJSAyICE9PSAwLCAnRG9jdW1lbnQgcXVlcmllcyB3aXRoIGZpbHRlcnMgYXJlIG5vdCBzdXBwb3J0ZWQuJyk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wYXJlbnQgPSB0aGlzLnRvUXVlcnlQYXRoKHBhdGgucG9wTGFzdCgpKTtcclxuICAgICAgICAgICAgcmVzdWx0LnN0cnVjdHVyZWRRdWVyeS5mcm9tID0gW3sgY29sbGVjdGlvbklkOiBwYXRoLmxhc3RTZWdtZW50KCkgfV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB3aGVyZSA9IHRoaXMudG9GaWx0ZXIocXVlcnkuZmlsdGVycyk7XHJcbiAgICAgICAgaWYgKHdoZXJlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zdHJ1Y3R1cmVkUXVlcnkud2hlcmUgPSB3aGVyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9yZGVyQnkgPSB0aGlzLnRvT3JkZXIocXVlcnkub3JkZXJCeSk7XHJcbiAgICAgICAgaWYgKG9yZGVyQnkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnN0cnVjdHVyZWRRdWVyeS5vcmRlckJ5ID0gb3JkZXJCeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGxpbWl0ID0gdGhpcy50b0ludDMyVmFsdWUocXVlcnkubGltaXQpO1xyXG4gICAgICAgIGlmIChsaW1pdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zdHJ1Y3R1cmVkUXVlcnkubGltaXQgPSBsaW1pdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHF1ZXJ5LnN0YXJ0QXQpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnN0cnVjdHVyZWRRdWVyeS5zdGFydEF0ID0gdGhpcy50b0N1cnNvcihxdWVyeS5zdGFydEF0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHF1ZXJ5LmVuZEF0KSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zdHJ1Y3R1cmVkUXVlcnkuZW5kQXQgPSB0aGlzLnRvQ3Vyc29yKHF1ZXJ5LmVuZEF0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tUXVlcnlUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLmZyb21RdWVyeVBhdGgodGFyZ2V0LnBhcmVudCk7XHJcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdGFyZ2V0LnN0cnVjdHVyZWRRdWVyeTtcclxuICAgICAgICB2YXIgZnJvbUNvdW50ID0gcXVlcnkuZnJvbSA/IHF1ZXJ5LmZyb20ubGVuZ3RoIDogMDtcclxuICAgICAgICBpZiAoZnJvbUNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICBhc3NlcnQoZnJvbUNvdW50ID09PSAxLCAnU3RydWN0dXJlZFF1ZXJ5LmZyb20gd2l0aCBtb3JlIHRoYW4gb25lIGNvbGxlY3Rpb24gaXMgbm90IHN1cHBvcnRlZC4nKTtcclxuICAgICAgICAgICAgdmFyIGZyb20gPSBxdWVyeS5mcm9tWzBdO1xyXG4gICAgICAgICAgICBwYXRoID0gcGF0aC5jaGlsZChmcm9tLmNvbGxlY3Rpb25JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBmaWx0ZXJCeSA9IFtdO1xyXG4gICAgICAgIGlmIChxdWVyeS53aGVyZSkge1xyXG4gICAgICAgICAgICBmaWx0ZXJCeSA9IHRoaXMuZnJvbUZpbHRlcihxdWVyeS53aGVyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvcmRlckJ5ID0gW107XHJcbiAgICAgICAgaWYgKHF1ZXJ5Lm9yZGVyQnkpIHtcclxuICAgICAgICAgICAgb3JkZXJCeSA9IHRoaXMuZnJvbU9yZGVyKHF1ZXJ5Lm9yZGVyQnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbGltaXQgPSBudWxsO1xyXG4gICAgICAgIGlmIChxdWVyeS5saW1pdCkge1xyXG4gICAgICAgICAgICBsaW1pdCA9IHRoaXMuZnJvbUludDMyVmFsdWUocXVlcnkubGltaXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RhcnRBdCA9IG51bGw7XHJcbiAgICAgICAgaWYgKHF1ZXJ5LnN0YXJ0QXQpIHtcclxuICAgICAgICAgICAgc3RhcnRBdCA9IHRoaXMuZnJvbUN1cnNvcihxdWVyeS5zdGFydEF0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGVuZEF0ID0gbnVsbDtcclxuICAgICAgICBpZiAocXVlcnkuZW5kQXQpIHtcclxuICAgICAgICAgICAgZW5kQXQgPSB0aGlzLmZyb21DdXJzb3IocXVlcnkuZW5kQXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5KHBhdGgsIG9yZGVyQnksIGZpbHRlckJ5LCBsaW1pdCwgc3RhcnRBdCwgZW5kQXQpO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvTGlzdGVuUmVxdWVzdExhYmVscyA9IGZ1bmN0aW9uIChxdWVyeURhdGEpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnRvTGFiZWwocXVlcnlEYXRhLnB1cnBvc2UpO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICdnb29nLWxpc3Rlbi10YWdzJzogdmFsdWVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9MYWJlbCA9IGZ1bmN0aW9uIChwdXJwb3NlKSB7XHJcbiAgICAgICAgc3dpdGNoIChwdXJwb3NlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgUXVlcnlQdXJwb3NlLkxpc3RlbjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBjYXNlIFF1ZXJ5UHVycG9zZS5FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnZXhpc3RlbmNlLWZpbHRlci1taXNtYXRjaCc7XHJcbiAgICAgICAgICAgIGNhc2UgUXVlcnlQdXJwb3NlLkxpbWJvUmVzb2x1dGlvbjpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnbGltYm8tZG9jdW1lbnQnO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ1VucmVjb2duaXplZCBxdWVyeSBwdXJwb3NlOiAnICsgcHVycG9zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvVGFyZ2V0ID0gZnVuY3Rpb24gKHF1ZXJ5RGF0YSkge1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgdmFyIHF1ZXJ5ID0gcXVlcnlEYXRhLnF1ZXJ5O1xyXG4gICAgICAgIGlmIChxdWVyeS5pc0RvY3VtZW50UXVlcnkoKSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB7IGRvY3VtZW50czogdGhpcy50b0RvY3VtZW50c1RhcmdldChxdWVyeSkgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHsgcXVlcnk6IHRoaXMudG9RdWVyeVRhcmdldChxdWVyeSkgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0LnRhcmdldElkID0gcXVlcnlEYXRhLnRhcmdldElkO1xyXG4gICAgICAgIGlmIChxdWVyeURhdGEucmVzdW1lVG9rZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXN1bHQucmVzdW1lVG9rZW4gPSB0aGlzLnVuc2FmZUNhc3RQcm90b0J5dGVTdHJpbmcocXVlcnlEYXRhLnJlc3VtZVRva2VuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b0ZpbHRlciA9IGZ1bmN0aW9uIChmaWx0ZXJzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoZmlsdGVycy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgcHJvdG9zID0gZmlsdGVycy5tYXAoZnVuY3Rpb24gKGZpbHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyIGluc3RhbmNlb2YgUmVsYXRpb25GaWx0ZXJcclxuICAgICAgICAgICAgICAgID8gX3RoaXMudG9SZWxhdGlvbkZpbHRlcihmaWx0ZXIpXHJcbiAgICAgICAgICAgICAgICA6IF90aGlzLnRvVW5hcnlGaWx0ZXIoZmlsdGVyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAocHJvdG9zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvdG9zWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBjb21wb3NpdGVGaWx0ZXI6IHsgb3A6ICdBTkQnLCBmaWx0ZXJzOiBwcm90b3MgfSB9O1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21GaWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIWZpbHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGZpbHRlci51bmFyeUZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbdGhpcy5mcm9tVW5hcnlGaWx0ZXIoZmlsdGVyKV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGZpbHRlci5maWVsZEZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbdGhpcy5mcm9tUmVsYXRpb25GaWx0ZXIoZmlsdGVyKV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGZpbHRlci5jb21wb3NpdGVGaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyLmNvbXBvc2l0ZUZpbHRlclxyXG4gICAgICAgICAgICAgICAgLmZpbHRlcnMubWFwKGZ1bmN0aW9uIChmKSB7IHJldHVybiBfdGhpcy5mcm9tRmlsdGVyKGYpOyB9KVxyXG4gICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYWNjdW0sIGN1cnJlbnQpIHsgcmV0dXJuIGFjY3VtLmNvbmNhdChjdXJyZW50KTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbCgnVW5rbm93biBmaWx0ZXI6ICcgKyBKU09OLnN0cmluZ2lmeShmaWx0ZXIpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9PcmRlciA9IGZ1bmN0aW9uIChvcmRlckJ5cykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKG9yZGVyQnlzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHJldHVybiBvcmRlckJ5cy5tYXAoZnVuY3Rpb24gKG9yZGVyKSB7IHJldHVybiBfdGhpcy50b1Byb3BlcnR5T3JkZXIob3JkZXIpOyB9KTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tT3JkZXIgPSBmdW5jdGlvbiAob3JkZXJCeXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBvcmRlckJ5cy5tYXAoZnVuY3Rpb24gKG9yZGVyKSB7IHJldHVybiBfdGhpcy5mcm9tUHJvcGVydHlPcmRlcihvcmRlcik7IH0pO1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvQ3Vyc29yID0gZnVuY3Rpb24gKGN1cnNvcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVmb3JlOiBjdXJzb3IuYmVmb3JlLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IGN1cnNvci5wb3NpdGlvbi5tYXAoZnVuY3Rpb24gKGNvbXBvbmVudCkgeyByZXR1cm4gX3RoaXMudG9WYWx1ZShjb21wb25lbnQpOyB9KVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbUN1cnNvciA9IGZ1bmN0aW9uIChjdXJzb3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBiZWZvcmUgPSAhIWN1cnNvci5iZWZvcmU7XHJcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gY3Vyc29yLnZhbHVlcy5tYXAoZnVuY3Rpb24gKGNvbXBvbmVudCkgeyByZXR1cm4gX3RoaXMuZnJvbVZhbHVlKGNvbXBvbmVudCk7IH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgQm91bmQocG9zaXRpb24sIGJlZm9yZSk7XHJcbiAgICB9O1xyXG4gICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9EaXJlY3Rpb24gPSBmdW5jdGlvbiAoZGlyKSB7XHJcbiAgICAgICAgcmV0dXJuIERJUkVDVElPTlNbZGlyLm5hbWVdO1xyXG4gICAgfTtcclxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21EaXJlY3Rpb24gPSBmdW5jdGlvbiAoZGlyKSB7XHJcbiAgICAgICAgc3dpdGNoIChkaXIpIHtcclxuICAgICAgICAgICAgY2FzZSAnQVNDRU5ESU5HJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBEaXJlY3Rpb24uQVNDRU5ESU5HO1xyXG4gICAgICAgICAgICBjYXNlICdERVNDRU5ESU5HJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBEaXJlY3Rpb24uREVTQ0VORElORztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLnRvT3BlcmF0b3JOYW1lID0gZnVuY3Rpb24gKG9wKSB7XHJcbiAgICAgICAgcmV0dXJuIE9QRVJBVE9SU1tvcC5uYW1lXTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tT3BlcmF0b3JOYW1lID0gZnVuY3Rpb24gKG9wKSB7XHJcbiAgICAgICAgc3dpdGNoIChvcCkge1xyXG4gICAgICAgICAgICBjYXNlICdFUVVBTCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsYXRpb25PcC5FUVVBTDtcclxuICAgICAgICAgICAgY2FzZSAnR1JFQVRFUl9USEFOJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZWxhdGlvbk9wLkdSRUFURVJfVEhBTjtcclxuICAgICAgICAgICAgY2FzZSAnR1JFQVRFUl9USEFOX09SX0VRVUFMJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZWxhdGlvbk9wLkdSRUFURVJfVEhBTl9PUl9FUVVBTDtcclxuICAgICAgICAgICAgY2FzZSAnTEVTU19USEFOJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZWxhdGlvbk9wLkxFU1NfVEhBTjtcclxuICAgICAgICAgICAgY2FzZSAnTEVTU19USEFOX09SX0VRVUFMJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZWxhdGlvbk9wLkxFU1NfVEhBTl9PUl9FUVVBTDtcclxuICAgICAgICAgICAgY2FzZSAnQVJSQVlfQ09OVEFJTlMnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbGF0aW9uT3AuQVJSQVlfQ09OVEFJTlM7XHJcbiAgICAgICAgICAgIGNhc2UgJ09QRVJBVE9SX1VOU1BFQ0lGSUVEJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKCdVbnNwZWNpZmllZCByZWxhdGlvbicpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ1Vua25vd24gcmVsYXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9GaWVsZFBhdGhSZWZlcmVuY2UgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHJldHVybiB7IGZpZWxkUGF0aDogcGF0aC5jYW5vbmljYWxTdHJpbmcoKSB9O1xyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21GaWVsZFBhdGhSZWZlcmVuY2UgPSBmdW5jdGlvbiAoZmllbGRSZWZlcmVuY2UpIHtcclxuICAgICAgICByZXR1cm4gRmllbGRQYXRoLmZyb21TZXJ2ZXJGb3JtYXQoZmllbGRSZWZlcmVuY2UuZmllbGRQYXRoKTtcclxuICAgIH07XHJcbiAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b1Byb3BlcnR5T3JkZXIgPSBmdW5jdGlvbiAob3JkZXJCeSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZpZWxkOiB0aGlzLnRvRmllbGRQYXRoUmVmZXJlbmNlKG9yZGVyQnkuZmllbGQpLFxyXG4gICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMudG9EaXJlY3Rpb24ob3JkZXJCeS5kaXIpXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tUHJvcGVydHlPcmRlciA9IGZ1bmN0aW9uIChvcmRlckJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPcmRlckJ5KHRoaXMuZnJvbUZpZWxkUGF0aFJlZmVyZW5jZShvcmRlckJ5LmZpZWxkKSwgdGhpcy5mcm9tRGlyZWN0aW9uKG9yZGVyQnkuZGlyZWN0aW9uKSk7XHJcbiAgICB9O1xyXG4gICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUudG9SZWxhdGlvbkZpbHRlciA9IGZ1bmN0aW9uIChmaWx0ZXIpIHtcclxuICAgICAgICBpZiAoZmlsdGVyIGluc3RhbmNlb2YgUmVsYXRpb25GaWx0ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkRmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IHRoaXMudG9GaWVsZFBhdGhSZWZlcmVuY2UoZmlsdGVyLmZpZWxkKSxcclxuICAgICAgICAgICAgICAgICAgICBvcDogdGhpcy50b09wZXJhdG9yTmFtZShmaWx0ZXIub3ApLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRvVmFsdWUoZmlsdGVyLnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ1VucmVjb2duaXplZCBmaWx0ZXI6ICcgKyBKU09OLnN0cmluZ2lmeShmaWx0ZXIpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbVJlbGF0aW9uRmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVsYXRpb25GaWx0ZXIodGhpcy5mcm9tRmllbGRQYXRoUmVmZXJlbmNlKGZpbHRlci5maWVsZEZpbHRlci5maWVsZCksIHRoaXMuZnJvbU9wZXJhdG9yTmFtZShmaWx0ZXIuZmllbGRGaWx0ZXIub3ApLCB0aGlzLmZyb21WYWx1ZShmaWx0ZXIuZmllbGRGaWx0ZXIudmFsdWUpKTtcclxuICAgIH07XHJcbiAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b1VuYXJ5RmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlcikge1xyXG4gICAgICAgIGlmIChmaWx0ZXIgaW5zdGFuY2VvZiBOYW5GaWx0ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHVuYXJ5RmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IHRoaXMudG9GaWVsZFBhdGhSZWZlcmVuY2UoZmlsdGVyLmZpZWxkKSxcclxuICAgICAgICAgICAgICAgICAgICBvcDogJ0lTX05BTidcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZmlsdGVyIGluc3RhbmNlb2YgTnVsbEZpbHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdW5hcnlGaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZDogdGhpcy50b0ZpZWxkUGF0aFJlZmVyZW5jZShmaWx0ZXIuZmllbGQpLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wOiAnSVNfTlVMTCdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsKCdVbnJlY29nbml6ZWQgZmlsdGVyOiAnICsgSlNPTi5zdHJpbmdpZnkoZmlsdGVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEpzb25Qcm90b1NlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21VbmFyeUZpbHRlciA9IGZ1bmN0aW9uIChmaWx0ZXIpIHtcclxuICAgICAgICBzd2l0Y2ggKGZpbHRlci51bmFyeUZpbHRlci5vcCkge1xyXG4gICAgICAgICAgICBjYXNlICdJU19OQU4nOlxyXG4gICAgICAgICAgICAgICAgdmFyIG5hbkZpZWxkID0gdGhpcy5mcm9tRmllbGRQYXRoUmVmZXJlbmNlKGZpbHRlci51bmFyeUZpbHRlci5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE5hbkZpbHRlcihuYW5GaWVsZCk7XHJcbiAgICAgICAgICAgIGNhc2UgJ0lTX05VTEwnOlxyXG4gICAgICAgICAgICAgICAgdmFyIG51bGxGaWVsZCA9IHRoaXMuZnJvbUZpZWxkUGF0aFJlZmVyZW5jZShmaWx0ZXIudW5hcnlGaWx0ZXIuZmllbGQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOdWxsRmlsdGVyKG51bGxGaWVsZCk7XHJcbiAgICAgICAgICAgIGNhc2UgJ09QRVJBVE9SX1VOU1BFQ0lGSUVEJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKCdVbnNwZWNpZmllZCBmaWx0ZXInKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKCdVbmtub3duIGZpbHRlcicpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBKc29uUHJvdG9TZXJpYWxpemVyLnByb3RvdHlwZS50b0RvY3VtZW50TWFzayA9IGZ1bmN0aW9uIChmaWVsZE1hc2spIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmaWVsZFBhdGhzOiBmaWVsZE1hc2suZmllbGRzLm1hcChmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIGZpZWxkLmNhbm9uaWNhbFN0cmluZygpOyB9KVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgSnNvblByb3RvU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbURvY3VtZW50TWFzayA9IGZ1bmN0aW9uIChwcm90bykge1xyXG4gICAgICAgIHZhciBwYXRocyA9IHByb3RvLmZpZWxkUGF0aHMgfHwgW107XHJcbiAgICAgICAgdmFyIGZpZWxkcyA9IHBhdGhzLm1hcChmdW5jdGlvbiAocGF0aCkgeyByZXR1cm4gRmllbGRQYXRoLmZyb21TZXJ2ZXJGb3JtYXQocGF0aCk7IH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgRmllbGRNYXNrKGZpZWxkcyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEpzb25Qcm90b1NlcmlhbGl6ZXI7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBDaGVja3MgZm9yIGEgc3BlY2lmaWMgb25lb2YgdGFnIGluIGEgcHJvdG9jb2wgYnVmZmVyIG1lc3NhZ2UuXHJcbiAqXHJcbiAqIFRoaXMgaW50ZW50aW9uYWxseSBhY2NvbW1vZGF0ZXMgdHdvIGRpc3RpbmN0IGNhc2VzOlxyXG4gKlxyXG4gKiAxKSBNZXNzYWdlcyBjb250YWluaW5nIGEgdHlwZSB0YWc6IHRoZXNlIGFyZSB0aGUgZm9ybWF0IHByb2R1Y2VkIGJ5IEdSUEMgaW5cclxuICogcmV0dXJuIHZhbHVlcy4gVGhlc2UgbWF5IGNvbnRhaW4gZGVmYXVsdC12YWx1ZSBtYXBwaW5ncyBmb3IgYWxsIHRhZ3MgaW4gdGhlXHJcbiAqIG9uZW9mIGJ1dCB0aGUgdHlwZSB0YWcgc3BlY2lmaWVzIHdoaWNoIG9uZSB3YXMgYWN0dWFsbHkgc2V0LlxyXG4gKlxyXG4gKiAyKSBNZXNzYWdlcyB0aGF0IGRvbid0IGNvbnRhaW4gYSB0eXBlIHRhZzogdGhlc2UgYXJlIHRoZSBmb3JtYXQgcmVxdWlyZWQgYnlcclxuICogR1JQQyBhcyBpbnB1dHMuIElmIHdlIGVtaXR0ZWQgb2JqZWN0cyB3aXRoIHR5cGUgdGFncywgUHJvdG9CdWYuanMgd291bGRcclxuICogY2hva2UgY2xhaW1pbmcgdGhhdCB0aGUgdGFncyBhcmVuJ3QgZmllbGRzIGluIHRoZSBNZXNzYWdlLlxyXG4gKlxyXG4gKiBBbGxvd2luZyBib3RoIGZvcm1hdHMgaGVyZSBtYWtlcyB0aGUgc2VyaWFsaXplciBhYmxlIHRvIGNvbnN1bWUgdGhlIG91dHB1dHNcclxuICogaXQgcHJvZHVjZXM6IGZvciBhbGwgbWVzc2FnZXMgaXQgc3VwcG9ydHMsIGZyb21YKHRvWCh2YWx1ZSkpID09IHZhbHVlLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgY2FzZSAyIHN1ZmZlcnMgZnJvbSBhbWJpZ3VpdHk6IGlmIG11bHRpcGxlIHRhZ3MgYXJlIHByZXNlbnRcclxuICogd2l0aG91dCBhIHR5cGUgdGFnIHRoZW4gdGhlIGNhbGxlcnMgYXJlIHN0cnVjdHVyZWQgaW4gc3VjaCBhIHdheSB0aGF0IHRoZVxyXG4gKiBmaXJzdCBpbnZvY2F0aW9uIHdpbGwgd2luLiBTaW5jZSB3ZSBvbmx5IHBhcnNlIGluIHRoaXMgbW9kZSB3aGVuIHBhcnNpbmdcclxuICogdGhlIG91dHB1dCBvZiBhIHNlcmlhbGl6ZSBtZXRob2QgdGhpcyB3b3JrcywgYnV0IGl0J3Mgbm90IGEgZ2VuZXJhbFxyXG4gKiBzb2x1dGlvbi5cclxuICpcclxuICogVW5mb3J0dW5hdGVseSB0aGVyZSBpcyBubyBnZW5lcmFsIHNvbHV0aW9uIGhlcmUgYmVjYXVzZSBwcm90bzMgbWFrZXMgaXRcclxuICogaW1wb3NzaWJsZSB0byBkaXN0aW5ndWlzaCB1bnNldCBmcm9tIGV4cGxpY2l0bHkgc2V0IGZpZWxkczogYm90aCBoYXZlIHRoZVxyXG4gKiBkZWZhdWx0IHZhbHVlIGZvciB0aGUgdHlwZS4gV2l0aG91dCB0aGUgdHlwZSB0YWcgYnV0IG11bHRpcGxlIHZhbHVlIHRhZ3NcclxuICogaXQncyBwb3NzaWJsZSB0byBoYXZlIGRlZmF1bHQgdmFsdWVzIGZvciBlYWNoIHRhZyBpbiB0aGUgb25lb2YgYW5kIG5vdCBiZVxyXG4gKiBhYmxlIHRvIGtub3cgd2hpY2ggd2FzIGFjdHVhbGx5IGluIGVmZmVjdC5cclxuICovXHJcbmZ1bmN0aW9uIGhhc1RhZyhvYmosIHR5cGUsIHRhZykge1xyXG4gICAgcmV0dXJuIHR5cGUgPT09IHRhZyB8fCAoIXR5cGUgJiYgdGFnIGluIG9iaik7XHJcbn1cblxuLyoqXHJcbiAqIERldGVjdCBSZWFjdCBOYXRpdmUuXHJcbiAqXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgaXMgZGV0ZWN0ZWQuXHJcbiAqL1xyXG52YXIgaXNSZWFjdE5hdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgbmF2aWdhdG9yWydwcm9kdWN0J10gPT09ICdSZWFjdE5hdGl2ZScpO1xyXG59O1xyXG5cbnZhciBFUlJPUl9OQU1FID0gJ0ZpcmViYXNlRXJyb3InO1xyXG52YXIgY2FwdHVyZVN0YWNrVHJhY2UgPSBFcnJvclxyXG4gICAgLmNhcHR1cmVTdGFja1RyYWNlO1xyXG52YXIgRmlyZWJhc2VFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpcmViYXNlRXJyb3IoY29kZSwgbWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgICAgICAvLyBXZSB3YW50IHRoZSBzdGFjayB2YWx1ZSwgaWYgaW1wbGVtZW50ZWQgYnkgRXJyb3JcclxuICAgICAgICBpZiAoY2FwdHVyZVN0YWNrVHJhY2UpIHtcclxuICAgICAgICAgICAgLy8gUGF0Y2hlcyB0aGlzLnN0YWNrLCBvbWl0dGVkIGNhbGxzIGFib3ZlIEVycm9yRmFjdG9yeSNjcmVhdGVcclxuICAgICAgICAgICAgY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXJyb3JGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIEluIGNhc2Ugb2YgSUUxMSwgc3RhY2sgd2lsbCBiZSBzZXQgb25seSBhZnRlciBlcnJvciBpcyByYWlzZWQuXHJcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9zY3JpcHRpbmcvamF2YXNjcmlwdC9yZWZlcmVuY2Uvc3RhY2stcHJvcGVydHktZXJyb3ItamF2YXNjcmlwdFxyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBFUlJPUl9OQU1FO1xyXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBub24tZW51bWVyYWJsZSBnZXR0ZXIgZm9yIHRoZSBwcm9wZXJ0eS5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RhY2snLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnIuc3RhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmlyZWJhc2VFcnJvcjtcclxufSgpKTtcclxuLy8gQmFjay1kb29yIGluaGVyaXRhbmNlXHJcbkZpcmViYXNlRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xyXG5GaXJlYmFzZUVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZpcmViYXNlRXJyb3I7XHJcbkZpcmViYXNlRXJyb3IucHJvdG90eXBlLm5hbWUgPSBFUlJPUl9OQU1FO1xyXG52YXIgRXJyb3JGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXJyb3JGYWN0b3J5KHNlcnZpY2UsIHNlcnZpY2VOYW1lLCBlcnJvcnMpIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMuc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZTtcclxuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcclxuICAgICAgICAvLyBNYXRjaGVzIHskbmFtZX0sIGJ5IGRlZmF1bHQuXHJcbiAgICAgICAgdGhpcy5wYXR0ZXJuID0gL1xce1xcJChbXn1dKyl9L2c7XHJcbiAgICAgICAgLy8gZW1wdHlcclxuICAgIH1cclxuICAgIEVycm9yRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGNvZGUsIGRhdGEpIHtcclxuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gdGhpcy5lcnJvcnNbY29kZV07XHJcbiAgICAgICAgdmFyIGZ1bGxDb2RlID0gdGhpcy5zZXJ2aWNlICsgJy8nICsgY29kZTtcclxuICAgICAgICB2YXIgbWVzc2FnZTtcclxuICAgICAgICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gJ0Vycm9yJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0ZW1wbGF0ZS5yZXBsYWNlKHRoaXMucGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGFba2V5XTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUudG9TdHJpbmcoKSA6ICc8JyArIGtleSArICc/Pic7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTZXJ2aWNlOiBFcnJvciBtZXNzYWdlIChzZXJ2aWNlL2NvZGUpLlxyXG4gICAgICAgIG1lc3NhZ2UgPSB0aGlzLnNlcnZpY2VOYW1lICsgJzogJyArIG1lc3NhZ2UgKyAnICgnICsgZnVsbENvZGUgKyAnKS4nO1xyXG4gICAgICAgIHZhciBlcnIgPSBuZXcgRmlyZWJhc2VFcnJvcihmdWxsQ29kZSwgbWVzc2FnZSk7XHJcbiAgICAgICAgLy8gUG9wdWxhdGUgdGhlIEVycm9yIG9iamVjdCB3aXRoIG1lc3NhZ2UgcGFydHMgZm9yIHByb2dyYW1tYXRpY1xyXG4gICAgICAgIC8vIGFjY2Vzc2VzIChlLmcuLCBlLmZpbGUpLlxyXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkocHJvcCkgfHwgcHJvcC5zbGljZSgtMSkgPT09ICdfJykge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXJyW3Byb3BdID0gZGF0YVtwcm9wXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVycjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXJyb3JGYWN0b3J5O1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQ29weXJpZ2h0IDIwMTEgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4vL1xyXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcclxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IEFic3RyYWN0IGNyeXB0b2dyYXBoaWMgaGFzaCBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqIFNlZSBTaGExIGFuZCBNZDUgZm9yIHNhbXBsZSBpbXBsZW1lbnRhdGlvbnMuXHJcbiAqXHJcbiAqL1xyXG4vKipcclxuICogQ3JlYXRlIGEgY3J5cHRvZ3JhcGhpYyBoYXNoIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHN0cnVjdFxyXG4gKi9cclxudmFyIEhhc2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIYXNoKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBibG9jayBzaXplIGZvciB0aGUgaGFzaGVyLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSAtMTtcclxuICAgIH1cclxuICAgIHJldHVybiBIYXNoO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgU0hBLTEgY3J5cHRvZ3JhcGhpYyBoYXNoLlxyXG4gKiBWYXJpYWJsZSBuYW1lcyBmb2xsb3cgdGhlIG5vdGF0aW9uIGluIEZJUFMgUFVCIDE4MC0zOlxyXG4gKiBodHRwOi8vY3NyYy5uaXN0Lmdvdi9wdWJsaWNhdGlvbnMvZmlwcy9maXBzMTgwLTMvZmlwczE4MC0zX2ZpbmFsLnBkZi5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqICAgdmFyIHNoYTEgPSBuZXcgc2hhMSgpO1xyXG4gKiAgIHNoYTEudXBkYXRlKGJ5dGVzKTtcclxuICogICB2YXIgaGFzaCA9IHNoYTEuZGlnZXN0KCk7XHJcbiAqXHJcbiAqIFBlcmZvcm1hbmNlOlxyXG4gKiAgIENocm9tZSAyMzogICB+NDAwIE1iaXQvc1xyXG4gKiAgIEZpcmVmb3ggMTY6ICB+MjUwIE1iaXQvc1xyXG4gKlxyXG4gKi9cclxuLyoqXHJcbiAqIFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaCBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogVGhlIHByb3BlcnRpZXMgZGVjbGFyZWQgaGVyZSBhcmUgZGlzY3Vzc2VkIGluIHRoZSBhYm92ZSBhbGdvcml0aG0gZG9jdW1lbnQuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZXh0ZW5kcyB7SGFzaH1cclxuICogQGZpbmFsXHJcbiAqIEBzdHJ1Y3RcclxuICovXHJcbnZhciBTaGExID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2hhMSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFNoYTEoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIb2xkcyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIGFjY3VtdWxhdGVkIHZhcmlhYmxlcyBhLWUgaW4gdGhlIGNvbXByZXNzX1xyXG4gICAgICAgICAqIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXk8bnVtYmVyPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90aGlzLmNoYWluXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgYnVmZmVyIGhvbGRpbmcgdGhlIHBhcnRpYWxseSBjb21wdXRlZCBoYXNoIHJlc3VsdC5cclxuICAgICAgICAgKiBAdHlwZSB7IUFycmF5PG51bWJlcj59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGhpcy5idWZfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXHJcbiAgICAgICAgICogYXMgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgaW4gdGhlIGRvY3MuXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheTxudW1iZXI+fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3RoaXMuV18gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250YWlucyBkYXRhIG5lZWRlZCB0byBwYWQgbWVzc2FnZXMgbGVzcyB0aGFuIDY0IGJ5dGVzLlxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXk8bnVtYmVyPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90aGlzLnBhZF8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgICAgIF90aGlzLmJsb2NrU2l6ZSA9IDUxMiAvIDg7XHJcbiAgICAgICAgX3RoaXMucGFkX1swXSA9IDEyODtcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IF90aGlzLmJsb2NrU2l6ZTsgKytpKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnBhZF9baV0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfdGhpcy5yZXNldCgpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIFNoYTEucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gMHg2NzQ1MjMwMTtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9IDB4ZWZjZGFiODk7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAweDk4YmFkY2ZlO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9IDB4YzNkMmUxZjA7XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfID0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludGVybmFsIGNvbXByZXNzIGhlbHBlciBmdW5jdGlvbi5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5PG51bWJlcj58IVVpbnQ4QXJyYXl8c3RyaW5nfSBidWYgQmxvY2sgdG8gY29tcHJlc3MuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9wdF9vZmZzZXQgT2Zmc2V0IG9mIHRoZSBibG9jayBpbiB0aGUgYnVmZmVyLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgU2hhMS5wcm90b3R5cGUuY29tcHJlc3NfID0gZnVuY3Rpb24gKGJ1Ziwgb3B0X29mZnNldCkge1xyXG4gICAgICAgIGlmICghb3B0X29mZnNldCkge1xyXG4gICAgICAgICAgICBvcHRfb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIFcgPSB0aGlzLldfO1xyXG4gICAgICAgIC8vIGdldCAxNiBiaWcgZW5kaWFuIHdvcmRzXHJcbiAgICAgICAgaWYgKHR5cGVvZiBidWYgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyh1c2VyKTogW2J1ZyA4MTQwMTIyXSBSZWNlbnQgdmVyc2lvbnMgb2YgU2FmYXJpIGZvciBNYWMgT1MgYW5kIGlPU1xyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGJ1ZyB0aGF0IHR1cm5zIHRoZSBwb3N0LWluY3JlbWVudCArKyBvcGVyYXRvciBpbnRvIHByZS1pbmNyZW1lbnRcclxuICAgICAgICAgICAgICAgIC8vIGR1cmluZyBKSVQgY29tcGlsYXRpb24uICBXZSBoYXZlIGNvZGUgdGhhdCBkZXBlbmRzIGhlYXZpbHkgb24gU0hBLTEgZm9yXHJcbiAgICAgICAgICAgICAgICAvLyBjb3JyZWN0bmVzcyBhbmQgd2hpY2ggaXMgYWZmZWN0ZWQgYnkgdGhpcyBidWcsIHNvIEkndmUgcmVtb3ZlZCBhbGwgdXNlc1xyXG4gICAgICAgICAgICAgICAgLy8gb2YgcG9zdC1pbmNyZW1lbnQgKysgaW4gd2hpY2ggdGhlIHJlc3VsdCB2YWx1ZSBpcyB1c2VkLiAgV2UgY2FuIHJldmVydFxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjaGFuZ2Ugb25jZSB0aGUgU2FmYXJpIGJ1Z1xyXG4gICAgICAgICAgICAgICAgLy8gKGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDkwMzYpIGhhcyBiZWVuIGZpeGVkIGFuZFxyXG4gICAgICAgICAgICAgICAgLy8gbW9zdCBjbGllbnRzIGhhdmUgYmVlbiB1cGRhdGVkLlxyXG4gICAgICAgICAgICAgICAgV1tpXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9wdF9vZmZzZXQpIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvcHRfb2Zmc2V0ICsgMSkgPDwgMTYpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9wdF9vZmZzZXQgKyAyKSA8PCA4KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Zi5jaGFyQ29kZUF0KG9wdF9vZmZzZXQgKyAzKTtcclxuICAgICAgICAgICAgICAgIG9wdF9vZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmW29wdF9vZmZzZXRdIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb3B0X29mZnNldCArIDFdIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb3B0X29mZnNldCArIDJdIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmW29wdF9vZmZzZXQgKyAzXTtcclxuICAgICAgICAgICAgICAgIG9wdF9vZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBleHBhbmQgdG8gODAgd29yZHNcclxuICAgICAgICBmb3IgKHZhciBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcclxuICAgICAgICAgICAgV1tpXSA9ICgodCA8PCAxKSB8ICh0ID4+PiAzMSkpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGEgPSB0aGlzLmNoYWluX1swXTtcclxuICAgICAgICB2YXIgYiA9IHRoaXMuY2hhaW5fWzFdO1xyXG4gICAgICAgIHZhciBjID0gdGhpcy5jaGFpbl9bMl07XHJcbiAgICAgICAgdmFyIGQgPSB0aGlzLmNoYWluX1szXTtcclxuICAgICAgICB2YXIgZSA9IHRoaXMuY2hhaW5fWzRdO1xyXG4gICAgICAgIHZhciBmLCBrO1xyXG4gICAgICAgIC8vIFRPRE8odXNlcik6IFRyeSB0byB1bnJvbGwgdGhpcyBsb29wIHRvIHNwZWVkIHVwIHRoZSBjb21wdXRhdGlvbi5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCA0MCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg1YTgyNzk5OTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4NmVkOWViYTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDhmMWJiY2RjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdCA9ICgoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGYgKyBlICsgayArIFdbaV0pICYgMHhmZmZmZmZmZjtcclxuICAgICAgICAgICAgZSA9IGQ7XHJcbiAgICAgICAgICAgIGQgPSBjO1xyXG4gICAgICAgICAgICBjID0gKChiIDw8IDMwKSB8IChiID4+PiAyKSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBiID0gYTtcclxuICAgICAgICAgICAgYSA9IHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gKHRoaXMuY2hhaW5fWzBdICsgYSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzFdID0gKHRoaXMuY2hhaW5fWzFdICsgYikgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzJdID0gKHRoaXMuY2hhaW5fWzJdICsgYykgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gKHRoaXMuY2hhaW5fWzNdICsgZCkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzRdID0gKHRoaXMuY2hhaW5fWzRdICsgZSkgJiAweGZmZmZmZmZmO1xyXG4gICAgfTtcclxuICAgIFNoYTEucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChieXRlcywgb3B0X2xlbmd0aCkge1xyXG4gICAgICAgIC8vIFRPRE8oam9obmxlbnopOiB0aWdodGVuIHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgYW5kIHJlbW92ZSB0aGlzIGNoZWNrXHJcbiAgICAgICAgaWYgKGJ5dGVzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0X2xlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9wdF9sZW5ndGggPSBieXRlcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBsZW5ndGhNaW51c0Jsb2NrID0gb3B0X2xlbmd0aCAtIHRoaXMuYmxvY2tTaXplO1xyXG4gICAgICAgIHZhciBuID0gMDtcclxuICAgICAgICAvLyBVc2luZyBsb2NhbCBpbnN0ZWFkIG9mIG1lbWJlciB2YXJpYWJsZXMgZ2l2ZXMgfjUlIHNwZWVkdXAgb24gRmlyZWZveCAxNi5cclxuICAgICAgICB2YXIgYnVmID0gdGhpcy5idWZfO1xyXG4gICAgICAgIHZhciBpbmJ1ZiA9IHRoaXMuaW5idWZfO1xyXG4gICAgICAgIC8vIFRoZSBvdXRlciB3aGlsZSBsb29wIHNob3VsZCBleGVjdXRlIGF0IG1vc3QgdHdpY2UuXHJcbiAgICAgICAgd2hpbGUgKG4gPCBvcHRfbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgaGF2ZSBubyBkYXRhIGluIHRoZSBibG9jayB0byB0b3AgdXAsIHdlIGNhbiBkaXJlY3RseSBwcm9jZXNzIHRoZVxyXG4gICAgICAgICAgICAvLyBpbnB1dCBidWZmZXIgKGFzc3VtaW5nIGl0IGNvbnRhaW5zIHN1ZmZpY2llbnQgZGF0YSkuIFRoaXMgZ2l2ZXMgfjI1JVxyXG4gICAgICAgICAgICAvLyBzcGVlZHVwIG9uIENocm9tZSAyMyBhbmQgfjE1JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYsIGJ1dCByZXF1aXJlcyB0aGF0XHJcbiAgICAgICAgICAgIC8vIHRoZSBkYXRhIGlzIHByb3ZpZGVkIGluIGxhcmdlIGNodW5rcyAob3IgaW4gbXVsdGlwbGVzIG9mIDY0IGJ5dGVzKS5cclxuICAgICAgICAgICAgaWYgKGluYnVmID09IDApIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDw9IGxlbmd0aE1pbnVzQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhieXRlcywgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgbiArPSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBvcHRfbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzLmNoYXJDb2RlQXQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8IG9wdF9sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXNbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSBpbmJ1ZjtcclxuICAgICAgICB0aGlzLnRvdGFsXyArPSBvcHRfbGVuZ3RoO1xyXG4gICAgfTtcclxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cclxuICAgIFNoYTEucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGlnZXN0ID0gW107XHJcbiAgICAgICAgdmFyIHRvdGFsQml0cyA9IHRoaXMudG90YWxfICogODtcclxuICAgICAgICAvLyBBZGQgcGFkIDB4ODAgMHgwMCouXHJcbiAgICAgICAgaWYgKHRoaXMuaW5idWZfIDwgNTYpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy5wYWRfLCA1NiAtIHRoaXMuaW5idWZfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgdGhpcy5ibG9ja1NpemUgLSAodGhpcy5pbmJ1Zl8gLSA1NikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgIyBiaXRzLlxyXG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmJsb2NrU2l6ZSAtIDE7IGkgPj0gNTY7IGktLSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1Zl9baV0gPSB0b3RhbEJpdHMgJiAyNTU7XHJcbiAgICAgICAgICAgIHRvdGFsQml0cyAvPSAyNTY7IC8vIERvbid0IHVzZSBiaXQtc2hpZnRpbmcgaGVyZSFcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21wcmVzc18odGhpcy5idWZfKTtcclxuICAgICAgICB2YXIgbiA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xyXG4gICAgICAgICAgICAgICAgZGlnZXN0W25dID0gKHRoaXMuY2hhaW5fW2ldID4+IGopICYgMjU1O1xyXG4gICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaWdlc3Q7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNoYTE7XHJcbn0oSGFzaCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGVzIGEgc2ltcGxlIGhlbHBlciBjbGFzcyB0aGF0IGltcGxlbWVudHMgdGhlIFN0cmVhbSBpbnRlcmZhY2UgdG9cclxuICogYnJpZGdlIHRvIG90aGVyIGltcGxlbWVudGF0aW9ucyB0aGF0IGFyZSBzdHJlYW1zIGJ1dCBkbyBub3QgaW1wbGVtZW50IHRoZVxyXG4gKiBpbnRlcmZhY2UuIFRoZSBzdHJlYW0gY2FsbGJhY2tzIGFyZSBpbnZva2VkIHdpdGggdGhlIGNhbGxPbi4uLiBtZXRob2RzLlxyXG4gKi9cclxudmFyIFN0cmVhbUJyaWRnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0cmVhbUJyaWRnZShhcmdzKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kRm4gPSBhcmdzLnNlbmRGbjtcclxuICAgICAgICB0aGlzLmNsb3NlRm4gPSBhcmdzLmNsb3NlRm47XHJcbiAgICB9XHJcbiAgICBTdHJlYW1CcmlkZ2UucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIGFzc2VydCghdGhpcy53cmFwcGVkT25PcGVuLCAnQ2FsbGVkIG9uT3BlbiBvbiBzdHJlYW0gdHdpY2UhJyk7XHJcbiAgICAgICAgdGhpcy53cmFwcGVkT25PcGVuID0gY2FsbGJhY2s7XHJcbiAgICB9O1xyXG4gICAgU3RyZWFtQnJpZGdlLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLndyYXBwZWRPbkNsb3NlLCAnQ2FsbGVkIG9uQ2xvc2Ugb24gc3RyZWFtIHR3aWNlIScpO1xyXG4gICAgICAgIHRoaXMud3JhcHBlZE9uQ2xvc2UgPSBjYWxsYmFjaztcclxuICAgIH07XHJcbiAgICBTdHJlYW1CcmlkZ2UucHJvdG90eXBlLm9uTWVzc2FnZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIGFzc2VydCghdGhpcy53cmFwcGVkT25NZXNzYWdlLCAnQ2FsbGVkIG9uTWVzc2FnZSBvbiBzdHJlYW0gdHdpY2UhJyk7XHJcbiAgICAgICAgdGhpcy53cmFwcGVkT25NZXNzYWdlID0gY2FsbGJhY2s7XHJcbiAgICB9O1xyXG4gICAgU3RyZWFtQnJpZGdlLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNsb3NlRm4oKTtcclxuICAgIH07XHJcbiAgICBTdHJlYW1CcmlkZ2UucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kRm4obXNnKTtcclxuICAgIH07XHJcbiAgICBTdHJlYW1CcmlkZ2UucHJvdG90eXBlLmNhbGxPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMud3JhcHBlZE9uT3BlbiAhPT0gdW5kZWZpbmVkLCAnQ2Fubm90IGNhbGwgb25PcGVuIGJlY2F1c2Ugbm8gY2FsbGJhY2sgd2FzIHNldCcpO1xyXG4gICAgICAgIHRoaXMud3JhcHBlZE9uT3BlbigpO1xyXG4gICAgfTtcclxuICAgIFN0cmVhbUJyaWRnZS5wcm90b3R5cGUuY2FsbE9uQ2xvc2UgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMud3JhcHBlZE9uQ2xvc2UgIT09IHVuZGVmaW5lZCwgJ0Nhbm5vdCBjYWxsIG9uQ2xvc2UgYmVjYXVzZSBubyBjYWxsYmFjayB3YXMgc2V0Jyk7XHJcbiAgICAgICAgdGhpcy53cmFwcGVkT25DbG9zZShlcnIpO1xyXG4gICAgfTtcclxuICAgIFN0cmVhbUJyaWRnZS5wcm90b3R5cGUuY2FsbE9uTWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy53cmFwcGVkT25NZXNzYWdlICE9PSB1bmRlZmluZWQsICdDYW5ub3QgY2FsbCBvbk1lc3NhZ2UgYmVjYXVzZSBubyBjYWxsYmFjayB3YXMgc2V0Jyk7XHJcbiAgICAgICAgdGhpcy53cmFwcGVkT25NZXNzYWdlKG1zZyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN0cmVhbUJyaWRnZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBMT0dfVEFHID0gJ0Nvbm5lY3Rpb24nO1xyXG52YXIgUlBDX1NUUkVBTV9TRVJWSUNFID0gJ2dvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5GaXJlc3RvcmUnO1xyXG52YXIgUlBDX1VSTF9WRVJTSU9OID0gJ3YxYmV0YTEnO1xyXG4vKiogTWFwcyBSUEMgbmFtZXMgdG8gdGhlIGNvcnJlc3BvbmRpbmcgUkVTVCBlbmRwb2ludCBuYW1lLiAqL1xyXG52YXIgUlBDX05BTUVfUkVTVF9NQVBQSU5HID0ge1xyXG4gICAgQmF0Y2hHZXREb2N1bWVudHM6ICdiYXRjaEdldCcsXHJcbiAgICBDb21taXQ6ICdjb21taXQnXHJcbn07XHJcbi8vIFRPRE8oYi8zODIwMzM0NCk6IFRoZSBTREtfVkVSU0lPTiBpcyBzZXQgaW5kZXBlbmRlbnRseSBmcm9tIEZpcmViYXNlIGJlY2F1c2VcclxuLy8gd2UgYXJlIGRvaW5nIG91dC1vZi1iYW5kIHJlbGVhc2VzLiBPbmNlIHdlIHJlbGVhc2UgYXMgcGFydCBvZiBGaXJlYmFzZSwgd2VcclxuLy8gc2hvdWxkIHVzZSB0aGUgRmlyZWJhc2UgdmVyc2lvbiBpbnN0ZWFkLlxyXG52YXIgWF9HT09HX0FQSV9DTElFTlRfVkFMVUUgPSAnZ2wtanMvIGZpcmUvJyArIFNES19WRVJTSU9OO1xyXG52YXIgWEhSX1RJTUVPVVRfU0VDUyA9IDE1O1xyXG52YXIgV2ViQ2hhbm5lbENvbm5lY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXZWJDaGFubmVsQ29ubmVjdGlvbihpbmZvKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhYmFzZUlkID0gaW5mby5kYXRhYmFzZUlkO1xyXG4gICAgICAgIHRoaXMucG9vbCA9IG5ldyB3ZWJjaGFubmVsV3JhcHBlci5YaHJJb1Bvb2woKTtcclxuICAgICAgICB2YXIgcHJvdG8gPSBpbmZvLnNzbCA/ICdodHRwcycgOiAnaHR0cCc7XHJcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gcHJvdG8gKyAnOi8vJyArIGluZm8uaG9zdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTW9kaWZpZXMgdGhlIGhlYWRlcnMgZm9yIGEgcmVxdWVzdCwgYWRkaW5nIGFueSBhdXRob3JpemF0aW9uIHRva2VuIGlmXHJcbiAgICAgKiBwcmVzZW50IGFuZCBhbnkgYWRkaXRpb25hbCBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdC5cclxuICAgICAqL1xyXG4gICAgV2ViQ2hhbm5lbENvbm5lY3Rpb24ucHJvdG90eXBlLm1vZGlmeUhlYWRlcnNGb3JSZXF1ZXN0ID0gZnVuY3Rpb24gKGhlYWRlcnMsIHRva2VuKSB7XHJcbiAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGhlYWRlciBpbiB0b2tlbi5hdXRoSGVhZGVycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLmF1dGhIZWFkZXJzLmhhc093blByb3BlcnR5KGhlYWRlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW2hlYWRlcl0gPSB0b2tlbi5hdXRoSGVhZGVyc1toZWFkZXJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhlYWRlcnNbJ1gtR29vZy1BcGktQ2xpZW50J10gPSBYX0dPT0dfQVBJX0NMSUVOVF9WQUxVRTtcclxuICAgIH07XHJcbiAgICBXZWJDaGFubmVsQ29ubmVjdGlvbi5wcm90b3R5cGUuaW52b2tlUlBDID0gZnVuY3Rpb24gKHJwY05hbWUsIHJlcXVlc3QsIHRva2VuKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdXJsID0gdGhpcy5tYWtlVXJsKHJwY05hbWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgWGhySW9Qb29sIGRvZXNuJ3QgaGF2ZSBUUyB0eXBpbmdzLlxyXG4gICAgICAgICAgICBfdGhpcy5wb29sLmdldE9iamVjdChmdW5jdGlvbiAoeGhyKSB7XHJcbiAgICAgICAgICAgICAgICB4aHIubGlzdGVuT25jZSh3ZWJjaGFubmVsV3JhcHBlci5FdmVudFR5cGUuQ09NUExFVEUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHhoci5nZXRMYXN0RXJyb3JDb2RlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2ViY2hhbm5lbFdyYXBwZXIuRXJyb3JDb2RlLk5PX0VSUk9SOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0geGhyLmdldFJlc3BvbnNlSnNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUcsICdYSFIgcmVjZWl2ZWQ6JywgSlNPTi5zdHJpbmdpZnkoanNvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoanNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdlYmNoYW5uZWxXcmFwcGVyLkVycm9yQ29kZS5USU1FT1VUOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUcsICdSUEMgXCInICsgcnBjTmFtZSArICdcIiB0aW1lZCBvdXQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEZpcmVzdG9yZUVycm9yKENvZGUuREVBRExJTkVfRVhDRUVERUQsICdSZXF1ZXN0IHRpbWUgb3V0JykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3ZWJjaGFubmVsV3JhcHBlci5FcnJvckNvZGUuSFRUUF9FUlJPUjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzXzEgPSB4aHIuZ2V0U3RhdHVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRywgJ1JQQyBcIicgKyBycGNOYW1lICsgJ1wiIGZhaWxlZCB3aXRoIHN0YXR1czonLCBzdGF0dXNfMSwgJ3Jlc3BvbnNlIHRleHQ6JywgeGhyLmdldFJlc3BvbnNlVGV4dCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzXzEgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRmlyZXN0b3JlRXJyb3IobWFwQ29kZUZyb21IdHRwU3RhdHVzKHN0YXR1c18xKSwgJ1NlcnZlciByZXNwb25kZWQgd2l0aCBzdGF0dXMgJyArIHhoci5nZXRTdGF0dXNUZXh0KCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlY2VpdmVkIGFuIEhUVFBfRVJST1IgYnV0IHRoZXJlJ3Mgbm8gc3RhdHVzIGNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgbW9zdCBwcm9iYWJseSBhIGNvbm5lY3Rpb24gaXNzdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRywgJ1JQQyBcIicgKyBycGNOYW1lICsgJ1wiIGZhaWxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEZpcmVzdG9yZUVycm9yKENvZGUuVU5BVkFJTEFCTEUsICdDb25uZWN0aW9uIGZhaWxlZC4nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsKCdSUEMgXCInICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnBjTmFtZSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIiBmYWlsZWQgd2l0aCB1bmFudGljaXBhdGVkICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2ViY2hhbm5lbCBlcnJvciAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLmdldExhc3RFcnJvckNvZGUoKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuZ2V0TGFzdEVycm9yKCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLCBnaXZpbmcgdXAuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUcsICdSUEMgXCInICsgcnBjTmFtZSArICdcIiBjb21wbGV0ZWQuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnBvb2wucmVsZWFzZU9iamVjdCh4aHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KTtcclxuICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUcsICdYSFIgc2VuZGluZzogJywgdXJsICsgJyAnICsgcmVxdWVzdFN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICAvLyBDb250ZW50LVR5cGU6IHRleHQvcGxhaW4gd2lsbCBhdm9pZCBwcmVmbGlnaHQgcmVxdWVzdHMgd2hpY2ggbWlnaHRcclxuICAgICAgICAgICAgICAgIC8vIG1lc3Mgd2l0aCBDT1JTIGFuZCByZWRpcmVjdHMgYnkgcHJveGllcy4gSWYgd2UgYWRkIGN1c3RvbSBoZWFkZXJzXHJcbiAgICAgICAgICAgICAgICAvLyB3ZSB3aWxsIG5lZWQgdG8gY2hhbmdlIHRoaXMgY29kZSB0byBwb3RlbnRpYWxseSB1c2UgdGhlXHJcbiAgICAgICAgICAgICAgICAvLyAkaHR0cE92ZXJ3cml0ZSBwYXJhbWV0ZXIgc3VwcG9ydGVkIGJ5IEVTRiB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgLy8gdHJpZ2dlcmluZyBwcmVmbGlnaHQgcmVxdWVzdHMuXHJcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IHsgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJyB9O1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubW9kaWZ5SGVhZGVyc0ZvclJlcXVlc3QoaGVhZGVycywgdG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgeGhyLnNlbmQodXJsLCAnUE9TVCcsIHJlcXVlc3RTdHJpbmcsIGhlYWRlcnMsIFhIUl9USU1FT1VUX1NFQ1MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBXZWJDaGFubmVsQ29ubmVjdGlvbi5wcm90b3R5cGUuaW52b2tlU3RyZWFtaW5nUlBDID0gZnVuY3Rpb24gKHJwY05hbWUsIHJlcXVlc3QsIHRva2VuKSB7XHJcbiAgICAgICAgLy8gVGhlIFJFU1QgQVBJIGF1dG9tYXRpY2FsbHkgYWdncmVnYXRlcyBhbGwgb2YgdGhlIHN0cmVhbWVkIHJlc3VsdHMsIHNvIHdlXHJcbiAgICAgICAgLy8gY2FuIGp1c3QgdXNlIHRoZSBub3JtYWwgaW52b2tlKCkgbWV0aG9kLlxyXG4gICAgICAgIHJldHVybiB0aGlzLmludm9rZVJQQyhycGNOYW1lLCByZXF1ZXN0LCB0b2tlbik7XHJcbiAgICB9O1xyXG4gICAgV2ViQ2hhbm5lbENvbm5lY3Rpb24ucHJvdG90eXBlLm9wZW5TdHJlYW0gPSBmdW5jdGlvbiAocnBjTmFtZSwgdG9rZW4pIHtcclxuICAgICAgICB2YXIgdXJsUGFydHMgPSBbXHJcbiAgICAgICAgICAgIHRoaXMuYmFzZVVybCxcclxuICAgICAgICAgICAgJy8nLFxyXG4gICAgICAgICAgICBSUENfU1RSRUFNX1NFUlZJQ0UsXHJcbiAgICAgICAgICAgICcvJyxcclxuICAgICAgICAgICAgcnBjTmFtZSxcclxuICAgICAgICAgICAgJy9jaGFubmVsJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgdmFyIHdlYmNoYW5uZWxUcmFuc3BvcnQgPSB3ZWJjaGFubmVsV3JhcHBlci5jcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0KCk7XHJcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgIC8vIEJhY2tncm91bmQgY2hhbm5lbCB0ZXN0IGF2b2lkcyB0aGUgaW5pdGlhbCB0d28gdGVzdCBjYWxscyBhbmQgZGVjcmVhc2VzXHJcbiAgICAgICAgICAgIC8vIGluaXRpYWwgY29sZCBzdGFydCB0aW1lLlxyXG4gICAgICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IHdlbmJvekAgbWVudGlvbmVkIHRoaXMgbWlnaHQgYWZmZWN0IHVzZSB3aXRoIHByb3hpZXMgYW5kXHJcbiAgICAgICAgICAgIC8vIHdlIHNob3VsZCBtb25pdG9yIGNsb3NlbHkgZm9yIGFueSByZXBvcnRzLlxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ2hhbm5lbFRlc3Q6IHRydWUsXHJcbiAgICAgICAgICAgIC8vIFJlcXVpcmVkIGZvciBiYWNrZW5kIHN0aWNraW5lc3MsIHJvdXRpbmcgYmVoYXZpb3IgaXMgYmFzZWQgb24gdGhpc1xyXG4gICAgICAgICAgICAvLyBwYXJhbWV0ZXIuXHJcbiAgICAgICAgICAgIGh0dHBTZXNzaW9uSWRQYXJhbTogJ2dzZXNzaW9uaWQnLFxyXG4gICAgICAgICAgICBpbml0TWVzc2FnZUhlYWRlcnM6IHt9LFxyXG4gICAgICAgICAgICBtZXNzYWdlVXJsUGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHBhcmFtIGlzIHVzZWQgdG8gaW1wcm92ZSByb3V0aW5nIGFuZCBwcm9qZWN0IGlzb2xhdGlvbiBieSB0aGVcclxuICAgICAgICAgICAgICAgIC8vIGJhY2tlbmQgYW5kIG11c3QgYmUgaW5jbHVkZWQgaW4gZXZlcnkgcmVxdWVzdC5cclxuICAgICAgICAgICAgICAgIGRhdGFiYXNlOiBcInByb2plY3RzL1wiICsgdGhpcy5kYXRhYmFzZUlkLnByb2plY3RJZCArIFwiL2RhdGFiYXNlcy9cIiArIHRoaXMuZGF0YWJhc2VJZC5kYXRhYmFzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZW5kUmF3SnNvbjogdHJ1ZSxcclxuICAgICAgICAgICAgc3VwcG9ydHNDcm9zc0RvbWFpblhocjogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5tb2RpZnlIZWFkZXJzRm9yUmVxdWVzdChyZXF1ZXN0LmluaXRNZXNzYWdlSGVhZGVycywgdG9rZW4pO1xyXG4gICAgICAgIC8vIFNlbmRpbmcgdGhlIGN1c3RvbSBoZWFkZXJzIHdlIGp1c3QgYWRkZWQgdG8gcmVxdWVzdC5pbml0TWVzc2FnZUhlYWRlcnNcclxuICAgICAgICAvLyAoQXV0aG9yaXphdGlvbiwgZXRjLikgd2lsbCB0cmlnZ2VyIHRoZSBicm93c2VyIHRvIG1ha2UgYSBDT1JTIHByZWZsaWdodFxyXG4gICAgICAgIC8vIHJlcXVlc3QgYmVjYXVzZSB0aGUgWEhSIHdpbGwgbm8gbG9uZ2VyIG1lZXQgdGhlIGNyaXRlcmlhIGZvciBhIFwic2ltcGxlXCJcclxuICAgICAgICAvLyBDT1JTIHJlcXVlc3Q6XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9DT1JTI1NpbXBsZV9yZXF1ZXN0c1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gVGhlcmVmb3JlIHRvIGF2b2lkIHRoZSBDT1JTIHByZWZsaWdodCByZXF1ZXN0IChhbiBleHRyYSBuZXR3b3JrXHJcbiAgICAgICAgLy8gcm91bmR0cmlwKSwgd2UgdXNlIHRoZSBodHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtIG9wdGlvbiB0byBzcGVjaWZ5IHRoYXRcclxuICAgICAgICAvLyB0aGUgaGVhZGVycyBzaG91bGQgaW5zdGVhZCBiZSBlbmNvZGVkIGludG8gYSBzcGVjaWFsIFwiJGh0dHBIZWFkZXJzXCIgcXVlcnlcclxuICAgICAgICAvLyBwYXJhbWV0ZXIsIHdoaWNoIGlzIHJlY29nbml6ZWQgYnkgdGhlIHdlYmNoYW5uZWwgYmFja2VuZC4gVGhpcyBpc1xyXG4gICAgICAgIC8vIGZvcm1hbGx5IGRlZmluZWQgaGVyZTpcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iL2IwZTE4MTViMTNmYjkyYTQ2ZDdjOWIzYzMwZGU1ZDZhMzk2YTMyNDUvY2xvc3VyZS9nb29nL25ldC9ycGMvaHR0cGNvcnMuanMjTDMyXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBCdXQgZm9yIHNvbWUgdW5jbGVhciByZWFzb24gKHNlZVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvaXNzdWVzLzcwMyksIHRoaXMgYnJlYWtzXHJcbiAgICAgICAgLy8gUmVhY3ROYXRpdmUgYW5kIHNvIHdlIGV4Y2x1ZGUgaXQsIHdoaWNoIGp1c3QgbWVhbnMgUmVhY3ROYXRpdmUgbWF5IGJlXHJcbiAgICAgICAgLy8gc3ViamVjdCB0byB0aGUgZXh0cmEgbmV0d29yayByb3VuZHRyaXAgZm9yIENPUlMgcHJlZmxpZ2h0LlxyXG4gICAgICAgIGlmICghaXNSZWFjdE5hdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3RbJ2h0dHBIZWFkZXJzT3ZlcndyaXRlUGFyYW0nXSA9ICckaHR0cEhlYWRlcnMnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdXJsID0gdXJsUGFydHMuam9pbignJyk7XHJcbiAgICAgICAgZGVidWcoTE9HX1RBRywgJ0NyZWF0aW5nIFdlYkNoYW5uZWw6ICcgKyB1cmwgKyAnICcgKyByZXF1ZXN0KTtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IEJlY2F1c2UgbGlzdGVuIGlzbid0IGRlZmluZWQgb24gaXQuXHJcbiAgICAgICAgdmFyIGNoYW5uZWwgPSB3ZWJjaGFubmVsVHJhbnNwb3J0LmNyZWF0ZVdlYkNoYW5uZWwodXJsLCByZXF1ZXN0KTtcclxuICAgICAgICAvLyBXZWJDaGFubmVsIHN1cHBvcnRzIHNlbmRpbmcgdGhlIGZpcnN0IG1lc3NhZ2Ugd2l0aCB0aGUgaGFuZHNoYWtlIC0gc2F2aW5nXHJcbiAgICAgICAgLy8gYSBuZXR3b3JrIHJvdW5kIHRyaXAuIEhvd2V2ZXIsIGl0IHdpbGwgaGF2ZSB0byBjYWxsIHNlbmQgaW4gdGhlIHNhbWVcclxuICAgICAgICAvLyBKUyBldmVudCBsb29wIGFzIG9wZW4uIEluIG9yZGVyIHRvIGVuZm9yY2UgdGhpcywgd2UgZGVsYXkgYWN0dWFsbHlcclxuICAgICAgICAvLyBvcGVuaW5nIHRoZSBXZWJDaGFubmVsIHVudGlsIHNlbmQgaXMgY2FsbGVkLiBXaGV0aGVyIHdlIGhhdmUgY2FsbGVkXHJcbiAgICAgICAgLy8gb3BlbiBpcyB0cmFja2VkIHdpdGggdGhpcyB2YXJpYWJsZS5cclxuICAgICAgICB2YXIgb3BlbmVkID0gZmFsc2U7XHJcbiAgICAgICAgLy8gQSBmbGFnIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBzdHJlYW0gd2FzIGNsb3NlZCAoYnkgdXMgb3IgdGhyb3VnaCBhblxyXG4gICAgICAgIC8vIGVycm9yL2Nsb3NlIGV2ZW50KSB0byBhdm9pZCBkZWxpdmVyaW5nIG11bHRpcGxlIGNsb3NlIGV2ZW50cyBvciBzZW5kaW5nXHJcbiAgICAgICAgLy8gb24gYSBjbG9zZWQgc3RyZWFtXHJcbiAgICAgICAgdmFyIGNsb3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBzdHJlYW1CcmlkZ2UgPSBuZXcgU3RyZWFtQnJpZGdlKHtcclxuICAgICAgICAgICAgc2VuZEZuOiBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNsb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghb3BlbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUcsICdPcGVuaW5nIFdlYkNoYW5uZWwgdHJhbnNwb3J0LicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsLm9wZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRywgJ1dlYkNoYW5uZWwgc2VuZGluZzonLCBtc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwuc2VuZChtc2cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRywgJ05vdCBzZW5kaW5nIGJlY2F1c2UgV2ViQ2hhbm5lbCBpcyBjbG9zZWQ6JywgbXNnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2xvc2VGbjogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hhbm5lbC5jbG9zZSgpOyB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gQ2xvc3VyZSBldmVudHMgYXJlIGd1YXJkZWQgYW5kIGV4Y2VwdGlvbnMgYXJlIHN3YWxsb3dlZCwgc28gY2F0Y2ggYW55XHJcbiAgICAgICAgLy8gZXhjZXB0aW9uIGFuZCByZXRocm93IHVzaW5nIGEgc2V0VGltZW91dCBzbyB0aGV5IGJlY29tZSB2aXNpYmxlIGFnYWluLlxyXG4gICAgICAgIC8vIE5vdGUgdGhhdCBldmVudHVhbGx5IHRoaXMgZnVuY3Rpb24gY291bGQgZ28gYXdheSBpZiB3ZSBhcmUgY29uZmlkZW50XHJcbiAgICAgICAgLy8gZW5vdWdoIHRoZSBjb2RlIGlzIGV4Y2VwdGlvbiBmcmVlLlxyXG4gICAgICAgIHZhciB1bmd1YXJkZWRFdmVudExpc3RlbiA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xyXG4gICAgICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IGNsb3N1cmUgdHlwaW5nIHNlZW1zIGJyb2tlbiBiZWNhdXNlIFdlYkNoYW5uZWwgZG9lc1xyXG4gICAgICAgICAgICAvLyBub3QgaW1wbGVtZW50IGdvb2cuZXZlbnRzLkxpc3RlbmFibGVcclxuICAgICAgICAgICAgY2hhbm5lbC5saXN0ZW4odHlwZSwgZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuKHBhcmFtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdW5ndWFyZGVkRXZlbnRMaXN0ZW4od2ViY2hhbm5lbFdyYXBwZXIuV2ViQ2hhbm5lbC5FdmVudFR5cGUuT1BFTiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIWNsb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRywgJ1dlYkNoYW5uZWwgdHJhbnNwb3J0IG9wZW5lZC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVuZ3VhcmRlZEV2ZW50TGlzdGVuKHdlYmNoYW5uZWxXcmFwcGVyLldlYkNoYW5uZWwuRXZlbnRUeXBlLkNMT1NFLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRywgJ1dlYkNoYW5uZWwgdHJhbnNwb3J0IGNsb3NlZCcpO1xyXG4gICAgICAgICAgICAgICAgc3RyZWFtQnJpZGdlLmNhbGxPbkNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB1bmd1YXJkZWRFdmVudExpc3Rlbih3ZWJjaGFubmVsV3JhcHBlci5XZWJDaGFubmVsLkV2ZW50VHlwZS5FUlJPUiwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICBpZiAoIWNsb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUcsICdXZWJDaGFubmVsIHRyYW5zcG9ydCBlcnJvcmVkOicsIGVycik7XHJcbiAgICAgICAgICAgICAgICBzdHJlYW1CcmlkZ2UuY2FsbE9uQ2xvc2UobmV3IEZpcmVzdG9yZUVycm9yKENvZGUuVU5BVkFJTEFCTEUsICdUaGUgb3BlcmF0aW9uIGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB1bmd1YXJkZWRFdmVudExpc3Rlbih3ZWJjaGFubmVsV3JhcHBlci5XZWJDaGFubmVsLkV2ZW50VHlwZS5NRVNTQUdFLCBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgICAgIGlmICghY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbXNnRGF0YSA9IG1zZy5kYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KCEhbXNnRGF0YSwgJ0dvdCBhIHdlYmNoYW5uZWwgbWVzc2FnZSB3aXRob3V0IGRhdGEuJyk7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPKGIvMzUxNDM4OTEpOiBUaGVyZSBpcyBhIGJ1ZyBpbiBPbmUgUGxhdGZvcm0gdGhhdCBjYXVzZWQgZXJyb3JzXHJcbiAgICAgICAgICAgICAgICAvLyAoYW5kIG9ubHkgZXJyb3JzKSB0byBiZSB3cmFwcGVkIGluIGFuIGV4dHJhIGFycmF5LiBUbyBiZSBmb3J3YXJkXHJcbiAgICAgICAgICAgICAgICAvLyBjb21wYXRpYmxlIHdpdGggdGhlIGJ1ZyB3ZSBuZWVkIHRvIGNoZWNrIGVpdGhlciBjb25kaXRpb24uIFRoZSBsYXR0ZXJcclxuICAgICAgICAgICAgICAgIC8vIGNhbiBiZSByZW1vdmVkIG9uY2UgdGhlIGZpeCBoYXMgYmVlbiByb2xsZWQgb3V0LlxyXG4gICAgICAgICAgICAgICAgdmFyIGVycm9yJCQxID0gXHJcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IG1zZ0RhdGEuZXJyb3IgaXMgbm90IHR5cGVkLlxyXG4gICAgICAgICAgICAgICAgbXNnRGF0YS5lcnJvciB8fCAobXNnRGF0YVswXSAmJiBtc2dEYXRhWzBdLmVycm9yKTtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvciQkMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUcsICdXZWJDaGFubmVsIHJlY2VpdmVkIGVycm9yOicsIGVycm9yJCQxKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBlcnJvci5zdGF0dXMgd2lsbCBiZSBhIHN0cmluZyBsaWtlICdPSycgb3IgJ05PVF9GT1VORCcuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXR1c18yID0gZXJyb3IkJDEuc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2RlID0gbWFwQ29kZUZyb21ScGNTdGF0dXMoc3RhdHVzXzIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gZXJyb3IkJDEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBDb2RlLklOVEVSTkFMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVbmtub3duIGVycm9yIHN0YXR1czogJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzXzIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgd2l0aCBtZXNzYWdlICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yJCQxLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgY2xvc2VkIHNvIG5vIGZ1cnRoZXIgZXZlbnRzIGFyZSBwcm9wYWdhdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBzdHJlYW1CcmlkZ2UuY2FsbE9uQ2xvc2UobmV3IEZpcmVzdG9yZUVycm9yKGNvZGUsIG1lc3NhZ2UpKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHLCAnV2ViQ2hhbm5lbCByZWNlaXZlZDonLCBtc2dEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBzdHJlYW1CcmlkZ2UuY2FsbE9uTWVzc2FnZShtc2dEYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBUZWNobmljYWxseSB3ZSBjb3VsZC9zaG91bGQgd2FpdCBmb3IgdGhlIFdlYkNoYW5uZWwgb3BlbmVkIGV2ZW50LFxyXG4gICAgICAgICAgICAvLyBidXQgYmVjYXVzZSB3ZSB3YW50IHRvIHNlbmQgdGhlIGZpcnN0IG1lc3NhZ2Ugd2l0aCB0aGUgV2ViQ2hhbm5lbFxyXG4gICAgICAgICAgICAvLyBoYW5kc2hha2Ugd2UgcHJldGVuZCB0aGUgY2hhbm5lbCBvcGVuZWQgaGVyZSAoYXN5bmNocm9ub3VzbHkpLCBhbmRcclxuICAgICAgICAgICAgLy8gdGhlbiBkZWxheSB0aGUgYWN0dWFsIG9wZW4gdW50aWwgdGhlIGZpcnN0IG1lc3NhZ2UgaXMgc2VudC5cclxuICAgICAgICAgICAgc3RyZWFtQnJpZGdlLmNhbGxPbk9wZW4oKTtcclxuICAgICAgICB9LCAwKTtcclxuICAgICAgICByZXR1cm4gc3RyZWFtQnJpZGdlO1xyXG4gICAgfTtcclxuICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcclxuICAgIFdlYkNoYW5uZWxDb25uZWN0aW9uLnByb3RvdHlwZS5tYWtlVXJsID0gZnVuY3Rpb24gKHJwY05hbWUpIHtcclxuICAgICAgICB2YXIgdXJsUnBjTmFtZSA9IFJQQ19OQU1FX1JFU1RfTUFQUElOR1tycGNOYW1lXTtcclxuICAgICAgICBhc3NlcnQodXJsUnBjTmFtZSAhPT0gdW5kZWZpbmVkLCAnVW5rbm93biBSRVNUIG1hcHBpbmcgZm9yOiAnICsgcnBjTmFtZSk7XHJcbiAgICAgICAgdmFyIHVybCA9IFt0aGlzLmJhc2VVcmwsICcvJywgUlBDX1VSTF9WRVJTSU9OXTtcclxuICAgICAgICB1cmwucHVzaCgnL3Byb2plY3RzLycpO1xyXG4gICAgICAgIHVybC5wdXNoKHRoaXMuZGF0YWJhc2VJZC5wcm9qZWN0SWQpO1xyXG4gICAgICAgIHVybC5wdXNoKCcvZGF0YWJhc2VzLycpO1xyXG4gICAgICAgIHVybC5wdXNoKHRoaXMuZGF0YWJhc2VJZC5kYXRhYmFzZSk7XHJcbiAgICAgICAgdXJsLnB1c2goJy9kb2N1bWVudHMnKTtcclxuICAgICAgICB1cmwucHVzaCgnOicpO1xyXG4gICAgICAgIHVybC5wdXNoKHVybFJwY05hbWUpO1xyXG4gICAgICAgIHJldHVybiB1cmwuam9pbignJyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdlYkNoYW5uZWxDb25uZWN0aW9uO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIEJyb3dzZXJQbGF0Zm9ybSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJyb3dzZXJQbGF0Zm9ybSgpIHtcclxuICAgICAgICB0aGlzLmVtcHR5Qnl0ZVN0cmluZyA9ICcnO1xyXG4gICAgICAgIHRoaXMuYmFzZTY0QXZhaWxhYmxlID0gdHlwZW9mIGF0b2IgIT09ICd1bmRlZmluZWQnO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJyb3dzZXJQbGF0Zm9ybS5wcm90b3R5cGUsIFwiZG9jdW1lbnRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogbnVsbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCcm93c2VyUGxhdGZvcm0ucHJvdG90eXBlLCBcIndpbmRvd1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IG51bGw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBCcm93c2VyUGxhdGZvcm0ucHJvdG90eXBlLmxvYWRDb25uZWN0aW9uID0gZnVuY3Rpb24gKGRhdGFiYXNlSW5mbykge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IFdlYkNoYW5uZWxDb25uZWN0aW9uKGRhdGFiYXNlSW5mbykpO1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJQbGF0Zm9ybS5wcm90b3R5cGUubmV3U2VyaWFsaXplciA9IGZ1bmN0aW9uIChkYXRhYmFzZUlkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKc29uUHJvdG9TZXJpYWxpemVyKGRhdGFiYXNlSWQsIHsgdXNlUHJvdG8zSnNvbjogdHJ1ZSB9KTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyUGxhdGZvcm0ucHJvdG90eXBlLmZvcm1hdEpTT04gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJQbGF0Zm9ybS5wcm90b3R5cGUuYXRvYiA9IGZ1bmN0aW9uIChlbmNvZGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGF0b2IoZW5jb2RlZCk7XHJcbiAgICB9O1xyXG4gICAgQnJvd3NlclBsYXRmb3JtLnByb3RvdHlwZS5idG9hID0gZnVuY3Rpb24gKHJhdykge1xyXG4gICAgICAgIHJldHVybiBidG9hKHJhdyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJyb3dzZXJQbGF0Zm9ybTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGlzIGNvZGUgbmVlZHMgdG8gcnVuIGJlZm9yZSBGaXJlc3RvcmUgaXMgdXNlZC4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgaW5cclxuICogc2V2ZXJhbCB3YXlzOlxyXG4gKiAgIDEpIFRocm91Z2ggdGhlIEpTQ29tcGlsZXIgY29tcGlsaW5nIHRoaXMgY29kZSBhbmQgdGhlbiAoYXV0b21hdGljYWxseSlcclxuICogICAgICBleGVjdXRpbmcgaXQgYmVmb3JlIGV4cG9ydGluZyB0aGUgRmlyZXN0b3JlIHN5bWJvbHMuXHJcbiAqICAgMikgVGhyb3VnaCBpbXBvcnRpbmcgdGhpcyBtb2R1bGUgZmlyc3QgaW4gYSBGaXJlc3RvcmUgbWFpbiBtb2R1bGVcclxuICovXHJcblBsYXRmb3JtU3VwcG9ydC5zZXRQbGF0Zm9ybShuZXcgQnJvd3NlclBsYXRmb3JtKCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFBlcnNpc3RlbmNlUHJvbWlzZTw+IGlzIGVzc2VudGlhbGx5IGEgcmUtaW1wbGVtZW50YXRpb24gb2YgUHJvbWlzZTw+IGV4Y2VwdFxyXG4gKiBpdCBoYXMgYSAubmV4dCgpIG1ldGhvZCBpbnN0ZWFkIG9mIC50aGVuKCkgYW5kIC5uZXh0KCkgYW5kIC5jYXRjaCgpIGNhbGxiYWNrc1xyXG4gKiBhcmUgZXhlY3V0ZWQgc3luY2hyb25vdXNseSB3aGVuIGEgUGVyc2lzdGVuY2VQcm9taXNlIHJlc29sdmVzIHJhdGhlciB0aGFuXHJcbiAqIGFzeW5jaHJvbm91c2x5IChQcm9taXNlPD4gaW1wbGVtZW50YXRpb25zIHVzZSBzZXRJbW1lZGlhdGUoKSBvciBzaW1pbGFyKS5cclxuICpcclxuICogVGhpcyBpcyBuZWNlc3NhcnkgdG8gaW50ZXJvcGVyYXRlIHdpdGggSW5kZXhlZERCIHdoaWNoIHdpbGwgYXV0b21hdGljYWxseVxyXG4gKiBjb21taXQgdHJhbnNhY3Rpb25zIGlmIGNvbnRyb2wgaXMgcmV0dXJuZWQgdG8gdGhlIGV2ZW50IGxvb3Agd2l0aG91dFxyXG4gKiBzeW5jaHJvbm91c2x5IGluaXRpYXRpbmcgYW5vdGhlciBvcGVyYXRpb24gb24gdGhlIHRyYW5zYWN0aW9uLlxyXG4gKlxyXG4gKiBOT1RFOiAudGhlbigpIGFuZCAuY2F0Y2goKSBvbmx5IGFsbG93IGEgc2luZ2xlIGNvbnN1bWVyLCB1bmxpa2Ugbm9ybWFsXHJcbiAqIFByb21pc2VzLlxyXG4gKi9cclxudmFyIFBlcnNpc3RlbmNlUHJvbWlzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBlcnNpc3RlbmNlUHJvbWlzZShjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gTk9URTogbmV4dC9jYXRjaENhbGxiYWNrIHdpbGwgYWx3YXlzIHBvaW50IHRvIG91ciBvd24gd3JhcHBlciBmdW5jdGlvbnMsXHJcbiAgICAgICAgLy8gbm90IHRoZSB1c2VyJ3MgcmF3IG5leHQoKSBvciBjYXRjaCgpIGNhbGxiYWNrcy5cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IEFjY2VwdCBhbnkgcmVzdWx0IHR5cGUgZm9yIHRoZSBuZXh0IGNhbGwgaW4gdGhlIFByb21pc2UgY2hhaW4uXHJcbiAgICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgQWNjZXB0IGFueSByZXN1bHQgdHlwZSBmb3IgdGhlIGVycm9yIGhhbmRsZXIuXHJcbiAgICAgICAgdGhpcy5jYXRjaENhbGxiYWNrID0gbnVsbDtcclxuICAgICAgICAvLyBXaGVuIHRoZSBvcGVyYXRpb24gcmVzb2x2ZXMsIHdlJ2xsIHNldCByZXN1bHQgb3IgZXJyb3IgYW5kIG1hcmsgaXNEb25lLlxyXG4gICAgICAgIHRoaXMucmVzdWx0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5pc0RvbmUgPSBmYWxzZTtcclxuICAgICAgICAvLyBTZXQgdG8gdHJ1ZSB3aGVuIC50aGVuKCkgb3IgLmNhdGNoKCkgYXJlIGNhbGxlZCBhbmQgcHJldmVudHMgYWRkaXRpb25hbFxyXG4gICAgICAgIC8vIGNoYWluaW5nLlxyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tBdHRhY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNhbGxiYWNrKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5pc0RvbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBfdGhpcy5yZXN1bHQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLm5leHRDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgLy8gdmFsdWUgc2hvdWxkIGJlIGRlZmluZWQgdW5sZXNzIFQgaXMgVm9pZCwgYnV0IHdlIGNhbid0IGV4cHJlc3NcclxuICAgICAgICAgICAgICAgIC8vIHRoYXQgaW4gdGhlIHR5cGUgc3lzdGVtLlxyXG4gICAgICAgICAgICAgICAgX3RoaXMubmV4dENhbGxiYWNrKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBfdGhpcy5pc0RvbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBfdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuY2F0Y2hDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2F0Y2hDYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFBlcnNpc3RlbmNlUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uZXh0KHVuZGVmaW5lZCwgZm4pO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbmNlUHJvbWlzZS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChuZXh0Rm4sIGNhdGNoRm4pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmNhbGxiYWNrQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgZmFpbCgnQ2FsbGVkIG5leHQoKSBvciBjYXRjaCgpIHR3aWNlIGZvciBQZXJzaXN0ZW5jZVByb21pc2UnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0F0dGFjaGVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5pc0RvbmUpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53cmFwU3VjY2VzcyhuZXh0Rm4sIHRoaXMucmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndyYXBGYWlsdXJlKGNhdGNoRm4sIHRoaXMuZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBlcnNpc3RlbmNlUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy53cmFwU3VjY2VzcyhuZXh0Rm4sIHZhbHVlKS5uZXh0KHJlc29sdmUsIHJlamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2F0Y2hDYWxsYmFjayA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLndyYXBGYWlsdXJlKGNhdGNoRm4sIGVycm9yKS5uZXh0KHJlc29sdmUsIHJlamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVuY2VQcm9taXNlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5uZXh0KHJlc29sdmUsIHJlamVjdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVuY2VQcm9taXNlLnByb3RvdHlwZS53cmFwVXNlckZ1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZuKCk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQZXJzaXN0ZW5jZVByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlamVjdChlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVuY2VQcm9taXNlLnByb3RvdHlwZS53cmFwU3VjY2VzcyA9IGZ1bmN0aW9uIChuZXh0Rm4sIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKG5leHRGbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy53cmFwVXNlckZ1bmN0aW9uKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5leHRGbih2YWx1ZSk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBuZXh0Rm4sIHRoZW4gUiBtdXN0IGJlIHRoZSBzYW1lIGFzIFQgYnV0IHdlXHJcbiAgICAgICAgICAgIC8vIGNhbid0IGV4cHJlc3MgdGhhdCBpbiB0aGUgdHlwZSBzeXN0ZW0uXHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcclxuICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVuY2VQcm9taXNlLnByb3RvdHlwZS53cmFwRmFpbHVyZSA9IGZ1bmN0aW9uIChjYXRjaEZuLCBlcnJvcikge1xyXG4gICAgICAgIGlmIChjYXRjaEZuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndyYXBVc2VyRnVuY3Rpb24oZnVuY3Rpb24gKCkgeyByZXR1cm4gY2F0Y2hGbihlcnJvcik7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBlcnNpc3RlbmNlUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW5jZVByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW5jZVByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yID0gZnVuY3Rpb24gKFxyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBBY2NlcHQgYWxsIFByb21pc2UgdHlwZXMgaW4gd2FpdEZvcigpLlxyXG4gICAgYWxsKSB7XHJcbiAgICAgICAgdmFyIGV4cGVjdGVkQ291bnQgPSBhbGwubGVuZ3RoO1xyXG4gICAgICAgIGlmIChleHBlY3RlZENvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzb2x2ZWRDb3VudCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW5jZVByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFsbF8xID0gYWxsOyBfaSA8IGFsbF8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSBhbGxfMVtfaV07XHJcbiAgICAgICAgICAgICAgICBwcm9taXNlLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICsrcmVzb2x2ZWRDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWRDb3VudCA9PT0gZXhwZWN0ZWRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVuY2VQcm9taXNlLm1hcCA9IGZ1bmN0aW9uIChhbGwpIHtcclxuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xyXG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgcHJvbWlzZXNbaV0gPSBhbGxbaV0ubmV4dChmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRzW2ldID0gcmVzdWx0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihwcm9taXNlcykubmV4dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoID0gZnVuY3Rpb24gKGVsZW1lbnRzLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBwID0gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB2YXIgX2xvb3BfMiA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHAgPSBwLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGJhY2soZWxlbWVudCk7IH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBlbGVtZW50c18xID0gZWxlbWVudHM7IF9pIDwgZWxlbWVudHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c18xW19pXTtcclxuICAgICAgICAgICAgX2xvb3BfMihlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBIGdhcmJhZ2UgY29sbGVjdG9yIGltcGxlbWVudGF0aW9uIHRoYXQgZWFnZXJseSBjb2xsZWN0cyBkb2N1bWVudHMgYXMgc29vbiBhc1xyXG4gKiB0aGV5J3JlIG5vIGxvbmdlciByZWZlcmVuY2VkIGluIGFueSBvZiBpdHMgcmVnaXN0ZXJlZCBHYXJiYWdlU291cmNlcy5cclxuICpcclxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBrZWVwcyB0cmFjayBvZiBhIHNldCBvZiBrZXlzIHRoYXQgYXJlIHBvdGVudGlhbGx5IGdhcmJhZ2VcclxuICogd2l0aG91dCBrZWVwaW5nIGFuIGV4YWN0IHJlZmVyZW5jZSBjb3VudC4gRHVyaW5nIGNvbGxlY3RHYXJiYWdlLCB0aGVcclxuICogY29sbGVjdG9yIHZlcmlmaWVzIHRoYXQgYWxsIHBvdGVudGlhbCBnYXJiYWdlIGtleXMgYWN0dWFsbHkgaGF2ZSBub1xyXG4gKiByZWZlcmVuY2VzIGJ5IGNvbnN1bHRpbmcgaXRzIGxpc3Qgb2YgZ2FyYmFnZSBzb3VyY2VzLlxyXG4gKi9cclxudmFyIEVhZ2VyR2FyYmFnZUNvbGxlY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVhZ2VyR2FyYmFnZUNvbGxlY3RvcigpIHtcclxuICAgICAgICB0aGlzLmlzRWFnZXIgPSB0cnVlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBnYXJiYWdlIGNvbGxlY3RpYmxlIHNvdXJjZXMgdG8gZG91YmxlLWNoZWNrIGR1cmluZyBnYXJiYWdlIGNvbGxlY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBzZXQgb2YgcG90ZW50aWFsbHkgZ2FyYmFnZSBrZXlzLlxyXG4gICAgICAgICAqIFBPUlRJTkcgTk9URTogVGhpcyB3b3VsZCBiZSBhIG11dGFibGUgc2V0IGlmIEphdmFzY3JpcHQgaGFkIG9uZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnBvdGVudGlhbEdhcmJhZ2UgPSBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgfVxyXG4gICAgRWFnZXJHYXJiYWdlQ29sbGVjdG9yLnByb3RvdHlwZS5hZGRHYXJiYWdlU291cmNlID0gZnVuY3Rpb24gKGdhcmJhZ2VTb3VyY2UpIHtcclxuICAgICAgICB0aGlzLnNvdXJjZXMucHVzaChnYXJiYWdlU291cmNlKTtcclxuICAgICAgICBnYXJiYWdlU291cmNlLnNldEdhcmJhZ2VDb2xsZWN0b3IodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgRWFnZXJHYXJiYWdlQ29sbGVjdG9yLnByb3RvdHlwZS5yZW1vdmVHYXJiYWdlU291cmNlID0gZnVuY3Rpb24gKGdhcmJhZ2VTb3VyY2UpIHtcclxuICAgICAgICB0aGlzLnNvdXJjZXMuc3BsaWNlKHRoaXMuc291cmNlcy5pbmRleE9mKGdhcmJhZ2VTb3VyY2UpLCAxKTtcclxuICAgICAgICBnYXJiYWdlU291cmNlLnNldEdhcmJhZ2VDb2xsZWN0b3IobnVsbCk7XHJcbiAgICB9O1xyXG4gICAgRWFnZXJHYXJiYWdlQ29sbGVjdG9yLnByb3RvdHlwZS5hZGRQb3RlbnRpYWxHYXJiYWdlS2V5ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHRoaXMucG90ZW50aWFsR2FyYmFnZSA9IHRoaXMucG90ZW50aWFsR2FyYmFnZS5hZGQoa2V5KTtcclxuICAgIH07XHJcbiAgICBFYWdlckdhcmJhZ2VDb2xsZWN0b3IucHJvdG90eXBlLmNvbGxlY3RHYXJiYWdlID0gZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByb21pc2VzID0gW107XHJcbiAgICAgICAgdmFyIGdhcmJhZ2VLZXlzID0gZG9jdW1lbnRLZXlTZXQoKTtcclxuICAgICAgICB0aGlzLnBvdGVudGlhbEdhcmJhZ2UuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBoYXNSZWZzUHJvbWlzZSA9IF90aGlzLmRvY3VtZW50SGFzQW55UmVmZXJlbmNlcyh0eG4sIGtleSk7XHJcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goaGFzUmVmc1Byb21pc2UubmV4dChmdW5jdGlvbiAoaGFzUmVmcykge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHJlZmVyZW5jZXMsIGdldCB0aGUga2V5LlxyXG4gICAgICAgICAgICAgICAgaWYgKCFoYXNSZWZzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FyYmFnZUtleXMgPSBnYXJiYWdlS2V5cy5hZGQoa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gQ2xlYXIgbG9jYWxseSByZXRhaW5lZCBwb3RlbnRpYWwga2V5cyBhbmQgcmV0dXJuZWQgY29uZmlybWVkIGdhcmJhZ2UuXHJcbiAgICAgICAgdGhpcy5wb3RlbnRpYWxHYXJiYWdlID0gZG9jdW1lbnRLZXlTZXQoKTtcclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3IocHJvbWlzZXMpLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2FyYmFnZUtleXM7IH0pO1xyXG4gICAgfTtcclxuICAgIEVhZ2VyR2FyYmFnZUNvbGxlY3Rvci5wcm90b3R5cGUuZG9jdW1lbnRIYXNBbnlSZWZlcmVuY2VzID0gZnVuY3Rpb24gKHR4biwga2V5KSB7XHJcbiAgICAgICAgdmFyIGluaXRpYWwgPSBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc1xyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZS5jb250YWluc0tleSh0eG4sIGtleSk7IH07IH0pXHJcbiAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHByb21pc2UsIG5leHRQcm9taXNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlLm5leHQoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0UHJvbWlzZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCBpbml0aWFsKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRWFnZXJHYXJiYWdlQ29sbGVjdG9yO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIGBMaXN0ZW5TZXF1ZW5jZWAgaXMgYSBtb25vdG9uaWMgc2VxdWVuY2UuIEl0IGlzIGluaXRpYWxpemVkIHdpdGggYSBtaW5pbXVtIHZhbHVlIHRvXHJcbiAqIGV4Y2VlZC4gQWxsIHN1YnNlcXVlbnQgY2FsbHMgdG8gbmV4dCB3aWxsIHJldHVybiBpbmNyZWFzaW5nIHZhbHVlcy4gSWYgcHJvdmlkZWQgd2l0aCBhXHJcbiAqIGBTZXF1ZW5jZU51bWJlclN5bmNlcmAsIGl0IHdpbGwgYWRkaXRpb25hbGx5IGJ1bXAgaXRzIG5leHQgdmFsdWUgd2hlbiB0b2xkIG9mIGEgbmV3IHZhbHVlLCBhc1xyXG4gKiB3ZWxsIGFzIHdyaXRlIG91dCBzZXF1ZW5jZSBudW1iZXJzIHRoYXQgaXQgcHJvZHVjZXMgdmlhIGBuZXh0KClgLlxyXG4gKi9cclxudmFyIExpc3RlblNlcXVlbmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTGlzdGVuU2VxdWVuY2UocHJldmlvdXNWYWx1ZSwgc2VxdWVuY2VOdW1iZXJTeW5jZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVmFsdWU7XHJcbiAgICAgICAgaWYgKHNlcXVlbmNlTnVtYmVyU3luY2VyKSB7XHJcbiAgICAgICAgICAgIHNlcXVlbmNlTnVtYmVyU3luY2VyLnNlcXVlbmNlTnVtYmVySGFuZGxlciA9IGZ1bmN0aW9uIChzZXF1ZW5jZU51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldFByZXZpb3VzVmFsdWUoc2VxdWVuY2VOdW1iZXIpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlTmV3U2VxdWVuY2VOdW1iZXIgPSBmdW5jdGlvbiAoc2VxdWVuY2VOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXF1ZW5jZU51bWJlclN5bmNlci53cml0ZVNlcXVlbmNlTnVtYmVyKHNlcXVlbmNlTnVtYmVyKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBMaXN0ZW5TZXF1ZW5jZS5wcm90b3R5cGUuc2V0UHJldmlvdXNWYWx1ZSA9IGZ1bmN0aW9uIChleHRlcm5hbFByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSBNYXRoLm1heChleHRlcm5hbFByZXZpb3VzVmFsdWUsIHRoaXMucHJldmlvdXNWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXNWYWx1ZTtcclxuICAgIH07XHJcbiAgICBMaXN0ZW5TZXF1ZW5jZS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbmV4dFZhbHVlID0gKyt0aGlzLnByZXZpb3VzVmFsdWU7XHJcbiAgICAgICAgaWYgKHRoaXMud3JpdGVOZXdTZXF1ZW5jZU51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlTmV3U2VxdWVuY2VOdW1iZXIobmV4dFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHRWYWx1ZTtcclxuICAgIH07XHJcbiAgICBMaXN0ZW5TZXF1ZW5jZS5JTlZBTElEID0gLTE7XHJcbiAgICByZXR1cm4gTGlzdGVuU2VxdWVuY2U7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgRGVmZXJyZWQkMSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlZmVycmVkKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgX3RoaXMucmVqZWN0ID0gcmVqZWN0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERlZmVycmVkO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFdlbGxrbm93biBcInRpbWVyXCIgSURzIHVzZWQgd2hlbiBzY2hlZHVsaW5nIGRlbGF5ZWQgb3BlcmF0aW9ucyBvbiB0aGVcclxuICogQXN5bmNRdWV1ZS4gVGhlc2UgSURzIGNhbiB0aGVuIGJlIHVzZWQgZnJvbSB0ZXN0cyB0byBjaGVjayBmb3IgdGhlIHByZXNlbmNlXHJcbiAqIG9mIG9wZXJhdGlvbnMgb3IgdG8gcnVuIHRoZW0gZWFybHkuXHJcbiAqXHJcbiAqIFRoZSBzdHJpbmcgdmFsdWVzIGFyZSB1c2VkIHdoZW4gZW5jb2RpbmcgdGhlc2UgdGltZXIgSURzIGluIEpTT04gc3BlYyB0ZXN0cy5cclxuICovXHJcbnZhciBUaW1lcklkO1xyXG4oZnVuY3Rpb24gKFRpbWVySWQpIHtcclxuICAgIC8qKiBBbGwgY2FuIGJlIHVzZWQgd2l0aCBydW5EZWxheWVkT3BlcmF0aW9uc0Vhcmx5KCkgdG8gcnVuIGFsbCB0aW1lcnMuICovXHJcbiAgICBUaW1lcklkW1wiQWxsXCJdID0gXCJhbGxcIjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZvbGxvd2luZyA0IHRpbWVycyBhcmUgdXNlZCBpbiBwZXJzaXN0ZW50X3N0cmVhbS50cyBmb3IgdGhlIGxpc3RlbiBhbmRcclxuICAgICAqIHdyaXRlIHN0cmVhbXMuIFRoZSBcIklkbGVcIiB0aW1lciBpcyB1c2VkIHRvIGNsb3NlIHRoZSBzdHJlYW0gZHVlIHRvXHJcbiAgICAgKiBpbmFjdGl2aXR5LiBUaGUgXCJDb25uZWN0aW9uQmFja29mZlwiIHRpbWVyIGlzIHVzZWQgdG8gcmVzdGFydCBhIHN0cmVhbSBvbmNlXHJcbiAgICAgKiB0aGUgYXBwcm9wcmlhdGUgYmFja29mZiBkZWxheSBoYXMgZWxhcHNlZC5cclxuICAgICAqL1xyXG4gICAgVGltZXJJZFtcIkxpc3RlblN0cmVhbUlkbGVcIl0gPSBcImxpc3Rlbl9zdHJlYW1faWRsZVwiO1xyXG4gICAgVGltZXJJZFtcIkxpc3RlblN0cmVhbUNvbm5lY3Rpb25CYWNrb2ZmXCJdID0gXCJsaXN0ZW5fc3RyZWFtX2Nvbm5lY3Rpb25fYmFja29mZlwiO1xyXG4gICAgVGltZXJJZFtcIldyaXRlU3RyZWFtSWRsZVwiXSA9IFwid3JpdGVfc3RyZWFtX2lkbGVcIjtcclxuICAgIFRpbWVySWRbXCJXcml0ZVN0cmVhbUNvbm5lY3Rpb25CYWNrb2ZmXCJdID0gXCJ3cml0ZV9zdHJlYW1fY29ubmVjdGlvbl9iYWNrb2ZmXCI7XHJcbiAgICAvKipcclxuICAgICAqIEEgdGltZXIgdXNlZCBpbiBvbmxpbmVfc3RhdGVfdHJhY2tlci50cyB0byB0cmFuc2l0aW9uIGZyb21cclxuICAgICAqIE9ubGluZVN0YXRlLlVua25vd24gdG8gT2ZmbGluZSBhZnRlciBhIHNldCB0aW1lb3V0LCByYXRoZXIgdGhhbiB3YWl0aW5nXHJcbiAgICAgKiBpbmRlZmluaXRlbHkgZm9yIHN1Y2Nlc3Mgb3IgZmFpbHVyZS5cclxuICAgICAqL1xyXG4gICAgVGltZXJJZFtcIk9ubGluZVN0YXRlVGltZW91dFwiXSA9IFwib25saW5lX3N0YXRlX3RpbWVvdXRcIjtcclxuICAgIC8qKlxyXG4gICAgICogQSB0aW1lciB1c2VkIHRvIHVwZGF0ZSB0aGUgY2xpZW50IG1ldGFkYXRhIGluIEluZGV4ZWREYiwgd2hpY2ggaXMgdXNlZFxyXG4gICAgICogdG8gZGV0ZXJtaW5lIHRoZSBwcmltYXJ5IGxlYXNlaG9sZGVyLlxyXG4gICAgICovXHJcbiAgICBUaW1lcklkW1wiQ2xpZW50TWV0YWRhdGFSZWZyZXNoXCJdID0gXCJjbGllbnRfbWV0YWRhdGFfcmVmcmVzaFwiO1xyXG59KShUaW1lcklkIHx8IChUaW1lcklkID0ge30pKTtcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gb3BlcmF0aW9uIHNjaGVkdWxlZCB0byBiZSBydW4gaW4gdGhlIGZ1dHVyZSBvbiBhbiBBc3luY1F1ZXVlLlxyXG4gKlxyXG4gKiBJdCBpcyBjcmVhdGVkIHZpYSBEZWxheWVkT3BlcmF0aW9uLmNyZWF0ZUFuZFNjaGVkdWxlKCkuXHJcbiAqXHJcbiAqIFN1cHBvcnRzIGNhbmNlbGxhdGlvbiAodmlhIGNhbmNlbCgpKSBhbmQgZWFybHkgZXhlY3V0aW9uICh2aWEgc2tpcERlbGF5KCkpLlxyXG4gKi9cclxudmFyIERlbGF5ZWRPcGVyYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEZWxheWVkT3BlcmF0aW9uKGFzeW5jUXVldWUsIHRpbWVySWQsIHRhcmdldFRpbWVNcywgb3AsIHJlbW92YWxDYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZSA9IGFzeW5jUXVldWU7XHJcbiAgICAgICAgdGhpcy50aW1lcklkID0gdGltZXJJZDtcclxuICAgICAgICB0aGlzLnRhcmdldFRpbWVNcyA9IHRhcmdldFRpbWVNcztcclxuICAgICAgICB0aGlzLm9wID0gb3A7XHJcbiAgICAgICAgdGhpcy5yZW1vdmFsQ2FsbGJhY2sgPSByZW1vdmFsQ2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCQxKCk7XHJcbiAgICAgICAgdGhpcy50aGVuID0gdGhpcy5kZWZlcnJlZC5wcm9taXNlLnRoZW4uYmluZCh0aGlzLmRlZmVycmVkLnByb21pc2UpO1xyXG4gICAgICAgIHRoaXMuY2F0Y2ggPSB0aGlzLmRlZmVycmVkLnByb21pc2UuY2F0Y2guYmluZCh0aGlzLmRlZmVycmVkLnByb21pc2UpO1xyXG4gICAgICAgIC8vIEl0J3Mgbm9ybWFsIGZvciB0aGUgZGVmZXJyZWQgcHJvbWlzZSB0byBiZSBjYW5jZWxlZCAoZHVlIHRvIGNhbmNlbGxhdGlvbilcclxuICAgICAgICAvLyBhbmQgc28gd2UgYXR0YWNoIGEgZHVtbXkgY2F0Y2ggY2FsbGJhY2sgdG8gYXZvaWRcclxuICAgICAgICAvLyAnVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbldhcm5pbmcnIGxvZyBzcGFtLlxyXG4gICAgICAgIHRoaXMuZGVmZXJyZWQucHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgRGVsYXllZE9wZXJhdGlvbiB0aGF0IGhhcyBiZWVuIHNjaGVkdWxlZCB0byBiZVxyXG4gICAgICogZXhlY3V0ZWQgb24gdGhlIHByb3ZpZGVkIGFzeW5jUXVldWUgYWZ0ZXIgdGhlIHByb3ZpZGVkIGRlbGF5TXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGFzeW5jUXVldWUgVGhlIHF1ZXVlIHRvIHNjaGVkdWxlIHRoZSBvcGVyYXRpb24gb24uXHJcbiAgICAgKiBAcGFyYW0gaWQgQSBUaW1lciBJRCBpZGVudGlmeWluZyB0aGUgdHlwZSBvZiBvcGVyYXRpb24gdGhpcyBpcy5cclxuICAgICAqIEBwYXJhbSBkZWxheU1zIFRoZSBkZWxheSAobXMpIGJlZm9yZSB0aGUgb3BlcmF0aW9uIHNob3VsZCBiZSBzY2hlZHVsZWQuXHJcbiAgICAgKiBAcGFyYW0gb3AgVGhlIG9wZXJhdGlvbiB0byBydW4uXHJcbiAgICAgKiBAcGFyYW0gcmVtb3ZhbENhbGxiYWNrIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHN5bmNocm9ub3VzbHkgb25jZSB0aGVcclxuICAgICAqICAgb3BlcmF0aW9uIGlzIGV4ZWN1dGVkIG9yIGNhbmNlbGVkLCBub3RpZnlpbmcgdGhlIEFzeW5jUXVldWUgdG8gcmVtb3ZlIGl0XHJcbiAgICAgKiAgIGZyb20gaXRzIGRlbGF5ZWRPcGVyYXRpb25zIGxpc3QuXHJcbiAgICAgKiAgIFBPUlRJTkcgTk9URTogVGhpcyBleGlzdHMgdG8gcHJldmVudCBtYWtpbmcgcmVtb3ZlRGVsYXllZE9wZXJhdGlvbigpIGFuZFxyXG4gICAgICogICB0aGUgRGVsYXllZE9wZXJhdGlvbiBjbGFzcyBwdWJsaWMuXHJcbiAgICAgKi9cclxuICAgIERlbGF5ZWRPcGVyYXRpb24uY3JlYXRlQW5kU2NoZWR1bGUgPSBmdW5jdGlvbiAoYXN5bmNRdWV1ZSwgdGltZXJJZCwgZGVsYXlNcywgb3AsIHJlbW92YWxDYWxsYmFjaykge1xyXG4gICAgICAgIHZhciB0YXJnZXRUaW1lID0gRGF0ZS5ub3coKSArIGRlbGF5TXM7XHJcbiAgICAgICAgdmFyIGRlbGF5ZWRPcCA9IG5ldyBEZWxheWVkT3BlcmF0aW9uKGFzeW5jUXVldWUsIHRpbWVySWQsIHRhcmdldFRpbWUsIG9wLCByZW1vdmFsQ2FsbGJhY2spO1xyXG4gICAgICAgIGRlbGF5ZWRPcC5zdGFydChkZWxheU1zKTtcclxuICAgICAgICByZXR1cm4gZGVsYXllZE9wO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIHRoZSB0aW1lci4gVGhpcyBpcyBjYWxsZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgY29uc3RydWN0aW9uIGJ5XHJcbiAgICAgKiBjcmVhdGVBbmRTY2hlZHVsZSgpLlxyXG4gICAgICovXHJcbiAgICBEZWxheWVkT3BlcmF0aW9uLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIChkZWxheU1zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnRpbWVySGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5oYW5kbGVEZWxheUVsYXBzZWQoKTsgfSwgZGVsYXlNcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBRdWV1ZXMgdGhlIG9wZXJhdGlvbiB0byBydW4gaW1tZWRpYXRlbHkgKGlmIGl0IGhhc24ndCBhbHJlYWR5IGJlZW4gcnVuIG9yXHJcbiAgICAgKiBjYW5jZWxlZCkuXHJcbiAgICAgKi9cclxuICAgIERlbGF5ZWRPcGVyYXRpb24ucHJvdG90eXBlLnNraXBEZWxheSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVEZWxheUVsYXBzZWQoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENhbmNlbHMgdGhlIG9wZXJhdGlvbiBpZiBpdCBoYXNuJ3QgYWxyZWFkeSBiZWVuIGV4ZWN1dGVkIG9yIGNhbmNlbGVkLiBUaGVcclxuICAgICAqIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZC5cclxuICAgICAqXHJcbiAgICAgKiBBcyBsb25nIGFzIHRoZSBvcGVyYXRpb24gaGFzIG5vdCB5ZXQgYmVlbiBydW4sIGNhbGxpbmcgY2FuY2VsKCkgcHJvdmlkZXMgYVxyXG4gICAgICogZ3VhcmFudGVlIHRoYXQgdGhlIG9wZXJhdGlvbiB3aWxsIG5vdCBiZSBydW4uXHJcbiAgICAgKi9cclxuICAgIERlbGF5ZWRPcGVyYXRpb24ucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICBpZiAodGhpcy50aW1lckhhbmRsZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkLnJlamVjdChuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5DQU5DRUxMRUQsICdPcGVyYXRpb24gY2FuY2VsbGVkJyArIChyZWFzb24gPyAnOiAnICsgcmVhc29uIDogJycpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlbGF5ZWRPcGVyYXRpb24ucHJvdG90eXBlLmhhbmRsZURlbGF5RWxhcHNlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnRpbWVySGFuZGxlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhclRpbWVvdXQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5vcCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5kZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIERlbGF5ZWRPcGVyYXRpb24ucHJvdG90eXBlLmNsZWFyVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy50aW1lckhhbmRsZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92YWxDYWxsYmFjayh0aGlzKTtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJIYW5kbGUpO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVySGFuZGxlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERlbGF5ZWRPcGVyYXRpb247XHJcbn0oKSk7XHJcbnZhciBBc3luY1F1ZXVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXN5bmNRdWV1ZSgpIHtcclxuICAgICAgICAvLyBUaGUgbGFzdCBwcm9taXNlIGluIHRoZSBxdWV1ZS5cclxuICAgICAgICB0aGlzLnRhaWwgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAvLyBPcGVyYXRpb25zIHNjaGVkdWxlZCB0byBiZSBxdWV1ZWQgaW4gdGhlIGZ1dHVyZS4gT3BlcmF0aW9ucyBhcmVcclxuICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgYWZ0ZXIgdGhleSBhcmUgcnVuIG9yIGNhbmNlbGVkLlxyXG4gICAgICAgIHRoaXMuZGVsYXllZE9wZXJhdGlvbnMgPSBbXTtcclxuICAgICAgICAvLyBGbGFnIHNldCB3aGlsZSB0aGVyZSdzIGFuIG91dHN0YW5kaW5nIEFzeW5jUXVldWUgb3BlcmF0aW9uLCB1c2VkIGZvclxyXG4gICAgICAgIC8vIGFzc2VydGlvbiBzYW5pdHktY2hlY2tzLlxyXG4gICAgICAgIHRoaXMub3BlcmF0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGUgcXVldWUgd2l0aG91dCB3YWl0aW5nIGZvciBpdCB0byBjb21wbGV0ZSAoaS5lLlxyXG4gICAgICogd2UgaWdub3JlIHRoZSBQcm9taXNlIHJlc3VsdCkuXHJcbiAgICAgKi9cclxuICAgIEFzeW5jUXVldWUucHJvdG90eXBlLmVucXVldWVBbmRGb3JnZXQgPSBmdW5jdGlvbiAob3ApIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICB0aGlzLmVucXVldWUob3ApO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyBvcGVyYXRpb24gdG8gdGhlIHF1ZXVlLiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcclxuICAgICAqIHdoZW4gdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgdGhlIG5ldyBvcGVyYXRpb24gaXMgKHdpdGggaXRzIHZhbHVlKS5cclxuICAgICAqL1xyXG4gICAgQXN5bmNRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZSA9IGZ1bmN0aW9uIChvcCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlOb3RGYWlsZWQoKTtcclxuICAgICAgICB2YXIgbmV3VGFpbCA9IHRoaXMudGFpbC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub3BlcmF0aW9uSW5Qcm9ncmVzcyA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiBvcCgpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yJCQxKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5mYWlsdXJlID0gZXJyb3IkJDE7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vcGVyYXRpb25JblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGVycm9yJCQxLnN0YWNrIHx8IGVycm9yJCQxLm1lc3NhZ2UgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICBlcnJvcignSU5URVJOQUwgVU5IQU5ETEVEIEVSUk9SOiAnLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIC8vIEVzY2FwZSB0aGUgcHJvbWlzZSBjaGFpbiBhbmQgdGhyb3cgdGhlIGVycm9yIGdsb2JhbGx5IHNvIHRoYXRcclxuICAgICAgICAgICAgICAgIC8vIGUuZy4gYW55IGdsb2JhbCBjcmFzaCByZXBvcnRpbmcgbGlicmFyeSBkZXRlY3RzIGFuZCByZXBvcnRzIGl0LlxyXG4gICAgICAgICAgICAgICAgLy8gKGJ1dCBub3QgZm9yIHNpbXVsYXRlZCBlcnJvcnMgaW4gb3VyIHRlc3RzIHNpbmNlIHRoaXMgYnJlYWtzIG1vY2hhKVxyXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaW5kZXhPZignRmlyZXN0b3JlIFRlc3QgU2ltdWxhdGVkIEVycm9yJykgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yJCQxO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gUmUtdGhyb3cgdGhlIGVycm9yIHNvIHRoYXQgdGhpcy50YWlsIGJlY29tZXMgYSByZWplY3RlZCBQcm9taXNlIGFuZFxyXG4gICAgICAgICAgICAgICAgLy8gYWxsIGZ1cnRoZXIgYXR0ZW1wdHMgdG8gY2hhaW4gKHZpYSAudGhlbikgd2lsbCBqdXN0IHNob3J0LWNpcmN1aXRcclxuICAgICAgICAgICAgICAgIC8vIGFuZCByZXR1cm4gdGhlIHJlamVjdGVkIFByb21pc2UuXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvciQkMTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9wZXJhdGlvbkluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudGFpbCA9IG5ld1RhaWw7XHJcbiAgICAgICAgcmV0dXJuIG5ld1RhaWw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTY2hlZHVsZXMgYW4gb3BlcmF0aW9uIHRvIGJlIHF1ZXVlZCBvbiB0aGUgQXN5bmNRdWV1ZSBvbmNlIHRoZSBzcGVjaWZpZWRcclxuICAgICAqIGBkZWxheU1zYCBoYXMgZWxhcHNlZC4gVGhlIHJldHVybmVkIENhbmNlbGFibGVQcm9taXNlIGNhbiBiZSB1c2VkIHRvIGNhbmNlbFxyXG4gICAgICogdGhlIG9wZXJhdGlvbiBwcmlvciB0byBpdHMgcnVubmluZy5cclxuICAgICAqL1xyXG4gICAgQXN5bmNRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZUFmdGVyRGVsYXkgPSBmdW5jdGlvbiAodGltZXJJZCwgZGVsYXlNcywgb3ApIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMudmVyaWZ5Tm90RmFpbGVkKCk7XHJcbiAgICAgICAgYXNzZXJ0KGRlbGF5TXMgPj0gMCwgXCJBdHRlbXB0ZWQgdG8gc2NoZWR1bGUgYW4gb3BlcmF0aW9uIHdpdGggYSBuZWdhdGl2ZSBkZWxheSBvZiBcIiArIGRlbGF5TXMpO1xyXG4gICAgICAgIC8vIFdoaWxlIG5vdCBuZWNlc3NhcmlseSBoYXJtZnVsLCB3ZSBjdXJyZW50bHkgZG9uJ3QgZXhwZWN0IHRvIGhhdmUgbXVsdGlwbGVcclxuICAgICAgICAvLyBvcHMgd2l0aCB0aGUgc2FtZSB0aW1lciBpZCBpbiB0aGUgcXVldWUsIHNvIGRlZmVuc2l2ZWx5IHJlamVjdCB0aGVtLlxyXG4gICAgICAgIGFzc2VydCghdGhpcy5jb250YWluc0RlbGF5ZWRPcGVyYXRpb24odGltZXJJZCksIFwiQXR0ZW1wdGVkIHRvIHNjaGVkdWxlIG11bHRpcGxlIG9wZXJhdGlvbnMgd2l0aCB0aW1lciBpZCBcIiArIHRpbWVySWQgKyBcIi5cIik7XHJcbiAgICAgICAgdmFyIGRlbGF5ZWRPcCA9IERlbGF5ZWRPcGVyYXRpb24uY3JlYXRlQW5kU2NoZWR1bGUodGhpcywgdGltZXJJZCwgZGVsYXlNcywgb3AsIGZ1bmN0aW9uIChvcCkgeyByZXR1cm4gX3RoaXMucmVtb3ZlRGVsYXllZE9wZXJhdGlvbihvcCk7IH0pO1xyXG4gICAgICAgIHRoaXMuZGVsYXllZE9wZXJhdGlvbnMucHVzaChkZWxheWVkT3ApO1xyXG4gICAgICAgIHJldHVybiBkZWxheWVkT3A7XHJcbiAgICB9O1xyXG4gICAgQXN5bmNRdWV1ZS5wcm90b3R5cGUudmVyaWZ5Tm90RmFpbGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZhaWx1cmUpIHtcclxuICAgICAgICAgICAgZmFpbCgnQXN5bmNRdWV1ZSBpcyBhbHJlYWR5IGZhaWxlZDogJyArXHJcbiAgICAgICAgICAgICAgICAodGhpcy5mYWlsdXJlLnN0YWNrIHx8IHRoaXMuZmFpbHVyZS5tZXNzYWdlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVmVyaWZpZXMgdGhlcmUncyBhbiBvcGVyYXRpb24gY3VycmVudGx5IGluLXByb2dyZXNzIG9uIHRoZSBBc3luY1F1ZXVlLlxyXG4gICAgICogVW5mb3J0dW5hdGVseSB3ZSBjYW4ndCB2ZXJpZnkgdGhhdCB0aGUgcnVubmluZyBjb2RlIGlzIGluIHRoZSBwcm9taXNlIGNoYWluXHJcbiAgICAgKiBvZiB0aGF0IG9wZXJhdGlvbiwgc28gdGhpcyBpc24ndCBhIGZvb2xwcm9vZiBjaGVjaywgYnV0IGl0IHNob3VsZCBiZSBlbm91Z2hcclxuICAgICAqIHRvIGNhdGNoIHNvbWUgYnVncy5cclxuICAgICAqL1xyXG4gICAgQXN5bmNRdWV1ZS5wcm90b3R5cGUudmVyaWZ5T3BlcmF0aW9uSW5Qcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5vcGVyYXRpb25JblByb2dyZXNzLCAndmVyaWZ5T3BJblByb2dyZXNzKCkgY2FsbGVkIHdoZW4gbm8gb3AgaW4gcHJvZ3Jlc3Mgb24gdGhpcyBxdWV1ZS4nKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFdhaXRzIHVudGlsIGFsbCBjdXJyZW50bHkgcXVldWVkIHRhc2tzIGFyZSBmaW5pc2hlZCBleGVjdXRpbmcuIERlbGF5ZWRcclxuICAgICAqIG9wZXJhdGlvbnMgYXJlIG5vdCBydW4uXHJcbiAgICAgKi9cclxuICAgIEFzeW5jUXVldWUucHJvdG90eXBlLmRyYWluID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVucXVldWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7IH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRm9yIFRlc3RzOiBEZXRlcm1pbmUgaWYgYSBkZWxheWVkIG9wZXJhdGlvbiB3aXRoIGEgcGFydGljdWxhciBUaW1lcklkXHJcbiAgICAgKiBleGlzdHMuXHJcbiAgICAgKi9cclxuICAgIEFzeW5jUXVldWUucHJvdG90eXBlLmNvbnRhaW5zRGVsYXllZE9wZXJhdGlvbiA9IGZ1bmN0aW9uICh0aW1lcklkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsYXllZE9wZXJhdGlvbnMuZmluZEluZGV4KGZ1bmN0aW9uIChvcCkgeyByZXR1cm4gb3AudGltZXJJZCA9PT0gdGltZXJJZDsgfSkgPj0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZvciBUZXN0czogUnVucyBzb21lIG9yIGFsbCBkZWxheWVkIG9wZXJhdGlvbnMgZWFybHkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGxhc3RUaW1lcklkIERlbGF5ZWQgb3BlcmF0aW9ucyB1cCB0byBhbmQgaW5jbHVkaW5nIHRoaXMgVGltZXJJZCB3aWxsXHJcbiAgICAgKiAgYmUgZHJhaW5lZC4gVGhyb3dzIGlmIG5vIHN1Y2ggb3BlcmF0aW9uIGV4aXN0cy4gUGFzcyBUaW1lcklkLkFsbCB0byBydW5cclxuICAgICAqICBhbGwgZGVsYXllZCBvcGVyYXRpb25zLlxyXG4gICAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSBhbGwgb3BlcmF0aW9ucyBoYXZlIGJlZW4gcnVuLlxyXG4gICAgICovXHJcbiAgICBBc3luY1F1ZXVlLnByb3RvdHlwZS5ydW5EZWxheWVkT3BlcmF0aW9uc0Vhcmx5ID0gZnVuY3Rpb24gKGxhc3RUaW1lcklkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBOb3RlIHRoYXQgZHJhaW5pbmcgbWF5IGdlbmVyYXRlIG1vcmUgZGVsYXllZCBvcHMsIHNvIHdlIGRvIHRoYXQgZmlyc3QuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJhaW4oKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYXNzZXJ0KGxhc3RUaW1lcklkID09PSBUaW1lcklkLkFsbCB8fFxyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29udGFpbnNEZWxheWVkT3BlcmF0aW9uKGxhc3RUaW1lcklkKSwgXCJBdHRlbXB0ZWQgdG8gZHJhaW4gdG8gbWlzc2luZyBvcGVyYXRpb24gXCIgKyBsYXN0VGltZXJJZCk7XHJcbiAgICAgICAgICAgIC8vIFJ1biBvcHMgaW4gdGhlIHNhbWUgb3JkZXIgdGhleSdkIHJ1biBpZiB0aGV5IHJhbiBuYXR1cmFsbHkuXHJcbiAgICAgICAgICAgIF90aGlzLmRlbGF5ZWRPcGVyYXRpb25zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEudGFyZ2V0VGltZU1zIC0gYi50YXJnZXRUaW1lTXM7IH0pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gX3RoaXMuZGVsYXllZE9wZXJhdGlvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3AgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBvcC5za2lwRGVsYXkoKTtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0VGltZXJJZCAhPT0gVGltZXJJZC5BbGwgJiYgb3AudGltZXJJZCA9PT0gbGFzdFRpbWVySWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZHJhaW4oKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKiogQ2FsbGVkIG9uY2UgYSBEZWxheWVkT3BlcmF0aW9uIGlzIHJ1biBvciBjYW5jZWxlZC4gKi9cclxuICAgIEFzeW5jUXVldWUucHJvdG90eXBlLnJlbW92ZURlbGF5ZWRPcGVyYXRpb24gPSBmdW5jdGlvbiAob3ApIHtcclxuICAgICAgICAvLyBOT1RFOiBpbmRleE9mIC8gc2xpY2UgYXJlIE8obiksIGJ1dCBkZWxheWVkT3BlcmF0aW9ucyBpcyBleHBlY3RlZCB0byBiZSBzbWFsbC5cclxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmRlbGF5ZWRPcGVyYXRpb25zLmluZGV4T2Yob3ApO1xyXG4gICAgICAgIGFzc2VydChpbmRleCA+PSAwLCAnRGVsYXllZCBvcGVyYXRpb24gbm90IGZvdW5kLicpO1xyXG4gICAgICAgIHRoaXMuZGVsYXllZE9wZXJhdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQXN5bmNRdWV1ZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBCQVRDSElEX1VOS05PV04gPSAtMTtcclxuLyoqXHJcbiAqIEEgYmF0Y2ggb2YgbXV0YXRpb25zIHRoYXQgd2lsbCBiZSBzZW50IGFzIG9uZSB1bml0IHRvIHRoZSBiYWNrZW5kLlxyXG4gKi9cclxudmFyIE11dGF0aW9uQmF0Y2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNdXRhdGlvbkJhdGNoKGJhdGNoSWQsIGxvY2FsV3JpdGVUaW1lLCBtdXRhdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmJhdGNoSWQgPSBiYXRjaElkO1xyXG4gICAgICAgIHRoaXMubG9jYWxXcml0ZVRpbWUgPSBsb2NhbFdyaXRlVGltZTtcclxuICAgICAgICB0aGlzLm11dGF0aW9ucyA9IG11dGF0aW9ucztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllcyBhbGwgdGhlIG11dGF0aW9ucyBpbiB0aGlzIE11dGF0aW9uQmF0Y2ggdG8gdGhlIHNwZWNpZmllZCBkb2N1bWVudFxyXG4gICAgICogdG8gY3JlYXRlIGEgbmV3IHJlbW90ZSBkb2N1bWVudFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBkb2NLZXkgVGhlIGtleSBvZiB0aGUgZG9jdW1lbnQgdG8gYXBwbHkgbXV0YXRpb25zIHRvLlxyXG4gICAgICogQHBhcmFtIG1heWJlRG9jIFRoZSBkb2N1bWVudCB0byBhcHBseSBtdXRhdGlvbnMgdG8uXHJcbiAgICAgKiBAcGFyYW0gYmF0Y2hSZXN1bHQgVGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgTXV0YXRpb25CYXRjaCB0byB0aGVcclxuICAgICAqIGJhY2tlbmQuXHJcbiAgICAgKi9cclxuICAgIE11dGF0aW9uQmF0Y2gucHJvdG90eXBlLmFwcGx5VG9SZW1vdGVEb2N1bWVudCA9IGZ1bmN0aW9uIChkb2NLZXksIG1heWJlRG9jLCBiYXRjaFJlc3VsdCkge1xyXG4gICAgICAgIGlmIChtYXliZURvYykge1xyXG4gICAgICAgICAgICBhc3NlcnQobWF5YmVEb2Mua2V5LmlzRXF1YWwoZG9jS2V5KSwgXCJhcHBseVRvUmVtb3RlRG9jdW1lbnQ6IGtleSBcIiArIGRvY0tleSArIFwiIHNob3VsZCBtYXRjaCBtYXliZURvYyBrZXlcXG4gICAgICAgIFwiICsgbWF5YmVEb2Mua2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG11dGF0aW9uUmVzdWx0cyA9IGJhdGNoUmVzdWx0Lm11dGF0aW9uUmVzdWx0cztcclxuICAgICAgICBhc3NlcnQobXV0YXRpb25SZXN1bHRzLmxlbmd0aCA9PT0gdGhpcy5tdXRhdGlvbnMubGVuZ3RoLCBcIk1pc21hdGNoIGJldHdlZW4gbXV0YXRpb25zIGxlbmd0aFxcbiAgICAgIChcIiArIHRoaXMubXV0YXRpb25zLmxlbmd0aCArIFwiKSBhbmQgbXV0YXRpb24gcmVzdWx0cyBsZW5ndGhcXG4gICAgICAoXCIgKyBtdXRhdGlvblJlc3VsdHMubGVuZ3RoICsgXCIpLlwiKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubXV0YXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBtdXRhdGlvbiA9IHRoaXMubXV0YXRpb25zW2ldO1xyXG4gICAgICAgICAgICBpZiAobXV0YXRpb24ua2V5LmlzRXF1YWwoZG9jS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uUmVzdWx0ID0gbXV0YXRpb25SZXN1bHRzW2ldO1xyXG4gICAgICAgICAgICAgICAgbWF5YmVEb2MgPSBtdXRhdGlvbi5hcHBseVRvUmVtb3RlRG9jdW1lbnQobWF5YmVEb2MsIG11dGF0aW9uUmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF5YmVEb2M7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wdXRlcyB0aGUgbG9jYWwgdmlldyBvZiBhIGRvY3VtZW50IGdpdmVuIGFsbCB0aGUgbXV0YXRpb25zIGluIHRoaXNcclxuICAgICAqIGJhdGNoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBkb2NLZXkgVGhlIGtleSBvZiB0aGUgZG9jdW1lbnQgdG8gYXBwbHkgbXV0YXRpb25zIHRvLlxyXG4gICAgICogQHBhcmFtIG1heWJlRG9jIFRoZSBkb2N1bWVudCB0byBhcHBseSBtdXRhdGlvbnMgdG8uXHJcbiAgICAgKi9cclxuICAgIE11dGF0aW9uQmF0Y2gucHJvdG90eXBlLmFwcGx5VG9Mb2NhbFZpZXcgPSBmdW5jdGlvbiAoZG9jS2V5LCBtYXliZURvYykge1xyXG4gICAgICAgIGlmIChtYXliZURvYykge1xyXG4gICAgICAgICAgICBhc3NlcnQobWF5YmVEb2Mua2V5LmlzRXF1YWwoZG9jS2V5KSwgXCJhcHBseVRvTG9jYWxEb2N1bWVudDoga2V5IFwiICsgZG9jS2V5ICsgXCIgc2hvdWxkIG1hdGNoIG1heWJlRG9jIGtleVxcbiAgICAgICAgXCIgKyBtYXliZURvYy5rZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYmFzZURvYyA9IG1heWJlRG9jO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tdXRhdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIG11dGF0aW9uID0gdGhpcy5tdXRhdGlvbnNbaV07XHJcbiAgICAgICAgICAgIGlmIChtdXRhdGlvbi5rZXkuaXNFcXVhbChkb2NLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBtYXliZURvYyA9IG11dGF0aW9uLmFwcGx5VG9Mb2NhbFZpZXcobWF5YmVEb2MsIGJhc2VEb2MsIHRoaXMubG9jYWxXcml0ZVRpbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXliZURvYztcclxuICAgIH07XHJcbiAgICBNdXRhdGlvbkJhdGNoLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBrZXlTZXQgPSBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLm11dGF0aW9uczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG11dGF0aW9uID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBrZXlTZXQgPSBrZXlTZXQuYWRkKG11dGF0aW9uLmtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBrZXlTZXQ7XHJcbiAgICB9O1xyXG4gICAgTXV0YXRpb25CYXRjaC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5iYXRjaElkID09PSBvdGhlci5iYXRjaElkICYmXHJcbiAgICAgICAgICAgIGFycmF5RXF1YWxzKHRoaXMubXV0YXRpb25zLCBvdGhlci5tdXRhdGlvbnMpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIG11dGF0aW9uIGJhdGNoIGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBmcm9tIHRoZVxyXG4gICAgICogbXV0YXRpb24gcXVldWUuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZSB0aGF0IG5vdCBhbGwgaW1wbGVtZW50YXRpb25zIG9mIHRoZSBNdXRhdGlvblF1ZXVlIG5lY2Vzc2FyaWx5IHVzZVxyXG4gICAgICogdG9tYnN0b25lcyBhcyBwYXJ0IG9mIHRoZWlyIGltcGxlbWVudGF0aW9uIGFuZCBnZW5lcmFsbHkgc3BlYWtpbmcgbm8gY29kZVxyXG4gICAgICogb3V0c2lkZSB0aGUgbXV0YXRpb24gcXVldWVzIHNob3VsZCByZWFsbHkgY2FyZSBhYm91dCB0aGlzLlxyXG4gICAgICovXHJcbiAgICBNdXRhdGlvbkJhdGNoLnByb3RvdHlwZS5pc1RvbWJzdG9uZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tdXRhdGlvbnMubGVuZ3RoID09PSAwO1xyXG4gICAgfTtcclxuICAgIC8qKiBDb252ZXJ0cyB0aGlzIGJhdGNoIGludG8gYSB0b21ic3RvbmUgKi9cclxuICAgIE11dGF0aW9uQmF0Y2gucHJvdG90eXBlLnRvVG9tYnN0b25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTXV0YXRpb25CYXRjaCh0aGlzLmJhdGNoSWQsIHRoaXMubG9jYWxXcml0ZVRpbWUsIFtdKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTXV0YXRpb25CYXRjaDtcclxufSgpKTtcclxuLyoqIFRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYSBtdXRhdGlvbiBiYXRjaCB0byB0aGUgYmFja2VuZC4gKi9cclxudmFyIE11dGF0aW9uQmF0Y2hSZXN1bHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNdXRhdGlvbkJhdGNoUmVzdWx0KGJhdGNoLCBjb21taXRWZXJzaW9uLCBtdXRhdGlvblJlc3VsdHMsIHN0cmVhbVRva2VuLCBcclxuICAgIC8qKlxyXG4gICAgICogQSBwcmUtY29tcHV0ZWQgbWFwcGluZyBmcm9tIGVhY2ggbXV0YXRlZCBkb2N1bWVudCB0byB0aGUgcmVzdWx0aW5nXHJcbiAgICAgKiB2ZXJzaW9uLlxyXG4gICAgICovXHJcbiAgICBkb2NWZXJzaW9ucykge1xyXG4gICAgICAgIHRoaXMuYmF0Y2ggPSBiYXRjaDtcclxuICAgICAgICB0aGlzLmNvbW1pdFZlcnNpb24gPSBjb21taXRWZXJzaW9uO1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXN1bHRzID0gbXV0YXRpb25SZXN1bHRzO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtVG9rZW4gPSBzdHJlYW1Ub2tlbjtcclxuICAgICAgICB0aGlzLmRvY1ZlcnNpb25zID0gZG9jVmVyc2lvbnM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgTXV0YXRpb25CYXRjaFJlc3VsdCBmb3IgdGhlIGdpdmVuIGJhdGNoIGFuZCByZXN1bHRzLiBUaGVyZVxyXG4gICAgICogbXVzdCBiZSBvbmUgcmVzdWx0IGZvciBlYWNoIG11dGF0aW9uIGluIHRoZSBiYXRjaC4gVGhpcyBzdGF0aWMgZmFjdG9yeVxyXG4gICAgICogY2FjaGVzIGEgZG9jdW1lbnQ9PnZlcnNpb24gbWFwcGluZyAoZG9jVmVyc2lvbnMpLlxyXG4gICAgICovXHJcbiAgICBNdXRhdGlvbkJhdGNoUmVzdWx0LmZyb20gPSBmdW5jdGlvbiAoYmF0Y2gsIGNvbW1pdFZlcnNpb24sIHJlc3VsdHMsIHN0cmVhbVRva2VuKSB7XHJcbiAgICAgICAgYXNzZXJ0KGJhdGNoLm11dGF0aW9ucy5sZW5ndGggPT09IHJlc3VsdHMubGVuZ3RoLCAnTXV0YXRpb25zIHNlbnQgJyArXHJcbiAgICAgICAgICAgIGJhdGNoLm11dGF0aW9ucy5sZW5ndGggK1xyXG4gICAgICAgICAgICAnIG11c3QgZXF1YWwgcmVzdWx0cyByZWNlaXZlZCAnICtcclxuICAgICAgICAgICAgcmVzdWx0cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciB2ZXJzaW9uTWFwID0gZG9jdW1lbnRWZXJzaW9uTWFwKCk7XHJcbiAgICAgICAgdmFyIG11dGF0aW9ucyA9IGJhdGNoLm11dGF0aW9ucztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG11dGF0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2ZXJzaW9uTWFwID0gdmVyc2lvbk1hcC5pbnNlcnQobXV0YXRpb25zW2ldLmtleSwgcmVzdWx0c1tpXS52ZXJzaW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNdXRhdGlvbkJhdGNoUmVzdWx0KGJhdGNoLCBjb21taXRWZXJzaW9uLCByZXN1bHRzLCBzdHJlYW1Ub2tlbiwgdmVyc2lvbk1hcCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE11dGF0aW9uQmF0Y2hSZXN1bHQ7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgZXNjYXBlQ2hhciA9ICdcXHUwMDAxJztcclxudmFyIGVuY29kZWRTZXBhcmF0b3JDaGFyID0gJ1xcdTAwMDEnO1xyXG52YXIgZW5jb2RlZE51bCA9ICdcXHUwMDEwJztcclxudmFyIGVuY29kZWRFc2NhcGUgPSAnXFx1MDAxMSc7XHJcbi8qKlxyXG4gKiBFbmNvZGVzIGEgcmVzb3VyY2UgcGF0aCBpbnRvIGEgSW5kZXhlZERiLWNvbXBhdGlibGUgc3RyaW5nIGZvcm0uXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGUocGF0aCkge1xyXG4gICAgdmFyIHJlc3VsdCA9ICcnO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGVuY29kZVNlcGFyYXRvcihyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQgPSBlbmNvZGVTZWdtZW50KHBhdGguZ2V0KGkpLCByZXN1bHQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVuY29kZVNlcGFyYXRvcihyZXN1bHQpO1xyXG59XHJcbi8qKiBFbmNvZGVzIGEgc2luZ2xlIHNlZ21lbnQgb2YgYSByZXNvdXJjZSBwYXRoIGludG8gdGhlIGdpdmVuIHJlc3VsdCAqL1xyXG5mdW5jdGlvbiBlbmNvZGVTZWdtZW50KHNlZ21lbnQsIHJlc3VsdEJ1Zikge1xyXG4gICAgdmFyIHJlc3VsdCA9IHJlc3VsdEJ1ZjtcclxuICAgIHZhciBsZW5ndGggPSBzZWdtZW50Lmxlbmd0aDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgYyA9IHNlZ21lbnQuY2hhckF0KGkpO1xyXG4gICAgICAgIHN3aXRjaCAoYykge1xyXG4gICAgICAgICAgICBjYXNlICdcXDAnOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGVzY2FwZUNoYXIgKyBlbmNvZGVkTnVsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZXNjYXBlQ2hhcjpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBlc2NhcGVDaGFyICsgZW5jb2RlZEVzY2FwZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4vKiogRW5jb2RlcyBhIHBhdGggc2VwYXJhdG9yIGludG8gdGhlIGdpdmVuIHJlc3VsdCAqL1xyXG5mdW5jdGlvbiBlbmNvZGVTZXBhcmF0b3IocmVzdWx0KSB7XHJcbiAgICByZXR1cm4gcmVzdWx0ICsgZXNjYXBlQ2hhciArIGVuY29kZWRTZXBhcmF0b3JDaGFyO1xyXG59XHJcbi8qKlxyXG4gKiBEZWNvZGVzIHRoZSBnaXZlbiBJbmRleGVkRGItY29tcGF0aWJsZSBzdHJpbmcgZm9ybSBvZiBhIHJlc291cmNlIHBhdGggaW50b1xyXG4gKiBhIFJlc291cmNlUGF0aCBpbnN0YW5jZS4gTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGlzIG5vdCBzdWl0YWJsZSBmb3IgdXNlIHdpdGhcclxuICogZGVjb2RpbmcgcmVzb3VyY2UgbmFtZXMgZnJvbSB0aGUgc2VydmVyOyB0aG9zZSBhcmUgT25lIFBsYXRmb3JtIGZvcm1hdFxyXG4gKiBzdHJpbmdzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVjb2RlJDEocGF0aCkge1xyXG4gICAgLy8gRXZlbnQgdGhlIGVtcHR5IHBhdGggbXVzdCBlbmNvZGUgYXMgYSBwYXRoIG9mIGF0IGxlYXN0IGxlbmd0aCAyLiBBIHBhdGhcclxuICAgIC8vIHdpdGggZXhhY3RseSAyIG11c3QgYmUgdGhlIGVtcHR5IHBhdGguXHJcbiAgICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XHJcbiAgICBhc3NlcnQobGVuZ3RoID49IDIsICdJbnZhbGlkIHBhdGggJyArIHBhdGgpO1xyXG4gICAgaWYgKGxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgIGFzc2VydChwYXRoLmNoYXJBdCgwKSA9PT0gZXNjYXBlQ2hhciAmJiBwYXRoLmNoYXJBdCgxKSA9PT0gZW5jb2RlZFNlcGFyYXRvckNoYXIsICdOb24tZW1wdHkgcGF0aCAnICsgcGF0aCArICcgaGFkIGxlbmd0aCAyJyk7XHJcbiAgICAgICAgcmV0dXJuIFJlc291cmNlUGF0aC5FTVBUWV9QQVRIO1xyXG4gICAgfVxyXG4gICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgY2Fubm90IGV4aXN0IHBhc3QgdGhlIHNlY29uZC10by1sYXN0IHBvc2l0aW9uIGluIHRoZVxyXG4gICAgLy8gc291cmNlIHZhbHVlLlxyXG4gICAgdmFyIGxhc3RSZWFzb25hYmxlRXNjYXBlSW5kZXggPSBsZW5ndGggLSAyO1xyXG4gICAgdmFyIHNlZ21lbnRzID0gW107XHJcbiAgICB2YXIgc2VnbWVudEJ1aWxkZXIgPSAnJztcclxuICAgIGZvciAodmFyIHN0YXJ0ID0gMDsgc3RhcnQgPCBsZW5ndGg7KSB7XHJcbiAgICAgICAgLy8gVGhlIGxhc3QgdHdvIGNoYXJhY3RlcnMgb2YgYSB2YWxpZCBlbmNvZGVkIHBhdGggbXVzdCBiZSBhIHNlcGFyYXRvciwgc29cclxuICAgICAgICAvLyB0aGVyZSBtdXN0IGJlIGFuIGVuZCB0byB0aGlzIHNlZ21lbnQuXHJcbiAgICAgICAgdmFyIGVuZCA9IHBhdGguaW5kZXhPZihlc2NhcGVDaGFyLCBzdGFydCk7XHJcbiAgICAgICAgaWYgKGVuZCA8IDAgfHwgZW5kID4gbGFzdFJlYXNvbmFibGVFc2NhcGVJbmRleCkge1xyXG4gICAgICAgICAgICBmYWlsKCdJbnZhbGlkIGVuY29kZWQgcmVzb3VyY2UgcGF0aDogXCInICsgcGF0aCArICdcIicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmV4dCA9IHBhdGguY2hhckF0KGVuZCArIDEpO1xyXG4gICAgICAgIHN3aXRjaCAobmV4dCkge1xyXG4gICAgICAgICAgICBjYXNlIGVuY29kZWRTZXBhcmF0b3JDaGFyOlxyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQaWVjZSA9IHBhdGguc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlZ21lbnQgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VnbWVudEJ1aWxkZXIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgY29weWluZyBmb3IgdGhlIGNvbW1vbiBjYXNlIG9mIGEgc2VnbWVudCB0aGF0IGV4Y2x1ZGVzIFxcMFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBcXDAwMVxyXG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnQgPSBjdXJyZW50UGllY2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWdtZW50QnVpbGRlciArPSBjdXJyZW50UGllY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudCA9IHNlZ21lbnRCdWlsZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRCdWlsZGVyID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZW5jb2RlZE51bDpcclxuICAgICAgICAgICAgICAgIHNlZ21lbnRCdWlsZGVyICs9IHBhdGguc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgc2VnbWVudEJ1aWxkZXIgKz0gJ1xcMCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbmNvZGVkRXNjYXBlOlxyXG4gICAgICAgICAgICAgICAgLy8gVGhlIGVzY2FwZSBjaGFyYWN0ZXIgY2FuIGJlIHVzZWQgaW4gdGhlIG91dHB1dCB0byBlbmNvZGUgaXRzZWxmLlxyXG4gICAgICAgICAgICAgICAgc2VnbWVudEJ1aWxkZXIgKz0gcGF0aC5zdWJzdHJpbmcoc3RhcnQsIGVuZCArIDEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBmYWlsKCdJbnZhbGlkIGVuY29kZWQgcmVzb3VyY2UgcGF0aDogXCInICsgcGF0aCArICdcIicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGFydCA9IGVuZCArIDI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IFJlc291cmNlUGF0aChzZWdtZW50cyk7XHJcbn1cblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBTY2hlbWEgVmVyc2lvbiBmb3IgdGhlIFdlYiBjbGllbnQ6XHJcbiAqIDEuIEluaXRpYWwgdmVyc2lvbiBpbmNsdWRpbmcgTXV0YXRpb24gUXVldWUsIFF1ZXJ5IENhY2hlLCBhbmQgUmVtb3RlIERvY3VtZW50XHJcbiAqICAgIENhY2hlXHJcbiAqIDIuIFVzZWQgdG8gZW5zdXJlIGEgdGFyZ2V0R2xvYmFsIG9iamVjdCBleGlzdHMgYW5kIGFkZCB0YXJnZXRDb3VudCB0byBpdC4gTm9cclxuICogICAgbG9uZ2VyIHJlcXVpcmVkIGJlY2F1c2UgbWlncmF0aW9uIDMgdW5jb25kaXRpb25hbGx5IGNsZWFycyBpdC5cclxuICogMy4gRHJvcHBlZCBhbmQgcmUtY3JlYXRlZCBRdWVyeSBDYWNoZSB0byBkZWFsIHdpdGggY2FjaGUgY29ycnVwdGlvbiByZWxhdGVkXHJcbiAqICAgIHRvIGxpbWJvIHJlc29sdXRpb24uIEFkZHJlc3Nlc1xyXG4gKiAgICBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtaW9zLXNkay9pc3N1ZXMvMTU0OFxyXG4gKiA0LiBNdWx0aS1UYWIgU3VwcG9ydC5cclxuICogNS4gUmVtb3ZhbCBvZiBoZWxkIHdyaXRlIGFja3MuXHJcbiAqL1xyXG52YXIgU0NIRU1BX1ZFUlNJT04gPSA1O1xyXG4vKiogUGVyZm9ybXMgZGF0YWJhc2UgY3JlYXRpb24gYW5kIHNjaGVtYSB1cGdyYWRlcy4gKi9cclxudmFyIFNjaGVtYUNvbnZlcnRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNjaGVtYUNvbnZlcnRlcihzZXJpYWxpemVyKSB7XHJcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gc2VyaWFsaXplcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgZGF0YWJhc2UgY3JlYXRpb24gYW5kIHNjaGVtYSB1cGdyYWRlcy5cclxuICAgICAqXHJcbiAgICAgKiBOb3RlIHRoYXQgaW4gcHJvZHVjdGlvbiwgdGhpcyBtZXRob2QgaXMgb25seSBldmVyIHVzZWQgdG8gdXBncmFkZSB0aGUgc2NoZW1hXHJcbiAgICAgKiB0byBTQ0hFTUFfVkVSU0lPTi4gRGlmZmVyZW50IHZhbHVlcyBvZiB0b1ZlcnNpb24gYXJlIG9ubHkgdXNlZCBmb3IgdGVzdGluZ1xyXG4gICAgICogYW5kIGxvY2FsIGZlYXR1cmUgZGV2ZWxvcG1lbnQuXHJcbiAgICAgKi9cclxuICAgIFNjaGVtYUNvbnZlcnRlci5wcm90b3R5cGUuY3JlYXRlT3JVcGdyYWRlID0gZnVuY3Rpb24gKGRiLCB0eG4sIGZyb21WZXJzaW9uLCB0b1ZlcnNpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGFzc2VydChmcm9tVmVyc2lvbiA8IHRvVmVyc2lvbiAmJlxyXG4gICAgICAgICAgICBmcm9tVmVyc2lvbiA+PSAwICYmXHJcbiAgICAgICAgICAgIHRvVmVyc2lvbiA8PSBTQ0hFTUFfVkVSU0lPTiwgXCJVbmV4cGVjdGVkIHNjaGVtYSB1cGdyYWRlIGZyb20gdlwiICsgZnJvbVZlcnNpb24gKyBcIiB0byB2e3RvVmVyc2lvbn0uXCIpO1xyXG4gICAgICAgIGlmIChmcm9tVmVyc2lvbiA8IDEgJiYgdG9WZXJzaW9uID49IDEpIHtcclxuICAgICAgICAgICAgY3JlYXRlUHJpbWFyeUNsaWVudFN0b3JlKGRiKTtcclxuICAgICAgICAgICAgY3JlYXRlTXV0YXRpb25RdWV1ZShkYik7XHJcbiAgICAgICAgICAgIGNyZWF0ZVF1ZXJ5Q2FjaGUoZGIpO1xyXG4gICAgICAgICAgICBjcmVhdGVSZW1vdGVEb2N1bWVudENhY2hlKGRiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTWlncmF0aW9uIDIgdG8gcG9wdWxhdGUgdGhlIHRhcmdldEdsb2JhbCBvYmplY3Qgbm8gbG9uZ2VyIG5lZWRlZCBzaW5jZVxyXG4gICAgICAgIC8vIG1pZ3JhdGlvbiAzIHVuY29uZGl0aW9uYWxseSBjbGVhcnMgaXQuXHJcbiAgICAgICAgdmFyIHAgPSBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIGlmIChmcm9tVmVyc2lvbiA8IDMgJiYgdG9WZXJzaW9uID49IDMpIHtcclxuICAgICAgICAgICAgLy8gQnJhbmQgbmV3IGNsaWVudHMgZG9uJ3QgbmVlZCB0byBkcm9wIGFuZCByZWNyZWF0ZS0tb25seSBjbGllbnRzIHRoYXRcclxuICAgICAgICAgICAgLy8gcG90ZW50aWFsbHkgaGF2ZSBjb3JydXB0IGRhdGEuXHJcbiAgICAgICAgICAgIGlmIChmcm9tVmVyc2lvbiAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZHJvcFF1ZXJ5Q2FjaGUoZGIpO1xyXG4gICAgICAgICAgICAgICAgY3JlYXRlUXVlcnlDYWNoZShkYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcCA9IHAubmV4dChmdW5jdGlvbiAoKSB7IHJldHVybiB3cml0ZUVtcHR5VGFyZ2V0R2xvYmFsRW50cnkodHhuKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmcm9tVmVyc2lvbiA8IDQgJiYgdG9WZXJzaW9uID49IDQpIHtcclxuICAgICAgICAgICAgaWYgKGZyb21WZXJzaW9uICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTY2hlbWEgdmVyc2lvbiAzIHVzZXMgYXV0by1nZW5lcmF0ZWQga2V5cyB0byBnZW5lcmF0ZSBnbG9iYWxseSB1bmlxdWVcclxuICAgICAgICAgICAgICAgIC8vIG11dGF0aW9uIGJhdGNoIElEcyAodGhpcyB3YXMgcHJldmlvdXNseSBlbnN1cmVkIGludGVybmFsbHkgYnkgdGhlXHJcbiAgICAgICAgICAgICAgICAvLyBjbGllbnQpLiBUbyBtaWdyYXRlIHRvIHRoZSBuZXcgc2NoZW1hLCB3ZSBoYXZlIHRvIHJlYWQgYWxsIG11dGF0aW9uc1xyXG4gICAgICAgICAgICAgICAgLy8gYW5kIHdyaXRlIHRoZW0gYmFjayBvdXQuIFdlIHByZXNlcnZlIHRoZSBleGlzdGluZyBiYXRjaCBJRHMgdG8gZ3VhcmFudGVlXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIG9iamVjdCBzdG9yZXMuIEFueSBmdXJ0aGVyIG11dGF0aW9uIGJhdGNoIElEcyB3aWxsXHJcbiAgICAgICAgICAgICAgICAvLyBiZSBhdXRvLWdlbmVyYXRlZC5cclxuICAgICAgICAgICAgICAgIHAgPSBwLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdXBncmFkZU11dGF0aW9uQmF0Y2hTY2hlbWFBbmRNaWdyYXRlRGF0YShkYiwgdHhuKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcCA9IHAubmV4dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGVDbGllbnRNZXRhZGF0YVN0b3JlKGRiKTtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZVJlbW90ZURvY3VtZW50Q2hhbmdlc1N0b3JlKGRiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmcm9tVmVyc2lvbiA8IDUgJiYgdG9WZXJzaW9uID49IDUpIHtcclxuICAgICAgICAgICAgcCA9IHAubmV4dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZW1vdmVBY2tub3dsZWRnZWRNdXRhdGlvbnModHhuKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwO1xyXG4gICAgfTtcclxuICAgIFNjaGVtYUNvbnZlcnRlci5wcm90b3R5cGUucmVtb3ZlQWNrbm93bGVkZ2VkTXV0YXRpb25zID0gZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHF1ZXVlc1N0b3JlID0gdHhuLnN0b3JlKERiTXV0YXRpb25RdWV1ZS5zdG9yZSk7XHJcbiAgICAgICAgdmFyIG11dGF0aW9uc1N0b3JlID0gdHhuLnN0b3JlKERiTXV0YXRpb25CYXRjaC5zdG9yZSk7XHJcbiAgICAgICAgcmV0dXJuIHF1ZXVlc1N0b3JlLmxvYWRBbGwoKS5uZXh0KGZ1bmN0aW9uIChxdWV1ZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKHF1ZXVlcywgZnVuY3Rpb24gKHF1ZXVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBJREJLZXlSYW5nZS5ib3VuZChbcXVldWUudXNlcklkLCBCQVRDSElEX1VOS05PV05dLCBbcXVldWUudXNlcklkLCBxdWV1ZS5sYXN0QWNrbm93bGVkZ2VkQmF0Y2hJZF0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG11dGF0aW9uc1N0b3JlXHJcbiAgICAgICAgICAgICAgICAgICAgLmxvYWRBbGwoRGJNdXRhdGlvbkJhdGNoLnVzZXJNdXRhdGlvbnNJbmRleCwgcmFuZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGRiQmF0Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UuZm9yRWFjaChkYkJhdGNoZXMsIGZ1bmN0aW9uIChkYkJhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydChkYkJhdGNoLnVzZXJJZCA9PT0gcXVldWUudXNlcklkLCBcIkNhbm5vdCBwcm9jZXNzIGJhdGNoIFwiICsgZGJCYXRjaC5iYXRjaElkICsgXCIgZnJvbSB1bmV4cGVjdGVkIHVzZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYXRjaCA9IF90aGlzLnNlcmlhbGl6ZXIuZnJvbURiTXV0YXRpb25CYXRjaChkYkJhdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZU11dGF0aW9uQmF0Y2godHhuLCBxdWV1ZS51c2VySWQsIGJhdGNoKS5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNjaGVtYUNvbnZlcnRlcjtcclxufSgpKTtcclxuLyoqXHJcbiAqIFdyYXBwZXIgY2xhc3MgdG8gc3RvcmUgdGltZXN0YW1wcyAoc2Vjb25kcyBhbmQgbmFub3MpIGluIEluZGV4ZWREYiBvYmplY3RzLlxyXG4gKi9cclxudmFyIERiVGltZXN0YW1wID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGJUaW1lc3RhbXAoc2Vjb25kcywgbmFub3NlY29uZHMpIHtcclxuICAgICAgICB0aGlzLnNlY29uZHMgPSBzZWNvbmRzO1xyXG4gICAgICAgIHRoaXMubmFub3NlY29uZHMgPSBuYW5vc2Vjb25kcztcclxuICAgIH1cclxuICAgIHJldHVybiBEYlRpbWVzdGFtcDtcclxufSgpKTtcclxuLyoqXHJcbiAqIEEgc2luZ2xldG9uIG9iamVjdCB0byBiZSBzdG9yZWQgaW4gdGhlICdvd25lcicgc3RvcmUgaW4gSW5kZXhlZERiLlxyXG4gKlxyXG4gKiBBIGdpdmVuIGRhdGFiYXNlIGNhbiBoYXZlIGEgc2luZ2xlIHByaW1hcnkgdGFiIGFzc2lnbmVkIGF0IGEgZ2l2ZW4gdGltZS4gVGhhdFxyXG4gKiB0YWIgbXVzdCB2YWxpZGF0ZSB0aGF0IGl0IGlzIHN0aWxsIGhvbGRpbmcgdGhlIHByaW1hcnkgbGVhc2UgYmVmb3JlIGV2ZXJ5XHJcbiAqIG9wZXJhdGlvbiB0aGF0IHJlcXVpcmVzIGxvY2tlZCBhY2Nlc3MuIFRoZSBwcmltYXJ5IHRhYiBzaG91bGQgcmVndWxhcmx5XHJcbiAqIHdyaXRlIGFuIHVwZGF0ZWQgdGltZXN0YW1wIHRvIHRoaXMgbGVhc2UgdG8gcHJldmVudCBvdGhlciB0YWJzIGZyb21cclxuICogXCJzdGVhbGluZ1wiIHRoZSBwcmltYXJ5IGxlYXNlXHJcbiAqL1xyXG52YXIgRGJQcmltYXJ5Q2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGJQcmltYXJ5Q2xpZW50KG93bmVySWQsIFxyXG4gICAgLyoqIFdoZXRoZXIgdG8gYWxsb3cgc2hhcmVkIGFjY2VzcyBmcm9tIG11bHRpcGxlIHRhYnMuICovXHJcbiAgICBhbGxvd1RhYlN5bmNocm9uaXphdGlvbiwgbGVhc2VUaW1lc3RhbXBNcykge1xyXG4gICAgICAgIHRoaXMub3duZXJJZCA9IG93bmVySWQ7XHJcbiAgICAgICAgdGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbiA9IGFsbG93VGFiU3luY2hyb25pemF0aW9uO1xyXG4gICAgICAgIHRoaXMubGVhc2VUaW1lc3RhbXBNcyA9IGxlYXNlVGltZXN0YW1wTXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE5hbWUgb2YgdGhlIEluZGV4ZWREYiBvYmplY3Qgc3RvcmUuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZSB0aGF0IHRoZSBuYW1lICdvd25lcicgaXMgY2hvc2VuIHRvIGVuc3VyZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoXHJcbiAgICAgKiBvbGRlciBjbGllbnRzIHRoYXQgb25seSBzdXBwb3J0ZWQgc2luZ2xlIGxvY2tlZCBhY2Nlc3MgdG8gdGhlIHBlcnNpc3RlbmNlXHJcbiAgICAgKiBsYXllci5cclxuICAgICAqL1xyXG4gICAgRGJQcmltYXJ5Q2xpZW50LnN0b3JlID0gJ293bmVyJztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGtleSBzdHJpbmcgdXNlZCBmb3IgdGhlIHNpbmdsZSBvYmplY3QgdGhhdCBleGlzdHMgaW4gdGhlXHJcbiAgICAgKiBEYlByaW1hcnlDbGllbnQgc3RvcmUuXHJcbiAgICAgKi9cclxuICAgIERiUHJpbWFyeUNsaWVudC5rZXkgPSAnb3duZXInO1xyXG4gICAgcmV0dXJuIERiUHJpbWFyeUNsaWVudDtcclxufSgpKTtcclxuZnVuY3Rpb24gY3JlYXRlUHJpbWFyeUNsaWVudFN0b3JlKGRiKSB7XHJcbiAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShEYlByaW1hcnlDbGllbnQuc3RvcmUpO1xyXG59XHJcbi8qKlxyXG4gKiBBbiBvYmplY3QgdG8gYmUgc3RvcmVkIGluIHRoZSAnbXV0YXRpb25RdWV1ZXMnIHN0b3JlIGluIEluZGV4ZWREYi5cclxuICpcclxuICogRWFjaCB1c2VyIGdldHMgYSBzaW5nbGUgcXVldWUgb2YgTXV0YXRpb25CYXRjaGVzIHRvIGFwcGx5IHRvIHRoZSBzZXJ2ZXIuXHJcbiAqIERiTXV0YXRpb25RdWV1ZSB0cmFja3MgdGhlIG1ldGFkYXRhIGFib3V0IHRoZSBxdWV1ZS5cclxuICovXHJcbnZhciBEYk11dGF0aW9uUXVldWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYk11dGF0aW9uUXVldWUoXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBub3JtYWxpemVkIHVzZXIgSUQgdG8gd2hpY2ggdGhpcyBxdWV1ZSBiZWxvbmdzLlxyXG4gICAgICovXHJcbiAgICB1c2VySWQsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBpZGVudGlmaWVyIGZvciB0aGUgaGlnaGVzdCBudW1iZXJlZCBiYXRjaCB0aGF0IGhhcyBiZWVuIGFja25vd2xlZGdlZFxyXG4gICAgICogYnkgdGhlIHNlcnZlci4gQWxsIE11dGF0aW9uQmF0Y2hlcyBpbiB0aGlzIHF1ZXVlIHdpdGggYmF0Y2hJZHMgbGVzc1xyXG4gICAgICogdGhhbiBvciBlcXVhbCB0byB0aGlzIHZhbHVlIGFyZSBjb25zaWRlcmVkIHRvIGhhdmUgYmVlbiBhY2tub3dsZWRnZWQgYnlcclxuICAgICAqIHRoZSBzZXJ2ZXIuXHJcbiAgICAgKi9cclxuICAgIGxhc3RBY2tub3dsZWRnZWRCYXRjaElkLCBcclxuICAgIC8qKlxyXG4gICAgICogQSBzdHJlYW0gdG9rZW4gdGhhdCB3YXMgcHJldmlvdXNseSBzZW50IGJ5IHRoZSBzZXJ2ZXIuXHJcbiAgICAgKlxyXG4gICAgICogU2VlIFN0cmVhbWluZ1dyaXRlUmVxdWVzdCBpbiBkYXRhc3RvcmUucHJvdG8gZm9yIG1vcmUgZGV0YWlscyBhYm91dFxyXG4gICAgICogdXNhZ2UuXHJcbiAgICAgKlxyXG4gICAgICogQWZ0ZXIgc2VuZGluZyB0aGlzIHRva2VuLCBlYXJsaWVyIHRva2VucyBtYXkgbm90IGJlIHVzZWQgYW55bW9yZSBzb1xyXG4gICAgICogb25seSBhIHNpbmdsZSBzdHJlYW0gdG9rZW4gaXMgcmV0YWluZWQuXHJcbiAgICAgKi9cclxuICAgIGxhc3RTdHJlYW1Ub2tlbikge1xyXG4gICAgICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xyXG4gICAgICAgIHRoaXMubGFzdEFja25vd2xlZGdlZEJhdGNoSWQgPSBsYXN0QWNrbm93bGVkZ2VkQmF0Y2hJZDtcclxuICAgICAgICB0aGlzLmxhc3RTdHJlYW1Ub2tlbiA9IGxhc3RTdHJlYW1Ub2tlbjtcclxuICAgIH1cclxuICAgIC8qKiBOYW1lIG9mIHRoZSBJbmRleGVkRGIgb2JqZWN0IHN0b3JlLiAgKi9cclxuICAgIERiTXV0YXRpb25RdWV1ZS5zdG9yZSA9ICdtdXRhdGlvblF1ZXVlcyc7XHJcbiAgICAvKiogS2V5cyBhcmUgYXV0b21hdGljYWxseSBhc3NpZ25lZCB2aWEgdGhlIHVzZXJJZCBwcm9wZXJ0eS4gKi9cclxuICAgIERiTXV0YXRpb25RdWV1ZS5rZXlQYXRoID0gJ3VzZXJJZCc7XHJcbiAgICByZXR1cm4gRGJNdXRhdGlvblF1ZXVlO1xyXG59KCkpO1xyXG4vKipcclxuICogQW4gb2JqZWN0IHRvIGJlIHN0b3JlZCBpbiB0aGUgJ211dGF0aW9ucycgc3RvcmUgaW4gSW5kZXhlZERiLlxyXG4gKlxyXG4gKiBSZXByZXNlbnRzIGEgYmF0Y2ggb2YgdXNlci1sZXZlbCBtdXRhdGlvbnMgaW50ZW5kZWQgdG8gYmUgc2VudCB0byB0aGUgc2VydmVyXHJcbiAqIGluIGEgc2luZ2xlIHdyaXRlLiBFYWNoIHVzZXItbGV2ZWwgYmF0Y2ggZ2V0cyBhIHNlcGFyYXRlIERiTXV0YXRpb25CYXRjaFxyXG4gKiB3aXRoIGEgbmV3IGJhdGNoSWQuXHJcbiAqL1xyXG52YXIgRGJNdXRhdGlvbkJhdGNoID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGJNdXRhdGlvbkJhdGNoKFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbm9ybWFsaXplZCB1c2VyIElEIHRvIHdoaWNoIHRoaXMgYmF0Y2ggYmVsb25ncy5cclxuICAgICAqL1xyXG4gICAgdXNlcklkLCBcclxuICAgIC8qKlxyXG4gICAgICogQW4gaWRlbnRpZmllciBmb3IgdGhpcyBiYXRjaCwgYWxsb2NhdGVkIHVzaW5nIGFuIGF1dG8tZ2VuZXJhdGVkIGtleS5cclxuICAgICAqL1xyXG4gICAgYmF0Y2hJZCwgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBsb2NhbCB3cml0ZSB0aW1lIG9mIHRoZSBiYXRjaCwgc3RvcmVkIGFzIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGVcclxuICAgICAqIGVwb2NoLlxyXG4gICAgICovXHJcbiAgICBsb2NhbFdyaXRlVGltZU1zLCBcclxuICAgIC8qKlxyXG4gICAgICogQSBsaXN0IG9mIG11dGF0aW9ucyB0byBhcHBseS4gQWxsIG11dGF0aW9ucyB3aWxsIGJlIGFwcGxpZWQgYXRvbWljYWxseS5cclxuICAgICAqXHJcbiAgICAgKiBNdXRhdGlvbnMgYXJlIHNlcmlhbGl6ZWQgdmlhIEpzb25Qcm90b1NlcmlhbGl6ZXIudG9NdXRhdGlvbigpLlxyXG4gICAgICovXHJcbiAgICBtdXRhdGlvbnMpIHtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZDtcclxuICAgICAgICB0aGlzLmJhdGNoSWQgPSBiYXRjaElkO1xyXG4gICAgICAgIHRoaXMubG9jYWxXcml0ZVRpbWVNcyA9IGxvY2FsV3JpdGVUaW1lTXM7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbnMgPSBtdXRhdGlvbnM7XHJcbiAgICB9XHJcbiAgICAvKiogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS4gICovXHJcbiAgICBEYk11dGF0aW9uQmF0Y2guc3RvcmUgPSAnbXV0YXRpb25zJztcclxuICAgIC8qKiBLZXlzIGFyZSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHZpYSB0aGUgdXNlcklkLCBiYXRjaElkIHByb3BlcnRpZXMuICovXHJcbiAgICBEYk11dGF0aW9uQmF0Y2gua2V5UGF0aCA9ICdiYXRjaElkJztcclxuICAgIC8qKiBUaGUgaW5kZXggbmFtZSBmb3IgbG9va3VwIG9mIG11dGF0aW9ucyBieSB1c2VyLiAqL1xyXG4gICAgRGJNdXRhdGlvbkJhdGNoLnVzZXJNdXRhdGlvbnNJbmRleCA9ICd1c2VyTXV0YXRpb25zSW5kZXgnO1xyXG4gICAgLyoqIFRoZSB1c2VyIG11dGF0aW9ucyBpbmRleCBpcyBrZXllZCBieSBbdXNlcklkLCBiYXRjaElkXSBwYWlycy4gKi9cclxuICAgIERiTXV0YXRpb25CYXRjaC51c2VyTXV0YXRpb25zS2V5UGF0aCA9IFsndXNlcklkJywgJ2JhdGNoSWQnXTtcclxuICAgIHJldHVybiBEYk11dGF0aW9uQmF0Y2g7XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZU11dGF0aW9uUXVldWUoZGIpIHtcclxuICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKERiTXV0YXRpb25RdWV1ZS5zdG9yZSwge1xyXG4gICAgICAgIGtleVBhdGg6IERiTXV0YXRpb25RdWV1ZS5rZXlQYXRoXHJcbiAgICB9KTtcclxuICAgIHZhciBtdXRhdGlvbkJhdGNoZXNTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKERiTXV0YXRpb25CYXRjaC5zdG9yZSwge1xyXG4gICAgICAgIGtleVBhdGg6IERiTXV0YXRpb25CYXRjaC5rZXlQYXRoLFxyXG4gICAgICAgIGF1dG9JbmNyZW1lbnQ6IHRydWVcclxuICAgIH0pO1xyXG4gICAgbXV0YXRpb25CYXRjaGVzU3RvcmUuY3JlYXRlSW5kZXgoRGJNdXRhdGlvbkJhdGNoLnVzZXJNdXRhdGlvbnNJbmRleCwgRGJNdXRhdGlvbkJhdGNoLnVzZXJNdXRhdGlvbnNLZXlQYXRoLCB7IHVuaXF1ZTogdHJ1ZSB9KTtcclxuICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKERiRG9jdW1lbnRNdXRhdGlvbi5zdG9yZSk7XHJcbn1cclxuLyoqXHJcbiAqIFVwZ3JhZGUgZnVuY3Rpb24gdG8gbWlncmF0ZSB0aGUgJ211dGF0aW9ucycgc3RvcmUgZnJvbSBWMSB0byBWMy4gTG9hZHNcclxuICogYW5kIHJld3JpdGVzIGFsbCBkYXRhLlxyXG4gKi9cclxuZnVuY3Rpb24gdXBncmFkZU11dGF0aW9uQmF0Y2hTY2hlbWFBbmRNaWdyYXRlRGF0YShkYiwgdHhuKSB7XHJcbiAgICB2YXIgdjFNdXRhdGlvbnNTdG9yZSA9IHR4bi5zdG9yZShEYk11dGF0aW9uQmF0Y2guc3RvcmUpO1xyXG4gICAgcmV0dXJuIHYxTXV0YXRpb25zU3RvcmUubG9hZEFsbCgpLm5leHQoZnVuY3Rpb24gKGV4aXN0aW5nTXV0YXRpb25zKSB7XHJcbiAgICAgICAgZGIuZGVsZXRlT2JqZWN0U3RvcmUoRGJNdXRhdGlvbkJhdGNoLnN0b3JlKTtcclxuICAgICAgICB2YXIgbXV0YXRpb25zU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShEYk11dGF0aW9uQmF0Y2guc3RvcmUsIHtcclxuICAgICAgICAgICAga2V5UGF0aDogRGJNdXRhdGlvbkJhdGNoLmtleVBhdGgsXHJcbiAgICAgICAgICAgIGF1dG9JbmNyZW1lbnQ6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBtdXRhdGlvbnNTdG9yZS5jcmVhdGVJbmRleChEYk11dGF0aW9uQmF0Y2gudXNlck11dGF0aW9uc0luZGV4LCBEYk11dGF0aW9uQmF0Y2gudXNlck11dGF0aW9uc0tleVBhdGgsIHsgdW5pcXVlOiB0cnVlIH0pO1xyXG4gICAgICAgIHZhciB2M011dGF0aW9uc1N0b3JlID0gdHhuLnN0b3JlKERiTXV0YXRpb25CYXRjaC5zdG9yZSk7XHJcbiAgICAgICAgdmFyIHdyaXRlQWxsID0gZXhpc3RpbmdNdXRhdGlvbnMubWFwKGZ1bmN0aW9uIChtdXRhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdjNNdXRhdGlvbnNTdG9yZS5wdXQobXV0YXRpb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcih3cml0ZUFsbCk7XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogQW4gb2JqZWN0IHRvIGJlIHN0b3JlZCBpbiB0aGUgJ2RvY3VtZW50TXV0YXRpb25zJyBzdG9yZSBpbiBJbmRleGVkRGIuXHJcbiAqXHJcbiAqIEEgbWFudWFsbHkgbWFpbnRhaW5lZCBpbmRleCBvZiBhbGwgdGhlIG11dGF0aW9uIGJhdGNoZXMgdGhhdCBhZmZlY3QgYSBnaXZlblxyXG4gKiBkb2N1bWVudCBrZXkuIFRoZSByb3dzIGluIHRoaXMgdGFibGUgYXJlIHJlZmVyZW5jZXMgYmFzZWQgb24gdGhlIGNvbnRlbnRzIG9mXHJcbiAqIERiTXV0YXRpb25CYXRjaC5tdXRhdGlvbnMuXHJcbiAqL1xyXG52YXIgRGJEb2N1bWVudE11dGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGJEb2N1bWVudE11dGF0aW9uKCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgW3VzZXJJZF0ga2V5IGZvciB1c2UgaW4gdGhlIERiRG9jdW1lbnRNdXRhdGlvbnMgaW5kZXggdG8gaXRlcmF0ZVxyXG4gICAgICogb3ZlciBhbGwgb2YgYSB1c2VyJ3MgZG9jdW1lbnQgbXV0YXRpb25zLlxyXG4gICAgICovXHJcbiAgICBEYkRvY3VtZW50TXV0YXRpb24ucHJlZml4Rm9yVXNlciA9IGZ1bmN0aW9uICh1c2VySWQpIHtcclxuICAgICAgICByZXR1cm4gW3VzZXJJZF07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgW3VzZXJJZCwgZW5jb2RlZFBhdGhdIGtleSBmb3IgdXNlIGluIHRoZSBEYkRvY3VtZW50TXV0YXRpb25zXHJcbiAgICAgKiBpbmRleCB0byBpdGVyYXRlIG92ZXIgYWxsIGF0IGRvY3VtZW50IG11dGF0aW9ucyBmb3IgYSBnaXZlbiBwYXRoIG9yIGxvd2VyLlxyXG4gICAgICovXHJcbiAgICBEYkRvY3VtZW50TXV0YXRpb24ucHJlZml4Rm9yUGF0aCA9IGZ1bmN0aW9uICh1c2VySWQsIHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gW3VzZXJJZCwgZW5jb2RlKHBhdGgpXTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBmdWxsIGluZGV4IGtleSBvZiBbdXNlcklkLCBlbmNvZGVkUGF0aCwgYmF0Y2hJZF0gZm9yIGluc2VydGluZ1xyXG4gICAgICogYW5kIGRlbGV0aW5nIGludG8gdGhlIERiRG9jdW1lbnRNdXRhdGlvbnMgaW5kZXguXHJcbiAgICAgKi9cclxuICAgIERiRG9jdW1lbnRNdXRhdGlvbi5rZXkgPSBmdW5jdGlvbiAodXNlcklkLCBwYXRoLCBiYXRjaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIFt1c2VySWQsIGVuY29kZShwYXRoKSwgYmF0Y2hJZF07XHJcbiAgICB9O1xyXG4gICAgRGJEb2N1bWVudE11dGF0aW9uLnN0b3JlID0gJ2RvY3VtZW50TXV0YXRpb25zJztcclxuICAgIC8qKlxyXG4gICAgICogQmVjYXVzZSB3ZSBzdG9yZSBhbGwgdGhlIHVzZWZ1bCBpbmZvcm1hdGlvbiBmb3IgdGhpcyBzdG9yZSBpbiB0aGUga2V5LFxyXG4gICAgICogdGhlcmUgaXMgbm8gdXNlZnVsIGluZm9ybWF0aW9uIHRvIHN0b3JlIGFzIHRoZSB2YWx1ZS4gVGhlIHJhdyAodW5lbmNvZGVkKVxyXG4gICAgICogcGF0aCBjYW5ub3QgYmUgc3RvcmVkIGJlY2F1c2UgSW5kZXhlZERiIGRvZXNuJ3Qgc3RvcmUgcHJvdG90eXBlXHJcbiAgICAgKiBpbmZvcm1hdGlvbi5cclxuICAgICAqL1xyXG4gICAgRGJEb2N1bWVudE11dGF0aW9uLlBMQUNFSE9MREVSID0gbmV3IERiRG9jdW1lbnRNdXRhdGlvbigpO1xyXG4gICAgcmV0dXJuIERiRG9jdW1lbnRNdXRhdGlvbjtcclxufSgpKTtcclxuZnVuY3Rpb24gY3JlYXRlUmVtb3RlRG9jdW1lbnRDYWNoZShkYikge1xyXG4gICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoRGJSZW1vdGVEb2N1bWVudC5zdG9yZSk7XHJcbn1cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgdGhlIGtub3duIGFic2VuY2Ugb2YgYSBkb2N1bWVudCBhdCBhIHBhcnRpY3VsYXIgdmVyc2lvbi5cclxuICogU3RvcmVkIGluIEluZGV4ZWREYiBhcyBwYXJ0IG9mIGEgRGJSZW1vdGVEb2N1bWVudCBvYmplY3QuXHJcbiAqL1xyXG52YXIgRGJOb0RvY3VtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGJOb0RvY3VtZW50KHBhdGgsIHJlYWRUaW1lKSB7XHJcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcclxuICAgICAgICB0aGlzLnJlYWRUaW1lID0gcmVhZFRpbWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRGJOb0RvY3VtZW50O1xyXG59KCkpO1xyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGRvY3VtZW50IHRoYXQgaXMga25vd24gdG8gZXhpc3QgYnV0IHdob3NlIGRhdGEgaXMgdW5rbm93bi5cclxuICogU3RvcmVkIGluIEluZGV4ZWREYiBhcyBwYXJ0IG9mIGEgRGJSZW1vdGVEb2N1bWVudCBvYmplY3QuXHJcbiAqL1xyXG52YXIgRGJVbmtub3duRG9jdW1lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYlVua25vd25Eb2N1bWVudChwYXRoLCB2ZXJzaW9uKSB7XHJcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcclxuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERiVW5rbm93bkRvY3VtZW50O1xyXG59KCkpO1xyXG4vKipcclxuICogQW4gb2JqZWN0IHRvIGJlIHN0b3JlZCBpbiB0aGUgJ3JlbW90ZURvY3VtZW50cycgc3RvcmUgaW4gSW5kZXhlZERiLlxyXG4gKiBJdCByZXByZXNlbnRzIGVpdGhlcjpcclxuICpcclxuICogLSBBIGNvbXBsZXRlIGRvY3VtZW50LlxyXG4gKiAtIEEgXCJubyBkb2N1bWVudFwiIHJlcHJlc2VudGluZyBhIGRvY3VtZW50IHRoYXQgaXMga25vd24gbm90IHRvIGV4aXN0IChhdFxyXG4gKiBzb21lIHZlcnNpb24pLlxyXG4gKiAtIEFuIFwidW5rbm93biBkb2N1bWVudFwiIHJlcHJlc2VudGluZyBhIGRvY3VtZW50IHRoYXQgaXMga25vd24gdG8gZXhpc3QgKGF0XHJcbiAqIHNvbWUgdmVyc2lvbikgYnV0IHdob3NlIGNvbnRlbnRzIGFyZSB1bmtub3duLlxyXG4gKlxyXG4gKiBOb3RlOiBUaGlzIGlzIHRoZSBwZXJzaXN0ZWQgZXF1aXZhbGVudCBvZiBhIE1heWJlRG9jdW1lbnQgYW5kIGNvdWxkIHBlcmhhcHNcclxuICogYmUgbWFkZSBtb3JlIGdlbmVyYWwgaWYgbmVjZXNzYXJ5LlxyXG4gKi9cclxudmFyIERiUmVtb3RlRG9jdW1lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYlJlbW90ZURvY3VtZW50KFxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdG8gYW4gaW5zdGFuY2Ugb2YgRGJVbmtub3duRG9jdW1lbnQgaWYgdGhlIGRhdGEgZm9yIGEgZG9jdW1lbnQgaXNcclxuICAgICAqIG5vdCBrbm93biwgYnV0IGl0IGlzIGtub3duIHRoYXQgYSBkb2N1bWVudCBleGlzdHMgYXQgdGhlIHNwZWNpZmllZFxyXG4gICAgICogdmVyc2lvbiAoZS5nLiBpdCBoYWQgYSBzdWNjZXNzZnVsIHVwZGF0ZSBhcHBsaWVkIHRvIGl0KVxyXG4gICAgICovXHJcbiAgICB1bmtub3duRG9jdW1lbnQsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdG8gYW4gaW5zdGFuY2Ugb2YgYSBEYk5vRG9jdW1lbnQgaWYgaXQgaXMga25vd24gdGhhdCBubyBkb2N1bWVudFxyXG4gICAgICogZXhpc3RzLlxyXG4gICAgICovXHJcbiAgICBub0RvY3VtZW50LCBcclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRvIGFuIGluc3RhbmNlIG9mIGEgRG9jdW1lbnQgaWYgdGhlcmUncyBhIGNhY2hlZCB2ZXJzaW9uIG9mIHRoZVxyXG4gICAgICogZG9jdW1lbnQuXHJcbiAgICAgKi9cclxuICAgIGRvY3VtZW50LCBcclxuICAgIC8qKlxyXG4gICAgICogRG9jdW1lbnRzIHRoYXQgd2VyZSB3cml0dGVuIHRvIHRoZSByZW1vdGUgZG9jdW1lbnQgc3RvcmUgYmFzZWQgb25cclxuICAgICAqIGEgd3JpdGUgYWNrbm93bGVkZ21lbnQgYXJlIG1hcmtlZCB3aXRoIGBoYXNDb21taXR0ZWRNdXRhdGlvbnNgLiBUaGVzZVxyXG4gICAgICogZG9jdW1lbnRzIGFyZSBwb3RlbnRpYWxseSBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgYmFja2VuZCdzIGNvcHkgYW5kIHVzZVxyXG4gICAgICogdGhlIHdyaXRlJ3MgY29tbWl0IHZlcnNpb24gYXMgdGhlaXIgZG9jdW1lbnQgdmVyc2lvbi5cclxuICAgICAqL1xyXG4gICAgaGFzQ29tbWl0dGVkTXV0YXRpb25zKSB7XHJcbiAgICAgICAgdGhpcy51bmtub3duRG9jdW1lbnQgPSB1bmtub3duRG9jdW1lbnQ7XHJcbiAgICAgICAgdGhpcy5ub0RvY3VtZW50ID0gbm9Eb2N1bWVudDtcclxuICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XHJcbiAgICAgICAgdGhpcy5oYXNDb21taXR0ZWRNdXRhdGlvbnMgPSBoYXNDb21taXR0ZWRNdXRhdGlvbnM7XHJcbiAgICB9XHJcbiAgICBEYlJlbW90ZURvY3VtZW50LnN0b3JlID0gJ3JlbW90ZURvY3VtZW50cyc7XHJcbiAgICByZXR1cm4gRGJSZW1vdGVEb2N1bWVudDtcclxufSgpKTtcclxuLyoqXHJcbiAqIEFuIG9iamVjdCB0byBiZSBzdG9yZWQgaW4gdGhlICd0YXJnZXRzJyBzdG9yZSBpbiBJbmRleGVkRGIuXHJcbiAqXHJcbiAqIFRoaXMgaXMgYmFzZWQgb24gYW5kIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgcHJvdG8gdXNlZCBpbiB0aGUgaU9TXHJcbiAqIGNsaWVudC5cclxuICpcclxuICogRWFjaCBxdWVyeSB0aGUgY2xpZW50IGxpc3RlbnMgdG8gYWdhaW5zdCB0aGUgc2VydmVyIGlzIHRyYWNrZWQgb24gZGlzayBzb1xyXG4gKiB0aGF0IHRoZSBxdWVyeSBjYW4gYmUgZWZmaWNpZW50bHkgcmVzdW1lZCBvbiByZXN0YXJ0LlxyXG4gKi9cclxudmFyIERiVGFyZ2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGJUYXJnZXQoXHJcbiAgICAvKipcclxuICAgICAqIEFuIGF1dG8tZ2VuZXJhdGVkIHNlcXVlbnRpYWwgbnVtZXJpYyBpZGVudGlmaWVyIGZvciB0aGUgcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogUXVlcmllcyBhcmUgc3RvcmVkIHVzaW5nIHRoZWlyIGNhbm9uaWNhbElkIGFzIHRoZSBrZXksIGJ1dCB0aGVzZVxyXG4gICAgICogY2Fub25pY2FsSWRzIGNhbiBiZSBxdWl0ZSBsb25nIHNvIHdlIGFkZGl0aW9uYWxseSBhc3NpZ24gYSB1bmlxdWVcclxuICAgICAqIHF1ZXJ5SWQgd2hpY2ggY2FuIGJlIHVzZWQgYnkgcmVmZXJlbmNlZCBkYXRhIHN0cnVjdHVyZXMgKGUuZy5cclxuICAgICAqIGluZGV4ZXMpIHRvIG1pbmltaXplIHRoZSBvbi1kaXNrIGNvc3QuXHJcbiAgICAgKi9cclxuICAgIHRhcmdldElkLCBcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGNhbm9uaWNhbCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoaXMgcXVlcnkuIFRoaXMgaXMgbm90IHVuaXF1ZS5cclxuICAgICAqL1xyXG4gICAgY2Fub25pY2FsSWQsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbGFzdCByZWFkVGltZSByZWNlaXZlZCBmcm9tIHRoZSBXYXRjaCBTZXJ2aWNlIGZvciB0aGlzIHF1ZXJ5LlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgaXMgdGhlIHNhbWUgdmFsdWUgYXMgVGFyZ2V0Q2hhbmdlLnJlYWRfdGltZSBpbiB0aGUgcHJvdG9zLlxyXG4gICAgICovXHJcbiAgICByZWFkVGltZSwgXHJcbiAgICAvKipcclxuICAgICAqIEFuIG9wYXF1ZSwgc2VydmVyLWFzc2lnbmVkIHRva2VuIHRoYXQgYWxsb3dzIHdhdGNoaW5nIGEgcXVlcnkgdG8gYmVcclxuICAgICAqIHJlc3VtZWQgYWZ0ZXIgZGlzY29ubmVjdGluZyB3aXRob3V0IHJldHJhbnNtaXR0aW5nIGFsbCB0aGUgZGF0YVxyXG4gICAgICogdGhhdCBtYXRjaGVzIHRoZSBxdWVyeS4gVGhlIHJlc3VtZSB0b2tlbiBlc3NlbnRpYWxseSBpZGVudGlmaWVzIGFcclxuICAgICAqIHBvaW50IGluIHRpbWUgZnJvbSB3aGljaCB0aGUgc2VydmVyIHNob3VsZCByZXN1bWUgc2VuZGluZyByZXN1bHRzLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgaXMgcmVsYXRlZCB0byB0aGUgc25hcHNob3RWZXJzaW9uIGluIHRoYXQgdGhlIHJlc3VtZVRva2VuXHJcbiAgICAgKiBlZmZlY3RpdmVseSBhbHNvIGVuY29kZXMgdGhhdCB2YWx1ZSwgYnV0IHRoZSByZXN1bWVUb2tlbiBpcyBvcGFxdWVcclxuICAgICAqIGFuZCBzb21ldGltZXMgZW5jb2RlcyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEEgY29uc2VxdWVuY2Ugb2YgdGhpcyBpcyB0aGF0IHRoZSByZXN1bWVUb2tlbiBzaG91bGQgYmUgdXNlZCB3aGVuXHJcbiAgICAgKiBhc2tpbmcgdGhlIHNlcnZlciB0byByZWFzb24gYWJvdXQgd2hlcmUgdGhpcyBjbGllbnQgaXMgaW4gdGhlIHdhdGNoXHJcbiAgICAgKiBzdHJlYW0sIGJ1dCB0aGUgY2xpZW50IHNob3VsZCB1c2UgdGhlIHNuYXBzaG90VmVyc2lvbiBmb3IgaXRzIG93blxyXG4gICAgICogcHVycG9zZXMuXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBpcyB0aGUgc2FtZSB2YWx1ZSBhcyBUYXJnZXRDaGFuZ2UucmVzdW1lX3Rva2VuIGluIHRoZSBwcm90b3MuXHJcbiAgICAgKi9cclxuICAgIHJlc3VtZVRva2VuLCBcclxuICAgIC8qKlxyXG4gICAgICogQSBzZXF1ZW5jZSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBsYXN0IHRpbWUgdGhpcyBxdWVyeSB3YXNcclxuICAgICAqIGxpc3RlbmVkIHRvLCB1c2VkIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24gcHVycG9zZXMuXHJcbiAgICAgKlxyXG4gICAgICogQ29udmVudGlvbmFsbHkgdGhpcyB3b3VsZCBiZSBhIHRpbWVzdGFtcCB2YWx1ZSwgYnV0IGRldmljZS1sb2NhbFxyXG4gICAgICogY2xvY2tzIGFyZSB1bnJlbGlhYmxlIGFuZCB0aGV5IG11c3QgYmUgYWJsZSB0byBjcmVhdGUgbmV3IGxpc3RlbnNcclxuICAgICAqIGV2ZW4gd2hpbGUgZGlzY29ubmVjdGVkLiBJbnN0ZWFkIHRoaXMgc2hvdWxkIGJlIGEgbW9ub3RvbmljYWxseVxyXG4gICAgICogaW5jcmVhc2luZyBudW1iZXIgdGhhdCdzIGluY3JlbWVudGVkIG9uIGVhY2ggbGlzdGVuIGNhbGwuXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgcXVlcnlJZCBzaW5jZSB0aGUgcXVlcnlJZCBpcyBhblxyXG4gICAgICogaW1tdXRhYmxlIGlkZW50aWZpZXIgYXNzaWduZWQgdG8gdGhlIFF1ZXJ5IG9uIGZpcnN0IHVzZSB3aGlsZVxyXG4gICAgICogbGFzdExpc3RlblNlcXVlbmNlTnVtYmVyIGlzIHVwZGF0ZWQgZXZlcnkgdGltZSB0aGUgcXVlcnkgaXNcclxuICAgICAqIGxpc3RlbmVkIHRvLlxyXG4gICAgICovXHJcbiAgICBsYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcXVlcnkgZm9yIHRoaXMgdGFyZ2V0LlxyXG4gICAgICpcclxuICAgICAqIEJlY2F1c2UgY2Fub25pY2FsIGlkcyBhcmUgbm90IHVuaXF1ZSB3ZSBtdXN0IHN0b3JlIHRoZSBhY3R1YWwgcXVlcnkuIFdlXHJcbiAgICAgKiB1c2UgdGhlIHByb3RvIHRvIGhhdmUgYW4gb2JqZWN0IHdlIGNhbiBwZXJzaXN0IHdpdGhvdXQgaGF2aW5nIHRvXHJcbiAgICAgKiBkdXBsaWNhdGUgdHJhbnNsYXRpb24gbG9naWMgdG8gYW5kIGZyb20gYSBgUXVlcnlgIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgcXVlcnkpIHtcclxuICAgICAgICB0aGlzLnRhcmdldElkID0gdGFyZ2V0SWQ7XHJcbiAgICAgICAgdGhpcy5jYW5vbmljYWxJZCA9IGNhbm9uaWNhbElkO1xyXG4gICAgICAgIHRoaXMucmVhZFRpbWUgPSByZWFkVGltZTtcclxuICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gcmVzdW1lVG9rZW47XHJcbiAgICAgICAgdGhpcy5sYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgPSBsYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgfVxyXG4gICAgRGJUYXJnZXQuc3RvcmUgPSAndGFyZ2V0cyc7XHJcbiAgICAvKiogS2V5cyBhcmUgYXV0b21hdGljYWxseSBhc3NpZ25lZCB2aWEgdGhlIHRhcmdldElkIHByb3BlcnR5LiAqL1xyXG4gICAgRGJUYXJnZXQua2V5UGF0aCA9ICd0YXJnZXRJZCc7XHJcbiAgICAvKiogVGhlIG5hbWUgb2YgdGhlIHF1ZXJ5VGFyZ2V0cyBpbmRleC4gKi9cclxuICAgIERiVGFyZ2V0LnF1ZXJ5VGFyZ2V0c0luZGV4TmFtZSA9ICdxdWVyeVRhcmdldHNJbmRleCc7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpbmRleCBvZiBhbGwgY2Fub25pY2FsSWRzIHRvIHRoZSB0YXJnZXRzIHRoYXQgdGhleSBtYXRjaC4gVGhpcyBpcyBub3RcclxuICAgICAqIGEgdW5pcXVlIG1hcHBpbmcgYmVjYXVzZSBjYW5vbmljYWxJZCBkb2VzIG5vdCBwcm9taXNlIGEgdW5pcXVlIG5hbWUgZm9yIGFsbFxyXG4gICAgICogcG9zc2libGUgcXVlcmllcywgc28gd2UgYXBwZW5kIHRoZSB0YXJnZXRJZCB0byBtYWtlIHRoZSBtYXBwaW5nIHVuaXF1ZS5cclxuICAgICAqL1xyXG4gICAgRGJUYXJnZXQucXVlcnlUYXJnZXRzS2V5UGF0aCA9IFsnY2Fub25pY2FsSWQnLCAndGFyZ2V0SWQnXTtcclxuICAgIHJldHVybiBEYlRhcmdldDtcclxufSgpKTtcclxuLyoqXHJcbiAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgYW4gYXNzb2NpYXRpb24gYmV0d2VlbiBhIHRhcmdldCBhbmQgYSBkb2N1bWVudC5cclxuICogU3RvcmVkIGluIHRoZSB0YXJnZXREb2N1bWVudCBvYmplY3Qgc3RvcmUgdG8gc3RvcmUgdGhlIGRvY3VtZW50cyB0cmFja2VkIGJ5IGFcclxuICogcGFydGljdWxhciB0YXJnZXQuXHJcbiAqL1xyXG52YXIgRGJUYXJnZXREb2N1bWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERiVGFyZ2V0RG9jdW1lbnQoXHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0YXJnZXRJZCBpZGVudGlmeWluZyBhIHRhcmdldC5cclxuICAgICAqL1xyXG4gICAgdGFyZ2V0SWQsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcGF0aCB0byB0aGUgZG9jdW1lbnQsIGFzIGVuY29kZWQgaW4gdGhlIGtleS5cclxuICAgICAqL1xyXG4gICAgcGF0aCkge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSB0YXJnZXRJZDtcclxuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xyXG4gICAgfVxyXG4gICAgLyoqIE5hbWUgb2YgdGhlIEluZGV4ZWREYiBvYmplY3Qgc3RvcmUuICAqL1xyXG4gICAgRGJUYXJnZXREb2N1bWVudC5zdG9yZSA9ICd0YXJnZXREb2N1bWVudHMnO1xyXG4gICAgLyoqIEtleXMgYXJlIGF1dG9tYXRpY2FsbHkgYXNzaWduZWQgdmlhIHRoZSB0YXJnZXRJZCwgcGF0aCBwcm9wZXJ0aWVzLiAqL1xyXG4gICAgRGJUYXJnZXREb2N1bWVudC5rZXlQYXRoID0gWyd0YXJnZXRJZCcsICdwYXRoJ107XHJcbiAgICAvKiogVGhlIGluZGV4IG5hbWUgZm9yIHRoZSByZXZlcnNlIGluZGV4LiAqL1xyXG4gICAgRGJUYXJnZXREb2N1bWVudC5kb2N1bWVudFRhcmdldHNJbmRleCA9ICdkb2N1bWVudFRhcmdldHNJbmRleCc7XHJcbiAgICAvKiogV2UgYWxzbyBuZWVkIHRvIGNyZWF0ZSB0aGUgcmV2ZXJzZSBpbmRleCBmb3IgdGhlc2UgcHJvcGVydGllcy4gKi9cclxuICAgIERiVGFyZ2V0RG9jdW1lbnQuZG9jdW1lbnRUYXJnZXRzS2V5UGF0aCA9IFsncGF0aCcsICd0YXJnZXRJZCddO1xyXG4gICAgcmV0dXJuIERiVGFyZ2V0RG9jdW1lbnQ7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBIHJlY29yZCBvZiBnbG9iYWwgc3RhdGUgdHJhY2tlZCBhY3Jvc3MgYWxsIFRhcmdldHMsIHRyYWNrZWQgc2VwYXJhdGVseVxyXG4gKiB0byBhdm9pZCB0aGUgbmVlZCBmb3IgZXh0cmEgaW5kZXhlcy5cclxuICpcclxuICogVGhpcyBzaG91bGQgYmUga2VwdCBpbi1zeW5jIHdpdGggdGhlIHByb3RvIHVzZWQgaW4gdGhlIGlPUyBjbGllbnQuXHJcbiAqL1xyXG52YXIgRGJUYXJnZXRHbG9iYWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYlRhcmdldEdsb2JhbChcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGhpZ2hlc3QgbnVtYmVyZWQgdGFyZ2V0IGlkIGFjcm9zcyBhbGwgdGFyZ2V0cy5cclxuICAgICAqXHJcbiAgICAgKiBTZWUgRGJUYXJnZXQudGFyZ2V0SWQuXHJcbiAgICAgKi9cclxuICAgIGhpZ2hlc3RUYXJnZXRJZCwgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBoaWdoZXN0IG51bWJlcmVkIGxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciBhY3Jvc3MgYWxsIHRhcmdldHMuXHJcbiAgICAgKlxyXG4gICAgICogU2VlIERiVGFyZ2V0Lmxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlci5cclxuICAgICAqL1xyXG4gICAgaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyLCBcclxuICAgIC8qKlxyXG4gICAgICogQSBnbG9iYWwgc25hcHNob3QgdmVyc2lvbiByZXByZXNlbnRpbmcgdGhlIGxhc3QgY29uc2lzdGVudCBzbmFwc2hvdCB3ZVxyXG4gICAgICogcmVjZWl2ZWQgZnJvbSB0aGUgYmFja2VuZC4gVGhpcyBpcyBtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcgYW5kIGFueVxyXG4gICAgICogc25hcHNob3RzIHJlY2VpdmVkIGZyb20gdGhlIGJhY2tlbmQgcHJpb3IgdG8gdGhpcyB2ZXJzaW9uIChlLmcuIGZvclxyXG4gICAgICogdGFyZ2V0cyByZXN1bWVkIHdpdGggYSByZXN1bWVUb2tlbikgc2hvdWxkIGJlIHN1cHByZXNzZWQgKGJ1ZmZlcmVkKVxyXG4gICAgICogdW50aWwgdGhlIGJhY2tlbmQgaGFzIGNhdWdodCB1cCB0byB0aGlzIHNuYXBzaG90IHZlcnNpb24gYWdhaW4uIFRoaXNcclxuICAgICAqIHByZXZlbnRzIG91ciBjYWNoZSBmcm9tIGV2ZXIgZ29pbmcgYmFja3dhcmRzIGluIHRpbWUuXHJcbiAgICAgKi9cclxuICAgIGxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24sIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHRhcmdldHMgcGVyc2lzdGVkLlxyXG4gICAgICovXHJcbiAgICB0YXJnZXRDb3VudCkge1xyXG4gICAgICAgIHRoaXMuaGlnaGVzdFRhcmdldElkID0gaGlnaGVzdFRhcmdldElkO1xyXG4gICAgICAgIHRoaXMuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyID0gaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyO1xyXG4gICAgICAgIHRoaXMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiA9IGxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb247XHJcbiAgICAgICAgdGhpcy50YXJnZXRDb3VudCA9IHRhcmdldENvdW50O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUga2V5IHN0cmluZyB1c2VkIGZvciB0aGUgc2luZ2xlIG9iamVjdCB0aGF0IGV4aXN0cyBpbiB0aGVcclxuICAgICAqIERiVGFyZ2V0R2xvYmFsIHN0b3JlLlxyXG4gICAgICovXHJcbiAgICBEYlRhcmdldEdsb2JhbC5rZXkgPSAndGFyZ2V0R2xvYmFsS2V5JztcclxuICAgIERiVGFyZ2V0R2xvYmFsLnN0b3JlID0gJ3RhcmdldEdsb2JhbCc7XHJcbiAgICByZXR1cm4gRGJUYXJnZXRHbG9iYWw7XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZVF1ZXJ5Q2FjaGUoZGIpIHtcclxuICAgIHZhciB0YXJnZXREb2N1bWVudHNTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKERiVGFyZ2V0RG9jdW1lbnQuc3RvcmUsIHtcclxuICAgICAgICBrZXlQYXRoOiBEYlRhcmdldERvY3VtZW50LmtleVBhdGhcclxuICAgIH0pO1xyXG4gICAgdGFyZ2V0RG9jdW1lbnRzU3RvcmUuY3JlYXRlSW5kZXgoRGJUYXJnZXREb2N1bWVudC5kb2N1bWVudFRhcmdldHNJbmRleCwgRGJUYXJnZXREb2N1bWVudC5kb2N1bWVudFRhcmdldHNLZXlQYXRoLCB7IHVuaXF1ZTogdHJ1ZSB9KTtcclxuICAgIHZhciB0YXJnZXRTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKERiVGFyZ2V0LnN0b3JlLCB7XHJcbiAgICAgICAga2V5UGF0aDogRGJUYXJnZXQua2V5UGF0aFxyXG4gICAgfSk7XHJcbiAgICAvLyBOT1RFOiBUaGlzIGlzIHVuaXF1ZSBvbmx5IGJlY2F1c2UgdGhlIFRhcmdldElkIGlzIHRoZSBzdWZmaXguXHJcbiAgICB0YXJnZXRTdG9yZS5jcmVhdGVJbmRleChEYlRhcmdldC5xdWVyeVRhcmdldHNJbmRleE5hbWUsIERiVGFyZ2V0LnF1ZXJ5VGFyZ2V0c0tleVBhdGgsIHsgdW5pcXVlOiB0cnVlIH0pO1xyXG4gICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoRGJUYXJnZXRHbG9iYWwuc3RvcmUpO1xyXG59XHJcbmZ1bmN0aW9uIGRyb3BRdWVyeUNhY2hlKGRiKSB7XHJcbiAgICBkYi5kZWxldGVPYmplY3RTdG9yZShEYlRhcmdldERvY3VtZW50LnN0b3JlKTtcclxuICAgIGRiLmRlbGV0ZU9iamVjdFN0b3JlKERiVGFyZ2V0LnN0b3JlKTtcclxuICAgIGRiLmRlbGV0ZU9iamVjdFN0b3JlKERiVGFyZ2V0R2xvYmFsLnN0b3JlKTtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyB0aGUgdGFyZ2V0IGdsb2JhbCBzaW5nbGV0b24gcm93LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0lEQlRyYW5zYWN0aW9ufSB0eG4gVGhlIHZlcnNpb24gdXBncmFkZSB0cmFuc2FjdGlvbiBmb3IgaW5kZXhlZGRiXHJcbiAqL1xyXG5mdW5jdGlvbiB3cml0ZUVtcHR5VGFyZ2V0R2xvYmFsRW50cnkodHhuKSB7XHJcbiAgICB2YXIgZ2xvYmFsU3RvcmUgPSB0eG4uc3RvcmUoRGJUYXJnZXRHbG9iYWwuc3RvcmUpO1xyXG4gICAgdmFyIG1ldGFkYXRhID0gbmV3IERiVGFyZ2V0R2xvYmFsKFxyXG4gICAgLypoaWdoZXN0VGFyZ2V0SWQ9Ki8gMCwgXHJcbiAgICAvKmxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcj0qLyAwLCBTbmFwc2hvdFZlcnNpb24uTUlOLnRvVGltZXN0YW1wKCksIFxyXG4gICAgLyp0YXJnZXRDb3VudD0qLyAwKTtcclxuICAgIHJldHVybiBnbG9iYWxTdG9yZS5wdXQoRGJUYXJnZXRHbG9iYWwua2V5LCBtZXRhZGF0YSk7XHJcbn1cclxuLyoqXHJcbiAqIEFuIG9iamVjdCBzdG9yZSB0byBzdG9yZSB0aGUga2V5cyBvZiBjaGFuZ2VkIGRvY3VtZW50cy4gVGhpcyBpcyB1c2VkIHRvXHJcbiAqIGZhY2lsaXRhdGUgc3RvcmluZyBkb2N1bWVudCBjaGFuZ2Vsb2dzIGluIHRoZSBSZW1vdGUgRG9jdW1lbnQgQ2FjaGUuXHJcbiAqXHJcbiAqIFBPUlRJTkcgTk9URTogVGhpcyBpcyB1c2VkIGZvciBjaGFuZ2UgcHJvcGFnYXRpb24gZHVyaW5nIG11bHRpLXRhYiBzeW5jaW5nXHJcbiAqIGFuZCBub3QgbmVlZGVkIG9uIGlPUyBhbmQgQW5kcm9pZC5cclxuICovXHJcbnZhciBEYlJlbW90ZURvY3VtZW50Q2hhbmdlcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERiUmVtb3RlRG9jdW1lbnRDaGFuZ2VzKFxyXG4gICAgLyoqIFRoZSBrZXlzIG9mIHRoZSBjaGFuZ2VkIGRvY3VtZW50cy4gKi9cclxuICAgIGNoYW5nZXMpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZXMgPSBjaGFuZ2VzO1xyXG4gICAgfVxyXG4gICAgLyoqIE5hbWUgb2YgdGhlIEluZGV4ZWREYiBvYmplY3Qgc3RvcmUuICAqL1xyXG4gICAgRGJSZW1vdGVEb2N1bWVudENoYW5nZXMuc3RvcmUgPSAncmVtb3RlRG9jdW1lbnRDaGFuZ2VzJztcclxuICAgIC8qKiBLZXlzIGFyZSBhdXRvLWdlbmVyYXRlZCB2aWEgdGhlIGBpZGAgcHJvcGVydHkuICovXHJcbiAgICBEYlJlbW90ZURvY3VtZW50Q2hhbmdlcy5rZXlQYXRoID0gJ2lkJztcclxuICAgIHJldHVybiBEYlJlbW90ZURvY3VtZW50Q2hhbmdlcztcclxufSgpKTtcclxuZnVuY3Rpb24gY3JlYXRlUmVtb3RlRG9jdW1lbnRDaGFuZ2VzU3RvcmUoZGIpIHtcclxuICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKERiUmVtb3RlRG9jdW1lbnRDaGFuZ2VzLnN0b3JlLCB7XHJcbiAgICAgICAga2V5UGF0aDogJ2lkJyxcclxuICAgICAgICBhdXRvSW5jcmVtZW50OiB0cnVlXHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogQSByZWNvcmQgb2YgdGhlIG1ldGFkYXRhIHN0YXRlIG9mIGVhY2ggY2xpZW50LlxyXG4gKlxyXG4gKiBQT1JUSU5HIE5PVEU6IFRoaXMgaXMgdXNlZCB0byBzeW5jaHJvbml6ZSBtdWx0aS10YWIgc3RhdGUgYW5kIGRvZXMgbm90IG5lZWRcclxuICogdG8gYmUgcG9ydGVkIHRvIGlPUyBvciBBbmRyb2lkLlxyXG4gKi9cclxudmFyIERiQ2xpZW50TWV0YWRhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYkNsaWVudE1ldGFkYXRhKFxyXG4gICAgLyoqIFRoZSBhdXRvLWdlbmVyYXRlZCBjbGllbnQgaWQgYXNzaWduZWQgYXQgY2xpZW50IHN0YXJ0dXAuICovXHJcbiAgICBjbGllbnRJZCwgXHJcbiAgICAvKiogVGhlIGxhc3QgdGltZSB0aGlzIHN0YXRlIHdhcyB1cGRhdGVkLiAqL1xyXG4gICAgdXBkYXRlVGltZU1zLCBcclxuICAgIC8qKiBXaGV0aGVyIHRoZSBjbGllbnQncyBuZXR3b3JrIGNvbm5lY3Rpb24gaXMgZW5hYmxlZC4gKi9cclxuICAgIG5ldHdvcmtFbmFibGVkLCBcclxuICAgIC8qKiBXaGV0aGVyIHRoaXMgY2xpZW50IGlzIHJ1bm5pbmcgaW4gYSBmb3JlZ3JvdW5kIHRhYi4gKi9cclxuICAgIGluRm9yZWdyb3VuZCwgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBsYXN0IGNoYW5nZSByZWFkIGZyb20gdGhlIERiUmVtb3RlRG9jdW1lbnRDaGFuZ2VzIHN0b3JlLlxyXG4gICAgICogQ2FuIGJlIHVuZGVmaW5lZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXHJcbiAgICAgKi9cclxuICAgIGxhc3RQcm9jZXNzZWREb2N1bWVudENoYW5nZUlkKSB7XHJcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IGNsaWVudElkO1xyXG4gICAgICAgIHRoaXMudXBkYXRlVGltZU1zID0gdXBkYXRlVGltZU1zO1xyXG4gICAgICAgIHRoaXMubmV0d29ya0VuYWJsZWQgPSBuZXR3b3JrRW5hYmxlZDtcclxuICAgICAgICB0aGlzLmluRm9yZWdyb3VuZCA9IGluRm9yZWdyb3VuZDtcclxuICAgICAgICB0aGlzLmxhc3RQcm9jZXNzZWREb2N1bWVudENoYW5nZUlkID0gbGFzdFByb2Nlc3NlZERvY3VtZW50Q2hhbmdlSWQ7XHJcbiAgICB9XHJcbiAgICAvKiogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS4gKi9cclxuICAgIERiQ2xpZW50TWV0YWRhdGEuc3RvcmUgPSAnY2xpZW50TWV0YWRhdGEnO1xyXG4gICAgLyoqIEtleXMgYXJlIGF1dG9tYXRpY2FsbHkgYXNzaWduZWQgdmlhIHRoZSBjbGllbnRJZCBwcm9wZXJ0aWVzLiAqL1xyXG4gICAgRGJDbGllbnRNZXRhZGF0YS5rZXlQYXRoID0gJ2NsaWVudElkJztcclxuICAgIHJldHVybiBEYkNsaWVudE1ldGFkYXRhO1xyXG59KCkpO1xyXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRNZXRhZGF0YVN0b3JlKGRiKSB7XHJcbiAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShEYkNsaWVudE1ldGFkYXRhLnN0b3JlLCB7XHJcbiAgICAgICAga2V5UGF0aDogRGJDbGllbnRNZXRhZGF0YS5rZXlQYXRoXHJcbiAgICB9KTtcclxufVxyXG4vLyBWaXNpYmxlIGZvciB0ZXN0aW5nXHJcbnZhciBWMV9TVE9SRVMgPSBbXHJcbiAgICBEYk11dGF0aW9uUXVldWUuc3RvcmUsXHJcbiAgICBEYk11dGF0aW9uQmF0Y2guc3RvcmUsXHJcbiAgICBEYkRvY3VtZW50TXV0YXRpb24uc3RvcmUsXHJcbiAgICBEYlJlbW90ZURvY3VtZW50LnN0b3JlLFxyXG4gICAgRGJUYXJnZXQuc3RvcmUsXHJcbiAgICBEYlByaW1hcnlDbGllbnQuc3RvcmUsXHJcbiAgICBEYlRhcmdldEdsb2JhbC5zdG9yZSxcclxuICAgIERiVGFyZ2V0RG9jdW1lbnQuc3RvcmVcclxuXTtcclxuLy8gVjIgaXMgbm8gbG9uZ2VyIHVzYWJsZSAoc2VlIGNvbW1lbnQgYXQgdG9wIG9mIGZpbGUpXHJcbi8vIFZpc2libGUgZm9yIHRlc3RpbmdcclxudmFyIFYzX1NUT1JFUyA9IFYxX1NUT1JFUztcclxuLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xyXG52YXIgVjRfU1RPUkVTID0gVjNfU1RPUkVTLmNvbmNhdChbXHJcbiAgICBEYkNsaWVudE1ldGFkYXRhLnN0b3JlLFxyXG4gICAgRGJSZW1vdGVEb2N1bWVudENoYW5nZXMuc3RvcmVcclxuXSk7XHJcbi8qKlxyXG4gKiBUaGUgbGlzdCBvZiBhbGwgZGVmYXVsdCBJbmRleGVkREIgc3RvcmVzIHVzZWQgdGhyb3VnaG91dCB0aGUgU0RLLiBUaGlzIGlzXHJcbiAqIHVzZWQgd2hlbiBjcmVhdGluZyB0cmFuc2FjdGlvbnMgc28gdGhhdCBhY2Nlc3MgYWNyb3NzIGFsbCBzdG9yZXMgaXMgZG9uZVxyXG4gKiBhdG9taWNhbGx5LlxyXG4gKi9cclxudmFyIEFMTF9TVE9SRVMgPSBWNF9TVE9SRVM7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKiogQSBtdXRhdGlvbiBxdWV1ZSBmb3IgYSBzcGVjaWZpYyB1c2VyLCBiYWNrZWQgYnkgSW5kZXhlZERCLiAqL1xyXG52YXIgSW5kZXhlZERiTXV0YXRpb25RdWV1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEluZGV4ZWREYk11dGF0aW9uUXVldWUoXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBub3JtYWxpemVkIHVzZXJJZCAoZS5nLiBudWxsIFVJRCA9PiBcIlwiIHVzZXJJZCkgdXNlZCB0byBzdG9yZSAvXHJcbiAgICAgKiByZXRyaWV2ZSBtdXRhdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIHVzZXJJZCwgc2VyaWFsaXplcikge1xyXG4gICAgICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xyXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IHNlcmlhbGl6ZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FjaGVzIHRoZSBkb2N1bWVudCBrZXlzIGZvciBwZW5kaW5nIG11dGF0aW9uIGJhdGNoZXMuIElmIHRoZSBtdXRhdGlvblxyXG4gICAgICAgICAqIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBJbmRleGVkRGIsIHRoZSBjYWNoZWQgdmFsdWUgbWF5IGNvbnRpbnVlIHRvXHJcbiAgICAgICAgICogYmUgdXNlZCB0byByZXRyaWV2ZSB0aGUgYmF0Y2gncyBkb2N1bWVudCBrZXlzLiBUbyByZW1vdmUgYSBjYWNoZWQgdmFsdWVcclxuICAgICAgICAgKiBsb2NhbGx5LCBgcmVtb3ZlQ2FjaGVkTXV0YXRpb25LZXlzKClgIHNob3VsZCBiZSBpbnZva2VkIGVpdGhlciBkaXJlY3RseVxyXG4gICAgICAgICAqIG9yIHRocm91Z2ggYHJlbW92ZU11dGF0aW9uQmF0Y2hlcygpYC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFdpdGggbXVsdGktdGFiLCB3aGVuIHRoZSBwcmltYXJ5IGNsaWVudCBhY2tub3dsZWRnZXMgb3IgcmVqZWN0cyBhIG11dGF0aW9uLFxyXG4gICAgICAgICAqIHRoaXMgY2FjaGUgaXMgdXNlZCBieSBzZWNvbmRhcnkgY2xpZW50cyB0byBpbnZhbGlkYXRlIHRoZSBsb2NhbFxyXG4gICAgICAgICAqIHZpZXcgb2YgdGhlIGRvY3VtZW50cyB0aGF0IHdlcmUgcHJldmlvdXNseSBhZmZlY3RlZCBieSB0aGUgbXV0YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cclxuICAgICAgICB0aGlzLmRvY3VtZW50S2V5c0J5QmF0Y2hJZCA9IHt9O1xyXG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IG51bGw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgbXV0YXRpb24gcXVldWUgZm9yIHRoZSBnaXZlbiB1c2VyLlxyXG4gICAgICogQHBhcmFtIHVzZXIgVGhlIHVzZXIgZm9yIHdoaWNoIHRvIGNyZWF0ZSBhIG11dGF0aW9uIHF1ZXVlLlxyXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZXIgVGhlIHNlcmlhbGl6ZXIgdG8gdXNlIHdoZW4gcGVyc2lzdGluZyB0byBJbmRleGVkRGIuXHJcbiAgICAgKi9cclxuICAgIEluZGV4ZWREYk11dGF0aW9uUXVldWUuZm9yVXNlciA9IGZ1bmN0aW9uICh1c2VyLCBzZXJpYWxpemVyKSB7XHJcbiAgICAgICAgLy8gVE9ETyhtY2cpOiBGaWd1cmUgb3V0IHdoYXQgY29uc3RyYWludHMgdGhlcmUgYXJlIG9uIHVzZXJJRHNcclxuICAgICAgICAvLyBJbiBwYXJ0aWN1bGFyLCBhcmUgdGhlcmUgYW55IHJlc2VydmVkIGNoYXJhY3RlcnM/IGFyZSBlbXB0eSBpZHMgYWxsb3dlZD9cclxuICAgICAgICAvLyBGb3IgdGhlIG1vbWVudCBzdG9yZSB0aGVzZSB0b2dldGhlciBpbiB0aGUgc2FtZSBtdXRhdGlvbnMgdGFibGUgYXNzdW1pbmdcclxuICAgICAgICAvLyB0aGF0IGVtcHR5IHVzZXJJRHMgYXJlbid0IGFsbG93ZWQuXHJcbiAgICAgICAgYXNzZXJ0KHVzZXIudWlkICE9PSAnJywgJ1VzZXJJRCBtdXN0IG5vdCBiZSBhbiBlbXB0eSBzdHJpbmcuJyk7XHJcbiAgICAgICAgdmFyIHVzZXJJZCA9IHVzZXIuaXNBdXRoZW50aWNhdGVkKCkgPyB1c2VyLnVpZCA6ICcnO1xyXG4gICAgICAgIHJldHVybiBuZXcgSW5kZXhlZERiTXV0YXRpb25RdWV1ZSh1c2VySWQsIHNlcmlhbGl6ZXIpO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYk11dGF0aW9uUXVldWUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBPbiB0aGUgV2ViLCBtdXRhdGlvbiBiYXRjaCBJRHMgYXJlIGF1dG8tZ2VuZXJhdGVkIGJ5XHJcbiAgICAgICAgLy8gSW5kZXhlZERiLCB3aGljaCBndWFyYW50ZWVzIHRoZWlyIHVuaXF1ZW5lc3MgYWNyb3NzIGFsbCB1c2Vycy5cclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5jaGVja0VtcHR5ID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIGVtcHR5ID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcmFuZ2UgPSBJREJLZXlSYW5nZS5ib3VuZChbdGhpcy51c2VySWQsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWV0sIFt0aGlzLnVzZXJJZCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXSk7XHJcbiAgICAgICAgcmV0dXJuIG11dGF0aW9uc1N0b3JlKHRyYW5zYWN0aW9uKVxyXG4gICAgICAgICAgICAuaXRlcmF0ZSh7IGluZGV4OiBEYk11dGF0aW9uQmF0Y2gudXNlck11dGF0aW9uc0luZGV4LCByYW5nZTogcmFuZ2UgfSwgZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgZW1wdHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29udHJvbC5kb25lKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZW1wdHk7IH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYk11dGF0aW9uUXVldWUucHJvdG90eXBlLmFja25vd2xlZGdlQmF0Y2ggPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGJhdGNoLCBzdHJlYW1Ub2tlbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldE11dGF0aW9uUXVldWVNZXRhZGF0YSh0cmFuc2FjdGlvbikubmV4dChmdW5jdGlvbiAobWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIGJhdGNoSWQgPSBiYXRjaC5iYXRjaElkO1xyXG4gICAgICAgICAgICBhc3NlcnQoYmF0Y2hJZCA+IG1ldGFkYXRhLmxhc3RBY2tub3dsZWRnZWRCYXRjaElkLCAnTXV0YXRpb24gYmF0Y2hJRHMgbXVzdCBiZSBhY2tub3dsZWRnZWQgaW4gb3JkZXInKTtcclxuICAgICAgICAgICAgbWV0YWRhdGEubGFzdEFja25vd2xlZGdlZEJhdGNoSWQgPSBiYXRjaElkO1xyXG4gICAgICAgICAgICBtZXRhZGF0YS5sYXN0U3RyZWFtVG9rZW4gPSBjb252ZXJ0U3RyZWFtVG9rZW4oc3RyZWFtVG9rZW4pO1xyXG4gICAgICAgICAgICByZXR1cm4gbXV0YXRpb25RdWV1ZXNTdG9yZSh0cmFuc2FjdGlvbikucHV0KG1ldGFkYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5nZXRMYXN0U3RyZWFtVG9rZW4gPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNdXRhdGlvblF1ZXVlTWV0YWRhdGEodHJhbnNhY3Rpb24pLm5leHQoZnVuY3Rpb24gKG1ldGFkYXRhKSB7IHJldHVybiBtZXRhZGF0YS5sYXN0U3RyZWFtVG9rZW47IH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYk11dGF0aW9uUXVldWUucHJvdG90eXBlLnNldExhc3RTdHJlYW1Ub2tlbiA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgc3RyZWFtVG9rZW4pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNdXRhdGlvblF1ZXVlTWV0YWRhdGEodHJhbnNhY3Rpb24pLm5leHQoZnVuY3Rpb24gKG1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIG1ldGFkYXRhLmxhc3RTdHJlYW1Ub2tlbiA9IGNvbnZlcnRTdHJlYW1Ub2tlbihzdHJlYW1Ub2tlbik7XHJcbiAgICAgICAgICAgIHJldHVybiBtdXRhdGlvblF1ZXVlc1N0b3JlKHRyYW5zYWN0aW9uKS5wdXQobWV0YWRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYk11dGF0aW9uUXVldWUucHJvdG90eXBlLmFkZE11dGF0aW9uQmF0Y2ggPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGxvY2FsV3JpdGVUaW1lLCBtdXRhdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBkb2N1bWVudFN0b3JlID0gZG9jdW1lbnRNdXRhdGlvbnNTdG9yZSh0cmFuc2FjdGlvbik7XHJcbiAgICAgICAgdmFyIG11dGF0aW9uU3RvcmUgPSBtdXRhdGlvbnNTdG9yZSh0cmFuc2FjdGlvbik7XHJcbiAgICAgICAgLy8gVGhlIEluZGV4ZWREYiBpbXBsZW1lbnRhdGlvbiBpbiBDaHJvbWUgKGFuZCBGaXJlZm94KSBkb2VzIG5vdCBoYW5kbGVcclxuICAgICAgICAvLyBjb21wb3VuZCBpbmRpY2VzIHRoYXQgaW5jbHVkZSBhdXRvLWdlbmVyYXRlZCBrZXlzIGNvcnJlY3RseS4gVG8gZW5zdXJlXHJcbiAgICAgICAgLy8gdGhhdCB0aGUgaW5kZXggZW50cnkgaXMgYWRkZWQgY29ycmVjdGx5IGluIGFsbCBicm93c2Vycywgd2UgcGVyZm9ybSB0d29cclxuICAgICAgICAvLyB3cml0ZXM6IFRoZSBmaXJzdCB3cml0ZSBpcyB1c2VkIHRvIHJldHJpZXZlIHRoZSBuZXh0IGF1dG8tZ2VuZXJhdGVkIEJhdGNoXHJcbiAgICAgICAgLy8gSUQsIGFuZCB0aGUgc2Vjb25kIHdyaXRlIHBvcHVsYXRlcyB0aGUgaW5kZXggYW5kIHN0b3JlcyB0aGUgYWN0dWFsXHJcbiAgICAgICAgLy8gbXV0YXRpb24gYmF0Y2guXHJcbiAgICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03MDE5NzJcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IFdlIHdyaXRlIGFuIGVtcHR5IG9iamVjdCB0byBvYnRhaW4ga2V5XHJcbiAgICAgICAgcmV0dXJuIG11dGF0aW9uU3RvcmUuYWRkKHt9KS5uZXh0KGZ1bmN0aW9uIChiYXRjaElkKSB7XHJcbiAgICAgICAgICAgIGFzc2VydCh0eXBlb2YgYmF0Y2hJZCA9PT0gJ251bWJlcicsICdBdXRvLWdlbmVyYXRlZCBrZXkgaXMgbm90IGEgbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIHZhciBiYXRjaCA9IG5ldyBNdXRhdGlvbkJhdGNoKGJhdGNoSWQsIGxvY2FsV3JpdGVUaW1lLCBtdXRhdGlvbnMpO1xyXG4gICAgICAgICAgICB2YXIgZGJCYXRjaCA9IF90aGlzLnNlcmlhbGl6ZXIudG9EYk11dGF0aW9uQmF0Y2goX3RoaXMudXNlcklkLCBiYXRjaCk7XHJcbiAgICAgICAgICAgIF90aGlzLmRvY3VtZW50S2V5c0J5QmF0Y2hJZFtiYXRjaElkXSA9IGJhdGNoLmtleXMoKTtcclxuICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbXV0YXRpb25zXzEgPSBtdXRhdGlvbnM7IF9pIDwgbXV0YXRpb25zXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbXV0YXRpb24gPSBtdXRhdGlvbnNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhLZXkgPSBEYkRvY3VtZW50TXV0YXRpb24ua2V5KF90aGlzLnVzZXJJZCwgbXV0YXRpb24ua2V5LnBhdGgsIGJhdGNoSWQpO1xyXG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChtdXRhdGlvblN0b3JlLnB1dChkYkJhdGNoKSk7XHJcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKGRvY3VtZW50U3RvcmUucHV0KGluZGV4S2V5LCBEYkRvY3VtZW50TXV0YXRpb24uUExBQ0VIT0xERVIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3IocHJvbWlzZXMpLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gYmF0Y2g7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYk11dGF0aW9uUXVldWUucHJvdG90eXBlLmxvb2t1cE11dGF0aW9uQmF0Y2ggPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGJhdGNoSWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBtdXRhdGlvbnNTdG9yZSh0cmFuc2FjdGlvbilcclxuICAgICAgICAgICAgLmdldChiYXRjaElkKVxyXG4gICAgICAgICAgICAubmV4dChmdW5jdGlvbiAoZGJCYXRjaCkge1xyXG4gICAgICAgICAgICBpZiAoZGJCYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRiQmF0Y2gudXNlcklkID09PSBfdGhpcy51c2VySWQsIFwiVW5leHBlY3RlZCB1c2VyICdcIiArIGRiQmF0Y2gudXNlcklkICsgXCInIGZvciBtdXRhdGlvbiBiYXRjaCBcIiArIGJhdGNoSWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNlcmlhbGl6ZXIuZnJvbURiTXV0YXRpb25CYXRjaChkYkJhdGNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5sb29rdXBNdXRhdGlvbktleXMgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGJhdGNoSWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50S2V5c0J5QmF0Y2hJZFtiYXRjaElkXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUodGhpcy5kb2N1bWVudEtleXNCeUJhdGNoSWRbYmF0Y2hJZF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9va3VwTXV0YXRpb25CYXRjaCh0cmFuc2FjdGlvbiwgYmF0Y2hJZCkubmV4dChmdW5jdGlvbiAoYmF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIGlmIChiYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0gYmF0Y2gua2V5cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRvY3VtZW50S2V5c0J5QmF0Y2hJZFtiYXRjaElkXSA9IGtleXM7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYk11dGF0aW9uUXVldWUucHJvdG90eXBlLmdldE5leHRNdXRhdGlvbkJhdGNoQWZ0ZXJCYXRjaElkID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBiYXRjaElkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNdXRhdGlvblF1ZXVlTWV0YWRhdGEodHJhbnNhY3Rpb24pLm5leHQoZnVuY3Rpb24gKG1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIEFsbCBiYXRjaGVzIHdpdGggYmF0Y2hJZCA8PSB0aGlzLm1ldGFkYXRhLmxhc3RBY2tub3dsZWRnZWRCYXRjaElkIGhhdmVcclxuICAgICAgICAgICAgLy8gYmVlbiBhY2tub3dsZWRnZWQgc28gdGhlIGZpcnN0IHVuYWNrbm93bGVkZ2VkIGJhdGNoIGFmdGVyIGJhdGNoSUQgd2lsbFxyXG4gICAgICAgICAgICAvLyBoYXZlIGEgYmF0Y2hJRCBsYXJnZXIgdGhhbiBib3RoIG9mIHRoZXNlIHZhbHVlcy5cclxuICAgICAgICAgICAgdmFyIG5leHRCYXRjaElkID0gTWF0aC5tYXgoYmF0Y2hJZCwgbWV0YWRhdGEubGFzdEFja25vd2xlZGdlZEJhdGNoSWQpICsgMTtcclxuICAgICAgICAgICAgdmFyIHJhbmdlID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChbX3RoaXMudXNlcklkLCBuZXh0QmF0Y2hJZF0pO1xyXG4gICAgICAgICAgICB2YXIgZm91bmRCYXRjaCA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBtdXRhdGlvbnNTdG9yZSh0cmFuc2FjdGlvbilcclxuICAgICAgICAgICAgICAgIC5pdGVyYXRlKHsgaW5kZXg6IERiTXV0YXRpb25CYXRjaC51c2VyTXV0YXRpb25zSW5kZXgsIHJhbmdlOiByYW5nZSB9LCBmdW5jdGlvbiAoa2V5LCBkYkJhdGNoLCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGJCYXRjaC51c2VySWQgPT09IF90aGlzLnVzZXJJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChkYkJhdGNoLmJhdGNoSWQgPj0gbmV4dEJhdGNoSWQsICdTaG91bGQgaGF2ZSBmb3VuZCBtdXRhdGlvbiBhZnRlciAnICsgbmV4dEJhdGNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kQmF0Y2ggPSBfdGhpcy5zZXJpYWxpemVyLmZyb21EYk11dGF0aW9uQmF0Y2goZGJCYXRjaCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLmRvbmUoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZvdW5kQmF0Y2g7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYk11dGF0aW9uUXVldWUucHJvdG90eXBlLmdldEFsbE11dGF0aW9uQmF0Y2hlcyA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gSURCS2V5UmFuZ2UuYm91bmQoW3RoaXMudXNlcklkLCBCQVRDSElEX1VOS05PV05dLCBbdGhpcy51c2VySWQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWV0pO1xyXG4gICAgICAgIHJldHVybiBtdXRhdGlvbnNTdG9yZSh0cmFuc2FjdGlvbilcclxuICAgICAgICAgICAgLmxvYWRBbGwoRGJNdXRhdGlvbkJhdGNoLnVzZXJNdXRhdGlvbnNJbmRleCwgcmFuZ2UpXHJcbiAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uIChkYkJhdGNoZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRiQmF0Y2hlcy5tYXAoZnVuY3Rpb24gKGRiQmF0Y2gpIHsgcmV0dXJuIF90aGlzLnNlcmlhbGl6ZXIuZnJvbURiTXV0YXRpb25CYXRjaChkYkJhdGNoKTsgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXkgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGRvY3VtZW50S2V5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBTY2FuIHRoZSBkb2N1bWVudC1tdXRhdGlvbiBpbmRleCBzdGFydGluZyB3aXRoIGEgcHJlZml4IHN0YXJ0aW5nIHdpdGhcclxuICAgICAgICAvLyB0aGUgZ2l2ZW4gZG9jdW1lbnRLZXkuXHJcbiAgICAgICAgdmFyIGluZGV4UHJlZml4ID0gRGJEb2N1bWVudE11dGF0aW9uLnByZWZpeEZvclBhdGgodGhpcy51c2VySWQsIGRvY3VtZW50S2V5LnBhdGgpO1xyXG4gICAgICAgIHZhciBpbmRleFN0YXJ0ID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChpbmRleFByZWZpeCk7XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnRNdXRhdGlvbnNTdG9yZSh0cmFuc2FjdGlvbilcclxuICAgICAgICAgICAgLml0ZXJhdGUoeyByYW5nZTogaW5kZXhTdGFydCB9LCBmdW5jdGlvbiAoaW5kZXhLZXksIF8sIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgdmFyIHVzZXJJRCA9IGluZGV4S2V5WzBdLCBlbmNvZGVkUGF0aCA9IGluZGV4S2V5WzFdLCBiYXRjaElkID0gaW5kZXhLZXlbMl07XHJcbiAgICAgICAgICAgIC8vIE9ubHkgY29uc2lkZXIgcm93cyBtYXRjaGluZyBleGFjdGx5IHRoZSBzcGVjaWZpYyBrZXkgb2ZcclxuICAgICAgICAgICAgLy8gaW50ZXJlc3QuIE5vdGUgdGhhdCBiZWNhdXNlIHdlIG9yZGVyIGJ5IHBhdGggZmlyc3QsIGFuZCB3ZVxyXG4gICAgICAgICAgICAvLyBvcmRlciB0ZXJtaW5hdG9ycyBiZWZvcmUgcGF0aCBzZXBhcmF0b3JzLCB3ZSdsbCBlbmNvdW50ZXIgYWxsXHJcbiAgICAgICAgICAgIC8vIHRoZSBpbmRleCByb3dzIGZvciBkb2N1bWVudEtleSBjb250aWd1b3VzbHkuIEluIHBhcnRpY3VsYXIsIGFsbFxyXG4gICAgICAgICAgICAvLyB0aGUgcm93cyBmb3IgZG9jdW1lbnRLZXkgd2lsbCBvY2N1ciBiZWZvcmUgYW55IHJvd3MgZm9yXHJcbiAgICAgICAgICAgIC8vIGRvY3VtZW50cyBuZXN0ZWQgaW4gYSBzdWJjb2xsZWN0aW9uIGJlbmVhdGggZG9jdW1lbnRLZXkgc28gd2VcclxuICAgICAgICAgICAgLy8gY2FuIHN0b3AgYXMgc29vbiBhcyB3ZSBoaXQgYW55IHN1Y2ggcm93LlxyXG4gICAgICAgICAgICB2YXIgcGF0aCA9IGRlY29kZSQxKGVuY29kZWRQYXRoKTtcclxuICAgICAgICAgICAgaWYgKHVzZXJJRCAhPT0gX3RoaXMudXNlcklkIHx8ICFkb2N1bWVudEtleS5wYXRoLmlzRXF1YWwocGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2wuZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIExvb2sgdXAgdGhlIG11dGF0aW9uIGJhdGNoIGluIHRoZSBzdG9yZS5cclxuICAgICAgICAgICAgcmV0dXJuIG11dGF0aW9uc1N0b3JlKHRyYW5zYWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgLmdldChiYXRjaElkKVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKG11dGF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW11dGF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZmFpbCgnRGFuZ2xpbmcgZG9jdW1lbnQtbXV0YXRpb24gcmVmZXJlbmNlIGZvdW5kOiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhLZXkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnIHdoaWNoIHBvaW50cyB0byAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmF0Y2hJZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQobXV0YXRpb24udXNlcklkID09PSBfdGhpcy51c2VySWQsIFwiVW5leHBlY3RlZCB1c2VyICdcIiArIG11dGF0aW9uLnVzZXJJZCArIFwiJyBmb3IgbXV0YXRpb24gYmF0Y2ggXCIgKyBiYXRjaElkKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChfdGhpcy5zZXJpYWxpemVyLmZyb21EYk11dGF0aW9uQmF0Y2gobXV0YXRpb24pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzdWx0czsgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXlzID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBkb2N1bWVudEtleXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB1bmlxdWVCYXRjaElEcyA9IG5ldyBTb3J0ZWRTZXQocHJpbWl0aXZlQ29tcGFyYXRvcik7XHJcbiAgICAgICAgdmFyIHByb21pc2VzID0gW107XHJcbiAgICAgICAgZG9jdW1lbnRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGRvY3VtZW50S2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleFN0YXJ0ID0gRGJEb2N1bWVudE11dGF0aW9uLnByZWZpeEZvclBhdGgoX3RoaXMudXNlcklkLCBkb2N1bWVudEtleS5wYXRoKTtcclxuICAgICAgICAgICAgdmFyIHJhbmdlID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChpbmRleFN0YXJ0KTtcclxuICAgICAgICAgICAgdmFyIHByb21pc2UgPSBkb2N1bWVudE11dGF0aW9uc1N0b3JlKHRyYW5zYWN0aW9uKS5pdGVyYXRlKHsgcmFuZ2U6IHJhbmdlIH0sIGZ1bmN0aW9uIChpbmRleEtleSwgXywgY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVzZXJJRCA9IGluZGV4S2V5WzBdLCBlbmNvZGVkUGF0aCA9IGluZGV4S2V5WzFdLCBiYXRjaElEID0gaW5kZXhLZXlbMl07XHJcbiAgICAgICAgICAgICAgICAvLyBPbmx5IGNvbnNpZGVyIHJvd3MgbWF0Y2hpbmcgZXhhY3RseSB0aGUgc3BlY2lmaWMga2V5IG9mXHJcbiAgICAgICAgICAgICAgICAvLyBpbnRlcmVzdC4gTm90ZSB0aGF0IGJlY2F1c2Ugd2Ugb3JkZXIgYnkgcGF0aCBmaXJzdCwgYW5kIHdlXHJcbiAgICAgICAgICAgICAgICAvLyBvcmRlciB0ZXJtaW5hdG9ycyBiZWZvcmUgcGF0aCBzZXBhcmF0b3JzLCB3ZSdsbCBlbmNvdW50ZXIgYWxsXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgaW5kZXggcm93cyBmb3IgZG9jdW1lbnRLZXkgY29udGlndW91c2x5LiBJbiBwYXJ0aWN1bGFyLCBhbGxcclxuICAgICAgICAgICAgICAgIC8vIHRoZSByb3dzIGZvciBkb2N1bWVudEtleSB3aWxsIG9jY3VyIGJlZm9yZSBhbnkgcm93cyBmb3JcclxuICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50cyBuZXN0ZWQgaW4gYSBzdWJjb2xsZWN0aW9uIGJlbmVhdGggZG9jdW1lbnRLZXkgc28gd2VcclxuICAgICAgICAgICAgICAgIC8vIGNhbiBzdG9wIGFzIHNvb24gYXMgd2UgaGl0IGFueSBzdWNoIHJvdy5cclxuICAgICAgICAgICAgICAgIHZhciBwYXRoID0gZGVjb2RlJDEoZW5jb2RlZFBhdGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXJJRCAhPT0gX3RoaXMudXNlcklkIHx8ICFkb2N1bWVudEtleS5wYXRoLmlzRXF1YWwocGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sLmRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1bmlxdWVCYXRjaElEcyA9IHVuaXF1ZUJhdGNoSURzLmFkZChiYXRjaElEKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHByb21pc2VzKS5uZXh0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxvb2t1cE11dGF0aW9uQmF0Y2hlcyh0cmFuc2FjdGlvbiwgdW5pcXVlQmF0Y2hJRHMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYk11dGF0aW9uUXVldWUucHJvdG90eXBlLmdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ1F1ZXJ5ID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBxdWVyeSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgYXNzZXJ0KCFxdWVyeS5pc0RvY3VtZW50UXVlcnkoKSwgXCJEb2N1bWVudCBxdWVyaWVzIHNob3VsZG4ndCBnbyBkb3duIHRoaXMgcGF0aFwiKTtcclxuICAgICAgICB2YXIgcXVlcnlQYXRoID0gcXVlcnkucGF0aDtcclxuICAgICAgICB2YXIgaW1tZWRpYXRlQ2hpbGRyZW5MZW5ndGggPSBxdWVyeVBhdGgubGVuZ3RoICsgMTtcclxuICAgICAgICAvLyBUT0RPKG1jZyk6IEFjdHVhbGx5IGltcGxlbWVudCBhIHNpbmdsZS1jb2xsZWN0aW9uIHF1ZXJ5XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBUaGlzIGlzIGFjdHVhbGx5IGV4ZWN1dGluZyBhbiBhbmNlc3RvciBxdWVyeSwgdHJhdmVyc2luZyB0aGUgd2hvbGVcclxuICAgICAgICAvLyBzdWJ0cmVlIGJlbG93IHRoZSBjb2xsZWN0aW9uIHdoaWNoIGNhbiBiZSBob3JyaWZpY2FsbHkgaW5lZmZpY2llbnQgZm9yXHJcbiAgICAgICAgLy8gc29tZSBzdHJ1Y3R1cmVzLiBUaGUgcmlnaHQgd2F5IHRvIHNvbHZlIHRoaXMgaXMgdG8gaW1wbGVtZW50IHRoZSBmdWxsXHJcbiAgICAgICAgLy8gdmFsdWUgaW5kZXgsIGJ1dCB0aGF0J3Mgbm90IGluIHRoZSBjYXJkcyBpbiB0aGUgbmVhciBmdXR1cmUgc28gdGhpcyBpc1xyXG4gICAgICAgIC8vIHRoZSBiZXN0IHdlIGNhbiBkbyBmb3IgdGhlIG1vbWVudC5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFNpbmNlIHdlIGRvbid0IHlldCBpbmRleCB0aGUgYWN0dWFsIHByb3BlcnRpZXMgaW4gdGhlIG11dGF0aW9ucywgb3VyXHJcbiAgICAgICAgLy8gY3VycmVudCBhcHByb2FjaCBpcyB0byBqdXN0IHJldHVybiBhbGwgbXV0YXRpb24gYmF0Y2hlcyB0aGF0IGFmZmVjdFxyXG4gICAgICAgIC8vIGRvY3VtZW50cyBpbiB0aGUgY29sbGVjdGlvbiBiZWluZyBxdWVyaWVkLlxyXG4gICAgICAgIHZhciBpbmRleFByZWZpeCA9IERiRG9jdW1lbnRNdXRhdGlvbi5wcmVmaXhGb3JQYXRoKHRoaXMudXNlcklkLCBxdWVyeVBhdGgpO1xyXG4gICAgICAgIHZhciBpbmRleFN0YXJ0ID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChpbmRleFByZWZpeCk7XHJcbiAgICAgICAgLy8gQ29sbGVjdCB1cCB1bmlxdWUgYmF0Y2hJRHMgZW5jb3VudGVyZWQgZHVyaW5nIGEgc2NhbiBvZiB0aGUgaW5kZXguIFVzZSBhXHJcbiAgICAgICAgLy8gU29ydGVkU2V0IHRvIGFjY3VtdWxhdGUgYmF0Y2ggSURzIHNvIHRoZXkgY2FuIGJlIHRyYXZlcnNlZCBpbiBvcmRlciBpbiBhXHJcbiAgICAgICAgLy8gc2NhbiBvZiB0aGUgbWFpbiB0YWJsZS5cclxuICAgICAgICB2YXIgdW5pcXVlQmF0Y2hJRHMgPSBuZXcgU29ydGVkU2V0KHByaW1pdGl2ZUNvbXBhcmF0b3IpO1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudE11dGF0aW9uc1N0b3JlKHRyYW5zYWN0aW9uKVxyXG4gICAgICAgICAgICAuaXRlcmF0ZSh7IHJhbmdlOiBpbmRleFN0YXJ0IH0sIGZ1bmN0aW9uIChpbmRleEtleSwgXywgY29udHJvbCkge1xyXG4gICAgICAgICAgICB2YXIgdXNlcklEID0gaW5kZXhLZXlbMF0sIGVuY29kZWRQYXRoID0gaW5kZXhLZXlbMV0sIGJhdGNoSUQgPSBpbmRleEtleVsyXTtcclxuICAgICAgICAgICAgdmFyIHBhdGggPSBkZWNvZGUkMShlbmNvZGVkUGF0aCk7XHJcbiAgICAgICAgICAgIGlmICh1c2VySUQgIT09IF90aGlzLnVzZXJJZCB8fCAhcXVlcnlQYXRoLmlzUHJlZml4T2YocGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2wuZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFJvd3Mgd2l0aCBkb2N1bWVudCBrZXlzIG1vcmUgdGhhbiBvbmUgc2VnbWVudCBsb25nZXIgdGhhbiB0aGVcclxuICAgICAgICAgICAgLy8gcXVlcnkgcGF0aCBjYW4ndCBiZSBtYXRjaGVzLiBGb3IgZXhhbXBsZSwgYSBxdWVyeSBvbiAncm9vbXMnXHJcbiAgICAgICAgICAgIC8vIGNhbid0IG1hdGNoIHRoZSBkb2N1bWVudCAvcm9vbXMvYWJjL21lc3NhZ2VzL3h5eC5cclxuICAgICAgICAgICAgLy8gVE9ETyhtY2cpOiB3ZSdsbCBuZWVkIGEgZGlmZmVyZW50IHNjYW5uZXIgd2hlbiB3ZSBpbXBsZW1lbnRcclxuICAgICAgICAgICAgLy8gYW5jZXN0b3IgcXVlcmllcy5cclxuICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoICE9PSBpbW1lZGlhdGVDaGlsZHJlbkxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHVuaXF1ZUJhdGNoSURzID0gdW5pcXVlQmF0Y2hJRHMuYWRkKGJhdGNoSUQpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmxvb2t1cE11dGF0aW9uQmF0Y2hlcyh0cmFuc2FjdGlvbiwgdW5pcXVlQmF0Y2hJRHMpOyB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5sb29rdXBNdXRhdGlvbkJhdGNoZXMgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGJhdGNoSURzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xyXG4gICAgICAgIC8vIFRPRE8ocm9ja3dvb2QpOiBJbXBsZW1lbnQgdGhpcyB1c2luZyBpdGVyYXRlLlxyXG4gICAgICAgIGJhdGNoSURzLmZvckVhY2goZnVuY3Rpb24gKGJhdGNoSWQpIHtcclxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChtdXRhdGlvbnNTdG9yZSh0cmFuc2FjdGlvbilcclxuICAgICAgICAgICAgICAgIC5nZXQoYmF0Y2hJZClcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uIChtdXRhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZmFpbCgnRGFuZ2xpbmcgZG9jdW1lbnQtbXV0YXRpb24gcmVmZXJlbmNlIGZvdW5kLCAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3doaWNoIHBvaW50cyB0byAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmF0Y2hJZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQobXV0YXRpb24udXNlcklkID09PSBfdGhpcy51c2VySWQsIFwiVW5leHBlY3RlZCB1c2VyICdcIiArIG11dGF0aW9uLnVzZXJJZCArIFwiJyBmb3IgbXV0YXRpb24gYmF0Y2ggXCIgKyBiYXRjaElkKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChfdGhpcy5zZXJpYWxpemVyLmZyb21EYk11dGF0aW9uQmF0Y2gobXV0YXRpb24pKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihwcm9taXNlcykubmV4dChmdW5jdGlvbiAoKSB7IHJldHVybiByZXN1bHRzOyB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5yZW1vdmVNdXRhdGlvbkJhdGNoID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBiYXRjaCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHJlbW92ZU11dGF0aW9uQmF0Y2godHJhbnNhY3Rpb24uc2ltcGxlRGJUcmFuc2FjdGlvbiwgdGhpcy51c2VySWQsIGJhdGNoKS5uZXh0KGZ1bmN0aW9uIChyZW1vdmVkRG9jdW1lbnRzKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnJlbW92ZUNhY2hlZE11dGF0aW9uS2V5cyhiYXRjaC5iYXRjaElkKTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmdhcmJhZ2VDb2xsZWN0b3IgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgcmVtb3ZlZERvY3VtZW50c18xID0gcmVtb3ZlZERvY3VtZW50czsgX2kgPCByZW1vdmVkRG9jdW1lbnRzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHJlbW92ZWREb2N1bWVudHNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ2FyYmFnZUNvbGxlY3Rvci5hZGRQb3RlbnRpYWxHYXJiYWdlS2V5KGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5yZW1vdmVDYWNoZWRNdXRhdGlvbktleXMgPSBmdW5jdGlvbiAoYmF0Y2hJZCkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmRvY3VtZW50S2V5c0J5QmF0Y2hJZFtiYXRjaElkXTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5wZXJmb3JtQ29uc2lzdGVuY3lDaGVjayA9IGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrRW1wdHkodHhuKS5uZXh0KGZ1bmN0aW9uIChlbXB0eSkge1xyXG4gICAgICAgICAgICBpZiAoIWVtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBWZXJpZnkgdGhhdCB0aGVyZSBhcmUgbm8gZW50cmllcyBpbiB0aGUgZG9jdW1lbnRNdXRhdGlvbnMgaW5kZXggaWZcclxuICAgICAgICAgICAgLy8gdGhlIHF1ZXVlIGlzIGVtcHR5LlxyXG4gICAgICAgICAgICB2YXIgc3RhcnRSYW5nZSA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoRGJEb2N1bWVudE11dGF0aW9uLnByZWZpeEZvclVzZXIoX3RoaXMudXNlcklkKSk7XHJcbiAgICAgICAgICAgIHZhciBkYW5nbGluZ011dGF0aW9uUmVmZXJlbmNlcyA9IFtdO1xyXG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnRNdXRhdGlvbnNTdG9yZSh0eG4pXHJcbiAgICAgICAgICAgICAgICAuaXRlcmF0ZSh7IHJhbmdlOiBzdGFydFJhbmdlIH0sIGZ1bmN0aW9uIChrZXksIF8sIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIHZhciB1c2VySUQgPSBrZXlbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAodXNlcklEICE9PSBfdGhpcy51c2VySWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sLmRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IGRlY29kZSQxKGtleVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGFuZ2xpbmdNdXRhdGlvblJlZmVyZW5jZXMucHVzaChwYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydChkYW5nbGluZ011dGF0aW9uUmVmZXJlbmNlcy5sZW5ndGggPT09IDAsICdEb2N1bWVudCBsZWFrIC0tIGRldGVjdGVkIGRhbmdsaW5nIG11dGF0aW9uIHJlZmVyZW5jZXMgd2hlbiBxdWV1ZSBpcyBlbXB0eS4gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ0RhbmdsaW5nIGtleXM6ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGRhbmdsaW5nTXV0YXRpb25SZWZlcmVuY2VzLm1hcChmdW5jdGlvbiAocCkgeyByZXR1cm4gcC5jYW5vbmljYWxTdHJpbmcoKTsgfSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5zZXRHYXJiYWdlQ29sbGVjdG9yID0gZnVuY3Rpb24gKGdjKSB7XHJcbiAgICAgICAgdGhpcy5nYXJiYWdlQ29sbGVjdG9yID0gZ2M7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuY29udGFpbnNLZXkgPSBmdW5jdGlvbiAodHhuLCBrZXkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBpbmRleEtleSA9IERiRG9jdW1lbnRNdXRhdGlvbi5wcmVmaXhGb3JQYXRoKHRoaXMudXNlcklkLCBrZXkucGF0aCk7XHJcbiAgICAgICAgdmFyIGVuY29kZWRQYXRoID0gaW5kZXhLZXlbMV07XHJcbiAgICAgICAgdmFyIHN0YXJ0UmFuZ2UgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKGluZGV4S2V5KTtcclxuICAgICAgICB2YXIgY29udGFpbnNLZXkgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnRNdXRhdGlvbnNTdG9yZSh0eG4pXHJcbiAgICAgICAgICAgIC5pdGVyYXRlKHsgcmFuZ2U6IHN0YXJ0UmFuZ2UsIGtleXNPbmx5OiB0cnVlIH0sIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VySUQgPSBrZXlbMF0sIGtleVBhdGggPSBrZXlbMV0sIC8qYmF0Y2hJRCovIF8gPSBrZXlbMl07XHJcbiAgICAgICAgICAgIGlmICh1c2VySUQgPT09IF90aGlzLnVzZXJJZCAmJiBrZXlQYXRoID09PSBlbmNvZGVkUGF0aCkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbnNLZXkgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRyb2wuZG9uZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRhaW5zS2V5OyB9KTtcclxuICAgIH07XHJcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5IChzdGF0ZSBpcyBoZWxkIGluIG1lbW9yeSBpbiBvdGhlciBjbGllbnRzKS5cclxuICAgIC8qKiBSZXR1cm5zIHRoZSBtdXRhdGlvbiBxdWV1ZSdzIG1ldGFkYXRhIGZyb20gSW5kZXhlZERiLiAqL1xyXG4gICAgSW5kZXhlZERiTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuZ2V0TXV0YXRpb25RdWV1ZU1ldGFkYXRhID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbXV0YXRpb25RdWV1ZXNTdG9yZSh0cmFuc2FjdGlvbilcclxuICAgICAgICAgICAgLmdldCh0aGlzLnVzZXJJZClcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKG1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAobWV0YWRhdGEgfHxcclxuICAgICAgICAgICAgICAgIG5ldyBEYk11dGF0aW9uUXVldWUoX3RoaXMudXNlcklkLCBCQVRDSElEX1VOS05PV04sIFxyXG4gICAgICAgICAgICAgICAgLypsYXN0U3RyZWFtVG9rZW49Ki8gJycpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSW5kZXhlZERiTXV0YXRpb25RdWV1ZTtcclxufSgpKTtcclxuLyoqXHJcbiAqIERlbGV0ZSBhIG11dGF0aW9uIGJhdGNoIGFuZCB0aGUgYXNzb2NpYXRlZCBkb2N1bWVudCBtdXRhdGlvbnMuXHJcbiAqIEByZXR1cm4gQSBQZXJzaXN0ZW5jZVByb21pc2Ugb2YgdGhlIGRvY3VtZW50IG11dGF0aW9ucyB0aGF0IHdlcmUgcmVtb3ZlZC5cclxuICovXHJcbmZ1bmN0aW9uIHJlbW92ZU11dGF0aW9uQmF0Y2godHhuLCB1c2VySWQsIGJhdGNoKSB7XHJcbiAgICB2YXIgbXV0YXRpb25TdG9yZSA9IHR4bi5zdG9yZShEYk11dGF0aW9uQmF0Y2guc3RvcmUpO1xyXG4gICAgdmFyIGluZGV4VHhuID0gdHhuLnN0b3JlKERiRG9jdW1lbnRNdXRhdGlvbi5zdG9yZSk7XHJcbiAgICB2YXIgcHJvbWlzZXMgPSBbXTtcclxuICAgIHZhciByYW5nZSA9IElEQktleVJhbmdlLm9ubHkoYmF0Y2guYmF0Y2hJZCk7XHJcbiAgICB2YXIgbnVtRGVsZXRlZCA9IDA7XHJcbiAgICB2YXIgcmVtb3ZlUHJvbWlzZSA9IG11dGF0aW9uU3RvcmUuaXRlcmF0ZSh7IHJhbmdlOiByYW5nZSB9LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgY29udHJvbCkge1xyXG4gICAgICAgIG51bURlbGV0ZWQrKztcclxuICAgICAgICByZXR1cm4gY29udHJvbC5kZWxldGUoKTtcclxuICAgIH0pO1xyXG4gICAgcHJvbWlzZXMucHVzaChyZW1vdmVQcm9taXNlLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFzc2VydChudW1EZWxldGVkID09PSAxLCAnRGFuZ2xpbmcgZG9jdW1lbnQtbXV0YXRpb24gcmVmZXJlbmNlIGZvdW5kOiBNaXNzaW5nIGJhdGNoICcgK1xyXG4gICAgICAgICAgICBiYXRjaC5iYXRjaElkKTtcclxuICAgIH0pKTtcclxuICAgIHZhciByZW1vdmVkRG9jdW1lbnRzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gYmF0Y2gubXV0YXRpb25zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBtdXRhdGlvbiA9IF9hW19pXTtcclxuICAgICAgICB2YXIgaW5kZXhLZXkgPSBEYkRvY3VtZW50TXV0YXRpb24ua2V5KHVzZXJJZCwgbXV0YXRpb24ua2V5LnBhdGgsIGJhdGNoLmJhdGNoSWQpO1xyXG4gICAgICAgIHByb21pc2VzLnB1c2goaW5kZXhUeG4uZGVsZXRlKGluZGV4S2V5KSk7XHJcbiAgICAgICAgcmVtb3ZlZERvY3VtZW50cy5wdXNoKG11dGF0aW9uLmtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3IocHJvbWlzZXMpLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlZERvY3VtZW50czsgfSk7XHJcbn1cclxuZnVuY3Rpb24gY29udmVydFN0cmVhbVRva2VuKHRva2VuKSB7XHJcbiAgICBpZiAodG9rZW4gaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XHJcbiAgICAgICAgLy8gVE9ETyhiLzc4NzcxNDAzKTogQ29udmVydCB0b2tlbnMgdG8gc3RyaW5ncyBkdXJpbmcgZGVzZXJpYWxpemF0aW9uXHJcbiAgICAgICAgYXNzZXJ0KHByb2Nlc3MuZW52LlVTRV9NT0NLX1BFUlNJU1RFTkNFID09PSAnWUVTJywgJ1BlcnNpc3Rpbmcgbm9uLXN0cmluZyBzdHJlYW0gdG9rZW5zIGlzIG9ubHkgc3VwcG9ydGVkIHdpdGggbW9jayBwZXJzaXN0ZW5jZS4nKTtcclxuICAgICAgICByZXR1cm4gdG9rZW4udG9TdHJpbmcoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB0b2tlbjtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBtdXRhdGlvbnMgb2JqZWN0IHN0b3JlLlxyXG4gKi9cclxuZnVuY3Rpb24gbXV0YXRpb25zU3RvcmUodHhuKSB7XHJcbiAgICByZXR1cm4gSW5kZXhlZERiUGVyc2lzdGVuY2UuZ2V0U3RvcmUodHhuLCBEYk11dGF0aW9uQmF0Y2guc3RvcmUpO1xyXG59XHJcbi8qKlxyXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIG11dGF0aW9uUXVldWVzIG9iamVjdCBzdG9yZS5cclxuICovXHJcbmZ1bmN0aW9uIGRvY3VtZW50TXV0YXRpb25zU3RvcmUodHhuKSB7XHJcbiAgICByZXR1cm4gSW5kZXhlZERiUGVyc2lzdGVuY2UuZ2V0U3RvcmUodHhuLCBEYkRvY3VtZW50TXV0YXRpb24uc3RvcmUpO1xyXG59XHJcbi8qKlxyXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIG11dGF0aW9uUXVldWVzIG9iamVjdCBzdG9yZS5cclxuICovXHJcbmZ1bmN0aW9uIG11dGF0aW9uUXVldWVzU3RvcmUodHhuKSB7XHJcbiAgICByZXR1cm4gSW5kZXhlZERiUGVyc2lzdGVuY2UuZ2V0U3RvcmUodHhuLCBEYk11dGF0aW9uUXVldWUuc3RvcmUpO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgUkVTRVJWRURfQklUUyA9IDE7XHJcbnZhciBHZW5lcmF0b3JJZHM7XHJcbihmdW5jdGlvbiAoR2VuZXJhdG9ySWRzKSB7XHJcbiAgICBHZW5lcmF0b3JJZHNbR2VuZXJhdG9ySWRzW1wiUXVlcnlDYWNoZVwiXSA9IDBdID0gXCJRdWVyeUNhY2hlXCI7XHJcbiAgICBHZW5lcmF0b3JJZHNbR2VuZXJhdG9ySWRzW1wiU3luY0VuZ2luZVwiXSA9IDFdID0gXCJTeW5jRW5naW5lXCI7IC8vIFRoZSB0YXJnZXQgSURzIGZvciBsaW1ibyBkZXRlY3Rpb24gYXJlIG9kZCAoZW5kIGluIDEpLlxyXG59KShHZW5lcmF0b3JJZHMgfHwgKEdlbmVyYXRvcklkcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIHRhcmdldCBJRHMgZm9yIHNlbmRpbmcgdGFyZ2V0cyB0byB0aGVcclxuICogd2F0Y2ggc3RyZWFtLlxyXG4gKlxyXG4gKiBUaGUgY2xpZW50IGNvbnN0cnVjdHMgdHdvIGdlbmVyYXRvcnMsIG9uZSBmb3IgdGhlIHF1ZXJ5IGNhY2hlICh2aWFcclxuICogZm9yUXVlcnlDYWNoZSgpKSwgYW5kIG9uZSBmb3IgbGltYm8gZG9jdW1lbnRzICh2aWEgZm9yU3luY0VuZ2luZSgpKS4gVGhlc2VcclxuICogdHdvIGdlbmVyYXRvcnMgcHJvZHVjZSBub24tb3ZlcmxhcHBpbmcgSURzIChieSB1c2luZyBldmVuIGFuZCBvZGQgSURzXHJcbiAqIHJlc3BlY3RpdmVseSkuXHJcbiAqXHJcbiAqIEJ5IHNlcGFyYXRpbmcgdGhlIHRhcmdldCBJRCBzcGFjZSwgdGhlIHF1ZXJ5IGNhY2hlIGNhbiBnZW5lcmF0ZSB0YXJnZXQgSURzXHJcbiAqIHRoYXQgcGVyc2lzdCBhY3Jvc3MgY2xpZW50IHJlc3RhcnRzLCB3aGlsZSBzeW5jIGVuZ2luZSBjYW4gaW5kZXBlbmRlbnRseVxyXG4gKiBnZW5lcmF0ZSBpbi1tZW1vcnkgdGFyZ2V0IElEcyB0aGF0IGFyZSB0cmFuc2llbnQgYW5kIGNhbiBiZSByZXVzZWQgYWZ0ZXIgYVxyXG4gKiByZXN0YXJ0LlxyXG4gKi9cclxuLy8gVE9ETyhtcnNjaG1pZHQpOiBFeHBsb3JlIHJlbW92aW5nIHRoaXMgY2xhc3MgaW4gZmF2b3Igb2YgZ2VuZXJhdGluZyB0aGVzZSBJRHNcclxuLy8gZGlyZWN0bHkgaW4gU3luY0VuZ2luZSBhbmQgTG9jYWxTdG9yZS5cclxudmFyIFRhcmdldElkR2VuZXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgVGFyZ2V0SWRHZW5lcmF0b3IuIElmIGEgc2VlZCBpcyBwcm92aWRlZCwgdGhlIGdlbmVyYXRvclxyXG4gICAgICogd2lsbCB1c2UgdGhlIHNlZWQgdmFsdWUgYXMgdGhlIG5leHQgdGFyZ2V0IElELlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBUYXJnZXRJZEdlbmVyYXRvcihnZW5lcmF0b3JJZCwgc2VlZCkge1xyXG4gICAgICAgIHRoaXMuZ2VuZXJhdG9ySWQgPSBnZW5lcmF0b3JJZDtcclxuICAgICAgICBhc3NlcnQoKGdlbmVyYXRvcklkICYgUkVTRVJWRURfQklUUykgPT09IGdlbmVyYXRvcklkLCBcIkdlbmVyYXRvciBJRCBcIiArIGdlbmVyYXRvcklkICsgXCIgY29udGFpbnMgbW9yZSB0aGFuIFwiICsgUkVTRVJWRURfQklUUyArIFwiIHJlc2VydmVkIGJpdHNcIik7XHJcbiAgICAgICAgdGhpcy5zZWVrKHNlZWQgIT09IHVuZGVmaW5lZCA/IHNlZWQgOiB0aGlzLmdlbmVyYXRvcklkKTtcclxuICAgIH1cclxuICAgIFRhcmdldElkR2VuZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuZXh0SWQgPSB0aGlzLm5leHRJZDtcclxuICAgICAgICB0aGlzLm5leHRJZCArPSAxIDw8IFJFU0VSVkVEX0JJVFM7XHJcbiAgICAgICAgcmV0dXJuIG5leHRJZDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIElEIHRoYXQgZm9sbG93cyB0aGUgZ2l2ZW4gSUQuIFN1YnNlcXVlbnQgY2FsbHMgdG8gYG5leHQoKWBcclxuICAgICAqIHVzZSB0aGUgbmV3bHkgcmV0dXJuZWQgdGFyZ2V0IElEIGFzIHRoZWlyIGJhc2UuXHJcbiAgICAgKi9cclxuICAgIFRhcmdldElkR2VuZXJhdG9yLnByb3RvdHlwZS5hZnRlciA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHRoaXMuc2Vlayh0YXJnZXRJZCArICgxIDw8IFJFU0VSVkVEX0JJVFMpKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5uZXh0KCk7XHJcbiAgICB9O1xyXG4gICAgVGFyZ2V0SWRHZW5lcmF0b3IucHJvdG90eXBlLnNlZWsgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICBhc3NlcnQoKHRhcmdldElkICYgUkVTRVJWRURfQklUUykgPT09IHRoaXMuZ2VuZXJhdG9ySWQsICdDYW5ub3Qgc3VwcGx5IHRhcmdldCBJRCBmcm9tIGRpZmZlcmVudCBnZW5lcmF0b3IgSUQnKTtcclxuICAgICAgICB0aGlzLm5leHRJZCA9IHRhcmdldElkO1xyXG4gICAgfTtcclxuICAgIFRhcmdldElkR2VuZXJhdG9yLmZvclF1ZXJ5Q2FjaGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gV2Ugc2VlZCB0aGUgcXVlcnkgY2FjaGUgZ2VuZXJhdG9yIHRvIHJldHVybiAnMicgYXMgaXRzIGZpcnN0IElELCBhcyB0aGVyZVxyXG4gICAgICAgIC8vIGlzIG5vIGRpZmZlcmVudGlhdGlvbiBpbiB0aGUgcHJvdG9jb2wgbGF5ZXIgYmV0d2VlbiBhbiB1bnNldCBudW1iZXIgYW5kXHJcbiAgICAgICAgLy8gdGhlIG51bWJlciAnMCcuIElmIHdlIHdlcmUgdG8gc2VudCBhIHRhcmdldCB3aXRoIHRhcmdldCBJRCAnMCcsIHRoZVxyXG4gICAgICAgIC8vIGJhY2tlbmQgd291bGQgY29uc2lkZXIgaXQgdW5zZXQgYW5kIHJlcGxhY2UgaXQgd2l0aCBpdHMgb3duIElELlxyXG4gICAgICAgIHZhciB0YXJnZXRJZEdlbmVyYXRvciA9IG5ldyBUYXJnZXRJZEdlbmVyYXRvcihHZW5lcmF0b3JJZHMuUXVlcnlDYWNoZSwgMik7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldElkR2VuZXJhdG9yO1xyXG4gICAgfTtcclxuICAgIFRhcmdldElkR2VuZXJhdG9yLmZvclN5bmNFbmdpbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gU3luYyBlbmdpbmUgYXNzaWducyB0YXJnZXQgSURzIGZvciBsaW1ibyBkb2N1bWVudCBkZXRlY3Rpb24uXHJcbiAgICAgICAgcmV0dXJuIG5ldyBUYXJnZXRJZEdlbmVyYXRvcihHZW5lcmF0b3JJZHMuU3luY0VuZ2luZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRhcmdldElkR2VuZXJhdG9yO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIExPR19UQUckMSA9ICdTaW1wbGVEYic7XHJcbi8qKlxyXG4gKiBQcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIEluZGV4ZWREYiB3aXRoIGEgc2ltcGxpZmllZCBpbnRlcmZhY2UgdGhhdCB1c2VzXHJcbiAqIFByb21pc2UtbGlrZSByZXR1cm4gdmFsdWVzIHRvIGNoYWluIG9wZXJhdGlvbnMuIFJlYWwgcHJvbWlzZXMgY2Fubm90IGJlIHVzZWRcclxuICogc2luY2UgLnRoZW4oKSBjb250aW51YXRpb25zIGFyZSBleGVjdXRlZCBhc3luY2hyb25vdXNseSAoZS5nLiB2aWFcclxuICogLnNldEltbWVkaWF0ZSksIHdoaWNoIHdvdWxkIGNhdXNlIEluZGV4ZWREQiB0byBlbmQgdGhlIHRyYW5zYWN0aW9uLlxyXG4gKiBTZWUgUGVyc2lzdGVuY2VQcm9taXNlIGZvciBtb3JlIGRldGFpbHMuXHJcbiAqL1xyXG52YXIgU2ltcGxlRGIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTaW1wbGVEYihkYikge1xyXG4gICAgICAgIHRoaXMuZGIgPSBkYjtcclxuICAgIH1cclxuICAgIC8qKiBPcGVucyB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlLCBjcmVhdGluZyBvciB1cGdyYWRpbmcgaXQgaWYgbmVjZXNzYXJ5LiAqL1xyXG4gICAgU2ltcGxlRGIub3Blbk9yQ3JlYXRlID0gZnVuY3Rpb24gKG5hbWUsIHZlcnNpb24sIHNjaGVtYUNvbnZlcnRlcikge1xyXG4gICAgICAgIGFzc2VydChTaW1wbGVEYi5pc0F2YWlsYWJsZSgpLCAnSW5kZXhlZERCIG5vdCBzdXBwb3J0ZWQgaW4gY3VycmVudCBlbnZpcm9ubWVudC4nKTtcclxuICAgICAgICBkZWJ1ZyhMT0dfVEFHJDEsICdPcGVuaW5nIGRhdGFiYXNlOicsIG5hbWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUGVyc2lzdGVuY2VQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBJbnZlc3RpZ2F0ZSBicm93c2VyIGNvbXBhdGliaWxpdHkuXHJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbmRleGVkREJfQVBJL1VzaW5nX0luZGV4ZWREQlxyXG4gICAgICAgICAgICAvLyBzdWdnZXN0cyBJRTkgYW5kIG9sZGVyIFdlYktpdCBicm93c2VycyBoYW5kbGUgdXBncmFkZVxyXG4gICAgICAgICAgICAvLyBkaWZmZXJlbnRseS4gVGhleSBleHBlY3Qgc2V0VmVyc2lvbiwgYXMgZGVzY3JpYmVkIGhlcmU6XHJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JREJWZXJzaW9uQ2hhbmdlUmVxdWVzdC9zZXRWZXJzaW9uXHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gd2luZG93LmluZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pO1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRiID0gZXZlbnQudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IFNpbXBsZURiKGRiKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlcXVlc3Qub25ibG9ja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLkZBSUxFRF9QUkVDT05ESVRJT04sICdDYW5ub3QgdXBncmFkZSBJbmRleGVkREIgc2NoZW1hIHdoaWxlIGFub3RoZXIgdGFiIGlzIG9wZW4uICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICdDbG9zZSBhbGwgdGFicyB0aGF0IGFjY2VzcyBGaXJlc3RvcmUgYW5kIHJlbG9hZCB0aGlzIHBhZ2UgdG8gcHJvY2VlZC4nKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGV2ZW50LnRhcmdldC5lcnJvcik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDEsICdEYXRhYmFzZSBcIicgKyBuYW1lICsgJ1wiIHJlcXVpcmVzIHVwZ3JhZGUgZnJvbSB2ZXJzaW9uOicsIGV2ZW50Lm9sZFZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRiID0gZXZlbnQudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBwcm92aWRlZCBhIHZlcnNpb24gdXBncmFkZSB0cmFuc2FjdGlvbiBmcm9tIHRoZSByZXF1ZXN0LCBzb1xyXG4gICAgICAgICAgICAgICAgLy8gd2Ugd3JhcCB0aGF0IGluIGEgU2ltcGxlRGJUcmFuc2FjdGlvbiB0byBhbGxvdyB1c2Ugb2Ygb3VyIGZyaWVuZGxpZXJcclxuICAgICAgICAgICAgICAgIC8vIEFQSSBmb3Igc2NoZW1hIG1pZ3JhdGlvbiBvcGVyYXRpb25zLlxyXG4gICAgICAgICAgICAgICAgdmFyIHR4biA9IG5ldyBTaW1wbGVEYlRyYW5zYWN0aW9uKHJlcXVlc3QudHJhbnNhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgc2NoZW1hQ29udmVydGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZU9yVXBncmFkZShkYiwgdHhuLCBldmVudC5vbGRWZXJzaW9uLCBTQ0hFTUFfVkVSU0lPTilcclxuICAgICAgICAgICAgICAgICAgICAubmV4dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRyQxLCAnRGF0YWJhc2UgdXBncmFkZSB0byB2ZXJzaW9uICcgKyBTQ0hFTUFfVkVSU0lPTiArICcgY29tcGxldGUnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pLnRvUHJvbWlzZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKiBEZWxldGVzIHRoZSBzcGVjaWZpZWQgZGF0YWJhc2UuICovXHJcbiAgICBTaW1wbGVEYi5kZWxldGUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIGRlYnVnKExPR19UQUckMSwgJ1JlbW92aW5nIGRhdGFiYXNlOicsIG5hbWUpO1xyXG4gICAgICAgIHJldHVybiB3cmFwUmVxdWVzdCh3aW5kb3cuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpKS50b1Byb21pc2UoKTtcclxuICAgIH07XHJcbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIEluZGV4ZWREQiBpcyBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuICovXHJcbiAgICBTaW1wbGVEYi5pc0F2YWlsYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgd2luZG93LmluZGV4ZWREQiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gV2UgZXh0ZW5zaXZlbHkgdXNlIGluZGV4ZWQgYXJyYXkgdmFsdWVzIGFuZCBjb21wb3VuZCBrZXlzLFxyXG4gICAgICAgIC8vIHdoaWNoIElFIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0LiBIb3dldmVyLCB0aGV5IHN0aWxsIGhhdmUgaW5kZXhlZERCXHJcbiAgICAgICAgLy8gZGVmaW5lZCBvbiB0aGUgd2luZG93LCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGZvciB0aGVtIGhlcmUgYW5kIG1ha2Ugc3VyZVxyXG4gICAgICAgIC8vIHRvIHJldHVybiB0aGF0IHBlcnNpc3RlbmNlIGlzIG5vdCBlbmFibGVkIGZvciB0aG9zZSBicm93c2Vycy5cclxuICAgICAgICAvLyBGb3IgdHJhY2tpbmcgc3VwcG9ydCBvZiB0aGlzIGZlYXR1cmUsIHNlZSBoZXJlOlxyXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vc3RhdHVzL2luZGV4ZWRkYmFycmF5c2FuZG11bHRpZW50cnlzdXBwb3J0L1xyXG4gICAgICAgIC8vIElmIHdlIGFyZSBydW5uaW5nIGluIE5vZGUgdXNpbmcgdGhlIEluZGV4ZWREQlNoaW0sIGB3aW5kb3dgIGlzIGRlZmluZWQsXHJcbiAgICAgICAgLy8gYnV0IGB3aW5kb3cubmF2aWdhdG9yYCBpcyBub3QuIEluIHRoaXMgY2FzZSwgd2Ugc3VwcG9ydCBJbmRleGVkREIgYW5kXHJcbiAgICAgICAgLy8gcmV0dXJuIGB0cnVlYC5cclxuICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLmVudi5VU0VfTU9DS19QRVJTSVNURU5DRSA9PT0gJ1lFUyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENoZWNrIHRoZSBVQSBzdHJpbmcgdG8gZmluZCBvdXQgdGhlIGJyb3dzZXIuXHJcbiAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBNb3ZlIHRoaXMgbG9naWMgaW50byBwYWNrYWdlcy91dGlsL2Vudmlyb25tZW50LnRzXHJcbiAgICAgICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XHJcbiAgICAgICAgLy8gSUUgMTBcclxuICAgICAgICAvLyB1YSA9ICdNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSAxMC4wOyBXaW5kb3dzIE5UIDYuMjsgVHJpZGVudC82LjApJztcclxuICAgICAgICAvLyBJRSAxMVxyXG4gICAgICAgIC8vIHVhID0gJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMzsgVHJpZGVudC83LjA7IHJ2OjExLjApIGxpa2UgR2Vja28nO1xyXG4gICAgICAgIC8vIEVkZ2VcclxuICAgICAgICAvLyB1YSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCxcclxuICAgICAgICAvLyBsaWtlIEdlY2tvKSBDaHJvbWUvMzkuMC4yMTcxLjcxIFNhZmFyaS81MzcuMzYgRWRnZS8xMi4wJztcclxuICAgICAgICBpZiAodWEuaW5kZXhPZignTVNJRSAnKSA+IDAgfHxcclxuICAgICAgICAgICAgdWEuaW5kZXhPZignVHJpZGVudC8nKSA+IDAgfHxcclxuICAgICAgICAgICAgdWEuaW5kZXhPZignRWRnZS8nKSA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmcm9tIGEgdHJhbnNhY3Rpb24uICovXHJcbiAgICBTaW1wbGVEYi5nZXRTdG9yZSA9IGZ1bmN0aW9uICh0eG4sIHN0b3JlKSB7XHJcbiAgICAgICAgcmV0dXJuIHR4bi5zdG9yZShzdG9yZSk7XHJcbiAgICB9O1xyXG4gICAgU2ltcGxlRGIucHJvdG90eXBlLnJ1blRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKG1vZGUsIG9iamVjdFN0b3JlcywgdHJhbnNhY3Rpb25Gbikge1xyXG4gICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IFNpbXBsZURiVHJhbnNhY3Rpb24ub3Blbih0aGlzLmRiLCBtb2RlLCBvYmplY3RTdG9yZXMpO1xyXG4gICAgICAgIHZhciB0cmFuc2FjdGlvbkZuUmVzdWx0ID0gdHJhbnNhY3Rpb25Gbih0cmFuc2FjdGlvbilcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvciQkMSkge1xyXG4gICAgICAgICAgICAvLyBBYm9ydCB0aGUgdHJhbnNhY3Rpb24gaWYgdGhlcmUgd2FzIGFuIGVycm9yLlxyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5hYm9ydChlcnJvciQkMSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRvUHJvbWlzZSgpO1xyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byBjb21wbGV0ZSAoaS5lLiBJbmRleGVkRGIncyBvbnN1Y2Nlc3MgZXZlbnQgdG9cclxuICAgICAgICAvLyBmaXJlKSwgYnV0IHN0aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgdHJhbnNhY3Rpb25GblJlc3VsdCBiYWNrIHRvIHRoZVxyXG4gICAgICAgIC8vIGNhbGxlci5cclxuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb24uY29tcGxldGlvblByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0cmFuc2FjdGlvbkZuUmVzdWx0OyB9KTtcclxuICAgIH07XHJcbiAgICBTaW1wbGVEYi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5kYi5jbG9zZSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTaW1wbGVEYjtcclxufSgpKTtcclxuLyoqXHJcbiAqIEEgY29udHJvbGxlciBmb3IgaXRlcmF0aW5nIG92ZXIgYSBrZXkgcmFuZ2Ugb3IgaW5kZXguIEl0IGFsbG93cyBhbiBpdGVyYXRlXHJcbiAqIGNhbGxiYWNrIHRvIGRlbGV0ZSB0aGUgY3VycmVudGx5LXJlZmVyZW5jZWQgb2JqZWN0LCBvciBqdW1wIHRvIGEgbmV3IGtleVxyXG4gKiB3aXRoaW4gdGhlIGtleSByYW5nZSBvciBpbmRleC5cclxuICovXHJcbnZhciBJdGVyYXRpb25Db250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSXRlcmF0aW9uQ29udHJvbGxlcihkYkN1cnNvcikge1xyXG4gICAgICAgIHRoaXMuZGJDdXJzb3IgPSBkYkN1cnNvcjtcclxuICAgICAgICB0aGlzLnNob3VsZFN0b3AgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm5leHRLZXkgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEl0ZXJhdGlvbkNvbnRyb2xsZXIucHJvdG90eXBlLCBcImlzRG9uZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3VsZFN0b3A7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXRlcmF0aW9uQ29udHJvbGxlci5wcm90b3R5cGUsIFwic2tpcFRvS2V5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dEtleTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJdGVyYXRpb25Db250cm9sbGVyLnByb3RvdHlwZSwgXCJjdXJzb3JcIiwge1xyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGJDdXJzb3IgPSB2YWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIHRvIHN0b3AgaXRlcmF0aW9uIGF0IGFueSBwb2ludC5cclxuICAgICAqL1xyXG4gICAgSXRlcmF0aW9uQ29udHJvbGxlci5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNob3VsZFN0b3AgPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIHRvIHNraXAgdG8gdGhhdCBuZXh0IGtleSwgd2hpY2ggY291bGQgYmVcclxuICAgICAqIGFuIGluZGV4IG9yIGEgcHJpbWFyeSBrZXkuXHJcbiAgICAgKi9cclxuICAgIEl0ZXJhdGlvbkNvbnRyb2xsZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdGhpcy5uZXh0S2V5ID0ga2V5O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlIHRoZSBjdXJyZW50IGN1cnNvciB2YWx1ZSBmcm9tIHRoZSBvYmplY3Qgc3RvcmUuXHJcbiAgICAgKlxyXG4gICAgICogTk9URTogWW91IENBTk5PVCBkbyB0aGlzIHdpdGggYSBrZXlzT25seSBxdWVyeS5cclxuICAgICAqL1xyXG4gICAgSXRlcmF0aW9uQ29udHJvbGxlci5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB3cmFwUmVxdWVzdCh0aGlzLmRiQ3Vyc29yLmRlbGV0ZSgpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSXRlcmF0aW9uQ29udHJvbGxlcjtcclxufSgpKTtcclxuLyoqXHJcbiAqIFdyYXBzIGFuIElEQlRyYW5zYWN0aW9uIGFuZCBleHBvc2VzIGEgc3RvcmUoKSBtZXRob2QgdG8gZ2V0IGEgaGFuZGxlIHRvIGFcclxuICogc3BlY2lmaWMgb2JqZWN0IHN0b3JlLlxyXG4gKi9cclxudmFyIFNpbXBsZURiVHJhbnNhY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTaW1wbGVEYlRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb247XHJcbiAgICAgICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBJbmRleGVkRGIgdHJhbnNhY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jb21wbGV0aW9uRGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQkMSgpO1xyXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuY29tcGxldGlvbkRlZmVycmVkLnJlc29sdmUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb24ub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jb21wbGV0aW9uRGVmZXJyZWQucmVqZWN0KHRyYW5zYWN0aW9uLmVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNvbXBsZXRpb25EZWZlcnJlZC5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5jb21wbGV0aW9uRGVmZXJyZWQucmVqZWN0KGV2ZW50LnRhcmdldC5lcnJvcik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFNpbXBsZURiVHJhbnNhY3Rpb24ub3BlbiA9IGZ1bmN0aW9uIChkYiwgbW9kZSwgb2JqZWN0U3RvcmVOYW1lcykge1xyXG4gICAgICAgIHJldHVybiBuZXcgU2ltcGxlRGJUcmFuc2FjdGlvbihkYi50cmFuc2FjdGlvbihvYmplY3RTdG9yZU5hbWVzLCBtb2RlKSk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNpbXBsZURiVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBcImNvbXBsZXRpb25Qcm9taXNlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGlvbkRlZmVycmVkLnByb21pc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBTaW1wbGVEYlRyYW5zYWN0aW9uLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uIChlcnJvciQkMSkge1xyXG4gICAgICAgIGlmIChlcnJvciQkMSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRpb25EZWZlcnJlZC5yZWplY3QoZXJyb3IkJDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuYWJvcnRlZCkge1xyXG4gICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDEsICdBYm9ydGluZyB0cmFuc2FjdGlvbjonLCBlcnJvciQkMSA/IGVycm9yJCQxLm1lc3NhZ2UgOiAnQ2xpZW50LWluaXRpYXRlZCBhYm9ydCcpO1xyXG4gICAgICAgICAgICB0aGlzLmFib3J0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRyYW5zYWN0aW9uLmFib3J0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIFNpbXBsZURiU3RvcmU8S2V5VHlwZSwgVmFsdWVUeXBlPiBmb3IgdGhlIHNwZWNpZmllZCBzdG9yZS4gQWxsXHJcbiAgICAgKiBvcGVyYXRpb25zIHBlcmZvcm1lZCBvbiB0aGUgU2ltcGxlRGJTdG9yZSBoYXBwZW4gd2l0aGluIHRoZSBjb250ZXh0IG9mIHRoaXNcclxuICAgICAqIHRyYW5zYWN0aW9uIGFuZCBpdCBjYW5ub3QgYmUgdXNlZCBhbnltb3JlIG9uY2UgdGhlIHRyYW5zYWN0aW9uIGlzXHJcbiAgICAgKiBjb21wbGV0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZSB0aGF0IHdlIGNhbid0IGFjdHVhbGx5IGVuZm9yY2UgdGhhdCB0aGUgS2V5VHlwZSBhbmQgVmFsdWVUeXBlIGFyZVxyXG4gICAgICogY29ycmVjdCwgYnV0IHRoZXkgYWxsb3cgdHlwZSBzYWZldHkgdGhyb3VnaCB0aGUgcmVzdCBvZiB0aGUgY29uc3VtaW5nIGNvZGUuXHJcbiAgICAgKi9cclxuICAgIFNpbXBsZURiVHJhbnNhY3Rpb24ucHJvdG90eXBlLnN0b3JlID0gZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xyXG4gICAgICAgIHZhciBzdG9yZSA9IHRoaXMudHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcclxuICAgICAgICBhc3NlcnQoISFzdG9yZSwgJ09iamVjdCBzdG9yZSBub3QgcGFydCBvZiB0cmFuc2FjdGlvbjogJyArIHN0b3JlTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTaW1wbGVEYlN0b3JlKHN0b3JlKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU2ltcGxlRGJUcmFuc2FjdGlvbjtcclxufSgpKTtcclxuLyoqXHJcbiAqIEEgd3JhcHBlciBhcm91bmQgYW4gSURCT2JqZWN0U3RvcmUgcHJvdmlkaW5nIGFuIEFQSSB0aGF0OlxyXG4gKlxyXG4gKiAxKSBIYXMgZ2VuZXJpYyBLZXlUeXBlIC8gVmFsdWVUeXBlIHBhcmFtZXRlcnMgdG8gcHJvdmlkZSBzdHJvbmdseS10eXBlZFxyXG4gKiBtZXRob2RzIGZvciBhY3RpbmcgYWdhaW5zdCB0aGUgb2JqZWN0IHN0b3JlLlxyXG4gKiAyKSBEZWFscyB3aXRoIEluZGV4ZWREQidzIG9uc3VjY2VzcyAvIG9uZXJyb3IgZXZlbnQgY2FsbGJhY2tzLCBtYWtpbmcgZXZlcnlcclxuICogbWV0aG9kIHJldHVybiBhIFBlcnNpc3RlbmNlUHJvbWlzZSBpbnN0ZWFkLlxyXG4gKiAzKSBQcm92aWRlcyBhIGhpZ2hlci1sZXZlbCBBUEkgdG8gYXZvaWQgbmVlZGluZyB0byBkbyBleGNlc3NpdmUgd3JhcHBpbmcgb2ZcclxuICogaW50ZXJtZWRpYXRlIEluZGV4ZWREQiB0eXBlcyAoSURCQ3Vyc29yV2l0aFZhbHVlLCBldGMuKVxyXG4gKi9cclxudmFyIFNpbXBsZURiU3RvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTaW1wbGVEYlN0b3JlKHN0b3JlKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xyXG4gICAgfVxyXG4gICAgU2ltcGxlRGJTdG9yZS5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKGtleU9yVmFsdWUsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJlcXVlc3Q7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZGVidWcoTE9HX1RBRyQxLCAnUFVUJywgdGhpcy5zdG9yZS5uYW1lLCBrZXlPclZhbHVlLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3QgPSB0aGlzLnN0b3JlLnB1dCh2YWx1ZSwga2V5T3JWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDEsICdQVVQnLCB0aGlzLnN0b3JlLm5hbWUsICc8YXV0by1rZXk+Jywga2V5T3JWYWx1ZSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3QgPSB0aGlzLnN0b3JlLnB1dChrZXlPclZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdyYXBSZXF1ZXN0KHJlcXVlc3QpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyB2YWx1ZSBpbnRvIGFuIE9iamVjdCBTdG9yZSBhbmQgcmV0dXJucyB0aGUgbmV3IGtleS4gU2ltaWxhciB0b1xyXG4gICAgICogSW5kZXhlZERiJ3MgYGFkZCgpYCwgdGhpcyBtZXRob2Qgd2lsbCBmYWlsIG9uIHByaW1hcnkga2V5IGNvbGxpc2lvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBvYmplY3QgdG8gd3JpdGUuXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGFkZC5cclxuICAgICAqL1xyXG4gICAgU2ltcGxlRGJTdG9yZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgZGVidWcoTE9HX1RBRyQxLCAnQUREJywgdGhpcy5zdG9yZS5uYW1lLCB2YWx1ZSwgdmFsdWUpO1xyXG4gICAgICAgIHZhciByZXF1ZXN0ID0gdGhpcy5zdG9yZS5hZGQodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB3cmFwUmVxdWVzdChyZXF1ZXN0KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IGZyb20gdGhlIHNwZWNpZmllZCBzdG9yZSwgb3IgbnVsbFxyXG4gICAgICogaWYgbm8gb2JqZWN0IGV4aXN0cyB3aXRoIHRoZSBzcGVjaWZpZWQga2V5LlxyXG4gICAgICpcclxuICAgICAqIEBrZXkgVGhlIGtleSBvZiB0aGUgb2JqZWN0IHRvIGdldC5cclxuICAgICAqIEByZXR1cm4gVGhlIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IG9yIG51bGwgaWYgbm8gb2JqZWN0IGV4aXN0cy5cclxuICAgICAqL1xyXG4gICAgU2ltcGxlRGJTdG9yZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB0aGlzLnN0b3JlLmdldChrZXkpO1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgV2UncmUgZG9pbmcgYW4gdW5zYWZlIGNhc3QgdG8gVmFsdWVUeXBlLlxyXG4gICAgICAgIHJldHVybiB3cmFwUmVxdWVzdChyZXF1ZXN0KS5uZXh0KGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgLy8gTm9ybWFsaXplIG5vbmV4aXN0ZW5jZSB0byBudWxsLlxyXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVidWcoTE9HX1RBRyQxLCAnR0VUJywgX3RoaXMuc3RvcmUubmFtZSwga2V5LCByZXN1bHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNpbXBsZURiU3RvcmUucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICBkZWJ1ZyhMT0dfVEFHJDEsICdERUxFVEUnLCB0aGlzLnN0b3JlLm5hbWUsIGtleSk7XHJcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB0aGlzLnN0b3JlLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgIHJldHVybiB3cmFwUmVxdWVzdChyZXF1ZXN0KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIElmIHdlIGV2ZXIgbmVlZCBtb3JlIG9mIHRoZSBjb3VudCB2YXJpYW50cywgd2UgY2FuIGFkZCBvdmVybG9hZHMuIEZvciBub3csXHJcbiAgICAgKiBhbGwgd2UgbmVlZCBpcyB0byBjb3VudCBldmVyeXRoaW5nIGluIGEgc3RvcmUuXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIHN0b3JlLlxyXG4gICAgICovXHJcbiAgICBTaW1wbGVEYlN0b3JlLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBkZWJ1ZyhMT0dfVEFHJDEsICdDT1VOVCcsIHRoaXMuc3RvcmUubmFtZSk7XHJcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB0aGlzLnN0b3JlLmNvdW50KCk7XHJcbiAgICAgICAgcmV0dXJuIHdyYXBSZXF1ZXN0KHJlcXVlc3QpO1xyXG4gICAgfTtcclxuICAgIFNpbXBsZURiU3RvcmUucHJvdG90eXBlLmxvYWRBbGwgPSBmdW5jdGlvbiAoaW5kZXhPclJhbmdlLCByYW5nZSkge1xyXG4gICAgICAgIHZhciBjdXJzb3IgPSB0aGlzLmN1cnNvcih0aGlzLm9wdGlvbnMoaW5kZXhPclJhbmdlLCByYW5nZSkpO1xyXG4gICAgICAgIHZhciByZXN1bHRzID0gW107XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlcmF0ZUN1cnNvcihjdXJzb3IsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfSkubmV4dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNpbXBsZURiU3RvcmUucHJvdG90eXBlLmRlbGV0ZUFsbCA9IGZ1bmN0aW9uIChpbmRleE9yUmFuZ2UsIHJhbmdlKSB7XHJcbiAgICAgICAgZGVidWcoTE9HX1RBRyQxLCAnREVMRVRFIEFMTCcsIHRoaXMuc3RvcmUubmFtZSk7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMoaW5kZXhPclJhbmdlLCByYW5nZSk7XHJcbiAgICAgICAgb3B0aW9ucy5rZXlzT25seSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBjdXJzb3IgPSB0aGlzLmN1cnNvcihvcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVyYXRlQ3Vyc29yKGN1cnNvciwgZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgLy8gTk9URTogQ2FsbGluZyBkZWxldGUoKSBvbiBhIGN1cnNvciBpcyBkb2N1bWVudGVkIGFzIG1vcmUgZWZmaWNpZW50IHRoYW5cclxuICAgICAgICAgICAgLy8gY2FsbGluZyBkZWxldGUoKSBvbiBhbiBvYmplY3Qgc3RvcmUgd2l0aCBhIHNpbmdsZSBrZXlcclxuICAgICAgICAgICAgLy8gKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JREJPYmplY3RTdG9yZS9kZWxldGUpLFxyXG4gICAgICAgICAgICAvLyBob3dldmVyLCB0aGlzIHJlcXVpcmVzIHVzICpub3QqIHRvIHVzZSBhIGtleXNPbmx5IGN1cnNvclxyXG4gICAgICAgICAgICAvLyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0lEQkN1cnNvci9kZWxldGUpLiBXZVxyXG4gICAgICAgICAgICAvLyBtYXkgd2FudCB0byBjb21wYXJlIHRoZSBwZXJmb3JtYW5jZSBvZiBlYWNoIG1ldGhvZC5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2wuZGVsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU2ltcGxlRGJTdG9yZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgb3B0aW9ucztcclxuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zT3JDYWxsYmFjaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JDYWxsYmFjaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN1cnNvciA9IHRoaXMuY3Vyc29yKG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZXJhdGVDdXJzb3IoY3Vyc29yLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgU2ltcGxlRGJTdG9yZS5wcm90b3R5cGUuaXRlcmF0ZUN1cnNvciA9IGZ1bmN0aW9uIChjdXJzb3JSZXF1ZXN0LCBmbikge1xyXG4gICAgICAgIHZhciByZXN1bHRzID0gW107XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW5jZVByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBjdXJzb3JSZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChldmVudC50YXJnZXQuZXJyb3IpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjdXJzb3JSZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnNvciA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnNvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbGxlciA9IG5ldyBJdGVyYXRpb25Db250cm9sbGVyKGN1cnNvcik7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXNlclJlc3VsdCA9IGZuKGN1cnNvci5wcmltYXJ5S2V5LCBjdXJzb3IudmFsdWUsIGNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXJSZXN1bHQgaW5zdGFuY2VvZiBQZXJzaXN0ZW5jZVByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2godXNlclJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlci5pc0RvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjb250cm9sbGVyLnNraXBUb0tleSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKGNvbnRyb2xsZXIuc2tpcFRvS2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KS5uZXh0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHJlc3VsdHMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNpbXBsZURiU3RvcmUucHJvdG90eXBlLm9wdGlvbnMgPSBmdW5jdGlvbiAoaW5kZXhPclJhbmdlLCByYW5nZSkge1xyXG4gICAgICAgIHZhciBpbmRleE5hbWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKGluZGV4T3JSYW5nZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5kZXhPclJhbmdlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaW5kZXhOYW1lID0gaW5kZXhPclJhbmdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KHJhbmdlID09PSB1bmRlZmluZWQsICczcmQgYXJndW1lbnQgbXVzdCBub3QgYmUgZGVmaW5lZCBpZiAybmQgaXMgYSByYW5nZS4nKTtcclxuICAgICAgICAgICAgICAgIHJhbmdlID0gaW5kZXhPclJhbmdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IGluZGV4OiBpbmRleE5hbWUsIHJhbmdlOiByYW5nZSB9O1xyXG4gICAgfTtcclxuICAgIFNpbXBsZURiU3RvcmUucHJvdG90eXBlLmN1cnNvciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9ICduZXh0JztcclxuICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdwcmV2JztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5zdG9yZS5pbmRleChvcHRpb25zLmluZGV4KTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMua2V5c09ubHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleC5vcGVuS2V5Q3Vyc29yKG9wdGlvbnMucmFuZ2UsIGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXgub3BlbkN1cnNvcihvcHRpb25zLnJhbmdlLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5vcGVuQ3Vyc29yKG9wdGlvbnMucmFuZ2UsIGRpcmVjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBTaW1wbGVEYlN0b3JlO1xyXG59KCkpO1xyXG4vKipcclxuICogV3JhcHMgYW4gSURCUmVxdWVzdCBpbiBhIFBlcnNpc3RlbmNlUHJvbWlzZSwgdXNpbmcgdGhlIG9uc3VjY2VzcyAvIG9uZXJyb3JcclxuICogaGFuZGxlcnMgdG8gcmVzb2x2ZSAvIHJlamVjdCB0aGUgUGVyc2lzdGVuY2VQcm9taXNlIGFzIGFwcHJvcHJpYXRlLlxyXG4gKi9cclxuZnVuY3Rpb24gd3JhcFJlcXVlc3QocmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIG5ldyBQZXJzaXN0ZW5jZVByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBldmVudC50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgcmVqZWN0KGV2ZW50LnRhcmdldC5lcnJvcik7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgSW5kZXhlZERiUXVlcnlDYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEluZGV4ZWREYlF1ZXJ5Q2FjaGUoc2VyaWFsaXplcikge1xyXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IHNlcmlhbGl6ZXI7XHJcbiAgICAgICAgLyoqIFRoZSBnYXJiYWdlIGNvbGxlY3RvciB0byBub3RpZnkgYWJvdXQgcG90ZW50aWFsIGdhcmJhZ2Uga2V5cy4gKi9cclxuICAgICAgICB0aGlzLmdhcmJhZ2VDb2xsZWN0b3IgPSBudWxsO1xyXG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogV2UgZG9uJ3QgY2FjaGUgZ2xvYmFsIG1ldGFkYXRhIGZvciB0aGUgcXVlcnkgY2FjaGUsIHNpbmNlXHJcbiAgICAgICAgLy8gc29tZSBvZiBpdCAoaW4gcGFydGljdWxhciBgaGlnaGVzdFRhcmdldElkYCkgY2FuIGJlIG1vZGlmaWVkIGJ5IHNlY29uZGFyeVxyXG4gICAgICAgIC8vIHRhYnMuIFdlIGNvdWxkIHBlcmhhcHMgYmUgbW9yZSBncmFudWxhciAoYW5kIGUuZy4gc3RpbGwgY2FjaGVcclxuICAgICAgICAvLyBgbGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbmAgaW4gbWVtb3J5KSBidXQgZm9yIHNpbXBsaWNpdHkgd2UgY3VycmVudGx5IGdvXHJcbiAgICAgICAgLy8gdG8gSW5kZXhlZERiIHdoZW5ldmVyIHdlIG5lZWQgdG8gcmVhZCBtZXRhZGF0YS4gV2UgY2FuIHJldmlzaXQgaWYgaXQgdHVybnNcclxuICAgICAgICAvLyBvdXQgdG8gaGF2ZSBhIG1lYW5pbmdmdWwgcGVyZm9ybWFuY2UgaW1wYWN0LlxyXG4gICAgICAgIHRoaXMudGFyZ2V0SWRHZW5lcmF0b3IgPSBUYXJnZXRJZEdlbmVyYXRvci5mb3JRdWVyeUNhY2hlKCk7XHJcbiAgICB9XHJcbiAgICBJbmRleGVkRGJRdWVyeUNhY2hlLnByb3RvdHlwZS5hbGxvY2F0ZVRhcmdldElkID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXRyaWV2ZU1ldGFkYXRhKHRyYW5zYWN0aW9uKS5uZXh0KGZ1bmN0aW9uIChtZXRhZGF0YSkge1xyXG4gICAgICAgICAgICBtZXRhZGF0YS5oaWdoZXN0VGFyZ2V0SWQgPSBfdGhpcy50YXJnZXRJZEdlbmVyYXRvci5hZnRlcihtZXRhZGF0YS5oaWdoZXN0VGFyZ2V0SWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuc2F2ZU1ldGFkYXRhKHRyYW5zYWN0aW9uLCBtZXRhZGF0YSkubmV4dChmdW5jdGlvbiAoKSB7IHJldHVybiBtZXRhZGF0YS5oaWdoZXN0VGFyZ2V0SWQ7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlF1ZXJ5Q2FjaGUucHJvdG90eXBlLmdldExhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24gPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXRyaWV2ZU1ldGFkYXRhKHRyYW5zYWN0aW9uKS5uZXh0KGZ1bmN0aW9uIChtZXRhZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gU25hcHNob3RWZXJzaW9uLmZyb21UaW1lc3RhbXAobmV3IFRpbWVzdGFtcChtZXRhZGF0YS5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uLnNlY29uZHMsIG1ldGFkYXRhLmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24ubmFub3NlY29uZHMpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJRdWVyeUNhY2hlLnByb3RvdHlwZS5nZXRIaWdoZXN0U2VxdWVuY2VOdW1iZXIgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gZ2V0SGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyKHRyYW5zYWN0aW9uLnNpbXBsZURiVHJhbnNhY3Rpb24pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlF1ZXJ5Q2FjaGUucHJvdG90eXBlLnNldFRhcmdldHNNZXRhZGF0YSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyLCBsYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXRyaWV2ZU1ldGFkYXRhKHRyYW5zYWN0aW9uKS5uZXh0KGZ1bmN0aW9uIChtZXRhZGF0YSkge1xyXG4gICAgICAgICAgICBtZXRhZGF0YS5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgPSBoaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXI7XHJcbiAgICAgICAgICAgIGlmIChsYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICBtZXRhZGF0YS5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uID0gbGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbi50b1RpbWVzdGFtcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChoaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgPiBtZXRhZGF0YS5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA9IGhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuc2F2ZU1ldGFkYXRhKHRyYW5zYWN0aW9uLCBtZXRhZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUXVlcnlDYWNoZS5wcm90b3R5cGUuYWRkUXVlcnlEYXRhID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBxdWVyeURhdGEpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNhdmVRdWVyeURhdGEodHJhbnNhY3Rpb24sIHF1ZXJ5RGF0YSkubmV4dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZXRyaWV2ZU1ldGFkYXRhKHRyYW5zYWN0aW9uKS5uZXh0KGZ1bmN0aW9uIChtZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgbWV0YWRhdGEudGFyZ2V0Q291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZU1ldGFkYXRhRnJvbVF1ZXJ5RGF0YShxdWVyeURhdGEsIG1ldGFkYXRhKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zYXZlTWV0YWRhdGEodHJhbnNhY3Rpb24sIG1ldGFkYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUXVlcnlDYWNoZS5wcm90b3R5cGUudXBkYXRlUXVlcnlEYXRhID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBxdWVyeURhdGEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zYXZlUXVlcnlEYXRhKHRyYW5zYWN0aW9uLCBxdWVyeURhdGEpO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlF1ZXJ5Q2FjaGUucHJvdG90eXBlLnJlbW92ZVF1ZXJ5RGF0YSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcXVlcnlEYXRhKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCh0cmFuc2FjdGlvbiwgcXVlcnlEYXRhLnRhcmdldElkKVxyXG4gICAgICAgICAgICAubmV4dChmdW5jdGlvbiAoKSB7IHJldHVybiB0YXJnZXRzU3RvcmUodHJhbnNhY3Rpb24pLmRlbGV0ZShxdWVyeURhdGEudGFyZ2V0SWQpOyB9KVxyXG4gICAgICAgICAgICAubmV4dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZXRyaWV2ZU1ldGFkYXRhKHRyYW5zYWN0aW9uKTsgfSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKG1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIGFzc2VydChtZXRhZGF0YS50YXJnZXRDb3VudCA+IDAsICdSZW1vdmluZyBmcm9tIGFuIGVtcHR5IHF1ZXJ5IGNhY2hlJyk7XHJcbiAgICAgICAgICAgIG1ldGFkYXRhLnRhcmdldENvdW50IC09IDE7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zYXZlTWV0YWRhdGEodHJhbnNhY3Rpb24sIG1ldGFkYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJRdWVyeUNhY2hlLnByb3RvdHlwZS5yZXRyaWV2ZU1ldGFkYXRhID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldHJpZXZlTWV0YWRhdGEodHJhbnNhY3Rpb24uc2ltcGxlRGJUcmFuc2FjdGlvbik7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUXVlcnlDYWNoZS5wcm90b3R5cGUuc2F2ZU1ldGFkYXRhID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBtZXRhZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBnbG9iYWxUYXJnZXRTdG9yZSh0cmFuc2FjdGlvbikucHV0KERiVGFyZ2V0R2xvYmFsLmtleSwgbWV0YWRhdGEpO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlF1ZXJ5Q2FjaGUucHJvdG90eXBlLnNhdmVRdWVyeURhdGEgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHF1ZXJ5RGF0YSkge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXRzU3RvcmUodHJhbnNhY3Rpb24pLnB1dCh0aGlzLnNlcmlhbGl6ZXIudG9EYlRhcmdldChxdWVyeURhdGEpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEluLXBsYWNlIHVwZGF0ZXMgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIHRvIGFjY291bnQgZm9yIHZhbHVlcyBpbiB0aGUgZ2l2ZW5cclxuICAgICAqIFF1ZXJ5RGF0YS4gU2F2aW5nIGlzIGRvbmUgc2VwYXJhdGVseS4gUmV0dXJucyB0cnVlIGlmIHRoZXJlIHdlcmUgYW55XHJcbiAgICAgKiBjaGFuZ2VzIHRvIHRoZSBtZXRhZGF0YS5cclxuICAgICAqL1xyXG4gICAgSW5kZXhlZERiUXVlcnlDYWNoZS5wcm90b3R5cGUudXBkYXRlTWV0YWRhdGFGcm9tUXVlcnlEYXRhID0gZnVuY3Rpb24gKHF1ZXJ5RGF0YSwgbWV0YWRhdGEpIHtcclxuICAgICAgICB2YXIgdXBkYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChxdWVyeURhdGEudGFyZ2V0SWQgPiBtZXRhZGF0YS5oaWdoZXN0VGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgbWV0YWRhdGEuaGlnaGVzdFRhcmdldElkID0gcXVlcnlEYXRhLnRhcmdldElkO1xyXG4gICAgICAgICAgICB1cGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHF1ZXJ5RGF0YS5zZXF1ZW5jZU51bWJlciA+IG1ldGFkYXRhLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcikge1xyXG4gICAgICAgICAgICBtZXRhZGF0YS5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgPSBxdWVyeURhdGEuc2VxdWVuY2VOdW1iZXI7XHJcbiAgICAgICAgICAgIHVwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdXBkYXRlZDtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJRdWVyeUNhY2hlLnByb3RvdHlwZS5nZXRRdWVyeUNvdW50ID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmV0cmlldmVNZXRhZGF0YSh0cmFuc2FjdGlvbikubmV4dChmdW5jdGlvbiAobWV0YWRhdGEpIHsgcmV0dXJuIG1ldGFkYXRhLnRhcmdldENvdW50OyB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJRdWVyeUNhY2hlLnByb3RvdHlwZS5nZXRRdWVyeURhdGEgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBJdGVyYXRpbmcgYnkgdGhlIGNhbm9uaWNhbElkIG1heSB5aWVsZCBtb3JlIHRoYW4gb25lIHJlc3VsdCBiZWNhdXNlXHJcbiAgICAgICAgLy8gY2Fub25pY2FsSWQgdmFsdWVzIGFyZSBub3QgcmVxdWlyZWQgdG8gYmUgdW5pcXVlIHBlciB0YXJnZXQuIFRoaXMgcXVlcnlcclxuICAgICAgICAvLyBkZXBlbmRzIG9uIHRoZSBxdWVyeVRhcmdldHMgaW5kZXggdG8gYmUgZWZmaWNpZW50LlxyXG4gICAgICAgIHZhciBjYW5vbmljYWxJZCA9IHF1ZXJ5LmNhbm9uaWNhbElkKCk7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gSURCS2V5UmFuZ2UuYm91bmQoW2Nhbm9uaWNhbElkLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFldLCBbY2Fub25pY2FsSWQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWV0pO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiB0YXJnZXRzU3RvcmUodHJhbnNhY3Rpb24pXHJcbiAgICAgICAgICAgIC5pdGVyYXRlKHsgcmFuZ2U6IHJhbmdlLCBpbmRleDogRGJUYXJnZXQucXVlcnlUYXJnZXRzSW5kZXhOYW1lIH0sIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IF90aGlzLnNlcmlhbGl6ZXIuZnJvbURiVGFyZ2V0KHZhbHVlKTtcclxuICAgICAgICAgICAgLy8gQWZ0ZXIgZmluZGluZyBhIHBvdGVudGlhbCBtYXRjaCwgY2hlY2sgdGhhdCB0aGUgcXVlcnkgaXNcclxuICAgICAgICAgICAgLy8gYWN0dWFsbHkgZXF1YWwgdG8gdGhlIHJlcXVlc3RlZCBxdWVyeS5cclxuICAgICAgICAgICAgaWYgKHF1ZXJ5LmlzRXF1YWwoZm91bmQucXVlcnkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmb3VuZDtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2wuZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzdWx0OyB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJRdWVyeUNhY2hlLnByb3RvdHlwZS5hZGRNYXRjaGluZ0tleXMgPSBmdW5jdGlvbiAodHhuLCBrZXlzLCB0YXJnZXRJZCkge1xyXG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogVGhlIHJldmVyc2UgaW5kZXggKGRvY3VtZW50c1RhcmdldHMpIGlzIG1haW50YWluZWQgYnlcclxuICAgICAgICAvLyBJbmRleGVkRGIuXHJcbiAgICAgICAgdmFyIHByb21pc2VzID0gW107XHJcbiAgICAgICAgdmFyIHN0b3JlID0gZG9jdW1lbnRUYXJnZXRTdG9yZSh0eG4pO1xyXG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gZW5jb2RlKGtleS5wYXRoKTtcclxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChzdG9yZS5wdXQobmV3IERiVGFyZ2V0RG9jdW1lbnQodGFyZ2V0SWQsIHBhdGgpKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHByb21pc2VzKTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJRdWVyeUNhY2hlLnByb3RvdHlwZS5yZW1vdmVNYXRjaGluZ0tleXMgPSBmdW5jdGlvbiAodHhuLCBrZXlzLCB0YXJnZXRJZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBUaGUgcmV2ZXJzZSBpbmRleCAoZG9jdW1lbnRzVGFyZ2V0cykgaXMgbWFpbnRhaW5lZCBieVxyXG4gICAgICAgIC8vIEluZGV4ZWREYi5cclxuICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTtcclxuICAgICAgICB2YXIgc3RvcmUgPSBkb2N1bWVudFRhcmdldFN0b3JlKHR4bik7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIHBhdGggPSBlbmNvZGUoa2V5LnBhdGgpO1xyXG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHN0b3JlLmRlbGV0ZShbdGFyZ2V0SWQsIHBhdGhdKSk7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5nYXJiYWdlQ29sbGVjdG9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5nYXJiYWdlQ29sbGVjdG9yLmFkZFBvdGVudGlhbEdhcmJhZ2VLZXkoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihwcm9taXNlcyk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUXVlcnlDYWNoZS5wcm90b3R5cGUucmVtb3ZlTWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQgPSBmdW5jdGlvbiAodHhuLCB0YXJnZXRJZCkge1xyXG4gICAgICAgIHZhciBzdG9yZSA9IGRvY3VtZW50VGFyZ2V0U3RvcmUodHhuKTtcclxuICAgICAgICB2YXIgcmFuZ2UgPSBJREJLZXlSYW5nZS5ib3VuZChbdGFyZ2V0SWRdLCBbdGFyZ2V0SWQgKyAxXSwgXHJcbiAgICAgICAgLypsb3dlck9wZW49Ki8gZmFsc2UsIFxyXG4gICAgICAgIC8qdXBwZXJPcGVuPSovIHRydWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vdGlmeUdDRm9yUmVtb3ZlZEtleXModHhuLCByYW5nZSkubmV4dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdG9yZS5kZWxldGUocmFuZ2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlF1ZXJ5Q2FjaGUucHJvdG90eXBlLm5vdGlmeUdDRm9yUmVtb3ZlZEtleXMgPSBmdW5jdGlvbiAodHhuLCByYW5nZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN0b3JlID0gZG9jdW1lbnRUYXJnZXRTdG9yZSh0eG4pO1xyXG4gICAgICAgIGlmICh0aGlzLmdhcmJhZ2VDb2xsZWN0b3IgIT09IG51bGwgJiYgdGhpcy5nYXJiYWdlQ29sbGVjdG9yLmlzRWFnZXIpIHtcclxuICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gZ2VuZXJhdGUgZ2FyYmFnZSBldmVudHMgcHJvcGVybHksIHdlIG5lZWQgdG8gcmVhZCB0aGVzZVxyXG4gICAgICAgICAgICAvLyBrZXlzIGJlZm9yZSBkZWxldGluZy5cclxuICAgICAgICAgICAgcmV0dXJuIHN0b3JlLml0ZXJhdGUoeyByYW5nZTogcmFuZ2UsIGtleXNPbmx5OiB0cnVlIH0sIGZ1bmN0aW9uIChrZXksIF8sIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXRoID0gZGVjb2RlJDEoa2V5WzFdKTtcclxuICAgICAgICAgICAgICAgIHZhciBkb2NLZXkgPSBuZXcgRG9jdW1lbnRLZXkocGF0aCk7XHJcbiAgICAgICAgICAgICAgICAvLyBQYXJhbm9pZCBhc3NlcnRpb24gaW4gY2FzZSB0aGUgdGhlIGNvbGxlY3RvciBpcyBzZXQgdG8gbnVsbFxyXG4gICAgICAgICAgICAgICAgLy8gZHVyaW5nIHRoZSBpdGVyYXRpb24uXHJcbiAgICAgICAgICAgICAgICBhc3NlcnQoX3RoaXMuZ2FyYmFnZUNvbGxlY3RvciAhPT0gbnVsbCwgJ0dhcmJhZ2VDb2xsZWN0b3IgZm9yIHF1ZXJ5IGNhY2hlIHNldCB0byBudWxsIGR1cmluZyBrZXkgcmVtb3ZhbC4nKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmdhcmJhZ2VDb2xsZWN0b3IuYWRkUG90ZW50aWFsR2FyYmFnZUtleShkb2NLZXkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJRdWVyeUNhY2hlLnByb3RvdHlwZS5nZXRNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCA9IGZ1bmN0aW9uICh0eG4sIHRhcmdldElkKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gSURCS2V5UmFuZ2UuYm91bmQoW3RhcmdldElkXSwgW3RhcmdldElkICsgMV0sIFxyXG4gICAgICAgIC8qbG93ZXJPcGVuPSovIGZhbHNlLCBcclxuICAgICAgICAvKnVwcGVyT3Blbj0qLyB0cnVlKTtcclxuICAgICAgICB2YXIgc3RvcmUgPSBkb2N1bWVudFRhcmdldFN0b3JlKHR4bik7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRvY3VtZW50S2V5U2V0KCk7XHJcbiAgICAgICAgcmV0dXJuIHN0b3JlXHJcbiAgICAgICAgICAgIC5pdGVyYXRlKHsgcmFuZ2U6IHJhbmdlLCBrZXlzT25seTogdHJ1ZSB9LCBmdW5jdGlvbiAoa2V5LCBfLCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gZGVjb2RlJDEoa2V5WzFdKTtcclxuICAgICAgICAgICAgdmFyIGRvY0tleSA9IG5ldyBEb2N1bWVudEtleShwYXRoKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmFkZChkb2NLZXkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3VsdDsgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUXVlcnlDYWNoZS5wcm90b3R5cGUuc2V0R2FyYmFnZUNvbGxlY3RvciA9IGZ1bmN0aW9uIChnYykge1xyXG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IGdjO1xyXG4gICAgfTtcclxuICAgIC8vIFRPRE8oZ3NvbHRpcyk6IHdlIGNhbiBsZXQgdGhlIGNvbXBpbGVyIGFzc2VydCB0aGF0IHR4biAhPT0gbnVsbCBpZiB3ZVxyXG4gICAgLy8gZHJvcCBudWxsIGZyb20gdGhlIHR5cGUgYm91bmRzIG9uIHR4bi5cclxuICAgIEluZGV4ZWREYlF1ZXJ5Q2FjaGUucHJvdG90eXBlLmNvbnRhaW5zS2V5ID0gZnVuY3Rpb24gKHR4biwga2V5KSB7XHJcbiAgICAgICAgYXNzZXJ0KHR4biAhPT0gbnVsbCwgJ1BlcnNpc3RlbmNlIFRyYW5zYWN0aW9uIGNhbm5vdCBiZSBudWxsIGZvciBxdWVyeSBjYWNoZSBjb250YWluc0tleScpO1xyXG4gICAgICAgIHZhciBwYXRoID0gZW5jb2RlKGtleS5wYXRoKTtcclxuICAgICAgICB2YXIgcmFuZ2UgPSBJREJLZXlSYW5nZS5ib3VuZChbcGF0aF0sIFtpbW1lZGlhdGVTdWNjZXNzb3IocGF0aCldLCBcclxuICAgICAgICAvKmxvd2VyT3Blbj0qLyBmYWxzZSwgXHJcbiAgICAgICAgLyp1cHBlck9wZW49Ki8gdHJ1ZSk7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnRUYXJnZXRTdG9yZSh0eG4pXHJcbiAgICAgICAgICAgIC5pdGVyYXRlKHtcclxuICAgICAgICAgICAgaW5kZXg6IERiVGFyZ2V0RG9jdW1lbnQuZG9jdW1lbnRUYXJnZXRzSW5kZXgsXHJcbiAgICAgICAgICAgIGtleXNPbmx5OiB0cnVlLFxyXG4gICAgICAgICAgICByYW5nZTogcmFuZ2VcclxuICAgICAgICB9LCBmdW5jdGlvbiAoa2V5LCBfLCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuZG9uZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvdW50ID4gMDsgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUXVlcnlDYWNoZS5wcm90b3R5cGUuZ2V0UXVlcnlEYXRhRm9yVGFyZ2V0ID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCB0YXJnZXRJZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldHNTdG9yZSh0cmFuc2FjdGlvbilcclxuICAgICAgICAgICAgLmdldCh0YXJnZXRJZClcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGZvdW5kKSB7XHJcbiAgICAgICAgICAgIGlmIChmb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNlcmlhbGl6ZXIuZnJvbURiVGFyZ2V0KGZvdW5kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEluZGV4ZWREYlF1ZXJ5Q2FjaGU7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIHF1ZXJpZXMgb2JqZWN0IHN0b3JlLlxyXG4gKi9cclxuZnVuY3Rpb24gdGFyZ2V0c1N0b3JlKHR4bikge1xyXG4gICAgcmV0dXJuIEluZGV4ZWREYlBlcnNpc3RlbmNlLmdldFN0b3JlKHR4biwgRGJUYXJnZXQuc3RvcmUpO1xyXG59XHJcbi8qKlxyXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIHRhcmdldCBnbG9iYWxzIG9iamVjdCBzdG9yZS5cclxuICovXHJcbmZ1bmN0aW9uIGdsb2JhbFRhcmdldFN0b3JlKHR4bikge1xyXG4gICAgcmV0dXJuIEluZGV4ZWREYlBlcnNpc3RlbmNlLmdldFN0b3JlKHR4biwgRGJUYXJnZXRHbG9iYWwuc3RvcmUpO1xyXG59XHJcbmZ1bmN0aW9uIHJldHJpZXZlTWV0YWRhdGEodHhuKSB7XHJcbiAgICB2YXIgZ2xvYmFsU3RvcmUgPSBTaW1wbGVEYi5nZXRTdG9yZSh0eG4sIERiVGFyZ2V0R2xvYmFsLnN0b3JlKTtcclxuICAgIHJldHVybiBnbG9iYWxTdG9yZS5nZXQoRGJUYXJnZXRHbG9iYWwua2V5KS5uZXh0KGZ1bmN0aW9uIChtZXRhZGF0YSkge1xyXG4gICAgICAgIGFzc2VydChtZXRhZGF0YSAhPT0gbnVsbCwgJ01pc3NpbmcgbWV0YWRhdGEgcm93LicpO1xyXG4gICAgICAgIHJldHVybiBtZXRhZGF0YTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldEhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcih0eG4pIHtcclxuICAgIHJldHVybiByZXRyaWV2ZU1ldGFkYXRhKHR4bikubmV4dChmdW5jdGlvbiAodGFyZ2V0R2xvYmFsKSB7IHJldHVybiB0YXJnZXRHbG9iYWwuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyOyB9KTtcclxufVxyXG4vKipcclxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBkb2N1bWVudCB0YXJnZXQgb2JqZWN0IHN0b3JlLlxyXG4gKi9cclxuZnVuY3Rpb24gZG9jdW1lbnRUYXJnZXRTdG9yZSh0eG4pIHtcclxuICAgIHJldHVybiBJbmRleGVkRGJQZXJzaXN0ZW5jZS5nZXRTdG9yZSh0eG4sIERiVGFyZ2V0RG9jdW1lbnQuc3RvcmUpO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtMb2NhbFNlcmlhbGl6ZXJ9IHNlcmlhbGl6ZXIgVGhlIGRvY3VtZW50IHNlcmlhbGl6ZXIuXHJcbiAgICAgKiBAcGFyYW0ga2VlcERvY3VtZW50Q2hhbmdlTG9nIFdoZXRoZXIgdG8ga2VlcCBhIGRvY3VtZW50IGNoYW5nZSBsb2cgaW5cclxuICAgICAqIEluZGV4ZWREYi4gVGhpcyBjaGFuZ2UgbG9nIGlzIHJlcXVpcmVkIGZvciBNdWx0aS1UYWIgc3luY2hyb25pemF0aW9uLCBidXRcclxuICAgICAqIG5vdCBuZWVkZWQgaW4gY2xpZW50cyB0aGF0IGRvbid0IHNoYXJlIGFjY2VzcyB0byB0aGVpciByZW1vdGUgZG9jdW1lbnRcclxuICAgICAqIGNhY2hlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlKHNlcmlhbGl6ZXIsIGtlZXBEb2N1bWVudENoYW5nZUxvZykge1xyXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IHNlcmlhbGl6ZXI7XHJcbiAgICAgICAgdGhpcy5rZWVwRG9jdW1lbnRDaGFuZ2VMb2cgPSBrZWVwRG9jdW1lbnRDaGFuZ2VMb2c7XHJcbiAgICAgICAgLyoqIFRoZSBsYXN0IGlkIHJlYWQgYnkgYGdldE5ld0RvY3VtZW50Q2hhbmdlcygpYC4gKi9cclxuICAgICAgICB0aGlzLl9sYXN0UHJvY2Vzc2VkRG9jdW1lbnRDaGFuZ2VJZCA9IDA7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZS5wcm90b3R5cGUsIFwibGFzdFByb2Nlc3NlZERvY3VtZW50Q2hhbmdlSWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFzdFByb2Nlc3NlZERvY3VtZW50Q2hhbmdlSWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0cyB1cCB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlLlxyXG4gICAgICpcclxuICAgICAqIFJlYWRzIHRoZSBJRCBvZiB0aGUgbGFzdCAgZG9jdW1lbnQgY2hhbmdlIGZyb20gdGhlIGRvY3VtZW50Q2hhbmdlcyBzdG9yZS5cclxuICAgICAqIEV4aXN0aW5nIGNoYW5nZXMgd2lsbCBub3QgYmUgcmV0dXJuZWQgYXMgcGFydCBvZlxyXG4gICAgICogYGdldE5ld0RvY3VtZW50Q2hhbmdlcygpYC5cclxuICAgICAqL1xyXG4gICAgLy8gUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi5cclxuICAgIEluZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gZXhpc3RpbmcgY2hhbmdlcywgd2Ugc2V0IGBsYXN0UHJvY2Vzc2VkRG9jdW1lbnRDaGFuZ2VJZGBcclxuICAgICAgICAvLyB0byAwIHNpbmNlIEluZGV4ZWREYidzIGF1dG8tZ2VuZXJhdGVkIGtleXMgc3RhcnQgYXQgMS5cclxuICAgICAgICB0aGlzLl9sYXN0UHJvY2Vzc2VkRG9jdW1lbnRDaGFuZ2VJZCA9IDA7XHJcbiAgICAgICAgdmFyIHN0b3JlID0gU2ltcGxlRGIuZ2V0U3RvcmUodHJhbnNhY3Rpb24sIERiUmVtb3RlRG9jdW1lbnRDaGFuZ2VzLnN0b3JlKTtcclxuICAgICAgICByZXR1cm4gc3RvcmUuaXRlcmF0ZSh7IGtleXNPbmx5OiB0cnVlLCByZXZlcnNlOiB0cnVlIH0sIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9sYXN0UHJvY2Vzc2VkRG9jdW1lbnRDaGFuZ2VJZCA9IGtleTtcclxuICAgICAgICAgICAgY29udHJvbC5kb25lKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZS5wcm90b3R5cGUuYWRkRW50cmllcyA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgbWF5YmVEb2N1bWVudHMpIHtcclxuICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTtcclxuICAgICAgICBpZiAobWF5YmVEb2N1bWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgZG9jdW1lbnRTdG9yZSA9IHJlbW90ZURvY3VtZW50c1N0b3JlKHRyYW5zYWN0aW9uKTtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZWRLZXlzID0gZG9jdW1lbnRLZXlTZXQoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtYXliZURvY3VtZW50c18xID0gbWF5YmVEb2N1bWVudHM7IF9pIDwgbWF5YmVEb2N1bWVudHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXliZURvY3VtZW50ID0gbWF5YmVEb2N1bWVudHNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKGRvY3VtZW50U3RvcmUucHV0KGRiS2V5KG1heWJlRG9jdW1lbnQua2V5KSwgdGhpcy5zZXJpYWxpemVyLnRvRGJSZW1vdGVEb2N1bWVudChtYXliZURvY3VtZW50KSkpO1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlZEtleXMgPSBjaGFuZ2VkS2V5cy5hZGQobWF5YmVEb2N1bWVudC5rZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmtlZXBEb2N1bWVudENoYW5nZUxvZykge1xyXG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChkb2N1bWVudENoYW5nZXNTdG9yZSh0cmFuc2FjdGlvbikucHV0KHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzOiB0aGlzLnNlcmlhbGl6ZXIudG9EYlJlc291cmNlUGF0aHMoY2hhbmdlZEtleXMpXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHByb21pc2VzKTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlLnByb3RvdHlwZS5yZW1vdmVFbnRyeSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgZG9jdW1lbnRLZXkpIHtcclxuICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGtlZXAgY2hhbmdlbG9nIGZvciB0aGVzZSByZW1vdmFscyBzaW5jZSBgcmVtb3ZlRW50cnlgIGlzXHJcbiAgICAgICAgLy8gb25seSB1c2VkIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXHJcbiAgICAgICAgcmV0dXJuIHJlbW90ZURvY3VtZW50c1N0b3JlKHRyYW5zYWN0aW9uKS5kZWxldGUoZGJLZXkoZG9jdW1lbnRLZXkpKTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlLnByb3RvdHlwZS5nZXRFbnRyeSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgZG9jdW1lbnRLZXkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiByZW1vdGVEb2N1bWVudHNTdG9yZSh0cmFuc2FjdGlvbilcclxuICAgICAgICAgICAgLmdldChkYktleShkb2N1bWVudEtleSkpXHJcbiAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uIChkYlJlbW90ZURvYykge1xyXG4gICAgICAgICAgICByZXR1cm4gZGJSZW1vdGVEb2NcclxuICAgICAgICAgICAgICAgID8gX3RoaXMuc2VyaWFsaXplci5mcm9tRGJSZW1vdGVEb2N1bWVudChkYlJlbW90ZURvYylcclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlLnByb3RvdHlwZS5nZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5ID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBxdWVyeSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBkb2N1bWVudE1hcCgpO1xyXG4gICAgICAgIC8vIERvY3VtZW50cyBhcmUgb3JkZXJlZCBieSBrZXksIHNvIHdlIGNhbiB1c2UgYSBwcmVmaXggc2NhbiB0byBuYXJyb3cgZG93blxyXG4gICAgICAgIC8vIHRoZSBkb2N1bWVudHMgd2UgbmVlZCB0byBtYXRjaCB0aGUgcXVlcnkgYWdhaW5zdC5cclxuICAgICAgICB2YXIgc3RhcnRLZXkgPSBxdWVyeS5wYXRoLnRvQXJyYXkoKTtcclxuICAgICAgICB2YXIgcmFuZ2UgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKHN0YXJ0S2V5KTtcclxuICAgICAgICByZXR1cm4gcmVtb3RlRG9jdW1lbnRzU3RvcmUodHJhbnNhY3Rpb24pXHJcbiAgICAgICAgICAgIC5pdGVyYXRlKHsgcmFuZ2U6IHJhbmdlIH0sIGZ1bmN0aW9uIChrZXksIGRiUmVtb3RlRG9jLCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXliZURvYyA9IF90aGlzLnNlcmlhbGl6ZXIuZnJvbURiUmVtb3RlRG9jdW1lbnQoZGJSZW1vdGVEb2MpO1xyXG4gICAgICAgICAgICBpZiAoIXF1ZXJ5LnBhdGguaXNQcmVmaXhPZihtYXliZURvYy5rZXkucGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2wuZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG1heWJlRG9jIGluc3RhbmNlb2YgRG9jdW1lbnQgJiYgcXVlcnkubWF0Y2hlcyhtYXliZURvYykpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmluc2VydChtYXliZURvYy5rZXksIG1heWJlRG9jKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3VsdHM7IH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGUucHJvdG90eXBlLmdldE5ld0RvY3VtZW50Q2hhbmdlcyA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMua2VlcERvY3VtZW50Q2hhbmdlTG9nLCAnQ2FuIG9ubHkgY2FsbCBnZXROZXdEb2N1bWVudENoYW5nZXMoKSB3aGVuIGRvY3VtZW50IGNoYW5nZSBsb2cgaXMgZW5hYmxlZCcpO1xyXG4gICAgICAgIHZhciBjaGFuZ2VkS2V5cyA9IGRvY3VtZW50S2V5U2V0KCk7XHJcbiAgICAgICAgdmFyIGNoYW5nZWREb2NzID0gbWF5YmVEb2N1bWVudE1hcCgpO1xyXG4gICAgICAgIHZhciByYW5nZSA9IElEQktleVJhbmdlLmxvd2VyQm91bmQodGhpcy5fbGFzdFByb2Nlc3NlZERvY3VtZW50Q2hhbmdlSWQsIFxyXG4gICAgICAgIC8qbG93ZXJPcGVuPSovIHRydWUpO1xyXG4gICAgICAgIC8vIFRPRE8oYi8xMTQyMjg0NjQpOiBBbm90aGVyIGNsaWVudCBtYXkgaGF2ZSBnYXJiYWdlIGNvbGxlY3RlZCB0aGUgcmVtb3RlXHJcbiAgICAgICAgLy8gZG9jdW1lbnQgY2hhbmdlbG9nIGlmIG91ciBjbGllbnQgd2FzIHRocm90dGxlZCBmb3IgbW9yZSB0aGFuIDMwIG1pbnV0ZXMuXHJcbiAgICAgICAgLy8gV2UgY2FuIGRldGVjdCB0aGlzIGlmIHRoZSBgbGFzdFByb2Nlc3NlZERvY3VtZW50Q2hhbmdlSWRgIGVudHJ5IGlzIG5vXHJcbiAgICAgICAgLy8gbG9uZ2VyIGluIHRoZSBjaGFuZ2Vsb2cuIEl0IGlzIHBvc3NpYmxlIHRvIHJlY292ZXIgZnJvbSB0aGlzIHN0YXRlLFxyXG4gICAgICAgIC8vIGVpdGhlciBieSByZXBsYXlpbmcgdGhlIGVudGlyZSByZW1vdGUgZG9jdW1lbnQgY2FjaGUgb3IgYnkgcmUtZXhlY3V0aW5nXHJcbiAgICAgICAgLy8gYWxsIHF1ZXJpZXMgYWdhaW5zdCB0aGUgbG9jYWwgc3RvcmUuXHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50Q2hhbmdlc1N0b3JlKHRyYW5zYWN0aW9uKVxyXG4gICAgICAgICAgICAuaXRlcmF0ZSh7IHJhbmdlOiByYW5nZSB9LCBmdW5jdGlvbiAoXywgZG9jdW1lbnRDaGFuZ2UpIHtcclxuICAgICAgICAgICAgY2hhbmdlZEtleXMgPSBjaGFuZ2VkS2V5cy51bmlvbldpdGgoX3RoaXMuc2VyaWFsaXplci5mcm9tRGJSZXNvdXJjZVBhdGhzKGRvY3VtZW50Q2hhbmdlLmNoYW5nZXMpKTtcclxuICAgICAgICAgICAgX3RoaXMuX2xhc3RQcm9jZXNzZWREb2N1bWVudENoYW5nZUlkID0gZG9jdW1lbnRDaGFuZ2UuaWQ7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZG9jdW1lbnRQcm9taXNlcyA9IFtdO1xyXG4gICAgICAgICAgICBjaGFuZ2VkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50UHJvbWlzZXMucHVzaChfdGhpcy5nZXRFbnRyeSh0cmFuc2FjdGlvbiwga2V5KS5uZXh0KGZ1bmN0aW9uIChtYXliZURvYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWREb2NzID0gY2hhbmdlZERvY3MuaW5zZXJ0KGtleSwgbWF5YmVEb2MgfHwgbmV3IE5vRG9jdW1lbnQoa2V5LCBTbmFwc2hvdFZlcnNpb24uZm9yRGVsZXRlZERvYygpKSk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLndhaXRGb3IoZG9jdW1lbnRQcm9taXNlcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hhbmdlZERvY3M7IH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhbGwgY2hhbmdlcyBpbiB0aGUgcmVtb3RlIGRvY3VtZW50IGNoYW5nZWxvZyB0aHJvdWdoIGBjaGFuZ2VJZGBcclxuICAgICAqIChpbmNsdXNpdmUpLlxyXG4gICAgICovXHJcbiAgICBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlLnByb3RvdHlwZS5yZW1vdmVEb2N1bWVudENoYW5nZXNUaHJvdWdoQ2hhbmdlSWQgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGNoYW5nZUlkKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gSURCS2V5UmFuZ2UudXBwZXJCb3VuZChjaGFuZ2VJZCk7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50Q2hhbmdlc1N0b3JlKHRyYW5zYWN0aW9uKS5kZWxldGUocmFuZ2UpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlO1xyXG59KCkpO1xyXG4vKipcclxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSByZW1vdGVEb2N1bWVudHMgb2JqZWN0IHN0b3JlLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVtb3RlRG9jdW1lbnRzU3RvcmUodHhuKSB7XHJcbiAgICByZXR1cm4gSW5kZXhlZERiUGVyc2lzdGVuY2UuZ2V0U3RvcmUodHhuLCBEYlJlbW90ZURvY3VtZW50LnN0b3JlKTtcclxufVxyXG4vKipcclxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSByZW1vdGVEb2N1bWVudENoYW5nZXMgb2JqZWN0XHJcbiAqIHN0b3JlLlxyXG4gKi9cclxuZnVuY3Rpb24gZG9jdW1lbnRDaGFuZ2VzU3RvcmUodHhuKSB7XHJcbiAgICByZXR1cm4gSW5kZXhlZERiUGVyc2lzdGVuY2UuZ2V0U3RvcmUodHhuLCBEYlJlbW90ZURvY3VtZW50Q2hhbmdlcy5zdG9yZSk7XHJcbn1cclxuZnVuY3Rpb24gZGJLZXkoZG9jS2V5KSB7XHJcbiAgICByZXR1cm4gZG9jS2V5LnBhdGgudG9BcnJheSgpO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKiogU2VyaWFsaXplciBmb3IgdmFsdWVzIHN0b3JlZCBpbiB0aGUgTG9jYWxTdG9yZS4gKi9cclxudmFyIExvY2FsU2VyaWFsaXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExvY2FsU2VyaWFsaXplcihyZW1vdGVTZXJpYWxpemVyKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVTZXJpYWxpemVyID0gcmVtb3RlU2VyaWFsaXplcjtcclxuICAgIH1cclxuICAgIC8qKiBEZWNvZGVzIGEgcmVtb3RlIGRvY3VtZW50IGZyb20gc3RvcmFnZSBsb2NhbGx5IHRvIGEgRG9jdW1lbnQuICovXHJcbiAgICBMb2NhbFNlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21EYlJlbW90ZURvY3VtZW50ID0gZnVuY3Rpb24gKHJlbW90ZURvYykge1xyXG4gICAgICAgIGlmIChyZW1vdGVEb2MuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3RlU2VyaWFsaXplci5mcm9tRG9jdW1lbnQocmVtb3RlRG9jLmRvY3VtZW50LCAhIXJlbW90ZURvYy5oYXNDb21taXR0ZWRNdXRhdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChyZW1vdGVEb2Mubm9Eb2N1bWVudCkge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gRG9jdW1lbnRLZXkuZnJvbVNlZ21lbnRzKHJlbW90ZURvYy5ub0RvY3VtZW50LnBhdGgpO1xyXG4gICAgICAgICAgICB2YXIgdmVyc2lvbiA9IHRoaXMuZnJvbURiVGltZXN0YW1wKHJlbW90ZURvYy5ub0RvY3VtZW50LnJlYWRUaW1lKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb0RvY3VtZW50KGtleSwgdmVyc2lvbiwge1xyXG4gICAgICAgICAgICAgICAgaGFzQ29tbWl0dGVkTXV0YXRpb25zOiAhIXJlbW90ZURvYy5oYXNDb21taXR0ZWRNdXRhdGlvbnNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJlbW90ZURvYy51bmtub3duRG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IERvY3VtZW50S2V5LmZyb21TZWdtZW50cyhyZW1vdGVEb2MudW5rbm93bkRvY3VtZW50LnBhdGgpO1xyXG4gICAgICAgICAgICB2YXIgdmVyc2lvbiA9IHRoaXMuZnJvbURiVGltZXN0YW1wKHJlbW90ZURvYy51bmtub3duRG9jdW1lbnQudmVyc2lvbik7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW5rbm93bkRvY3VtZW50KGtleSwgdmVyc2lvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbCgnVW5leHBlY3RlZCBEYlJlbW90ZURvY3VtZW50Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBFbmNvZGVzIGEgZG9jdW1lbnQgZm9yIHN0b3JhZ2UgbG9jYWxseS4gKi9cclxuICAgIExvY2FsU2VyaWFsaXplci5wcm90b3R5cGUudG9EYlJlbW90ZURvY3VtZW50ID0gZnVuY3Rpb24gKG1heWJlRG9jKSB7XHJcbiAgICAgICAgaWYgKG1heWJlRG9jIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMucmVtb3RlU2VyaWFsaXplci50b0RvY3VtZW50KG1heWJlRG9jKTtcclxuICAgICAgICAgICAgdmFyIGhhc0NvbW1pdHRlZE11dGF0aW9ucyA9IG1heWJlRG9jLmhhc0NvbW1pdHRlZE11dGF0aW9ucztcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYlJlbW90ZURvY3VtZW50KFxyXG4gICAgICAgICAgICAvKiB1bmtub3duRG9jdW1lbnQ9ICovIG51bGwsIFxyXG4gICAgICAgICAgICAvKiBub0RvY3VtZW50PSAqLyBudWxsLCBkb2MsIGhhc0NvbW1pdHRlZE11dGF0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG1heWJlRG9jIGluc3RhbmNlb2YgTm9Eb2N1bWVudCkge1xyXG4gICAgICAgICAgICB2YXIgcGF0aCA9IG1heWJlRG9jLmtleS5wYXRoLnRvQXJyYXkoKTtcclxuICAgICAgICAgICAgdmFyIHJlYWRUaW1lID0gdGhpcy50b0RiVGltZXN0YW1wKG1heWJlRG9jLnZlcnNpb24pO1xyXG4gICAgICAgICAgICB2YXIgaGFzQ29tbWl0dGVkTXV0YXRpb25zID0gbWF5YmVEb2MuaGFzQ29tbWl0dGVkTXV0YXRpb25zO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERiUmVtb3RlRG9jdW1lbnQoXHJcbiAgICAgICAgICAgIC8qIHVua25vd25Eb2N1bWVudD0gKi8gbnVsbCwgbmV3IERiTm9Eb2N1bWVudChwYXRoLCByZWFkVGltZSksIFxyXG4gICAgICAgICAgICAvKiBkb2N1bWVudD0gKi8gbnVsbCwgaGFzQ29tbWl0dGVkTXV0YXRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobWF5YmVEb2MgaW5zdGFuY2VvZiBVbmtub3duRG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgdmFyIHBhdGggPSBtYXliZURvYy5rZXkucGF0aC50b0FycmF5KCk7XHJcbiAgICAgICAgICAgIHZhciByZWFkVGltZSA9IHRoaXMudG9EYlRpbWVzdGFtcChtYXliZURvYy52ZXJzaW9uKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYlJlbW90ZURvY3VtZW50KG5ldyBEYlVua25vd25Eb2N1bWVudChwYXRoLCByZWFkVGltZSksIFxyXG4gICAgICAgICAgICAvKiBub0RvY3VtZW50PSAqLyBudWxsLCBcclxuICAgICAgICAgICAgLyogZG9jdW1lbnQ9ICovIG51bGwsIFxyXG4gICAgICAgICAgICAvKiBoYXNDb21taXR0ZWRNdXRhdGlvbnM9ICovIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ1VuZXhwZWN0ZWQgTWF5YmVEb2N1bW1lbnQnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTG9jYWxTZXJpYWxpemVyLnByb3RvdHlwZS50b0RiVGltZXN0YW1wID0gZnVuY3Rpb24gKHNuYXBzaG90VmVyc2lvbikge1xyXG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSBzbmFwc2hvdFZlcnNpb24udG9UaW1lc3RhbXAoKTtcclxuICAgICAgICByZXR1cm4gbmV3IERiVGltZXN0YW1wKHRpbWVzdGFtcC5zZWNvbmRzLCB0aW1lc3RhbXAubmFub3NlY29uZHMpO1xyXG4gICAgfTtcclxuICAgIExvY2FsU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbURiVGltZXN0YW1wID0gZnVuY3Rpb24gKGRiVGltZXN0YW1wKSB7XHJcbiAgICAgICAgdmFyIHRpbWVzdGFtcCA9IG5ldyBUaW1lc3RhbXAoZGJUaW1lc3RhbXAuc2Vjb25kcywgZGJUaW1lc3RhbXAubmFub3NlY29uZHMpO1xyXG4gICAgICAgIHJldHVybiBTbmFwc2hvdFZlcnNpb24uZnJvbVRpbWVzdGFtcCh0aW1lc3RhbXApO1xyXG4gICAgfTtcclxuICAgIC8qKiBFbmNvZGVzIGEgYmF0Y2ggb2YgbXV0YXRpb25zIGludG8gYSBEYk11dGF0aW9uQmF0Y2ggZm9yIGxvY2FsIHN0b3JhZ2UuICovXHJcbiAgICBMb2NhbFNlcmlhbGl6ZXIucHJvdG90eXBlLnRvRGJNdXRhdGlvbkJhdGNoID0gZnVuY3Rpb24gKHVzZXJJZCwgYmF0Y2gpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzZXJpYWxpemVkTXV0YXRpb25zID0gYmF0Y2gubXV0YXRpb25zLm1hcChmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3RlU2VyaWFsaXplci50b011dGF0aW9uKG0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGJNdXRhdGlvbkJhdGNoKHVzZXJJZCwgYmF0Y2guYmF0Y2hJZCwgYmF0Y2gubG9jYWxXcml0ZVRpbWUudG9NaWxsaXMoKSwgc2VyaWFsaXplZE11dGF0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgLyoqIERlY29kZXMgYSBEYk11dGF0aW9uQmF0Y2ggaW50byBhIE11dGF0aW9uQmF0Y2ggKi9cclxuICAgIExvY2FsU2VyaWFsaXplci5wcm90b3R5cGUuZnJvbURiTXV0YXRpb25CYXRjaCA9IGZ1bmN0aW9uIChkYkJhdGNoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbXV0YXRpb25zID0gZGJCYXRjaC5tdXRhdGlvbnMubWFwKGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdGVTZXJpYWxpemVyLmZyb21NdXRhdGlvbihtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgdGltZXN0YW1wID0gVGltZXN0YW1wLmZyb21NaWxsaXMoZGJCYXRjaC5sb2NhbFdyaXRlVGltZU1zKTtcclxuICAgICAgICByZXR1cm4gbmV3IE11dGF0aW9uQmF0Y2goZGJCYXRjaC5iYXRjaElkLCB0aW1lc3RhbXAsIG11dGF0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgLypcclxuICAgICAqIEVuY29kZXMgYSBzZXQgb2YgZG9jdW1lbnQga2V5cyBpbnRvIGFuIGFycmF5IG9mIEVuY29kZWRSZXNvdXJjZVBhdGhzLlxyXG4gICAgICovXHJcbiAgICBMb2NhbFNlcmlhbGl6ZXIucHJvdG90eXBlLnRvRGJSZXNvdXJjZVBhdGhzID0gZnVuY3Rpb24gKGtleXMpIHtcclxuICAgICAgICB2YXIgZW5jb2RlZEtleXMgPSBbXTtcclxuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICBlbmNvZGVkS2V5cy5wdXNoKGVuY29kZShrZXkucGF0aCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBlbmNvZGVkS2V5cztcclxuICAgIH07XHJcbiAgICAvKiogRGVjb2RlcyBhbiBhcnJheSBvZiBFbmNvZGVkUmVzb3VyY2VQYXRocyBpbnRvIGEgc2V0IG9mIGRvY3VtZW50IGtleXMuICovXHJcbiAgICBMb2NhbFNlcmlhbGl6ZXIucHJvdG90eXBlLmZyb21EYlJlc291cmNlUGF0aHMgPSBmdW5jdGlvbiAoZW5jb2RlZFBhdGhzKSB7XHJcbiAgICAgICAgdmFyIGtleXMgPSBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgZW5jb2RlZFBhdGhzXzEgPSBlbmNvZGVkUGF0aHM7IF9pIDwgZW5jb2RlZFBhdGhzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBkb2N1bWVudEtleSA9IGVuY29kZWRQYXRoc18xW19pXTtcclxuICAgICAgICAgICAga2V5cyA9IGtleXMuYWRkKG5ldyBEb2N1bWVudEtleShkZWNvZGUkMShkb2N1bWVudEtleSkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICB9O1xyXG4gICAgLyoqIERlY29kZXMgYSBEYlRhcmdldCBpbnRvIFF1ZXJ5RGF0YSAqL1xyXG4gICAgTG9jYWxTZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tRGJUYXJnZXQgPSBmdW5jdGlvbiAoZGJUYXJnZXQpIHtcclxuICAgICAgICB2YXIgdmVyc2lvbiA9IHRoaXMuZnJvbURiVGltZXN0YW1wKGRiVGFyZ2V0LnJlYWRUaW1lKTtcclxuICAgICAgICB2YXIgcXVlcnk7XHJcbiAgICAgICAgaWYgKGlzRG9jdW1lbnRRdWVyeShkYlRhcmdldC5xdWVyeSkpIHtcclxuICAgICAgICAgICAgcXVlcnkgPSB0aGlzLnJlbW90ZVNlcmlhbGl6ZXIuZnJvbURvY3VtZW50c1RhcmdldChkYlRhcmdldC5xdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBxdWVyeSA9IHRoaXMucmVtb3RlU2VyaWFsaXplci5mcm9tUXVlcnlUYXJnZXQoZGJUYXJnZXQucXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5RGF0YShxdWVyeSwgZGJUYXJnZXQudGFyZ2V0SWQsIFF1ZXJ5UHVycG9zZS5MaXN0ZW4sIGRiVGFyZ2V0Lmxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciwgdmVyc2lvbiwgZGJUYXJnZXQucmVzdW1lVG9rZW4pO1xyXG4gICAgfTtcclxuICAgIC8qKiBFbmNvZGVzIFF1ZXJ5RGF0YSBpbnRvIGEgRGJUYXJnZXQgZm9yIHN0b3JhZ2UgbG9jYWxseS4gKi9cclxuICAgIExvY2FsU2VyaWFsaXplci5wcm90b3R5cGUudG9EYlRhcmdldCA9IGZ1bmN0aW9uIChxdWVyeURhdGEpIHtcclxuICAgICAgICBhc3NlcnQoUXVlcnlQdXJwb3NlLkxpc3RlbiA9PT0gcXVlcnlEYXRhLnB1cnBvc2UsICdPbmx5IHF1ZXJpZXMgd2l0aCBwdXJwb3NlICcgK1xyXG4gICAgICAgICAgICBRdWVyeVB1cnBvc2UuTGlzdGVuICtcclxuICAgICAgICAgICAgJyBtYXkgYmUgc3RvcmVkLCBnb3QgJyArXHJcbiAgICAgICAgICAgIHF1ZXJ5RGF0YS5wdXJwb3NlKTtcclxuICAgICAgICB2YXIgZGJUaW1lc3RhbXAgPSB0aGlzLnRvRGJUaW1lc3RhbXAocXVlcnlEYXRhLnNuYXBzaG90VmVyc2lvbik7XHJcbiAgICAgICAgdmFyIHF1ZXJ5UHJvdG87XHJcbiAgICAgICAgaWYgKHF1ZXJ5RGF0YS5xdWVyeS5pc0RvY3VtZW50UXVlcnkoKSkge1xyXG4gICAgICAgICAgICBxdWVyeVByb3RvID0gdGhpcy5yZW1vdGVTZXJpYWxpemVyLnRvRG9jdW1lbnRzVGFyZ2V0KHF1ZXJ5RGF0YS5xdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBxdWVyeVByb3RvID0gdGhpcy5yZW1vdGVTZXJpYWxpemVyLnRvUXVlcnlUYXJnZXQocXVlcnlEYXRhLnF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VtZVRva2VuO1xyXG4gICAgICAgIGlmIChxdWVyeURhdGEucmVzdW1lVG9rZW4gaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE8oYi83ODc3MTQwMyk6IENvbnZlcnQgdG9rZW5zIHRvIHN0cmluZ3MgZHVyaW5nIGRlc2VyaWFsaXphdGlvblxyXG4gICAgICAgICAgICBhc3NlcnQocHJvY2Vzcy5lbnYuVVNFX01PQ0tfUEVSU0lTVEVOQ0UgPT09ICdZRVMnLCAnUGVyc2lzdGluZyBub24tc3RyaW5nIHN0cmVhbSB0b2tlbnMgaXMgb25seSBzdXBwb3J0ZWQgd2l0aCBtb2NrIHBlcnNpc3RlbmNlIC4nKTtcclxuICAgICAgICAgICAgcmVzdW1lVG9rZW4gPSBxdWVyeURhdGEucmVzdW1lVG9rZW4udG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VtZVRva2VuID0gcXVlcnlEYXRhLnJlc3VtZVRva2VuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBsYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgaXMgYWx3YXlzIDAgdW50aWwgd2UgZG8gcmVhbCBHQy5cclxuICAgICAgICByZXR1cm4gbmV3IERiVGFyZ2V0KHF1ZXJ5RGF0YS50YXJnZXRJZCwgcXVlcnlEYXRhLnF1ZXJ5LmNhbm9uaWNhbElkKCksIGRiVGltZXN0YW1wLCByZXN1bWVUb2tlbiwgcXVlcnlEYXRhLnNlcXVlbmNlTnVtYmVyLCBxdWVyeVByb3RvKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTG9jYWxTZXJpYWxpemVyO1xyXG59KCkpO1xyXG4vKipcclxuICogQSBoZWxwZXIgZnVuY3Rpb24gZm9yIGZpZ3VyaW5nIG91dCB3aGF0IGtpbmQgb2YgcXVlcnkgaGFzIGJlZW4gc3RvcmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNEb2N1bWVudFF1ZXJ5KGRiUXVlcnkpIHtcclxuICAgIHJldHVybiBkYlF1ZXJ5LmRvY3VtZW50cyAhPT0gdW5kZWZpbmVkO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogT3BhcXVlIGludGVyZmFjZSByZXByZXNlbnRpbmcgYSBwZXJzaXN0ZW5jZSB0cmFuc2FjdGlvbi5cclxuICpcclxuICogV2hlbiB5b3UgY2FsbCBQZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbigpLCBpdCB3aWxsIGNyZWF0ZSBhIHRyYW5zYWN0aW9uIGFuZFxyXG4gKiBwYXNzIGl0IHRvIHlvdXIgY2FsbGJhY2suIFlvdSB0aGVuIHBhc3MgaXQgdG8gYW55IG1ldGhvZCB0aGF0IG9wZXJhdGVzXHJcbiAqIG9uIHBlcnNpc3RlbmNlLlxyXG4gKi9cclxudmFyIFBlcnNpc3RlbmNlVHJhbnNhY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQZXJzaXN0ZW5jZVRyYW5zYWN0aW9uKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFBlcnNpc3RlbmNlVHJhbnNhY3Rpb247XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgTE9HX1RBRyQyID0gJ0luZGV4ZWREYlBlcnNpc3RlbmNlJztcclxuLyoqXHJcbiAqIE9sZGVzdCBhY2NlcHRhYmxlIGFnZSBpbiBtaWxsaXNlY29uZHMgZm9yIGNsaWVudCBtZXRhZGF0YSByZWFkIGZyb21cclxuICogSW5kZXhlZERCLiBDbGllbnQgbWV0YWRhdGEgYW5kIHByaW1hcnkgbGVhc2VzIHRoYXQgYXJlIG9sZGVyIHRoYW4gNSBzZWNvbmRzXHJcbiAqIGFyZSBpZ25vcmVkLlxyXG4gKi9cclxudmFyIENMSUVOVF9NRVRBREFUQV9NQVhfQUdFX01TID0gNTAwMDtcclxuLyoqXHJcbiAqIE9sZGVzdCBhY2NlcHRhYmxlIGFnZSBpbiBtaWxsaXNlY29uZHMgZm9yIGNsaWVudCBtZXRhZGF0YSBiZWZvcmUgaXQgYW5kIGl0c1xyXG4gKiBhc3NvY2lhdGVkIGRhdGEgKHN1Y2ggYXMgdGhlIHJlbW90ZSBkb2N1bWVudCBjYWNoZSBjaGFuZ2Vsb2cpIGNhbiBiZVxyXG4gKiBnYXJiYWdlIGNvbGxlY3RlZC4gQ2xpZW50cyB0aGF0IGV4Y2VlZCB0aGlzIHRocmVzaG9sZCB3aWxsIG5vdCBiZSBhYmxlIHRvXHJcbiAqIHJlcGxheSBXYXRjaCBldmVudHMgdGhhdCBvY2N1cnJlZCBiZWZvcmUgdGhpcyB0aHJlc2hvbGQuXHJcbiAqL1xyXG52YXIgQ0xJRU5UX1NUQVRFX0dBUkJBR0VfQ09MTEVDVElPTl9USFJFU0hPTERfTVMgPSAzMCAqIDYwICogMTAwMDsgLy8gMzAgTWludXRlc1xyXG4vKipcclxuICogVGhlIGludGVydmFsIGF0IHdoaWNoIGNsaWVudHMgd2lsbCB1cGRhdGUgdGhlaXIgbWV0YWRhdGEsIGluY2x1ZGluZ1xyXG4gKiByZWZyZXNoaW5nIHRoZWlyIHByaW1hcnkgbGVhc2UgaWYgaGVsZCBvciBwb3RlbnRpYWxseSB0cnlpbmcgdG8gYWNxdWlyZSBpdCBpZlxyXG4gKiBub3QgaGVsZC5cclxuICpcclxuICogUHJpbWFyeSBjbGllbnRzIG1heSBvcHBvcnR1bmlzdGljYWxseSByZWZyZXNoIHRoZWlyIG1ldGFkYXRhIGVhcmxpZXJcclxuICogaWYgdGhleSdyZSBhbHJlYWR5IHBlcmZvcm1pbmcgYW4gSW5kZXhlZERCIG9wZXJhdGlvbi5cclxuICovXHJcbnZhciBDTElFTlRfTUVUQURBVEFfUkVGUkVTSF9JTlRFUlZBTF9NUyA9IDQwMDA7XHJcbi8qKiBVc2VyLWZhY2luZyBlcnJvciB3aGVuIHRoZSBwcmltYXJ5IGxlYXNlIGlzIHJlcXVpcmVkIGJ1dCBub3QgYXZhaWxhYmxlLiAqL1xyXG52YXIgUFJJTUFSWV9MRUFTRV9MT1NUX0VSUk9SX01TRyA9ICdUaGUgY3VycmVudCB0YWIgaXMgbm90IGluIHRoZSByZXF1aXJlZCBzdGF0ZSB0byBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uLiAnICtcclxuICAgICdJdCBtaWdodCBiZSBuZWNlc3NhcnkgdG8gcmVmcmVzaCB0aGUgYnJvd3NlciB0YWIuJztcclxudmFyIFBSSU1BUllfTEVBU0VfRVhDTFVTSVZFX0VSUk9SX01TRyA9ICdBbm90aGVyIHRhYiBoYXMgZXhjbHVzaXZlIGFjY2VzcyB0byB0aGUgcGVyc2lzdGVuY2UgbGF5ZXIuICcgK1xyXG4gICAgJ1RvIGFsbG93IHNoYXJlZCBhY2Nlc3MsIG1ha2Ugc3VyZSB0byBpbnZva2UgJyArXHJcbiAgICAnYGVuYWJsZVBlcnNpc3RlbmNlKClgIHdpdGggYGV4cGVyaW1lbnRhbFRhYlN5bmNocm9uaXphdGlvbjp0cnVlYCBpbiBhbGwgdGFicy4nO1xyXG52YXIgVU5TVVBQT1JURURfUExBVEZPUk1fRVJST1JfTVNHID0gJ1RoaXMgcGxhdGZvcm0gaXMgZWl0aGVyIG1pc3NpbmcnICtcclxuICAgICcgSW5kZXhlZERCIG9yIGlzIGtub3duIHRvIGhhdmUgYW4gaW5jb21wbGV0ZSBpbXBsZW1lbnRhdGlvbi4gT2ZmbGluZScgK1xyXG4gICAgJyBwZXJzaXN0ZW5jZSBoYXMgYmVlbiBkaXNhYmxlZC4nO1xyXG4vLyBUaGUgZm9ybWF0IG9mIHRoZSBMb2NhbFN0b3JhZ2Uga2V5IHRoYXQgc3RvcmVzIHpvbWJpZWQgY2xpZW50IGlzOlxyXG4vLyAgICAgZmlyZXN0b3JlX3pvbWJpZV88cGVyc2lzdGVuY2VfcHJlZml4Pl88aW5zdGFuY2Vfa2V5PlxyXG52YXIgWk9NQklFRF9DTElFTlRTX0tFWV9QUkVGSVggPSAnZmlyZXN0b3JlX3pvbWJpZSc7XHJcbnZhciBJbmRleGVkRGJUcmFuc2FjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKEluZGV4ZWREYlRyYW5zYWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gSW5kZXhlZERiVHJhbnNhY3Rpb24oc2ltcGxlRGJUcmFuc2FjdGlvbiwgY3VycmVudFNlcXVlbmNlTnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5zaW1wbGVEYlRyYW5zYWN0aW9uID0gc2ltcGxlRGJUcmFuc2FjdGlvbjtcclxuICAgICAgICBfdGhpcy5jdXJyZW50U2VxdWVuY2VOdW1iZXIgPSBjdXJyZW50U2VxdWVuY2VOdW1iZXI7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEluZGV4ZWREYlRyYW5zYWN0aW9uO1xyXG59KFBlcnNpc3RlbmNlVHJhbnNhY3Rpb24pKTtcclxudmFyIEluZGV4ZWREYlBlcnNpc3RlbmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gTm90ZSB0aGF0IGBtdWx0aUNsaWVudFBhcmFtc2AgbXVzdCBiZSBwcmVzZW50IHRvIGVuYWJsZSBtdWx0aS1jbGllbnQgc3VwcG9ydCB3aGlsZSBtdWx0aS10YWJcclxuICAgIC8vIGlzIHN0aWxsIGV4cGVyaW1lbnRhbC4gV2hlbiBtdWx0aS1jbGllbnQgaXMgc3dpdGNoZWQgdG8gYWx3YXlzIG9uLCBgbXVsdGlDbGllbnRQYXJhbXNgIHdpbGxcclxuICAgIC8vIG5vIGxvbmdlciBiZSBvcHRpb25hbC5cclxuICAgIGZ1bmN0aW9uIEluZGV4ZWREYlBlcnNpc3RlbmNlKHBlcnNpc3RlbmNlS2V5LCBjbGllbnRJZCwgcGxhdGZvcm0sIHF1ZXVlLCBzZXJpYWxpemVyLCBtdWx0aUNsaWVudFBhcmFtcykge1xyXG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2VLZXkgPSBwZXJzaXN0ZW5jZUtleTtcclxuICAgICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IHF1ZXVlO1xyXG4gICAgICAgIHRoaXMubXVsdGlDbGllbnRQYXJhbXMgPSBtdWx0aUNsaWVudFBhcmFtcztcclxuICAgICAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1ByaW1hcnkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm5ldHdvcmtFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmluRm9yZWdyb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgIC8qKiBUaGUgbGFzdCB0aW1lIHdlIGdhcmJhZ2UgY29sbGVjdGVkIHRoZSBSZW1vdGUgRG9jdW1lbnQgQ2hhbmdlbG9nLiAqL1xyXG4gICAgICAgIHRoaXMubGFzdEdhcmJhZ2VDb2xsZWN0aW9uVGltZSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcclxuICAgICAgICAvKiogQSBsaXN0ZW5lciB0byBub3RpZnkgb24gcHJpbWFyeSBzdGF0ZSBjaGFuZ2VzLiAqL1xyXG4gICAgICAgIHRoaXMucHJpbWFyeVN0YXRlTGlzdGVuZXIgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7IH07XHJcbiAgICAgICAgaWYgKCFJbmRleGVkRGJQZXJzaXN0ZW5jZS5pc0F2YWlsYWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLlVOSU1QTEVNRU5URUQsIFVOU1VQUE9SVEVEX1BMQVRGT1JNX0VSUk9SX01TRyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGJOYW1lID0gcGVyc2lzdGVuY2VLZXkgKyBJbmRleGVkRGJQZXJzaXN0ZW5jZS5NQUlOX0RBVEFCQVNFO1xyXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IG5ldyBMb2NhbFNlcmlhbGl6ZXIoc2VyaWFsaXplcik7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IHBsYXRmb3JtLmRvY3VtZW50O1xyXG4gICAgICAgIHRoaXMuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24gPSBtdWx0aUNsaWVudFBhcmFtcyAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMucXVlcnlDYWNoZSA9IG5ldyBJbmRleGVkRGJRdWVyeUNhY2hlKHRoaXMuc2VyaWFsaXplcik7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlID0gbmV3IEluZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGUodGhpcy5zZXJpYWxpemVyLCBcclxuICAgICAgICAvKmtlZXBEb2N1bWVudENoYW5nZUxvZz0qLyB0aGlzLmFsbG93VGFiU3luY2hyb25pemF0aW9uKTtcclxuICAgICAgICBpZiAocGxhdGZvcm0ud2luZG93ICYmIHBsYXRmb3JtLndpbmRvdy5sb2NhbFN0b3JhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3cgPSBwbGF0Zm9ybS53aW5kb3c7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU3RvcmFnZSA9IHRoaXMud2luZG93LmxvY2FsU3RvcmFnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLlVOSU1QTEVNRU5URUQsICdJbmRleGVkREIgcGVyc2lzdGVuY2UgaXMgb25seSBhdmFpbGFibGUgb24gcGxhdGZvcm1zIHRoYXQgc3VwcG9ydCBMb2NhbFN0b3JhZ2UuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UuZ2V0U3RvcmUgPSBmdW5jdGlvbiAodHhuLCBzdG9yZSkge1xyXG4gICAgICAgIGlmICh0eG4gaW5zdGFuY2VvZiBJbmRleGVkRGJUcmFuc2FjdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gU2ltcGxlRGIuZ2V0U3RvcmUodHhuLnNpbXBsZURiVHJhbnNhY3Rpb24sIHN0b3JlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IGZhaWwoJ0luZGV4ZWREYlBlcnNpc3RlbmNlIG11c3QgdXNlIGluc3RhbmNlcyBvZiBJbmRleGVkRGJUcmFuc2FjdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5jcmVhdGVJbmRleGVkRGJQZXJzaXN0ZW5jZSA9IGZ1bmN0aW9uIChwZXJzaXN0ZW5jZUtleSwgY2xpZW50SWQsIHBsYXRmb3JtLCBxdWV1ZSwgc2VyaWFsaXplcikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGVyc2lzdGVuY2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdGVuY2UgPSBuZXcgSW5kZXhlZERiUGVyc2lzdGVuY2UocGVyc2lzdGVuY2VLZXksIGNsaWVudElkLCBwbGF0Zm9ybSwgcXVldWUsIHNlcmlhbGl6ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBwZXJzaXN0ZW5jZS5zdGFydCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHBlcnNpc3RlbmNlXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UuY3JlYXRlTXVsdGlDbGllbnRJbmRleGVkRGJQZXJzaXN0ZW5jZSA9IGZ1bmN0aW9uIChwZXJzaXN0ZW5jZUtleSwgY2xpZW50SWQsIHBsYXRmb3JtLCBxdWV1ZSwgc2VyaWFsaXplciwgbXVsdGlDbGllbnRQYXJhbXMpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBlcnNpc3RlbmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNpc3RlbmNlID0gbmV3IEluZGV4ZWREYlBlcnNpc3RlbmNlKHBlcnNpc3RlbmNlS2V5LCBjbGllbnRJZCwgcGxhdGZvcm0sIHF1ZXVlLCBzZXJpYWxpemVyLCBtdWx0aUNsaWVudFBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHBlcnNpc3RlbmNlLnN0YXJ0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcGVyc2lzdGVuY2VdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEF0dGVtcHQgdG8gc3RhcnQgSW5kZXhlZERiIHBlcnNpc3RlbmNlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IFdoZXRoZXIgcGVyc2lzdGVuY2Ugd2FzIGVuYWJsZWQuXHJcbiAgICAgKi9cclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGFzc2VydCghdGhpcy5zdGFydGVkLCAnSW5kZXhlZERiUGVyc2lzdGVuY2UgZG91YmxlLXN0YXJ0ZWQhJyk7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMud2luZG93ICE9PSBudWxsLCBcIkV4cGVjdGVkICd3aW5kb3cnIHRvIGJlIGRlZmluZWRcIik7XHJcbiAgICAgICAgcmV0dXJuIFNpbXBsZURiLm9wZW5PckNyZWF0ZSh0aGlzLmRiTmFtZSwgU0NIRU1BX1ZFUlNJT04sIG5ldyBTY2hlbWFDb252ZXJ0ZXIodGhpcy5zZXJpYWxpemVyKSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRiKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNpbXBsZURiID0gZGI7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc3RhcnRSZW1vdGVEb2N1bWVudENhY2hlKCk7IH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuYXR0YWNoVmlzaWJpbGl0eUhhbmRsZXIoKTtcclxuICAgICAgICAgICAgX3RoaXMuYXR0YWNoV2luZG93VW5sb2FkSG9vaygpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlQ2xpZW50TWV0YWRhdGFBbmRUcnlCZWNvbWVQcmltYXJ5KCkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2NoZWR1bGVDbGllbnRNZXRhZGF0YUFuZFByaW1hcnlMZWFzZVJlZnJlc2hlcygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zaW1wbGVEYi5ydW5UcmFuc2FjdGlvbigncmVhZG9ubHknLCBbRGJUYXJnZXRHbG9iYWwuc3RvcmVdLCBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0SGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyKHR4bikubmV4dChmdW5jdGlvbiAoaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcXVlbmNlTnVtYmVyU3luY2VyID0gX3RoaXMubXVsdGlDbGllbnRQYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBfdGhpcy5tdWx0aUNsaWVudFBhcmFtcy5zZXF1ZW5jZU51bWJlclN5bmNlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5saXN0ZW5TZXF1ZW5jZSA9IG5ldyBMaXN0ZW5TZXF1ZW5jZShoaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIsIHNlcXVlbmNlTnVtYmVyU3luY2VyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9zdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICBfdGhpcy5zaW1wbGVEYiAmJiBfdGhpcy5zaW1wbGVEYi5jbG9zZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUuc3RhcnRSZW1vdGVEb2N1bWVudENhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2ltcGxlRGIucnVuVHJhbnNhY3Rpb24oJ3JlYWRvbmx5JywgQUxMX1NUT1JFUywgZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3RlRG9jdW1lbnRDYWNoZS5zdGFydCh0eG4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS5zZXRQcmltYXJ5U3RhdGVMaXN0ZW5lciA9IGZ1bmN0aW9uIChwcmltYXJ5U3RhdGVMaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMucHJpbWFyeVN0YXRlTGlzdGVuZXIgPSBwcmltYXJ5U3RhdGVMaXN0ZW5lcjtcclxuICAgICAgICByZXR1cm4gcHJpbWFyeVN0YXRlTGlzdGVuZXIodGhpcy5pc1ByaW1hcnkpO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS5zZXROZXR3b3JrRW5hYmxlZCA9IGZ1bmN0aW9uIChuZXR3b3JrRW5hYmxlZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMubmV0d29ya0VuYWJsZWQgIT09IG5ldHdvcmtFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmV0d29ya0VuYWJsZWQgPSBuZXR3b3JrRW5hYmxlZDtcclxuICAgICAgICAgICAgLy8gU2NoZWR1bGUgYSBwcmltYXJ5IGxlYXNlIHJlZnJlc2ggZm9yIGltbWVkaWF0ZSBleGVjdXRpb24uIFRoZSBldmVudHVhbFxyXG4gICAgICAgICAgICAvLyBsZWFzZSB1cGRhdGUgd2lsbCBiZSBwcm9wYWdhdGVkIHZpYSBgcHJpbWFyeVN0YXRlTGlzdGVuZXJgLlxyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLmVucXVldWVBbmRGb3JnZXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zdGFydGVkKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMudXBkYXRlQ2xpZW50TWV0YWRhdGFBbmRUcnlCZWNvbWVQcmltYXJ5KCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyB0aGUgY2xpZW50IG1ldGFkYXRhIGluIEluZGV4ZWREYiBhbmQgYXR0ZW1wdHMgdG8gZWl0aGVyIG9idGFpbiBvclxyXG4gICAgICogZXh0ZW5kIHRoZSBwcmltYXJ5IGxlYXNlIGZvciB0aGUgbG9jYWwgY2xpZW50LiBBc3luY2hyb25vdXNseSBub3RpZmllcyB0aGVcclxuICAgICAqIHByaW1hcnkgc3RhdGUgbGlzdGVuZXIgaWYgdGhlIGNsaWVudCBlaXRoZXIgbmV3bHkgb2J0YWluZWQgb3IgcmVsZWFzZWQgaXRzXHJcbiAgICAgKiBwcmltYXJ5IGxlYXNlLlxyXG4gICAgICovXHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUudXBkYXRlQ2xpZW50TWV0YWRhdGFBbmRUcnlCZWNvbWVQcmltYXJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2ltcGxlRGIucnVuVHJhbnNhY3Rpb24oJ3JlYWR3cml0ZScsIEFMTF9TVE9SRVMsIGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICAgICAgdmFyIG1ldGFkYXRhU3RvcmUgPSBjbGllbnRNZXRhZGF0YVN0b3JlKHR4bik7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YVN0b3JlXHJcbiAgICAgICAgICAgICAgICAucHV0KG5ldyBEYkNsaWVudE1ldGFkYXRhKF90aGlzLmNsaWVudElkLCBEYXRlLm5vdygpLCBfdGhpcy5uZXR3b3JrRW5hYmxlZCwgX3RoaXMuaW5Gb3JlZ3JvdW5kLCBfdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmxhc3RQcm9jZXNzZWREb2N1bWVudENoYW5nZUlkKSlcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmNhbkFjdEFzUHJpbWFyeSh0eG4pOyB9KVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGNhbkFjdEFzUHJpbWFyeSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdhc1ByaW1hcnkgPSBfdGhpcy5pc1ByaW1hcnk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5pc1ByaW1hcnkgPSBjYW5BY3RBc1ByaW1hcnk7XHJcbiAgICAgICAgICAgICAgICBpZiAod2FzUHJpbWFyeSAhPT0gX3RoaXMuaXNQcmltYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucXVldWUuZW5xdWV1ZUFuZEZvcmdldChmdW5jdGlvbiAoKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZnkgdGhhdCBgc2h1dGRvd24oKWAgaGFzbid0IGJlZW4gY2FsbGVkIHlldCBieSB0aGUgdGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgaW52b2tlIHRoZSBgcHJpbWFyeVN0YXRlTGlzdGVuZXJgLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnByaW1hcnlTdGF0ZUxpc3RlbmVyKHRoaXMuaXNQcmltYXJ5KV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pOyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh3YXNQcmltYXJ5ICYmICFfdGhpcy5pc1ByaW1hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVsZWFzZVByaW1hcnlMZWFzZUlmSGVsZCh0eG4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMuaXNQcmltYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFjcXVpcmVPckV4dGVuZFByaW1hcnlMZWFzZSh0eG4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUucmVtb3ZlQ2xpZW50TWV0YWRhdGEgPSBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgdmFyIG1ldGFkYXRhU3RvcmUgPSBjbGllbnRNZXRhZGF0YVN0b3JlKHR4bik7XHJcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhU3RvcmUuZGVsZXRlKHRoaXMuY2xpZW50SWQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSWYgdGhlIGdhcmJhZ2UgY29sbGVjdGlvbiB0aHJlc2hvbGQgaGFzIHBhc3NlZCwgcHJ1bmVzIHRoZVxyXG4gICAgICogUmVtb3RlRG9jdW1lbnRDaGFuZ2VzIGFuZCB0aGUgQ2xpZW50TWV0YWRhdGEgc3RvcmUgYmFzZWQgb24gdGhlIGxhc3QgdXBkYXRlXHJcbiAgICAgKiB0aW1lIG9mIGFsbCBjbGllbnRzLlxyXG4gICAgICovXHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUubWF5YmVHYXJiYWdlQ29sbGVjdE11bHRpQ2xpZW50U3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVDbGllbnRzXzEsIGluYWN0aXZlQ2xpZW50c18xO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuaXNQcmltYXJ5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5pc1dpdGhpbkFnZSh0aGlzLmxhc3RHYXJiYWdlQ29sbGVjdGlvblRpbWUsIENMSUVOVF9TVEFURV9HQVJCQUdFX0NPTExFQ1RJT05fVEhSRVNIT0xEX01TKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RHYXJiYWdlQ29sbGVjdGlvblRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZUNsaWVudHNfMSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJ1blRyYW5zYWN0aW9uKCdtYXliZUdhcmJhZ2VDb2xsZWN0TXVsdGlDbGllbnRTdGF0ZScsICdyZWFkd3JpdGUtcHJpbWFyeScsIGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YWRhdGFTdG9yZSA9IEluZGV4ZWREYlBlcnNpc3RlbmNlLmdldFN0b3JlKHR4biwgRGJDbGllbnRNZXRhZGF0YS5zdG9yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhU3RvcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmxvYWRBbGwoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubmV4dChmdW5jdGlvbiAoZXhpc3RpbmdDbGllbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNsaWVudHNfMSA9IF90aGlzLmZpbHRlckFjdGl2ZUNsaWVudHMoZXhpc3RpbmdDbGllbnRzLCBDTElFTlRfU1RBVEVfR0FSQkFHRV9DT0xMRUNUSU9OX1RIUkVTSE9MRF9NUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYWN0aXZlQ2xpZW50c18xID0gZXhpc3RpbmdDbGllbnRzLmZpbHRlcihmdW5jdGlvbiAoY2xpZW50KSB7IHJldHVybiBhY3RpdmVDbGllbnRzXzEuaW5kZXhPZihjbGllbnQpID09PSAtMTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgbWV0YWRhdGEgZm9yIGNsaWVudHMgdGhhdCBhcmUgbm8gbG9uZ2VyIGNvbnNpZGVyZWQgYWN0aXZlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLmZvckVhY2goaW5hY3RpdmVDbGllbnRzXzEsIGZ1bmN0aW9uIChpbmFjdGl2ZUNsaWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhU3RvcmUuZGVsZXRlKGluYWN0aXZlQ2xpZW50LmNsaWVudElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgbWluaW11bSBjaGFuZ2UgSUQgZnJvbSB0aGUgc2V0IG9mIGFjdGl2ZSBjbGllbnRzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcHJpbWFyeSBjbGllbnQgZG9lc24ndCByZWFkIGZyb20gdGhlIGRvY3VtZW50IGNoYW5nZSBsb2csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBoZW5jZSB3ZSBleGNsdWRlIGl0IHdoZW4gd2UgZGV0ZXJtaW5lIHRoZSBtaW5pbXVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBsYXN0UHJvY2Vzc2VkRG9jdW1lbnRDaGFuZ2VJZGAuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNsaWVudHNfMSA9IGFjdGl2ZUNsaWVudHNfMS5maWx0ZXIoZnVuY3Rpb24gKGNsaWVudCkgeyByZXR1cm4gY2xpZW50LmNsaWVudElkICE9PSBfdGhpcy5jbGllbnRJZDsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVDbGllbnRzXzEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NlZENoYW5nZUlkcyA9IGFjdGl2ZUNsaWVudHNfMS5tYXAoZnVuY3Rpb24gKGNsaWVudCkgeyByZXR1cm4gY2xpZW50Lmxhc3RQcm9jZXNzZWREb2N1bWVudENoYW5nZUlkIHx8IDA7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZGVzdENoYW5nZUlkID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgcHJvY2Vzc2VkQ2hhbmdlSWRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLnJlbW92ZURvY3VtZW50Q2hhbmdlc1Rocm91Z2hDaGFuZ2VJZCh0eG4sIG9sZGVzdENoYW5nZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgcG90ZW50aWFsIGxlZnRvdmVyIGVudHJpZXMgdGhhdCBtYXkgY29udGludWUgdG8gbWFyayB0aGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5hY3RpdmUgY2xpZW50cyBhcyB6b21iaWVkIGluIExvY2FsU3RvcmFnZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWRlYWxseSB3ZSdkIGRlbGV0ZSB0aGUgSW5kZXhlZERiIGFuZCBMb2NhbFN0b3JhZ2Ugem9tYmllIGVudHJpZXMgZm9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjbGllbnQgYXRvbWljYWxseSwgYnV0IHdlIGNhbid0LiBTbyB3ZSBvcHQgdG8gZGVsZXRlIHRoZSBJbmRleGVkRGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW50cmllcyBmaXJzdCB0byBhdm9pZCBwb3RlbnRpYWxseSByZXZpdmluZyBhIHpvbWJpZWQgY2xpZW50LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZUNsaWVudHNfMS5mb3JFYWNoKGZ1bmN0aW9uIChpbmFjdGl2ZUNsaWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMud2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKF90aGlzLnpvbWJpZWRDbGllbnRMb2NhbFN0b3JhZ2VLZXkoaW5hY3RpdmVDbGllbnQuY2xpZW50SWQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTY2hlZHVsZXMgYSByZWN1cnJpbmcgdGltZXIgdG8gdXBkYXRlIHRoZSBjbGllbnQgbWV0YWRhdGEgYW5kIHRvIGVpdGhlclxyXG4gICAgICogZXh0ZW5kIG9yIGFjcXVpcmUgdGhlIHByaW1hcnkgbGVhc2UgaWYgdGhlIGNsaWVudCBpcyBlbGlnaWJsZS5cclxuICAgICAqL1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLnNjaGVkdWxlQ2xpZW50TWV0YWRhdGFBbmRQcmltYXJ5TGVhc2VSZWZyZXNoZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNsaWVudE1ldGFkYXRhUmVmcmVzaGVyID0gdGhpcy5xdWV1ZS5lbnF1ZXVlQWZ0ZXJEZWxheShUaW1lcklkLkNsaWVudE1ldGFkYXRhUmVmcmVzaCwgQ0xJRU5UX01FVEFEQVRBX1JFRlJFU0hfSU5URVJWQUxfTVMsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUNsaWVudE1ldGFkYXRhQW5kVHJ5QmVjb21lUHJpbWFyeSgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5tYXliZUdhcmJhZ2VDb2xsZWN0TXVsdGlDbGllbnRTdGF0ZSgpOyB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2NoZWR1bGVDbGllbnRNZXRhZGF0YUFuZFByaW1hcnlMZWFzZVJlZnJlc2hlcygpOyB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKiogQ2hlY2tzIHdoZXRoZXIgYGNsaWVudGAgaXMgdGhlIGxvY2FsIGNsaWVudC4gKi9cclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS5pc0xvY2FsQ2xpZW50ID0gZnVuY3Rpb24gKGNsaWVudCkge1xyXG4gICAgICAgIHJldHVybiBjbGllbnQgPyBjbGllbnQub3duZXJJZCA9PT0gdGhpcy5jbGllbnRJZCA6IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRXZhbHVhdGUgdGhlIHN0YXRlIG9mIGFsbCBhY3RpdmUgY2xpZW50cyBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGxvY2FsXHJcbiAgICAgKiBjbGllbnQgaXMgb3IgY2FuIGFjdCBhcyB0aGUgaG9sZGVyIG9mIHRoZSBwcmltYXJ5IGxlYXNlLiBSZXR1cm5zIHdoZXRoZXJcclxuICAgICAqIHRoZSBjbGllbnQgaXMgZWxpZ2libGUgZm9yIHRoZSBsZWFzZSwgYnV0IGRvZXMgbm90IGFjdHVhbGx5IGFjcXVpcmUgaXQuXHJcbiAgICAgKiBNYXkgcmV0dXJuICdmYWxzZScgZXZlbiBpZiB0aGVyZSBpcyBubyBhY3RpdmUgbGVhc2Vob2xkZXIgYW5kIGFub3RoZXJcclxuICAgICAqIChmb3JlZ3JvdW5kKSBjbGllbnQgc2hvdWxkIGJlY29tZSBsZWFzZWhvbGRlciBpbnN0ZWFkLlxyXG4gICAgICovXHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUuY2FuQWN0QXNQcmltYXJ5ID0gZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN0b3JlID0gcHJpbWFyeUNsaWVudFN0b3JlKHR4bik7XHJcbiAgICAgICAgcmV0dXJuIHN0b3JlXHJcbiAgICAgICAgICAgIC5nZXQoRGJQcmltYXJ5Q2xpZW50LmtleSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGN1cnJlbnRQcmltYXJ5KSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50TGVhc2VJc1ZhbGlkID0gY3VycmVudFByaW1hcnkgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIF90aGlzLmlzV2l0aGluQWdlKGN1cnJlbnRQcmltYXJ5LmxlYXNlVGltZXN0YW1wTXMsIENMSUVOVF9NRVRBREFUQV9NQVhfQUdFX01TKSAmJlxyXG4gICAgICAgICAgICAgICAgIV90aGlzLmlzQ2xpZW50Wm9tYmllZChjdXJyZW50UHJpbWFyeS5vd25lcklkKTtcclxuICAgICAgICAgICAgLy8gQSBjbGllbnQgaXMgZWxpZ2libGUgZm9yIHRoZSBwcmltYXJ5IGxlYXNlIGlmOlxyXG4gICAgICAgICAgICAvLyAtIGl0cyBuZXR3b3JrIGlzIGVuYWJsZWQgYW5kIHRoZSBjbGllbnQncyB0YWIgaXMgaW4gdGhlIGZvcmVncm91bmQuXHJcbiAgICAgICAgICAgIC8vIC0gaXRzIG5ldHdvcmsgaXMgZW5hYmxlZCBhbmQgbm8gb3RoZXIgY2xpZW50J3MgdGFiIGlzIGluIHRoZVxyXG4gICAgICAgICAgICAvLyAgIGZvcmVncm91bmQuXHJcbiAgICAgICAgICAgIC8vIC0gZXZlcnkgY2xpZW50cyBuZXR3b3JrIGlzIGRpc2FibGVkIGFuZCB0aGUgY2xpZW50J3MgdGFiIGlzIGluIHRoZVxyXG4gICAgICAgICAgICAvLyAgIGZvcmVncm91bmQuXHJcbiAgICAgICAgICAgIC8vIC0gZXZlcnkgY2xpZW50cyBuZXR3b3JrIGlzIGRpc2FibGVkIGFuZCBubyBvdGhlciBjbGllbnQncyB0YWIgaXMgaW5cclxuICAgICAgICAgICAgLy8gICB0aGUgZm9yZWdyb3VuZC5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRMZWFzZUlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc0xvY2FsQ2xpZW50KGN1cnJlbnRQcmltYXJ5KSAmJiBfdGhpcy5uZXR3b3JrRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5pc0xvY2FsQ2xpZW50KGN1cnJlbnRQcmltYXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudFByaW1hcnkuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFpbCB0aGUgYGNhbkFjdEFzUHJpbWFyeWAgY2hlY2sgaWYgdGhlIGN1cnJlbnQgbGVhc2Vob2xkZXIgaGFzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdCBvcHRlZCBpbnRvIG11bHRpLXRhYiBzeW5jaHJvbml6YXRpb24uIElmIHRoaXMgaGFwcGVucyBhdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGllbnQgc3RhcnR1cCwgd2UgcmVqZWN0IHRoZSBQcm9taXNlIHJldHVybmVkIGJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBlbmFibGVQZXJzaXN0ZW5jZSgpYCBhbmQgdGhlIHVzZXIgY2FuIGNvbnRpbnVlIHRvIHVzZSBGaXJlc3RvcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCBpbi1tZW1vcnkgcGVyc2lzdGVuY2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgZmFpbHMgZHVyaW5nIGEgbGVhc2UgcmVmcmVzaCwgd2Ugd2lsbCBpbnN0ZWFkIGJsb2NrIHRoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBc3luY1F1ZXVlIGZyb20gZXhlY3V0aW5nIGZ1cnRoZXIgb3BlcmF0aW9ucy4gTm90ZSB0aGF0IHRoaXMgaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWNjZXB0YWJsZSBzaW5jZSBtaXhpbmcgJiBtYXRjaGluZyBkaWZmZXJlbnQgYHN5bmNocm9uaXplVGFic2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0dGluZ3MgaXMgbm90IHN1cHBvcnRlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhiLzExNDIyNjIzNCk6IFJlbW92ZSB0aGlzIGNoZWNrIHdoZW4gYHN5bmNocm9uaXplVGFic2AgY2FuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIGxvbmdlciBiZSB0dXJuZWQgb2ZmLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5GQUlMRURfUFJFQ09ORElUSU9OLCBQUklNQVJZX0xFQVNFX0VYQ0xVU0lWRV9FUlJPUl9NU0cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKF90aGlzLm5ldHdvcmtFbmFibGVkICYmIF90aGlzLmluRm9yZWdyb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNsaWVudE1ldGFkYXRhU3RvcmUodHhuKVxyXG4gICAgICAgICAgICAgICAgLmxvYWRBbGwoKVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGV4aXN0aW5nQ2xpZW50cykge1xyXG4gICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBhbGwgZXhpc3RpbmcgY2xpZW50cyBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgYXQgbGVhc3Qgb25lIG9mXHJcbiAgICAgICAgICAgICAgICAvLyB0aGVtIGlzIGJldHRlciBzdWl0ZWQgdG8gb2J0YWluIHRoZSBwcmltYXJ5IGxlYXNlLlxyXG4gICAgICAgICAgICAgICAgdmFyIHByZWZlcnJlZENhbmRpZGF0ZSA9IF90aGlzLmZpbHRlckFjdGl2ZUNsaWVudHMoZXhpc3RpbmdDbGllbnRzLCBDTElFTlRfTUVUQURBVEFfTUFYX0FHRV9NUykuZmluZChmdW5jdGlvbiAob3RoZXJDbGllbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY2xpZW50SWQgIT09IG90aGVyQ2xpZW50LmNsaWVudElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdGhlckNsaWVudEhhc0JldHRlck5ldHdvcmtTdGF0ZSA9ICFfdGhpcy5uZXR3b3JrRW5hYmxlZCAmJiBvdGhlckNsaWVudC5uZXR3b3JrRW5hYmxlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG90aGVyQ2xpZW50SGFzQmV0dGVyVmlzaWJpbGl0eSA9ICFfdGhpcy5pbkZvcmVncm91bmQgJiYgb3RoZXJDbGllbnQuaW5Gb3JlZ3JvdW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3RoZXJDbGllbnRIYXNTYW1lTmV0d29ya1N0YXRlID0gX3RoaXMubmV0d29ya0VuYWJsZWQgPT09IG90aGVyQ2xpZW50Lm5ldHdvcmtFbmFibGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3RoZXJDbGllbnRIYXNCZXR0ZXJOZXR3b3JrU3RhdGUgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvdGhlckNsaWVudEhhc0JldHRlclZpc2liaWxpdHkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlckNsaWVudEhhc1NhbWVOZXR3b3JrU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcmVmZXJyZWRDYW5kaWRhdGUgPT09IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGNhbkFjdEFzUHJpbWFyeSkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNQcmltYXJ5ICE9PSBjYW5BY3RBc1ByaW1hcnkpIHtcclxuICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUckMiwgXCJDbGllbnQgXCIgKyAoY2FuQWN0QXNQcmltYXJ5ID8gJ2lzJyA6ICdpcyBub3QnKSArIFwiIGVsaWdpYmxlIGZvciBhIHByaW1hcnkgbGVhc2UuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjYW5BY3RBc1ByaW1hcnk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLnNodXRkb3duID0gZnVuY3Rpb24gKGRlbGV0ZURhdGEpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc2h1dGRvd24oKSBvcGVyYXRpb25zIGFyZSBpZGVtcG90ZW50IGFuZCBjYW4gYmUgY2FsbGVkIGV2ZW4gd2hlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCgpIGFib3J0ZWQgKGUuZy4gYmVjYXVzZSBpdCBjb3VsZG4ndCBhY3F1aXJlIHRoZSBwZXJzaXN0ZW5jZSBsZWFzZSkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrQ2xpZW50Wm9tYmllZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGllbnRNZXRhZGF0YVJlZnJlc2hlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnRNZXRhZGF0YVJlZnJlc2hlci5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGFjaFZpc2liaWxpdHlIYW5kbGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0YWNoV2luZG93VW5sb2FkSG9vaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNpbXBsZURiLnJ1blRyYW5zYWN0aW9uKCdyZWFkd3JpdGUnLCBbRGJQcmltYXJ5Q2xpZW50LnN0b3JlLCBEYkNsaWVudE1ldGFkYXRhLnN0b3JlXSwgZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZWxlYXNlUHJpbWFyeUxlYXNlSWZIZWxkKHR4bikubmV4dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdmVDbGllbnRNZXRhZGF0YSh0eG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNpbXBsZURiLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZW50cnkgbWFya2luZyB0aGUgY2xpZW50IGFzIHpvbWJpZWQgZnJvbSBMb2NhbFN0b3JhZ2Ugc2luY2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQgaXRzIG1ldGFkYXRhIGZyb20gSW5kZXhlZERiLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNsaWVudFpvbWJpZWRFbnRyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRlbGV0ZURhdGEpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBTaW1wbGVEYi5kZWxldGUodGhpcy5kYk5hbWUpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgY2xpZW50cyB0aGF0IGFyZSBub3Qgem9tYmllZCBhbmQgaGF2ZSBhbiB1cGRhdGVUaW1lIHdpdGhpbiB0aGVcclxuICAgICAqIHByb3ZpZGVkIHRocmVzaG9sZC5cclxuICAgICAqL1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLmZpbHRlckFjdGl2ZUNsaWVudHMgPSBmdW5jdGlvbiAoY2xpZW50cywgYWN0aXZpdHlUaHJlc2hvbGRNcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGNsaWVudHMuZmlsdGVyKGZ1bmN0aW9uIChjbGllbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmlzV2l0aGluQWdlKGNsaWVudC51cGRhdGVUaW1lTXMsIGFjdGl2aXR5VGhyZXNob2xkTXMpICYmXHJcbiAgICAgICAgICAgICAgICAhX3RoaXMuaXNDbGllbnRab21iaWVkKGNsaWVudC5jbGllbnRJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLmdldEFjdGl2ZUNsaWVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5zaW1wbGVEYi5ydW5UcmFuc2FjdGlvbigncmVhZG9ubHknLCBbRGJDbGllbnRNZXRhZGF0YS5zdG9yZV0sIGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNsaWVudE1ldGFkYXRhU3RvcmUodHhuKVxyXG4gICAgICAgICAgICAgICAgLmxvYWRBbGwoKVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGNsaWVudHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5maWx0ZXJBY3RpdmVDbGllbnRzKGNsaWVudHMsIENMSUVOVF9NRVRBREFUQV9NQVhfQUdFX01TKS5tYXAoZnVuY3Rpb24gKGNsaWVudE1ldGFkYXRhKSB7IHJldHVybiBjbGllbnRNZXRhZGF0YS5jbGllbnRJZDsgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUsIFwic3RhcnRlZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGFydGVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLmdldE11dGF0aW9uUXVldWUgPSBmdW5jdGlvbiAodXNlcikge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnN0YXJ0ZWQsICdDYW5ub3QgaW5pdGlhbGl6ZSBNdXRhdGlvblF1ZXVlIGJlZm9yZSBwZXJzaXN0ZW5jZSBpcyBzdGFydGVkLicpO1xyXG4gICAgICAgIHJldHVybiBJbmRleGVkRGJNdXRhdGlvblF1ZXVlLmZvclVzZXIodXNlciwgdGhpcy5zZXJpYWxpemVyKTtcclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUuZ2V0UXVlcnlDYWNoZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5zdGFydGVkLCAnQ2Fubm90IGluaXRpYWxpemUgUXVlcnlDYWNoZSBiZWZvcmUgcGVyc2lzdGVuY2UgaXMgc3RhcnRlZC4nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeUNhY2hlO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS5nZXRSZW1vdGVEb2N1bWVudENhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnN0YXJ0ZWQsICdDYW5ub3QgaW5pdGlhbGl6ZSBSZW1vdGVEb2N1bWVudENhY2hlIGJlZm9yZSBwZXJzaXN0ZW5jZSBpcyBzdGFydGVkLicpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGU7XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLnJ1blRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbiwgbW9kZSwgdHJhbnNhY3Rpb25PcGVyYXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGRlYnVnKExPR19UQUckMiwgJ1N0YXJ0aW5nIHRyYW5zYWN0aW9uOicsIGFjdGlvbik7XHJcbiAgICAgICAgLy8gRG8gYWxsIHRyYW5zYWN0aW9ucyBhcyByZWFkd3JpdGUgYWdhaW5zdCBhbGwgb2JqZWN0IHN0b3Jlcywgc2luY2Ugd2VcclxuICAgICAgICAvLyBhcmUgdGhlIG9ubHkgcmVhZGVyL3dyaXRlci5cclxuICAgICAgICByZXR1cm4gdGhpcy5zaW1wbGVEYi5ydW5UcmFuc2FjdGlvbihtb2RlID09PSAncmVhZG9ubHknID8gJ3JlYWRvbmx5JyA6ICdyZWFkd3JpdGUnLCBBTExfU1RPUkVTLCBmdW5jdGlvbiAoc2ltcGxlRGJUeG4pIHtcclxuICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdyZWFkd3JpdGUtcHJpbWFyeScpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdoaWxlIHdlIG1lcmVseSB2ZXJpZnkgdGhhdCB3ZSBoYXZlIChvciBjYW4gYWNxdWlyZSkgdGhlIGxlYXNlXHJcbiAgICAgICAgICAgICAgICAvLyBpbW1lZGlhdGVseSwgd2Ugd2FpdCB0byBleHRlbmQgdGhlIHByaW1hcnkgbGVhc2UgdW50aWwgYWZ0ZXJcclxuICAgICAgICAgICAgICAgIC8vIGV4ZWN1dGluZyB0cmFuc2FjdGlvbk9wZXJhdGlvbigpLiBUaGlzIGVuc3VyZXMgdGhhdCBldmVuIGlmIHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gdHJhbnNhY3Rpb25PcGVyYXRpb24gdGFrZXMgYSBsb25nIHRpbWUsIHdlJ2xsIHVzZSBhIHJlY2VudFxyXG4gICAgICAgICAgICAgICAgLy8gbGVhc2VUaW1lc3RhbXBNcyBpbiB0aGUgZXh0ZW5kZWQgKG9yIG5ld2x5IGFjcXVpcmVkKSBsZWFzZS5cclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jYW5BY3RBc1ByaW1hcnkoc2ltcGxlRGJUeG4pXHJcbiAgICAgICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGNhbkFjdEFzUHJpbWFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FuQWN0QXNQcmltYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKFwiRmFpbGVkIHRvIG9idGFpbiBwcmltYXJ5IGxlYXNlIGZvciBhY3Rpb24gJ1wiICsgYWN0aW9uICsgXCInLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaXNQcmltYXJ5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnF1ZXVlLmVucXVldWVBbmRGb3JnZXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaW1hcnlTdGF0ZUxpc3RlbmVyKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLkZBSUxFRF9QUkVDT05ESVRJT04sIFBSSU1BUllfTEVBU0VfTE9TVF9FUlJPUl9NU0cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25PcGVyYXRpb24obmV3IEluZGV4ZWREYlRyYW5zYWN0aW9uKHNpbXBsZURiVHhuLCBfdGhpcy5saXN0ZW5TZXF1ZW5jZS5uZXh0KCkpKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5hY3F1aXJlT3JFeHRlbmRQcmltYXJ5TGVhc2Uoc2ltcGxlRGJUeG4pLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzdWx0OyB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnZlcmlmeUFsbG93VGFiU3luY2hyb25pemF0aW9uKHNpbXBsZURiVHhuKS5uZXh0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25PcGVyYXRpb24obmV3IEluZGV4ZWREYlRyYW5zYWN0aW9uKHNpbXBsZURiVHhuLCBfdGhpcy5saXN0ZW5TZXF1ZW5jZS5uZXh0KCkpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBWZXJpZmllcyB0aGF0IHRoZSBjdXJyZW50IHRhYiBpcyB0aGUgcHJpbWFyeSBsZWFzZWhvbGRlciBvciBhbHRlcm5hdGl2ZWx5XHJcbiAgICAgKiB0aGF0IHRoZSBsZWFzZWhvbGRlciBoYXMgb3B0ZWQgaW50byBtdWx0aS10YWIgc3luY2hyb25pemF0aW9uLlxyXG4gICAgICovXHJcbiAgICAvLyBUT0RPKGIvMTE0MjI2MjM0KTogUmVtb3ZlIHRoaXMgY2hlY2sgd2hlbiBgc3luY2hyb25pemVUYWJzYCBjYW4gbm8gbG9uZ2VyXHJcbiAgICAvLyBiZSB0dXJuZWQgb2ZmLlxyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLnZlcmlmeUFsbG93VGFiU3luY2hyb25pemF0aW9uID0gZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN0b3JlID0gcHJpbWFyeUNsaWVudFN0b3JlKHR4bik7XHJcbiAgICAgICAgcmV0dXJuIHN0b3JlLmdldChEYlByaW1hcnlDbGllbnQua2V5KS5uZXh0KGZ1bmN0aW9uIChjdXJyZW50UHJpbWFyeSkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudExlYXNlSXNWYWxpZCA9IGN1cnJlbnRQcmltYXJ5ICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5pc1dpdGhpbkFnZShjdXJyZW50UHJpbWFyeS5sZWFzZVRpbWVzdGFtcE1zLCBDTElFTlRfTUVUQURBVEFfTUFYX0FHRV9NUykgJiZcclxuICAgICAgICAgICAgICAgICFfdGhpcy5pc0NsaWVudFpvbWJpZWQoY3VycmVudFByaW1hcnkub3duZXJJZCk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50TGVhc2VJc1ZhbGlkICYmICFfdGhpcy5pc0xvY2FsQ2xpZW50KGN1cnJlbnRQcmltYXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50UHJpbWFyeS5hbGxvd1RhYlN5bmNocm9uaXphdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLkZBSUxFRF9QUkVDT05ESVRJT04sIFBSSU1BUllfTEVBU0VfRVhDTFVTSVZFX0VSUk9SX01TRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE9idGFpbnMgb3IgZXh0ZW5kcyB0aGUgbmV3IHByaW1hcnkgbGVhc2UgZm9yIHRoZSBsb2NhbCBjbGllbnQuIFRoaXNcclxuICAgICAqIG1ldGhvZCBkb2VzIG5vdCB2ZXJpZnkgdGhhdCB0aGUgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGlzIGxlYXNlLlxyXG4gICAgICovXHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUuYWNxdWlyZU9yRXh0ZW5kUHJpbWFyeUxlYXNlID0gZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgIHZhciBuZXdQcmltYXJ5ID0gbmV3IERiUHJpbWFyeUNsaWVudCh0aGlzLmNsaWVudElkLCB0aGlzLmFsbG93VGFiU3luY2hyb25pemF0aW9uLCBEYXRlLm5vdygpKTtcclxuICAgICAgICByZXR1cm4gcHJpbWFyeUNsaWVudFN0b3JlKHR4bikucHV0KERiUHJpbWFyeUNsaWVudC5rZXksIG5ld1ByaW1hcnkpO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLmlzQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBTaW1wbGVEYi5pc0F2YWlsYWJsZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGEgc3RyaW5nIHVzZWQgYXMgYSBwcmVmaXggd2hlbiBzdG9yaW5nIGRhdGEgaW4gSW5kZXhlZERCIGFuZFxyXG4gICAgICogTG9jYWxTdG9yYWdlLlxyXG4gICAgICovXHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5idWlsZFN0b3JhZ2VQcmVmaXggPSBmdW5jdGlvbiAoZGF0YWJhc2VJbmZvKSB7XHJcbiAgICAgICAgLy8gVXNlIHR3byBkaWZmZXJlbnQgcHJlZml4IGZvcm1hdHM6XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyAgICogZmlyZXN0b3JlIC8gcGVyc2lzdGVuY2VLZXkgLyBwcm9qZWN0SUQgLiBkYXRhYmFzZUlEIC8gLi4uXHJcbiAgICAgICAgLy8gICAqIGZpcmVzdG9yZSAvIHBlcnNpc3RlbmNlS2V5IC8gcHJvamVjdElEIC8gLi4uXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBwcm9qZWN0SURzIGFyZSBETlMtY29tcGF0aWJsZSBuYW1lcyBhbmQgY2Fubm90IGNvbnRhaW4gZG90c1xyXG4gICAgICAgIC8vIHNvIHRoZXJlJ3Mgbm8gZGFuZ2VyIG9mIGNvbGxpc2lvbnMuXHJcbiAgICAgICAgdmFyIGRhdGFiYXNlID0gZGF0YWJhc2VJbmZvLmRhdGFiYXNlSWQucHJvamVjdElkO1xyXG4gICAgICAgIGlmICghZGF0YWJhc2VJbmZvLmRhdGFiYXNlSWQuaXNEZWZhdWx0RGF0YWJhc2UpIHtcclxuICAgICAgICAgICAgZGF0YWJhc2UgKz0gJy4nICsgZGF0YWJhc2VJbmZvLmRhdGFiYXNlSWQuZGF0YWJhc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnZmlyZXN0b3JlLycgKyBkYXRhYmFzZUluZm8ucGVyc2lzdGVuY2VLZXkgKyAnLycgKyBkYXRhYmFzZSArICcvJztcclxuICAgIH07XHJcbiAgICAvKiogQ2hlY2tzIHRoZSBwcmltYXJ5IGxlYXNlIGFuZCByZW1vdmVzIGl0IGlmIHdlIGFyZSB0aGUgY3VycmVudCBwcmltYXJ5LiAqL1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLnJlbGVhc2VQcmltYXJ5TGVhc2VJZkhlbGQgPSBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmlzUHJpbWFyeSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBzdG9yZSA9IHByaW1hcnlDbGllbnRTdG9yZSh0eG4pO1xyXG4gICAgICAgIHJldHVybiBzdG9yZS5nZXQoRGJQcmltYXJ5Q2xpZW50LmtleSkubmV4dChmdW5jdGlvbiAocHJpbWFyeUNsaWVudCkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNMb2NhbENsaWVudChwcmltYXJ5Q2xpZW50KSkge1xyXG4gICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRyQyLCAnUmVsZWFzaW5nIHByaW1hcnkgbGVhc2UuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmUuZGVsZXRlKERiUHJpbWFyeUNsaWVudC5rZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKiogVmVyaWZpZXMgdGhhdCBgdXBkYXRlVGltZU1zYCBpcyB3aXRoaW4gYG1heEFnZU1zYC4gKi9cclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS5pc1dpdGhpbkFnZSA9IGZ1bmN0aW9uICh1cGRhdGVUaW1lTXMsIG1heEFnZU1zKSB7XHJcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdmFyIG1pbkFjY2VwdGFibGUgPSBub3cgLSBtYXhBZ2VNcztcclxuICAgICAgICB2YXIgbWF4QWNjZXB0YWJsZSA9IG5vdztcclxuICAgICAgICBpZiAodXBkYXRlVGltZU1zIDwgbWluQWNjZXB0YWJsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHVwZGF0ZVRpbWVNcyA+IG1heEFjY2VwdGFibGUpIHtcclxuICAgICAgICAgICAgZXJyb3IoXCJEZXRlY3RlZCBhbiB1cGRhdGUgdGltZSB0aGF0IGlzIGluIHRoZSBmdXR1cmU6IFwiICsgdXBkYXRlVGltZU1zICsgXCIgPiBcIiArIG1heEFjY2VwdGFibGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS5hdHRhY2hWaXNpYmlsaXR5SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50ICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudFZpc2liaWxpdHlIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucXVldWUuZW5xdWV1ZUFuZEZvcmdldChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5Gb3JlZ3JvdW5kID0gX3RoaXMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUNsaWVudE1ldGFkYXRhQW5kVHJ5QmVjb21lUHJpbWFyeSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMuZG9jdW1lbnRWaXNpYmlsaXR5SGFuZGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMuaW5Gb3JlZ3JvdW5kID0gdGhpcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLmRldGFjaFZpc2liaWxpdHlIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50VmlzaWJpbGl0eUhhbmRsZXIpIHtcclxuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuZG9jdW1lbnQgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicsIFwiRXhwZWN0ZWQgJ2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXInIHRvIGJlIGEgZnVuY3Rpb25cIik7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMuZG9jdW1lbnRWaXNpYmlsaXR5SGFuZGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRWaXNpYmlsaXR5SGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXR0YWNoZXMgYSB3aW5kb3cudW5sb2FkIGhhbmRsZXIgdGhhdCB3aWxsIHN5bmNocm9ub3VzbHkgd3JpdGUgb3VyXHJcbiAgICAgKiBjbGllbnRJZCB0byBhIFwiem9tYmllIGNsaWVudCBpZFwiIGxvY2F0aW9uIGluIExvY2FsU3RvcmFnZS4gVGhpcyBjYW4gYmUgdXNlZFxyXG4gICAgICogYnkgdGFicyB0cnlpbmcgdG8gYWNxdWlyZSB0aGUgcHJpbWFyeSBsZWFzZSB0byBkZXRlcm1pbmUgdGhhdCB0aGUgbGVhc2VcclxuICAgICAqIGlzIG5vIGxvbmdlciB2YWxpZCBldmVuIGlmIHRoZSB0aW1lc3RhbXAgaXMgcmVjZW50LiBUaGlzIGlzIHBhcnRpY3VsYXJseVxyXG4gICAgICogaW1wb3J0YW50IGZvciB0aGUgcmVmcmVzaCBjYXNlIChzbyB0aGUgdGFiIGNvcnJlY3RseSByZS1hY3F1aXJlcyB0aGVcclxuICAgICAqIHByaW1hcnkgbGVhc2UpLiBMb2NhbFN0b3JhZ2UgaXMgdXNlZCBmb3IgdGhpcyByYXRoZXIgdGhhbiBJbmRleGVkRGIgYmVjYXVzZVxyXG4gICAgICogaXQgaXMgYSBzeW5jaHJvbm91cyBBUEkgYW5kIHNvIGNhbiBiZSB1c2VkIHJlbGlhYmx5IGZyb20gIGFuIHVubG9hZFxyXG4gICAgICogaGFuZGxlci5cclxuICAgICAqL1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UucHJvdG90eXBlLmF0dGFjaFdpbmRvd1VubG9hZEhvb2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dVbmxvYWRIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gTm90ZTogSW4gdGhlb3J5LCB0aGlzIHNob3VsZCBiZSBzY2hlZHVsZWQgb24gdGhlIEFzeW5jUXVldWUgc2luY2UgaXRcclxuICAgICAgICAgICAgICAgIC8vIGFjY2Vzc2VzIGludGVybmFsIHN0YXRlLiBXZSBleGVjdXRlIHRoaXMgY29kZSBkaXJlY3RseSBkdXJpbmcgc2h1dGRvd25cclxuICAgICAgICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSBpdCBnZXRzIGEgY2hhbmNlIHRvIHJ1bi5cclxuICAgICAgICAgICAgICAgIF90aGlzLm1hcmtDbGllbnRab21iaWVkKCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5xdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IGdyYWNlZnVsIHNodXRkb3duIChpbmNsdWRpbmcgcmVsZWFzaW5nIG91ciBwcmltYXJ5IGxlYXNlKSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgdGhlcmUncyBubyBndWFyYW50ZWUgaXQgd2lsbCBjb21wbGV0ZS5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2h1dGRvd24oKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmxvYWQnLCB0aGlzLndpbmRvd1VubG9hZEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUuZGV0YWNoV2luZG93VW5sb2FkSG9vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy53aW5kb3dVbmxvYWRIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGFzc2VydCh0eXBlb2YgdGhpcy53aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJywgXCJFeHBlY3RlZCAnd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXInIHRvIGJlIGEgZnVuY3Rpb25cIik7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsIHRoaXMud2luZG93VW5sb2FkSGFuZGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93VW5sb2FkSGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgY2xpZW50IGlzIFwiem9tYmllZFwiIGJhc2VkIG9uIGl0cyBMb2NhbFN0b3JhZ2UgZW50cnkuXHJcbiAgICAgKiBDbGllbnRzIGJlY29tZSB6b21iaWVkIHdoZW4gdGhlaXIgdGFiIGNsb3NlcyB3aXRob3V0IHJ1bm5pbmcgYWxsIG9mIHRoZVxyXG4gICAgICogY2xlYW51cCBsb2dpYyBpbiBgc2h1dGRvd24oKWAuXHJcbiAgICAgKi9cclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS5pc0NsaWVudFpvbWJpZWQgPSBmdW5jdGlvbiAoY2xpZW50SWQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgaXNab21iaWVkID0gdGhpcy53ZWJTdG9yYWdlLmdldEl0ZW0odGhpcy56b21iaWVkQ2xpZW50TG9jYWxTdG9yYWdlS2V5KGNsaWVudElkKSkgIT09XHJcbiAgICAgICAgICAgICAgICBudWxsO1xyXG4gICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDIsIFwiQ2xpZW50ICdcIiArIGNsaWVudElkICsgXCInIFwiICsgKGlzWm9tYmllZCA/ICdpcycgOiAnaXMgbm90JykgKyBcIiB6b21iaWVkIGluIExvY2FsU3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGlzWm9tYmllZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gR3JhY2VmdWxseSBoYW5kbGUgaWYgTG9jYWxTdG9yYWdlIGlzbid0IHdvcmtpbmcuXHJcbiAgICAgICAgICAgIGVycm9yKExPR19UQUckMiwgJ0ZhaWxlZCB0byBnZXQgem9tYmllZCBjbGllbnQgaWQuJywgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWNvcmQgY2xpZW50IGFzIHpvbWJpZWQgKGEgY2xpZW50IHRoYXQgaGFkIGl0cyB0YWIgY2xvc2VkKS4gWm9tYmllZFxyXG4gICAgICogY2xpZW50cyBhcmUgaWdub3JlZCBkdXJpbmcgcHJpbWFyeSB0YWIgc2VsZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBJbmRleGVkRGJQZXJzaXN0ZW5jZS5wcm90b3R5cGUubWFya0NsaWVudFpvbWJpZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy53ZWJTdG9yYWdlLnNldEl0ZW0odGhpcy56b21iaWVkQ2xpZW50TG9jYWxTdG9yYWdlS2V5KHRoaXMuY2xpZW50SWQpLCBTdHJpbmcoRGF0ZS5ub3coKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAvLyBHcmFjZWZ1bGx5IGhhbmRsZSBpZiBMb2NhbFN0b3JhZ2UgaXNuJ3QgYXZhaWxhYmxlIC8gd29ya2luZy5cclxuICAgICAgICAgICAgZXJyb3IoJ0ZhaWxlZCB0byBzZXQgem9tYmllIGNsaWVudCBpZC4nLCBlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIFJlbW92ZXMgdGhlIHpvbWJpZWQgY2xpZW50IGVudHJ5IGlmIGl0IGV4aXN0cy4gKi9cclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS5yZW1vdmVDbGllbnRab21iaWVkRW50cnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy53ZWJTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy56b21iaWVkQ2xpZW50TG9jYWxTdG9yYWdlS2V5KHRoaXMuY2xpZW50SWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gSWdub3JlXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEluZGV4ZWREYlBlcnNpc3RlbmNlLnByb3RvdHlwZS56b21iaWVkQ2xpZW50TG9jYWxTdG9yYWdlS2V5ID0gZnVuY3Rpb24gKGNsaWVudElkKSB7XHJcbiAgICAgICAgcmV0dXJuIFpPTUJJRURfQ0xJRU5UU19LRVlfUFJFRklYICsgXCJfXCIgKyB0aGlzLnBlcnNpc3RlbmNlS2V5ICsgXCJfXCIgKyBjbGllbnRJZDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBtYWluIChhbmQgY3VycmVudGx5IG9ubHkpIEluZGV4ZWREQiBkYXRhYmFzZS4gdGhpcyBuYW1lIGlzXHJcbiAgICAgKiBhcHBlbmRlZCB0byB0aGUgcHJlZml4IHByb3ZpZGVkIHRvIHRoZSBJbmRleGVkRGJQZXJzaXN0ZW5jZSBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgSW5kZXhlZERiUGVyc2lzdGVuY2UuTUFJTl9EQVRBQkFTRSA9ICdtYWluJztcclxuICAgIHJldHVybiBJbmRleGVkRGJQZXJzaXN0ZW5jZTtcclxufSgpKTtcclxuZnVuY3Rpb24gaXNQcmltYXJ5TGVhc2VMb3N0RXJyb3IoZXJyKSB7XHJcbiAgICByZXR1cm4gKGVyci5jb2RlID09PSBDb2RlLkZBSUxFRF9QUkVDT05ESVRJT04gJiZcclxuICAgICAgICBlcnIubWVzc2FnZSA9PT0gUFJJTUFSWV9MRUFTRV9MT1NUX0VSUk9SX01TRyk7XHJcbn1cclxuLyoqXHJcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgcHJpbWFyeSBjbGllbnQgb2JqZWN0IHN0b3JlLlxyXG4gKi9cclxuZnVuY3Rpb24gcHJpbWFyeUNsaWVudFN0b3JlKHR4bikge1xyXG4gICAgcmV0dXJuIHR4bi5zdG9yZShEYlByaW1hcnlDbGllbnQuc3RvcmUpO1xyXG59XHJcbi8qKlxyXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGNsaWVudCBtZXRhZGF0YSBvYmplY3Qgc3RvcmUuXHJcbiAqL1xyXG5mdW5jdGlvbiBjbGllbnRNZXRhZGF0YVN0b3JlKHR4bikge1xyXG4gICAgcmV0dXJuIHR4bi5zdG9yZShEYkNsaWVudE1ldGFkYXRhLnN0b3JlKTtcclxufVxuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgcmVhZG9ubHkgdmlldyBvZiB0aGUgbG9jYWwgc3RhdGUgb2YgYWxsIGRvY3VtZW50cyB3ZSdyZSB0cmFja2luZyAoaS5lLiB3ZVxyXG4gKiBoYXZlIGEgY2FjaGVkIHZlcnNpb24gaW4gcmVtb3RlRG9jdW1lbnRDYWNoZSBvciBsb2NhbCBtdXRhdGlvbnMgZm9yIHRoZVxyXG4gKiBkb2N1bWVudCkuIFRoZSB2aWV3IGlzIGNvbXB1dGVkIGJ5IGFwcGx5aW5nIHRoZSBtdXRhdGlvbnMgaW4gdGhlXHJcbiAqIE11dGF0aW9uUXVldWUgdG8gdGhlIFJlbW90ZURvY3VtZW50Q2FjaGUuXHJcbiAqL1xyXG52YXIgTG9jYWxEb2N1bWVudHNWaWV3ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG9jYWxEb2N1bWVudHNWaWV3KHJlbW90ZURvY3VtZW50Q2FjaGUsIG11dGF0aW9uUXVldWUpIHtcclxuICAgICAgICB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUgPSByZW1vdGVEb2N1bWVudENhY2hlO1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IG11dGF0aW9uUXVldWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgbG9jYWwgdmlldyBvZiB0aGUgZG9jdW1lbnQgaWRlbnRpZmllZCBieSBga2V5YC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIExvY2FsIHZpZXcgb2YgdGhlIGRvY3VtZW50IG9yIG51bGwgaWYgd2UgZG9uJ3QgaGF2ZSBhbnkgY2FjaGVkXHJcbiAgICAgKiBzdGF0ZSBmb3IgaXQuXHJcbiAgICAgKi9cclxuICAgIExvY2FsRG9jdW1lbnRzVmlldy5wcm90b3R5cGUuZ2V0RG9jdW1lbnQgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGtleSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb25RdWV1ZVxyXG4gICAgICAgICAgICAuZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nRG9jdW1lbnRLZXkodHJhbnNhY3Rpb24sIGtleSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGJhdGNoZXMpIHsgcmV0dXJuIF90aGlzLmdldERvY3VtZW50SW50ZXJuYWwodHJhbnNhY3Rpb24sIGtleSwgYmF0Y2hlcyk7IH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBJbnRlcm5hbCB2ZXJzaW9uIG9mIGBnZXREb2N1bWVudGAgdGhhdCBhbGxvd3MgcmV1c2luZyBiYXRjaGVzLiAqL1xyXG4gICAgTG9jYWxEb2N1bWVudHNWaWV3LnByb3RvdHlwZS5nZXREb2N1bWVudEludGVybmFsID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBrZXksIGluQmF0Y2hlcykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUuZ2V0RW50cnkodHJhbnNhY3Rpb24sIGtleSkubmV4dChmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgaW5CYXRjaGVzXzEgPSBpbkJhdGNoZXM7IF9pIDwgaW5CYXRjaGVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmF0Y2ggPSBpbkJhdGNoZXNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICBkb2MgPSBiYXRjaC5hcHBseVRvTG9jYWxWaWV3KGtleSwgZG9jKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZG9jO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbG9jYWwgdmlldyBvZiB0aGUgZG9jdW1lbnRzIGlkZW50aWZpZWQgYnkgYGtleXNgLlxyXG4gICAgICpcclxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgY2FjaGVkIHN0YXRlIGZvciBhIGRvY3VtZW50IGluIGBrZXlzYCwgYSBOb0RvY3VtZW50IHdpbGxcclxuICAgICAqIGJlIHN0b3JlZCBmb3IgdGhhdCBrZXkgaW4gdGhlIHJlc3VsdGluZyBzZXQuXHJcbiAgICAgKi9cclxuICAgIExvY2FsRG9jdW1lbnRzVmlldy5wcm90b3R5cGUuZ2V0RG9jdW1lbnRzID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBrZXlzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5tdXRhdGlvblF1ZXVlXHJcbiAgICAgICAgICAgIC5nZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdEb2N1bWVudEtleXModHJhbnNhY3Rpb24sIGtleXMpXHJcbiAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uIChiYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0cyA9IG1heWJlRG9jdW1lbnRNYXAoKTtcclxuICAgICAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goX3RoaXMuZ2V0RG9jdW1lbnRJbnRlcm5hbCh0cmFuc2FjdGlvbiwga2V5LCBiYXRjaGVzKS5uZXh0KGZ1bmN0aW9uIChtYXliZURvYykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8oaHR0cDovL2IvMzIyNzUzNzgpOiBEb24ndCBjb25mbGF0ZSBtaXNzaW5nIC8gZGVsZXRlZC5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1heWJlRG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlRG9jID0gbmV3IE5vRG9jdW1lbnQoa2V5LCBTbmFwc2hvdFZlcnNpb24uZm9yRGVsZXRlZERvYygpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuaW5zZXJ0KGtleSwgbWF5YmVEb2MpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHByb21pc2VzKS5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3VsdHM7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBQZXJmb3JtcyBhIHF1ZXJ5IGFnYWluc3QgdGhlIGxvY2FsIHZpZXcgb2YgYWxsIGRvY3VtZW50cy4gKi9cclxuICAgIExvY2FsRG9jdW1lbnRzVmlldy5wcm90b3R5cGUuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdRdWVyeSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcXVlcnkpIHtcclxuICAgICAgICBpZiAoRG9jdW1lbnRLZXkuaXNEb2N1bWVudEtleShxdWVyeS5wYXRoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudHNNYXRjaGluZ0RvY3VtZW50UXVlcnkodHJhbnNhY3Rpb24sIHF1ZXJ5LnBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RG9jdW1lbnRzTWF0Y2hpbmdDb2xsZWN0aW9uUXVlcnkodHJhbnNhY3Rpb24sIHF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTG9jYWxEb2N1bWVudHNWaWV3LnByb3RvdHlwZS5nZXREb2N1bWVudHNNYXRjaGluZ0RvY3VtZW50UXVlcnkgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGRvY1BhdGgpIHtcclxuICAgICAgICAvLyBKdXN0IGRvIGEgc2ltcGxlIGRvY3VtZW50IGxvb2t1cC5cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudCh0cmFuc2FjdGlvbiwgbmV3IERvY3VtZW50S2V5KGRvY1BhdGgpKS5uZXh0KGZ1bmN0aW9uIChtYXliZURvYykge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZG9jdW1lbnRNYXAoKTtcclxuICAgICAgICAgICAgaWYgKG1heWJlRG9jIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5pbnNlcnQobWF5YmVEb2Mua2V5LCBtYXliZURvYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMb2NhbERvY3VtZW50c1ZpZXcucHJvdG90eXBlLmdldERvY3VtZW50c01hdGNoaW5nQ29sbGVjdGlvblF1ZXJ5ID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBxdWVyeSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gUXVlcnkgdGhlIHJlbW90ZSBkb2N1bWVudHMgYW5kIG92ZXJsYXkgbXV0YXRpb25zLlxyXG4gICAgICAgIHZhciByZXN1bHRzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGVcclxuICAgICAgICAgICAgLmdldERvY3VtZW50c01hdGNoaW5nUXVlcnkodHJhbnNhY3Rpb24sIHF1ZXJ5KVxyXG4gICAgICAgICAgICAubmV4dChmdW5jdGlvbiAocXVlcnlSZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdHMgPSBxdWVyeVJlc3VsdHM7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5tdXRhdGlvblF1ZXVlLmdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ1F1ZXJ5KHRyYW5zYWN0aW9uLCBxdWVyeSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKG1hdGNoaW5nTXV0YXRpb25CYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbWF0Y2hpbmdNdXRhdGlvbkJhdGNoZXNfMSA9IG1hdGNoaW5nTXV0YXRpb25CYXRjaGVzOyBfaSA8IG1hdGNoaW5nTXV0YXRpb25CYXRjaGVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmF0Y2ggPSBtYXRjaGluZ011dGF0aW9uQmF0Y2hlc18xW19pXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgX2IgPSBiYXRjaC5tdXRhdGlvbnM7IF9hIDwgX2IubGVuZ3RoOyBfYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uID0gX2JbX2FdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBtdXRhdGlvbi5rZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSBwcm9jZXNzIGRvY3VtZW50cyBiZWxvbmdpbmcgdG8gdGhlIGNvbGxlY3Rpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFxdWVyeS5wYXRoLmlzSW1tZWRpYXRlUGFyZW50T2Yoa2V5LnBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZURvYyA9IHJlc3VsdHMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG11dGF0ZWREb2MgPSBtdXRhdGlvbi5hcHBseVRvTG9jYWxWaWV3KGJhc2VEb2MsIGJhc2VEb2MsIGJhdGNoLmxvY2FsV3JpdGVUaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRlZERvYyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmluc2VydChrZXksIG11dGF0ZWREb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMucmVtb3ZlKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBGaW5hbGx5LCBmaWx0ZXIgb3V0IGFueSBkb2N1bWVudHMgdGhhdCBkb24ndCBhY3R1YWxseSBtYXRjaFxyXG4gICAgICAgICAgICAvLyB0aGUgcXVlcnkuXHJcbiAgICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBkb2MpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcXVlcnkubWF0Y2hlcyhkb2MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMucmVtb3ZlKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTG9jYWxEb2N1bWVudHNWaWV3O1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgY29sbGVjdGlvbiBvZiByZWZlcmVuY2VzIHRvIGEgZG9jdW1lbnQgZnJvbSBzb21lIGtpbmQgb2YgbnVtYmVyZWQgZW50aXR5XHJcbiAqIChlaXRoZXIgYSB0YXJnZXQgSUQgb3IgYmF0Y2ggSUQpLiBBcyByZWZlcmVuY2VzIGFyZSBhZGRlZCB0byBvciByZW1vdmVkIGZyb21cclxuICogdGhlIHNldCBjb3JyZXNwb25kaW5nIGV2ZW50cyBhcmUgZW1pdHRlZCB0byBhIHJlZ2lzdGVyZWQgZ2FyYmFnZSBjb2xsZWN0b3IuXHJcbiAqXHJcbiAqIEVhY2ggcmVmZXJlbmNlIGlzIHJlcHJlc2VudGVkIGJ5IGEgRG9jdW1lbnRSZWZlcmVuY2Ugb2JqZWN0LiBFYWNoIG9mIHRoZW1cclxuICogY29udGFpbnMgZW5vdWdoIGluZm9ybWF0aW9uIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSByZWZlcmVuY2UuIFRoZXkgYXJlIGFsbFxyXG4gKiBzdG9yZWQgcHJpbWFyaWx5IGluIGEgc2V0IHNvcnRlZCBieSBrZXkuIEEgZG9jdW1lbnQgaXMgY29uc2lkZXJlZCBnYXJiYWdlIGlmXHJcbiAqIHRoZXJlJ3Mgbm8gcmVmZXJlbmNlcyBpbiB0aGF0IHNldCAodGhpcyBjYW4gYmUgZWZmaWNpZW50bHkgY2hlY2tlZCB0aGFua3MgdG9cclxuICogc29ydGluZyBieSBrZXkpLlxyXG4gKlxyXG4gKiBSZWZlcmVuY2VTZXQgYWxzbyBrZWVwcyBhIHNlY29uZGFyeSBzZXQgdGhhdCBjb250YWlucyByZWZlcmVuY2VzIHNvcnRlZCBieVxyXG4gKiBJRHMuIFRoaXMgb25lIGlzIHVzZWQgdG8gZWZmaWNpZW50bHkgaW1wbGVtZW50IHJlbW92YWwgb2YgYWxsIHJlZmVyZW5jZXMgYnlcclxuICogc29tZSB0YXJnZXQgSUQuXHJcbiAqL1xyXG52YXIgUmVmZXJlbmNlU2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVmZXJlbmNlU2V0KCkge1xyXG4gICAgICAgIC8vIEEgc2V0IG9mIG91dHN0YW5kaW5nIHJlZmVyZW5jZXMgdG8gYSBkb2N1bWVudCBzb3J0ZWQgYnkga2V5LlxyXG4gICAgICAgIHRoaXMucmVmc0J5S2V5ID0gbmV3IFNvcnRlZFNldChEb2NSZWZlcmVuY2UuY29tcGFyZUJ5S2V5KTtcclxuICAgICAgICAvLyBBIHNldCBvZiBvdXRzdGFuZGluZyByZWZlcmVuY2VzIHRvIGEgZG9jdW1lbnQgc29ydGVkIGJ5IHRhcmdldCBpZC5cclxuICAgICAgICB0aGlzLnJlZnNCeVRhcmdldCA9IG5ldyBTb3J0ZWRTZXQoRG9jUmVmZXJlbmNlLmNvbXBhcmVCeVRhcmdldElkKTtcclxuICAgICAgICAvKiogS2VlcHMgdHJhY2sgb2Yga2V5cyB0aGF0IGhhdmUgcmVmZXJlbmNlcyAqL1xyXG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IG51bGw7XHJcbiAgICB9XHJcbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIHRoZSByZWZlcmVuY2Ugc2V0IGNvbnRhaW5zIG5vIHJlZmVyZW5jZXMuICovXHJcbiAgICBSZWZlcmVuY2VTZXQucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmc0J5S2V5LmlzRW1wdHkoKTtcclxuICAgIH07XHJcbiAgICAvKiogQWRkcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2l2ZW4gZG9jdW1lbnQga2V5IGZvciB0aGUgZ2l2ZW4gSUQuICovXHJcbiAgICBSZWZlcmVuY2VTZXQucHJvdG90eXBlLmFkZFJlZmVyZW5jZSA9IGZ1bmN0aW9uIChrZXksIGlkKSB7XHJcbiAgICAgICAgdmFyIHJlZiA9IG5ldyBEb2NSZWZlcmVuY2Uoa2V5LCBpZCk7XHJcbiAgICAgICAgdGhpcy5yZWZzQnlLZXkgPSB0aGlzLnJlZnNCeUtleS5hZGQocmVmKTtcclxuICAgICAgICB0aGlzLnJlZnNCeVRhcmdldCA9IHRoaXMucmVmc0J5VGFyZ2V0LmFkZChyZWYpO1xyXG4gICAgfTtcclxuICAgIC8qKiBBZGQgcmVmZXJlbmNlcyB0byB0aGUgZ2l2ZW4gZG9jdW1lbnQga2V5cyBmb3IgdGhlIGdpdmVuIElELiAqL1xyXG4gICAgUmVmZXJlbmNlU2V0LnByb3RvdHlwZS5hZGRSZWZlcmVuY2VzID0gZnVuY3Rpb24gKGtleXMsIGlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gX3RoaXMuYWRkUmVmZXJlbmNlKGtleSwgaWQpOyB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYSByZWZlcmVuY2UgdG8gdGhlIGdpdmVuIGRvY3VtZW50IGtleSBmb3IgdGhlIGdpdmVuXHJcbiAgICAgKiBJRC5cclxuICAgICAqL1xyXG4gICAgUmVmZXJlbmNlU2V0LnByb3RvdHlwZS5yZW1vdmVSZWZlcmVuY2UgPSBmdW5jdGlvbiAoa2V5LCBpZCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlUmVmKG5ldyBEb2NSZWZlcmVuY2Uoa2V5LCBpZCkpO1xyXG4gICAgfTtcclxuICAgIFJlZmVyZW5jZVNldC5wcm90b3R5cGUucmVtb3ZlUmVmZXJlbmNlcyA9IGZ1bmN0aW9uIChrZXlzLCBpZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIF90aGlzLnJlbW92ZVJlZmVyZW5jZShrZXksIGlkKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgYWxsIHJlZmVyZW5jZXMgd2l0aCBhIGdpdmVuIElELiBDYWxscyByZW1vdmVSZWYoKSBmb3IgZWFjaCBrZXlcclxuICAgICAqIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIFJlZmVyZW5jZVNldC5wcm90b3R5cGUucmVtb3ZlUmVmZXJlbmNlc0ZvcklkID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZW1wdHlLZXkgPSBEb2N1bWVudEtleS5FTVBUWTtcclxuICAgICAgICB2YXIgc3RhcnRSZWYgPSBuZXcgRG9jUmVmZXJlbmNlKGVtcHR5S2V5LCBpZCk7XHJcbiAgICAgICAgdmFyIGVuZFJlZiA9IG5ldyBEb2NSZWZlcmVuY2UoZW1wdHlLZXksIGlkICsgMSk7XHJcbiAgICAgICAgdGhpcy5yZWZzQnlUYXJnZXQuZm9yRWFjaEluUmFuZ2UoW3N0YXJ0UmVmLCBlbmRSZWZdLCBmdW5jdGlvbiAocmVmKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnJlbW92ZVJlZihyZWYpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlZmVyZW5jZVNldC5wcm90b3R5cGUucmVtb3ZlQWxsUmVmZXJlbmNlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucmVmc0J5S2V5LmZvckVhY2goZnVuY3Rpb24gKHJlZikgeyByZXR1cm4gX3RoaXMucmVtb3ZlUmVmKHJlZik7IH0pO1xyXG4gICAgfTtcclxuICAgIFJlZmVyZW5jZVNldC5wcm90b3R5cGUucmVtb3ZlUmVmID0gZnVuY3Rpb24gKHJlZikge1xyXG4gICAgICAgIHRoaXMucmVmc0J5S2V5ID0gdGhpcy5yZWZzQnlLZXkuZGVsZXRlKHJlZik7XHJcbiAgICAgICAgdGhpcy5yZWZzQnlUYXJnZXQgPSB0aGlzLnJlZnNCeVRhcmdldC5kZWxldGUocmVmKTtcclxuICAgICAgICBpZiAodGhpcy5nYXJiYWdlQ29sbGVjdG9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3Rvci5hZGRQb3RlbnRpYWxHYXJiYWdlS2V5KHJlZi5rZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWZlcmVuY2VTZXQucHJvdG90eXBlLnJlZmVyZW5jZXNGb3JJZCA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHZhciBlbXB0eUtleSA9IERvY3VtZW50S2V5LkVNUFRZO1xyXG4gICAgICAgIHZhciBzdGFydFJlZiA9IG5ldyBEb2NSZWZlcmVuY2UoZW1wdHlLZXksIGlkKTtcclxuICAgICAgICB2YXIgZW5kUmVmID0gbmV3IERvY1JlZmVyZW5jZShlbXB0eUtleSwgaWQgKyAxKTtcclxuICAgICAgICB2YXIga2V5cyA9IGRvY3VtZW50S2V5U2V0KCk7XHJcbiAgICAgICAgdGhpcy5yZWZzQnlUYXJnZXQuZm9yRWFjaEluUmFuZ2UoW3N0YXJ0UmVmLCBlbmRSZWZdLCBmdW5jdGlvbiAocmVmKSB7XHJcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmFkZChyZWYua2V5KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4ga2V5cztcclxuICAgIH07XHJcbiAgICBSZWZlcmVuY2VTZXQucHJvdG90eXBlLnNldEdhcmJhZ2VDb2xsZWN0b3IgPSBmdW5jdGlvbiAoZ2FyYmFnZUNvbGxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IGdhcmJhZ2VDb2xsZWN0b3I7XHJcbiAgICB9O1xyXG4gICAgUmVmZXJlbmNlU2V0LnByb3RvdHlwZS5jb250YWluc0tleSA9IGZ1bmN0aW9uICh0eG4sIGtleSkge1xyXG4gICAgICAgIHZhciByZWYgPSBuZXcgRG9jUmVmZXJlbmNlKGtleSwgMCk7XHJcbiAgICAgICAgdmFyIGZpcnN0UmVmID0gdGhpcy5yZWZzQnlLZXkuZmlyc3RBZnRlck9yRXF1YWwocmVmKTtcclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoZmlyc3RSZWYgIT09IG51bGwgJiYga2V5LmlzRXF1YWwoZmlyc3RSZWYua2V5KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlZmVyZW5jZVNldDtcclxufSgpKTtcclxudmFyIERvY1JlZmVyZW5jZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERvY1JlZmVyZW5jZShrZXksIHRhcmdldE9yQmF0Y2hJZCkge1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgICAgIHRoaXMudGFyZ2V0T3JCYXRjaElkID0gdGFyZ2V0T3JCYXRjaElkO1xyXG4gICAgfVxyXG4gICAgLyoqIENvbXBhcmUgYnkga2V5IHRoZW4gYnkgSUQgKi9cclxuICAgIERvY1JlZmVyZW5jZS5jb21wYXJlQnlLZXkgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcclxuICAgICAgICByZXR1cm4gKERvY3VtZW50S2V5LmNvbXBhcmF0b3IobGVmdC5rZXksIHJpZ2h0LmtleSkgfHxcclxuICAgICAgICAgICAgcHJpbWl0aXZlQ29tcGFyYXRvcihsZWZ0LnRhcmdldE9yQmF0Y2hJZCwgcmlnaHQudGFyZ2V0T3JCYXRjaElkKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIENvbXBhcmUgYnkgSUQgdGhlbiBieSBrZXkgKi9cclxuICAgIERvY1JlZmVyZW5jZS5jb21wYXJlQnlUYXJnZXRJZCA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xyXG4gICAgICAgIHJldHVybiAocHJpbWl0aXZlQ29tcGFyYXRvcihsZWZ0LnRhcmdldE9yQmF0Y2hJZCwgcmlnaHQudGFyZ2V0T3JCYXRjaElkKSB8fFxyXG4gICAgICAgICAgICBEb2N1bWVudEtleS5jb21wYXJhdG9yKGxlZnQua2V5LCByaWdodC5rZXkpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRG9jUmVmZXJlbmNlO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEFuIGluLW1lbW9yeSBidWZmZXIgb2YgZW50cmllcyB0byBiZSB3cml0dGVuIHRvIGEgUmVtb3RlRG9jdW1lbnRDYWNoZS5cclxuICogSXQgY2FuIGJlIHVzZWQgdG8gYmF0Y2ggdXAgYSBzZXQgb2YgY2hhbmdlcyB0byBiZSB3cml0dGVuIHRvIHRoZSBjYWNoZSwgYnV0XHJcbiAqIGFkZGl0aW9uYWxseSBzdXBwb3J0cyByZWFkaW5nIGVudHJpZXMgYmFjayB3aXRoIHRoZSBgZ2V0RW50cnkoKWAgbWV0aG9kLFxyXG4gKiBmYWxsaW5nIGJhY2sgdG8gdGhlIHVuZGVybHlpbmcgUmVtb3RlRG9jdW1lbnRDYWNoZSBpZiBubyBlbnRyeSBpc1xyXG4gKiBidWZmZXJlZC5cclxuICpcclxuICogTk9URTogVGhpcyBjbGFzcyB3YXMgaW50cm9kdWNlZCBpbiBpT1MgdG8gd29yayBhcm91bmQgYSBsaW1pdGF0aW9uIGluXHJcbiAqIExldmVsREIuIEdpdmVuIEluZGV4ZWREYiBoYXMgZnVsbCB0cmFuc2FjdGlvbiBzdXBwb3J0IHdpdGhcclxuICogcmVhZC15b3VyLW93bi13cml0ZXMgY2FwYWJpbGl0eSwgdGhpcyBjbGFzcyBpcyBub3QgdGVjaG5pY2FsbHkgbmVlZGVkLCBidXRcclxuICogaGFzIGJlZW4gcHJlc2VydmVkIGFzIGEgY29udmVuaWVuY2UgYW5kIHRvIGFpZCBwb3J0YWJpbGl0eS5cclxuICovXHJcbnZhciBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyKHJlbW90ZURvY3VtZW50Q2FjaGUpIHtcclxuICAgICAgICB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUgPSByZW1vdGVEb2N1bWVudENhY2hlO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IG1heWJlRG9jdW1lbnRNYXAoKTtcclxuICAgIH1cclxuICAgIC8qKiBCdWZmZXJzIGEgYFJlbW90ZURvY3VtZW50Q2FjaGUuYWRkRW50cnkoKWAgY2FsbC4gKi9cclxuICAgIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyLnByb3RvdHlwZS5hZGRFbnRyeSA9IGZ1bmN0aW9uIChtYXliZURvY3VtZW50KSB7XHJcbiAgICAgICAgdmFyIGNoYW5nZXMgPSB0aGlzLmFzc2VydENoYW5nZXMoKTtcclxuICAgICAgICB0aGlzLmNoYW5nZXMgPSBjaGFuZ2VzLmluc2VydChtYXliZURvY3VtZW50LmtleSwgbWF5YmVEb2N1bWVudCk7XHJcbiAgICB9O1xyXG4gICAgLy8gTk9URTogcmVtb3ZlRW50cnkoKSBpcyBub3QgcHJlc2VudGx5IG5lY2Vzc2FyeSBhbmQgc28gaXMgb21pdHRlZC5cclxuICAgIC8qKlxyXG4gICAgICogTG9va3MgdXAgYW4gZW50cnkgaW4gdGhlIGNhY2hlLiBUaGUgYnVmZmVyZWQgY2hhbmdlcyB3aWxsIGZpcnN0IGJlIGNoZWNrZWQsXHJcbiAgICAgKiBhbmQgaWYgbm8gYnVmZmVyZWQgY2hhbmdlIGFwcGxpZXMsIHRoaXMgd2lsbCBmb3J3YXJkIHRvXHJcbiAgICAgKiBgUmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRFbnRyeSgpYC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gVGhlIHRyYW5zYWN0aW9uIGluIHdoaWNoIHRvIHBlcmZvcm0gYW55IHBlcnNpc3RlbmNlXHJcbiAgICAgKiAgICAgb3BlcmF0aW9ucy5cclxuICAgICAqIEBwYXJhbSBkb2N1bWVudEtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBsb29rIHVwLlxyXG4gICAgICogQHJldHVybiBUaGUgY2FjaGVkIERvY3VtZW50IG9yIE5vRG9jdW1lbnQgZW50cnksIG9yIG51bGwgaWYgd2UgaGF2ZSBub3RoaW5nXHJcbiAgICAgKiBjYWNoZWQuXHJcbiAgICAgKi9cclxuICAgIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyLnByb3RvdHlwZS5nZXRFbnRyeSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgZG9jdW1lbnRLZXkpIHtcclxuICAgICAgICB2YXIgY2hhbmdlcyA9IHRoaXMuYXNzZXJ0Q2hhbmdlcygpO1xyXG4gICAgICAgIHZhciBidWZmZXJlZEVudHJ5ID0gY2hhbmdlcy5nZXQoZG9jdW1lbnRLZXkpO1xyXG4gICAgICAgIGlmIChidWZmZXJlZEVudHJ5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShidWZmZXJlZEVudHJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW90ZURvY3VtZW50Q2FjaGUuZ2V0RW50cnkodHJhbnNhY3Rpb24sIGRvY3VtZW50S2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWVzIGJ1ZmZlcmVkIGNoYW5nZXMgdG8gdGhlIHVuZGVybHlpbmcgUmVtb3RlRG9jdW1lbnRDYWNoZSwgdXNpbmdcclxuICAgICAqIHRoZSBwcm92aWRlZCB0cmFuc2FjdGlvbi5cclxuICAgICAqL1xyXG4gICAgUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIGRvY3MgPSBbXTtcclxuICAgICAgICB2YXIgY2hhbmdlcyA9IHRoaXMuYXNzZXJ0Q2hhbmdlcygpO1xyXG4gICAgICAgIGNoYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBtYXliZURvYykge1xyXG4gICAgICAgICAgICBkb2NzLnB1c2gobWF5YmVEb2MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFdlIHNob3VsZCBub3QgYnVmZmVyIGFueSBtb3JlIGNoYW5nZXMuXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VzID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVEb2N1bWVudENhY2hlLmFkZEVudHJpZXModHJhbnNhY3Rpb24sIGRvY3MpO1xyXG4gICAgfTtcclxuICAgIC8qKiBIZWxwZXIgdG8gYXNzZXJ0IHRoaXMuY2hhbmdlcyBpcyBub3QgbnVsbCBhbmQgcmV0dXJuIGl0LiAqL1xyXG4gICAgUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIucHJvdG90eXBlLmFzc2VydENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuY2hhbmdlcyAhPT0gbnVsbCwgJ0NoYW5nZXMgaGF2ZSBhbHJlYWR5IGJlZW4gYXBwbGllZC4nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGFuZ2VzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBMT0dfVEFHJDMgPSAnTG9jYWxTdG9yZSc7XHJcbi8qKlxyXG4gKiBMb2NhbCBzdG9yYWdlIGluIHRoZSBGaXJlc3RvcmUgY2xpZW50LiBDb29yZGluYXRlcyBwZXJzaXN0ZW5jZSBjb21wb25lbnRzXHJcbiAqIGxpa2UgdGhlIG11dGF0aW9uIHF1ZXVlIGFuZCByZW1vdGUgZG9jdW1lbnQgY2FjaGUgdG8gcHJlc2VudCBhXHJcbiAqIGxhdGVuY3ktY29tcGVuc2F0ZWQgdmlldyBvZiBzdG9yZWQgZGF0YS5cclxuICpcclxuICogVGhlIExvY2FsU3RvcmUgaXMgcmVzcG9uc2libGUgZm9yIGFjY2VwdGluZyBtdXRhdGlvbnMgZnJvbSB0aGUgU3luYyBFbmdpbmUuXHJcbiAqIFdyaXRlcyBmcm9tIHRoZSBjbGllbnQgYXJlIHB1dCBpbnRvIGEgcXVldWUgYXMgcHJvdmlzaW9uYWwgTXV0YXRpb25zIHVudGlsXHJcbiAqIHRoZXkgYXJlIHByb2Nlc3NlZCBieSB0aGUgUmVtb3RlU3RvcmUgYW5kIGNvbmZpcm1lZCBhcyBoYXZpbmcgYmVlbiB3cml0dGVuXHJcbiAqIHRvIHRoZSBzZXJ2ZXIuXHJcbiAqXHJcbiAqIFRoZSBsb2NhbCBzdG9yZSBwcm92aWRlcyB0aGUgbG9jYWwgdmVyc2lvbiBvZiBkb2N1bWVudHMgdGhhdCBoYXZlIGJlZW5cclxuICogbW9kaWZpZWQgbG9jYWxseS4gSXQgbWFpbnRhaW5zIHRoZSBjb25zdHJhaW50OlxyXG4gKlxyXG4gKiAgIExvY2FsRG9jdW1lbnQgPSBSZW1vdGVEb2N1bWVudCArIEFjdGl2ZShMb2NhbE11dGF0aW9ucylcclxuICpcclxuICogKEFjdGl2ZSBtdXRhdGlvbnMgYXJlIHRob3NlIHRoYXQgYXJlIGVucXVldWVkIGFuZCBoYXZlIG5vdCBiZWVuIHByZXZpb3VzbHlcclxuICogYWNrbm93bGVkZ2VkIG9yIHJlamVjdGVkKS5cclxuICpcclxuICogVGhlIFJlbW90ZURvY3VtZW50IChcImdyb3VuZCB0cnV0aFwiKSBzdGF0ZSBpcyBwcm92aWRlZCB2aWEgdGhlXHJcbiAqIGFwcGx5Q2hhbmdlQmF0Y2ggbWV0aG9kLiBJdCB3aWxsIGJlIHNvbWUgdmVyc2lvbiBvZiBhIHNlcnZlci1wcm92aWRlZFxyXG4gKiBkb2N1bWVudCBPUiB3aWxsIGJlIGEgc2VydmVyLXByb3ZpZGVkIGRvY3VtZW50IFBMVVMgYWNrbm93bGVkZ2VkIG11dGF0aW9uczpcclxuICpcclxuICogICBSZW1vdGVEb2N1bWVudCcgPSBSZW1vdGVEb2N1bWVudCArIEFja25vd2xlZGdlZChMb2NhbE11dGF0aW9ucylcclxuICpcclxuICogTm90ZSB0aGF0IHRoaXMgXCJkaXJ0eVwiIHZlcnNpb24gb2YgYSBSZW1vdGVEb2N1bWVudCB3aWxsIG5vdCBiZSBpZGVudGljYWwgdG8gYVxyXG4gKiBzZXJ2ZXIgYmFzZSB2ZXJzaW9uLCBzaW5jZSBpdCBoYXMgTG9jYWxNdXRhdGlvbnMgYWRkZWQgdG8gaXQgcGVuZGluZyBnZXR0aW5nXHJcbiAqIGFuIGF1dGhvcml0YXRpdmUgY29weSBmcm9tIHRoZSBzZXJ2ZXIuXHJcbiAqXHJcbiAqIFNpbmNlIExvY2FsTXV0YXRpb25zIGNhbiBiZSByZWplY3RlZCBieSB0aGUgc2VydmVyLCB3ZSBoYXZlIHRvIGJlIGFibGUgdG9cclxuICogcmV2ZXJ0IGEgTG9jYWxNdXRhdGlvbiB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byB0aGUgTG9jYWxEb2N1bWVudFxyXG4gKiAodHlwaWNhbGx5IGRvbmUgYnkgcmVwbGF5aW5nIGFsbCByZW1haW5pbmcgTG9jYWxNdXRhdGlvbnMgdG8gdGhlXHJcbiAqIFJlbW90ZURvY3VtZW50IHRvIHJlLWFwcGx5KS5cclxuICpcclxuICogVGhlIExvY2FsU3RvcmUgaXMgcmVzcG9uc2libGUgZm9yIHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24gb2YgdGhlIGRvY3VtZW50cyBpdFxyXG4gKiBjb250YWlucy4gRm9yIG5vdywgaXQgZXZlcnkgZG9jIHJlZmVyZW5jZWQgYnkgYSB2aWV3LCB0aGUgbXV0YXRpb24gcXVldWUsIG9yXHJcbiAqIHRoZSBSZW1vdGVTdG9yZS5cclxuICpcclxuICogSXQgYWxzbyBtYWludGFpbnMgdGhlIHBlcnNpc3RlbmNlIG9mIG1hcHBpbmcgcXVlcmllcyB0byByZXN1bWUgdG9rZW5zIGFuZFxyXG4gKiB0YXJnZXQgaWRzLiBJdCBuZWVkcyB0byBrbm93IHRoaXMgZGF0YSBhYm91dCBxdWVyaWVzIHRvIHByb3Blcmx5IGtub3cgd2hhdFxyXG4gKiBkb2NzIGl0IHdvdWxkIGJlIGFsbG93ZWQgdG8gZ2FyYmFnZSBjb2xsZWN0LlxyXG4gKlxyXG4gKiBUaGUgTG9jYWxTdG9yZSBtdXN0IGJlIGFibGUgdG8gZWZmaWNpZW50bHkgZXhlY3V0ZSBxdWVyaWVzIGFnYWluc3QgaXRzIGxvY2FsXHJcbiAqIGNhY2hlIG9mIHRoZSBkb2N1bWVudHMsIHRvIHByb3ZpZGUgdGhlIGluaXRpYWwgc2V0IG9mIHJlc3VsdHMgYmVmb3JlIGFueVxyXG4gKiByZW1vdGUgY2hhbmdlcyBoYXZlIGJlZW4gcmVjZWl2ZWQuXHJcbiAqXHJcbiAqIE5vdGU6IEluIFR5cGVTY3JpcHQsIG1vc3QgbWV0aG9kcyByZXR1cm4gUHJvbWlzZXMgc2luY2UgdGhlIGltcGxlbWVudGF0aW9uXHJcbiAqIG1heSByZWx5IG9uIGZldGNoaW5nIGRhdGEgZnJvbSBJbmRleGVkREIgd2hpY2ggaXMgYXN5bmMuXHJcbiAqIFRoZXNlIFByb21pc2VzIHdpbGwgb25seSBiZSByZWplY3RlZCBvbiBhbiBJL08gZXJyb3Igb3Igb3RoZXIgaW50ZXJuYWxcclxuICogKHVuZXhwZWN0ZWQpIGZhaWx1cmUgKGUuZy4gZmFpbGVkIGFzc2VydCkgYW5kIGFsd2F5cyByZXByZXNlbnQgYW5cclxuICogdW5yZWNvdmVyYWJsZSBlcnJvciAoc2hvdWxkIGJlIGNhdWdodCAvIHJlcG9ydGVkIGJ5IHRoZSBhc3luY19xdWV1ZSkuXHJcbiAqL1xyXG52YXIgTG9jYWxTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExvY2FsU3RvcmUoXHJcbiAgICAvKiogTWFuYWdlcyBvdXIgaW4tbWVtb3J5IG9yIGR1cmFibGUgcGVyc2lzdGVuY2UuICovXHJcbiAgICBwZXJzaXN0ZW5jZSwgaW5pdGlhbFVzZXIsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZ2FyYmFnZSBjb2xsZWN0b3IgY29sbGVjdHMgZG9jdW1lbnRzIHRoYXQgc2hvdWxkIG5vIGxvbmdlciBiZVxyXG4gICAgICogY2FjaGVkIChlLmcuIGlmIHRoZXkgYXJlIG5vIGxvbmdlciByZXRhaW5lZCBieSB0aGUgYWJvdmUgcmVmZXJlbmNlIHNldHNcclxuICAgICAqIGFuZCB0aGUgZ2FyYmFnZSBjb2xsZWN0b3IgaXMgcGVyZm9ybWluZyBlYWdlciBjb2xsZWN0aW9uKS5cclxuICAgICAqL1xyXG4gICAgZ2FyYmFnZUNvbGxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2UgPSBwZXJzaXN0ZW5jZTtcclxuICAgICAgICB0aGlzLmdhcmJhZ2VDb2xsZWN0b3IgPSBnYXJiYWdlQ29sbGVjdG9yO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzZXQgb2YgZG9jdW1lbnQgcmVmZXJlbmNlcyBtYWludGFpbmVkIGJ5IGFueSBsb2NhbCB2aWV3cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmxvY2FsVmlld1JlZmVyZW5jZXMgPSBuZXcgUmVmZXJlbmNlU2V0KCk7XHJcbiAgICAgICAgLyoqIE1hcHMgYSB0YXJnZXRJRCB0byBkYXRhIGFib3V0IGl0cyBxdWVyeS4gKi9cclxuICAgICAgICB0aGlzLnF1ZXJ5RGF0YUJ5VGFyZ2V0ID0ge307XHJcbiAgICAgICAgYXNzZXJ0KHBlcnNpc3RlbmNlLnN0YXJ0ZWQsICdMb2NhbFN0b3JlIHdhcyBwYXNzZWQgYW4gdW5zdGFydGVkIHBlcnNpc3RlbmNlIGltcGxlbWVudGF0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlID0gcGVyc2lzdGVuY2UuZ2V0TXV0YXRpb25RdWV1ZShpbml0aWFsVXNlcik7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVEb2N1bWVudHMgPSBwZXJzaXN0ZW5jZS5nZXRSZW1vdGVEb2N1bWVudENhY2hlKCk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNhY2hlID0gcGVyc2lzdGVuY2UuZ2V0UXVlcnlDYWNoZSgpO1xyXG4gICAgICAgIHRoaXMubG9jYWxEb2N1bWVudHMgPSBuZXcgTG9jYWxEb2N1bWVudHNWaWV3KHRoaXMucmVtb3RlRG9jdW1lbnRzLCB0aGlzLm11dGF0aW9uUXVldWUpO1xyXG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3Rvci5hZGRHYXJiYWdlU291cmNlKHRoaXMubG9jYWxWaWV3UmVmZXJlbmNlcyk7XHJcbiAgICAgICAgdGhpcy5nYXJiYWdlQ29sbGVjdG9yLmFkZEdhcmJhZ2VTb3VyY2UodGhpcy5xdWVyeUNhY2hlKTtcclxuICAgICAgICB0aGlzLmdhcmJhZ2VDb2xsZWN0b3IuYWRkR2FyYmFnZVNvdXJjZSh0aGlzLm11dGF0aW9uUXVldWUpO1xyXG4gICAgfVxyXG4gICAgLyoqIFBlcmZvcm1zIGFueSBpbml0aWFsIHN0YXJ0dXAgYWN0aW9ucyByZXF1aXJlZCBieSB0aGUgbG9jYWwgc3RvcmUuICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKCdTdGFydCBMb2NhbFN0b3JlJywgJ3JlYWRvbmx5JywgZnVuY3Rpb24gKHR4bikgeyByZXR1cm4gX3RoaXMuc3RhcnRNdXRhdGlvblF1ZXVlKHR4bik7IH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGVsbHMgdGhlIExvY2FsU3RvcmUgdGhhdCB0aGUgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlciBoYXMgY2hhbmdlZC5cclxuICAgICAqXHJcbiAgICAgKiBJbiByZXNwb25zZSB0aGUgbG9jYWwgc3RvcmUgc3dpdGNoZXMgdGhlIG11dGF0aW9uIHF1ZXVlIHRvIHRoZSBuZXcgdXNlciBhbmRcclxuICAgICAqIHJldHVybnMgYW55IHJlc3VsdGluZyBkb2N1bWVudCBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5oYW5kbGVVc2VyQ2hhbmdlID0gZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKCdIYW5kbGUgdXNlciBjaGFuZ2UnLCAncmVhZG9ubHknLCBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgICAgIC8vIFN3YXAgb3V0IHRoZSBtdXRhdGlvbiBxdWV1ZSwgZ3JhYmJpbmcgdGhlIHBlbmRpbmcgbXV0YXRpb24gYmF0Y2hlc1xyXG4gICAgICAgICAgICAvLyBiZWZvcmUgYW5kIGFmdGVyLlxyXG4gICAgICAgICAgICB2YXIgb2xkQmF0Y2hlcztcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm11dGF0aW9uUXVldWVcclxuICAgICAgICAgICAgICAgIC5nZXRBbGxNdXRhdGlvbkJhdGNoZXModHhuKVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKHByb21pc2VkT2xkQmF0Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgb2xkQmF0Y2hlcyA9IHByb21pc2VkT2xkQmF0Y2hlcztcclxuICAgICAgICAgICAgICAgIF90aGlzLmdhcmJhZ2VDb2xsZWN0b3IucmVtb3ZlR2FyYmFnZVNvdXJjZShfdGhpcy5tdXRhdGlvblF1ZXVlKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLm11dGF0aW9uUXVldWUgPSBfdGhpcy5wZXJzaXN0ZW5jZS5nZXRNdXRhdGlvblF1ZXVlKHVzZXIpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZ2FyYmFnZUNvbGxlY3Rvci5hZGRHYXJiYWdlU291cmNlKF90aGlzLm11dGF0aW9uUXVldWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0YXJ0TXV0YXRpb25RdWV1ZSh0eG4pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVjcmVhdGUgb3VyIExvY2FsRG9jdW1lbnRzVmlldyB1c2luZyB0aGUgbmV3XHJcbiAgICAgICAgICAgICAgICAvLyBNdXRhdGlvblF1ZXVlLlxyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9jYWxEb2N1bWVudHMgPSBuZXcgTG9jYWxEb2N1bWVudHNWaWV3KF90aGlzLnJlbW90ZURvY3VtZW50cywgX3RoaXMubXV0YXRpb25RdWV1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubXV0YXRpb25RdWV1ZS5nZXRBbGxNdXRhdGlvbkJhdGNoZXModHhuKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uIChuZXdCYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlZEJhdGNoSWRzID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgYWRkZWRCYXRjaElkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgLy8gVW5pb24gdGhlIG9sZC9uZXcgY2hhbmdlZCBrZXlzLlxyXG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZWRLZXlzID0gZG9jdW1lbnRLZXlTZXQoKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgb2xkQmF0Y2hlc18xID0gb2xkQmF0Y2hlczsgX2kgPCBvbGRCYXRjaGVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhdGNoID0gb2xkQmF0Y2hlc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVkQmF0Y2hJZHMucHVzaChiYXRjaC5iYXRjaElkKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gYmF0Y2gubXV0YXRpb25zOyBfYSA8IF9iLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXV0YXRpb24gPSBfYltfYV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWRLZXlzID0gY2hhbmdlZEtleXMuYWRkKG11dGF0aW9uLmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAwLCBuZXdCYXRjaGVzXzEgPSBuZXdCYXRjaGVzOyBfYyA8IG5ld0JhdGNoZXNfMS5sZW5ndGg7IF9jKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYmF0Y2ggPSBuZXdCYXRjaGVzXzFbX2NdO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZGVkQmF0Y2hJZHMucHVzaChiYXRjaC5iYXRjaElkKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IDAsIF9lID0gYmF0Y2gubXV0YXRpb25zOyBfZCA8IF9lLmxlbmd0aDsgX2QrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXV0YXRpb24gPSBfZVtfZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWRLZXlzID0gY2hhbmdlZEtleXMuYWRkKG11dGF0aW9uLmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBzZXQgb2YgYWxsIChwb3RlbnRpYWxseSkgY2hhbmdlZCBkb2N1bWVudHMgYW5kIHRoZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAvLyBvZiBtdXRhdGlvbiBiYXRjaCBJRHMgdGhhdCB3ZXJlIGFmZmVjdGVkIGJ5IGNoYW5nZS5cclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5sb2NhbERvY3VtZW50c1xyXG4gICAgICAgICAgICAgICAgICAgIC5nZXREb2N1bWVudHModHhuLCBjaGFuZ2VkS2V5cylcclxuICAgICAgICAgICAgICAgICAgICAubmV4dChmdW5jdGlvbiAoYWZmZWN0ZWREb2N1bWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZERvY3VtZW50czogYWZmZWN0ZWREb2N1bWVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWRCYXRjaElkczogcmVtb3ZlZEJhdGNoSWRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRlZEJhdGNoSWRzOiBhZGRlZEJhdGNoSWRzXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5zdGFydE11dGF0aW9uUXVldWUgPSBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb25RdWV1ZS5zdGFydCh0eG4pO1xyXG4gICAgfTtcclxuICAgIC8qIEFjY2VwdCBsb2NhbGx5IGdlbmVyYXRlZCBNdXRhdGlvbnMgYW5kIGNvbW1pdCB0aGVtIHRvIHN0b3JhZ2UuICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5sb2NhbFdyaXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oJ0xvY2FsbHkgd3JpdGUgbXV0YXRpb25zJywgJ3JlYWR3cml0ZScsIGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICAgICAgdmFyIGJhdGNoO1xyXG4gICAgICAgICAgICB2YXIgbG9jYWxXcml0ZVRpbWUgPSBUaW1lc3RhbXAubm93KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5tdXRhdGlvblF1ZXVlXHJcbiAgICAgICAgICAgICAgICAuYWRkTXV0YXRpb25CYXRjaCh0eG4sIGxvY2FsV3JpdGVUaW1lLCBtdXRhdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAubmV4dChmdW5jdGlvbiAocHJvbWlzZWRCYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgYmF0Y2ggPSBwcm9taXNlZEJhdGNoO1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhrb3NzKTogVGhpcyBpcyBkb2luZyBhbiBOXjIgdXBkYXRlIGJ5IHJlcGxheWluZyBBTEwgdGhlXHJcbiAgICAgICAgICAgICAgICAvLyBtdXRhdGlvbnMgb24gZWFjaCBkb2N1bWVudCAoaW5zdGVhZCBvZiBqdXN0IHRoZSBvbmVzIGFkZGVkKSBpblxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBiYXRjaC5cclxuICAgICAgICAgICAgICAgIHZhciBrZXlzID0gYmF0Y2gua2V5cygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxvY2FsRG9jdW1lbnRzLmdldERvY3VtZW50cyh0eG4sIGtleXMpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGNoYW5nZWREb2N1bWVudHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IGJhdGNoSWQ6IGJhdGNoLmJhdGNoSWQsIGNoYW5nZXM6IGNoYW5nZWREb2N1bWVudHMgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIFJldHVybnMgdGhlIGxvY2FsIHZpZXcgb2YgdGhlIGRvY3VtZW50cyBhZmZlY3RlZCBieSBhIG11dGF0aW9uIGJhdGNoLiAqL1xyXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cclxuICAgIExvY2FsU3RvcmUucHJvdG90eXBlLmxvb2t1cE11dGF0aW9uRG9jdW1lbnRzID0gZnVuY3Rpb24gKGJhdGNoSWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKCdMb29rdXAgbXV0YXRpb24gZG9jdW1lbnRzJywgJ3JlYWRvbmx5JywgZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMubXV0YXRpb25RdWV1ZVxyXG4gICAgICAgICAgICAgICAgLmxvb2t1cE11dGF0aW9uS2V5cyh0eG4sIGJhdGNoSWQpXHJcbiAgICAgICAgICAgICAgICAubmV4dChmdW5jdGlvbiAoa2V5cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubG9jYWxEb2N1bWVudHMuZ2V0RG9jdW1lbnRzKHR4biwga2V5cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWNrbm93bGVkZ2UgdGhlIGdpdmVuIGJhdGNoLlxyXG4gICAgICpcclxuICAgICAqIE9uIHRoZSBoYXBweSBwYXRoIHdoZW4gYSBiYXRjaCBpcyBhY2tub3dsZWRnZWQsIHRoZSBsb2NhbCBzdG9yZSB3aWxsXHJcbiAgICAgKlxyXG4gICAgICogICsgcmVtb3ZlIHRoZSBiYXRjaCBmcm9tIHRoZSBtdXRhdGlvbiBxdWV1ZTtcclxuICAgICAqICArIGFwcGx5IHRoZSBjaGFuZ2VzIHRvIHRoZSByZW1vdGUgZG9jdW1lbnQgY2FjaGU7XHJcbiAgICAgKiAgKyByZWNhbGN1bGF0ZSB0aGUgbGF0ZW5jeSBjb21wZW5zYXRlZCB2aWV3IGltcGxpZWQgYnkgdGhvc2UgY2hhbmdlcyAodGhlcmVcclxuICAgICAqICAgIG1heSBiZSBtdXRhdGlvbnMgaW4gdGhlIHF1ZXVlIHRoYXQgYWZmZWN0IHRoZSBkb2N1bWVudHMgYnV0IGhhdmVuJ3QgYmVlblxyXG4gICAgICogICAgYWNrbm93bGVkZ2VkIHlldCk7IGFuZFxyXG4gICAgICogICsgZ2l2ZSB0aGUgY2hhbmdlZCBkb2N1bWVudHMgYmFjayB0aGUgc3luYyBlbmdpbmVcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIChtb2RpZmllZCkgZG9jdW1lbnRzLlxyXG4gICAgICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5hY2tub3dsZWRnZUJhdGNoID0gZnVuY3Rpb24gKGJhdGNoUmVzdWx0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbignQWNrbm93bGVkZ2UgYmF0Y2gnLCAncmVhZHdyaXRlLXByaW1hcnknLCBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgICAgIHZhciBhZmZlY3RlZCA9IGJhdGNoUmVzdWx0LmJhdGNoLmtleXMoKTtcclxuICAgICAgICAgICAgdmFyIGRvY3VtZW50QnVmZmVyID0gbmV3IFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyKF90aGlzLnJlbW90ZURvY3VtZW50cyk7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5tdXRhdGlvblF1ZXVlXHJcbiAgICAgICAgICAgICAgICAuYWNrbm93bGVkZ2VCYXRjaCh0eG4sIGJhdGNoUmVzdWx0LmJhdGNoLCBiYXRjaFJlc3VsdC5zdHJlYW1Ub2tlbilcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5hcHBseVdyaXRlVG9SZW1vdGVEb2N1bWVudHModHhuLCBiYXRjaFJlc3VsdCwgZG9jdW1lbnRCdWZmZXIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnRCdWZmZXIuYXBwbHkodHhuKTsgfSlcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm11dGF0aW9uUXVldWUucGVyZm9ybUNvbnNpc3RlbmN5Q2hlY2sodHhuKTsgfSlcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmxvY2FsRG9jdW1lbnRzLmdldERvY3VtZW50cyh0eG4sIGFmZmVjdGVkKTsgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgbXV0YXRpb25zIGZyb20gdGhlIE11dGF0aW9uUXVldWUgZm9yIHRoZSBzcGVjaWZpZWQgYmF0Y2g7XHJcbiAgICAgKiBMb2NhbERvY3VtZW50cyB3aWxsIGJlIHJlY2FsY3VsYXRlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIG1vZGlmaWVkIGRvY3VtZW50cy5cclxuICAgICAqL1xyXG4gICAgTG9jYWxTdG9yZS5wcm90b3R5cGUucmVqZWN0QmF0Y2ggPSBmdW5jdGlvbiAoYmF0Y2hJZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oJ1JlamVjdCBiYXRjaCcsICdyZWFkd3JpdGUtcHJpbWFyeScsIGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICAgICAgdmFyIGFmZmVjdGVkS2V5cztcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm11dGF0aW9uUXVldWVcclxuICAgICAgICAgICAgICAgIC5sb29rdXBNdXRhdGlvbkJhdGNoKHR4biwgYmF0Y2hJZClcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uIChiYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGJhdGNoICE9PSBudWxsLCAnQXR0ZW1wdCB0byByZWplY3Qgbm9uZXhpc3RlbnQgYmF0Y2ghJyk7XHJcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEtleXMgPSBiYXRjaC5rZXlzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubXV0YXRpb25RdWV1ZS5yZW1vdmVNdXRhdGlvbkJhdGNoKHR4biwgYmF0Y2gpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm11dGF0aW9uUXVldWUucGVyZm9ybUNvbnNpc3RlbmN5Q2hlY2sodHhuKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5sb2NhbERvY3VtZW50cy5nZXREb2N1bWVudHModHhuLCBhZmZlY3RlZEtleXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKiogUmV0dXJucyB0aGUgbGFzdCByZWNvcmRlZCBzdHJlYW0gdG9rZW4gZm9yIHRoZSBjdXJyZW50IHVzZXIuICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5nZXRMYXN0U3RyZWFtVG9rZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbignR2V0IGxhc3Qgc3RyZWFtIHRva2VuJywgJ3JlYWRvbmx5JywgZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMubXV0YXRpb25RdWV1ZS5nZXRMYXN0U3RyZWFtVG9rZW4odHhuKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHN0cmVhbSB0b2tlbiBmb3IgdGhlIGN1cnJlbnQgdXNlciB3aXRob3V0IGFja25vd2xlZGdpbmcgYW55XHJcbiAgICAgKiBtdXRhdGlvbiBiYXRjaC4gVGhpcyBpcyB1c3VhbGx5IG9ubHkgdXNlZnVsIGFmdGVyIGEgc3RyZWFtIGhhbmRzaGFrZSBvciBpblxyXG4gICAgICogcmVzcG9uc2UgdG8gYW4gZXJyb3IgdGhhdCByZXF1aXJlcyBjbGVhcmluZyB0aGUgc3RyZWFtIHRva2VuLlxyXG4gICAgICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5zZXRMYXN0U3RyZWFtVG9rZW4gPSBmdW5jdGlvbiAoc3RyZWFtVG9rZW4pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKCdTZXQgbGFzdCBzdHJlYW0gdG9rZW4nLCAncmVhZHdyaXRlLXByaW1hcnknLCBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5tdXRhdGlvblF1ZXVlLnNldExhc3RTdHJlYW1Ub2tlbih0eG4sIHN0cmVhbVRva2VuKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGxhc3QgY29uc2lzdGVudCBzbmFwc2hvdCBwcm9jZXNzZWQgKHVzZWQgYnkgdGhlIFJlbW90ZVN0b3JlIHRvXHJcbiAgICAgKiBkZXRlcm1pbmUgd2hldGhlciB0byBidWZmZXIgaW5jb21pbmcgc25hcHNob3RzIGZyb20gdGhlIGJhY2tlbmQpLlxyXG4gICAgICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5nZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oJ0dldCBsYXN0IHJlbW90ZSBzbmFwc2hvdCB2ZXJzaW9uJywgJ3JlYWRvbmx5JywgZnVuY3Rpb24gKHR4bikgeyByZXR1cm4gX3RoaXMucXVlcnlDYWNoZS5nZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKHR4bik7IH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBcImdyb3VuZC1zdGF0ZVwiIChyZW1vdGUpIGRvY3VtZW50cy4gV2UgYXNzdW1lIHRoYXQgdGhlIHJlbW90ZVxyXG4gICAgICogZXZlbnQgcmVmbGVjdHMgYW55IHdyaXRlIGJhdGNoZXMgdGhhdCBoYXZlIGJlZW4gYWNrbm93bGVkZ2VkIG9yIHJlamVjdGVkXHJcbiAgICAgKiAoaS5lLiB3ZSBkbyBub3QgcmUtYXBwbHkgbG9jYWwgbXV0YXRpb25zIHRvIHVwZGF0ZXMgZnJvbSB0aGlzIGV2ZW50KS5cclxuICAgICAqXHJcbiAgICAgKiBMb2NhbERvY3VtZW50cyBhcmUgcmUtY2FsY3VsYXRlZCBpZiB0aGVyZSBhcmUgcmVtYWluaW5nIG11dGF0aW9ucyBpbiB0aGVcclxuICAgICAqIHF1ZXVlLlxyXG4gICAgICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5hcHBseVJlbW90ZUV2ZW50ID0gZnVuY3Rpb24gKHJlbW90ZUV2ZW50KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZG9jdW1lbnRCdWZmZXIgPSBuZXcgUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIodGhpcy5yZW1vdGVEb2N1bWVudHMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKCdBcHBseSByZW1vdGUgZXZlbnQnLCAncmVhZHdyaXRlLXByaW1hcnknLCBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgYXV0aG9yaXRhdGl2ZVVwZGF0ZXMgPSBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgICAgICAgICBmb3JFYWNoTnVtYmVyKHJlbW90ZUV2ZW50LnRhcmdldENoYW5nZXMsIGZ1bmN0aW9uICh0YXJnZXRJZCwgY2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEbyBub3QgcmVmL3VucmVmIHVuYXNzaWduZWQgdGFyZ2V0SWRzIC0gaXQgbWF5IGxlYWQgdG8gbGVha3MuXHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlEYXRhID0gX3RoaXMucXVlcnlEYXRhQnlUYXJnZXRbdGFyZ2V0SWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFxdWVyeURhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgLy8gV2hlbiBhIGdsb2JhbCBzbmFwc2hvdCBjb250YWlucyB1cGRhdGVzIChlaXRoZXIgYWRkIG9yIG1vZGlmeSkgd2VcclxuICAgICAgICAgICAgICAgIC8vIGNhbiBjb21wbGV0ZWx5IHRydXN0IHRoZXNlIHVwZGF0ZXMgYXMgYXV0aG9yaXRhdGl2ZSBhbmQgYmxpbmRseVxyXG4gICAgICAgICAgICAgICAgLy8gYXBwbHkgdGhlbSB0byBvdXIgY2FjaGUgKGFzIGEgZGVmZW5zaXZlIG1lYXN1cmUgdG8gcHJvbW90ZVxyXG4gICAgICAgICAgICAgICAgLy8gc2VsZi1oZWFsaW5nIGluIHRoZSB1bmZvcnR1bmF0ZSBjYXNlIHRoYXQgb3VyIGNhY2hlIGlzIGV2ZXIgc29tZWhvd1xyXG4gICAgICAgICAgICAgICAgLy8gY29ycnVwdGVkIC8gb3V0LW9mLXN5bmMpLlxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBkb2N1bWVudCBpcyBvbmx5IHVwZGF0ZWQgd2hpbGUgcmVtb3ZpbmcgaXQgZnJvbSBhIHRhcmdldFxyXG4gICAgICAgICAgICAgICAgLy8gdGhlbiB3YXRjaCBpc24ndCBvYmxpZ2F0ZWQgdG8gc2VuZCB0aGUgYWJzb2x1dGUgbGF0ZXN0IHZlcnNpb246IGl0XHJcbiAgICAgICAgICAgICAgICAvLyBjYW4gc2VuZCB0aGUgZmlyc3QgdmVyc2lvbiB0aGF0IGNhdXNlZCB0aGUgZG9jdW1lbnQgbm90IHRvIG1hdGNoLlxyXG4gICAgICAgICAgICAgICAgY2hhbmdlLmFkZGVkRG9jdW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml0YXRpdmVVcGRhdGVzID0gYXV0aG9yaXRhdGl2ZVVwZGF0ZXMuYWRkKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNoYW5nZS5tb2RpZmllZERvY3VtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpdGF0aXZlVXBkYXRlcyA9IGF1dGhvcml0YXRpdmVVcGRhdGVzLmFkZChrZXkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKF90aGlzLnF1ZXJ5Q2FjaGVcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlTWF0Y2hpbmdLZXlzKHR4biwgY2hhbmdlLnJlbW92ZWREb2N1bWVudHMsIHRhcmdldElkKVxyXG4gICAgICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucXVlcnlDYWNoZS5hZGRNYXRjaGluZ0tleXModHhuLCBjaGFuZ2UuYWRkZWREb2N1bWVudHMsIHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVzdW1lIHRva2VuIGlmIHRoZSBjaGFuZ2UgaW5jbHVkZXMgb25lLiBEb24ndCBjbGVhclxyXG4gICAgICAgICAgICAgICAgLy8gYW55IHByZWV4aXN0aW5nIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VtZVRva2VuID0gY2hhbmdlLnJlc3VtZVRva2VuO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VtZVRva2VuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkUXVlcnlEYXRhID0gcXVlcnlEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5RGF0YSA9IHF1ZXJ5RGF0YS5jb3B5KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdW1lVG9rZW46IHJlc3VtZVRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbmFwc2hvdFZlcnNpb246IHJlbW90ZUV2ZW50LnNuYXBzaG90VmVyc2lvblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnF1ZXJ5RGF0YUJ5VGFyZ2V0W3RhcmdldElkXSA9IHF1ZXJ5RGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTG9jYWxTdG9yZS5zaG91bGRQZXJzaXN0UXVlcnlEYXRhKG9sZFF1ZXJ5RGF0YSwgcXVlcnlEYXRhLCBjaGFuZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goX3RoaXMucXVlcnlDYWNoZS51cGRhdGVRdWVyeURhdGEodHhuLCBxdWVyeURhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlZERvY0tleXMgPSBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgICAgICAgICByZW1vdGVFdmVudC5kb2N1bWVudFVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBkb2MpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZWREb2NLZXlzID0gY2hhbmdlZERvY0tleXMuYWRkKGtleSk7XHJcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKGRvY3VtZW50QnVmZmVyLmdldEVudHJ5KHR4biwga2V5KS5uZXh0KGZ1bmN0aW9uIChleGlzdGluZ0RvYykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGEgZG9jdW1lbnQgdXBkYXRlIGlzbid0IGF1dGhvcml0YXRpdmUsIG1ha2Ugc3VyZSB3ZSBkb24ndFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFwcGx5IGFuIG9sZCBkb2N1bWVudCB2ZXJzaW9uIHRvIHRoZSByZW1vdGUgY2FjaGUuIFdlIG1ha2UgYW5cclxuICAgICAgICAgICAgICAgICAgICAvLyBleGNlcHRpb24gZm9yIFNuYXBzaG90VmVyc2lvbi5NSU4gd2hpY2ggY2FuIGhhcHBlbiBmb3JcclxuICAgICAgICAgICAgICAgICAgICAvLyBtYW51ZmFjdHVyZWQgZXZlbnRzIChlLmcuIGluIHRoZSBjYXNlIG9mIGEgbGltYm8gZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXNvbHV0aW9uIGZhaWxpbmcpLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0RvYyA9PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvYy52ZXJzaW9uLmlzRXF1YWwoU25hcHNob3RWZXJzaW9uLk1JTikgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGF1dGhvcml0YXRpdmVVcGRhdGVzLmhhcyhkb2Mua2V5KSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWV4aXN0aW5nRG9jLmhhc1BlbmRpbmdXcml0ZXMpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvYy52ZXJzaW9uLmNvbXBhcmVUbyhleGlzdGluZ0RvYy52ZXJzaW9uKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50QnVmZmVyLmFkZEVudHJ5KGRvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDMsICdJZ25vcmluZyBvdXRkYXRlZCB3YXRjaCB1cGRhdGUgZm9yICcsIGtleSwgJy4gQ3VycmVudCB2ZXJzaW9uOicsIGV4aXN0aW5nRG9jLnZlcnNpb24sICcgV2F0Y2ggdmVyc2lvbjonLCBkb2MudmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBkb2N1bWVudCBtaWdodCBiZSBnYXJiYWdlIGJlY2F1c2UgaXQgd2FzIHVucmVmZXJlbmNlZCBieVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZXJ5dGhpbmcuIE1ha2Ugc3VyZSB0byBtYXJrIGl0IGFzIGdhcmJhZ2UgaWYgaXQgaXMuLi5cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5nYXJiYWdlQ29sbGVjdG9yLmFkZFBvdGVudGlhbEdhcmJhZ2VLZXkoa2V5KTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIEhBQ0s6IFRoZSBvbmx5IHJlYXNvbiB3ZSBhbGxvdyBhIG51bGwgc25hcHNob3QgdmVyc2lvbiBpcyBzbyB0aGF0IHdlXHJcbiAgICAgICAgICAgIC8vIGNhbiBzeW50aGVzaXplIHJlbW90ZSBldmVudHMgd2hlbiB3ZSBnZXQgcGVybWlzc2lvbiBkZW5pZWQgZXJyb3JzIHdoaWxlXHJcbiAgICAgICAgICAgIC8vIHRyeWluZyB0byByZXNvbHZlIHRoZSBzdGF0ZSBvZiBhIGxvY2FsbHkgY2FjaGVkIGRvY3VtZW50IHRoYXQgaXMgaW5cclxuICAgICAgICAgICAgLy8gbGltYm8uXHJcbiAgICAgICAgICAgIHZhciByZW1vdGVWZXJzaW9uID0gcmVtb3RlRXZlbnQuc25hcHNob3RWZXJzaW9uO1xyXG4gICAgICAgICAgICBpZiAoIXJlbW90ZVZlcnNpb24uaXNFcXVhbChTbmFwc2hvdFZlcnNpb24uTUlOKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZVJlbW90ZVZlcnNpb24gPSBfdGhpcy5xdWVyeUNhY2hlXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldExhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24odHhuKVxyXG4gICAgICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uIChsYXN0UmVtb3RlVmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChyZW1vdGVWZXJzaW9uLmNvbXBhcmVUbyhsYXN0UmVtb3RlVmVyc2lvbikgPj0gMCwgJ1dhdGNoIHN0cmVhbSByZXZlcnRlZCB0byBwcmV2aW91cyBzbmFwc2hvdD8/ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVWZXJzaW9uICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyA8ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UmVtb3RlVmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnF1ZXJ5Q2FjaGUuc2V0VGFyZ2V0c01ldGFkYXRhKHR4biwgdHhuLmN1cnJlbnRTZXF1ZW5jZU51bWJlciwgcmVtb3RlVmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2godXBkYXRlUmVtb3RlVmVyc2lvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS53YWl0Rm9yKHByb21pc2VzKVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnRCdWZmZXIuYXBwbHkodHhuKTsgfSlcclxuICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5sb2NhbERvY3VtZW50cy5nZXREb2N1bWVudHModHhuLCBjaGFuZ2VkRG9jS2V5cyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBuZXdRdWVyeURhdGEgc2hvdWxkIGJlIHBlcnNpc3RlZCBkdXJpbmcgYW4gdXBkYXRlIG9mXHJcbiAgICAgKiBhbiBhY3RpdmUgdGFyZ2V0LiBRdWVyeURhdGEgc2hvdWxkIGFsd2F5cyBiZSBwZXJzaXN0ZWQgd2hlbiBhIHRhcmdldCBpc1xyXG4gICAgICogYmVpbmcgcmVsZWFzZWQgYW5kIHNob3VsZCBub3QgY2FsbCB0aGlzIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIFdoaWxlIHRoZSB0YXJnZXQgaXMgYWN0aXZlLCBRdWVyeURhdGEgdXBkYXRlcyBjYW4gYmUgb21pdHRlZCB3aGVuIG5vdGhpbmdcclxuICAgICAqIGFib3V0IHRoZSB0YXJnZXQgaGFzIGNoYW5nZWQgZXhjZXB0IG1ldGFkYXRhIGxpa2UgdGhlIHJlc3VtZSB0b2tlbiBvclxyXG4gICAgICogc25hcHNob3QgdmVyc2lvbi4gT2NjYXNpb25hbGx5IGl0J3Mgd29ydGggdGhlIGV4dHJhIHdyaXRlIHRvIHByZXZlbnQgdGhlc2VcclxuICAgICAqIHZhbHVlcyBmcm9tIGdldHRpbmcgdG9vIHN0YWxlIGFmdGVyIGEgY3Jhc2gsIGJ1dCB0aGlzIGRvZXNuJ3QgaGF2ZSB0byBiZVxyXG4gICAgICogdG9vIGZyZXF1ZW50LlxyXG4gICAgICovXHJcbiAgICBMb2NhbFN0b3JlLnNob3VsZFBlcnNpc3RRdWVyeURhdGEgPSBmdW5jdGlvbiAob2xkUXVlcnlEYXRhLCBuZXdRdWVyeURhdGEsIGNoYW5nZSkge1xyXG4gICAgICAgIC8vIEF2b2lkIGNsZWFyaW5nIGFueSBleGlzdGluZyB2YWx1ZVxyXG4gICAgICAgIGlmIChuZXdRdWVyeURhdGEucmVzdW1lVG9rZW4ubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgLy8gQW55IHJlc3VtZSB0b2tlbiBpcyBpbnRlcmVzdGluZyBpZiB0aGVyZSBpc24ndCBvbmUgYWxyZWFkeS5cclxuICAgICAgICBpZiAob2xkUXVlcnlEYXRhLnJlc3VtZVRva2VuLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgLy8gRG9uJ3QgYWxsb3cgcmVzdW1lIHRva2VuIGNoYW5nZXMgdG8gYmUgYnVmZmVyZWQgaW5kZWZpbml0ZWx5LiBUaGlzXHJcbiAgICAgICAgLy8gYWxsb3dzIHVzIHRvIGJlIHJlYXNvbmFibHkgdXAtdG8tZGF0ZSBhZnRlciBhIGNyYXNoIGFuZCBhdm9pZHMgbmVlZGluZ1xyXG4gICAgICAgIC8vIHRvIGxvb3Agb3ZlciBhbGwgYWN0aXZlIHF1ZXJpZXMgb24gc2h1dGRvd24uIEVzcGVjaWFsbHkgaW4gdGhlIGJyb3dzZXJcclxuICAgICAgICAvLyB3ZSBtYXkgbm90IGdldCB0aW1lIHRvIGRvIGFueXRoaW5nIGludGVyZXN0aW5nIHdoaWxlIHRoZSBjdXJyZW50IHRhYiBpc1xyXG4gICAgICAgIC8vIGNsb3NpbmcuXHJcbiAgICAgICAgdmFyIHRpbWVEZWx0YSA9IG5ld1F1ZXJ5RGF0YS5zbmFwc2hvdFZlcnNpb24udG9NaWNyb3NlY29uZHMoKSAtXHJcbiAgICAgICAgICAgIG9sZFF1ZXJ5RGF0YS5zbmFwc2hvdFZlcnNpb24udG9NaWNyb3NlY29uZHMoKTtcclxuICAgICAgICBpZiAodGltZURlbHRhID49IHRoaXMuUkVTVU1FX1RPS0VOX01BWF9BR0VfTUlDUk9TKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAvLyBPdGhlcndpc2UgaWYgdGhlIG9ubHkgdGhpbmcgdGhhdCBoYXMgY2hhbmdlZCBhYm91dCBhIHRhcmdldCBpcyBpdHMgcmVzdW1lXHJcbiAgICAgICAgLy8gdG9rZW4gaXQncyBub3Qgd29ydGggcGVyc2lzdGluZy4gTm90ZSB0aGF0IHRoZSBSZW1vdGVTdG9yZSBrZWVwcyBhblxyXG4gICAgICAgIC8vIGluLW1lbW9yeSB2aWV3IG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIHRhcmdldHMgd2hpY2ggaW5jbHVkZXMgdGhlIGN1cnJlbnRcclxuICAgICAgICAvLyByZXN1bWUgdG9rZW4sIHNvIHN0cmVhbSBmYWlsdXJlIG9yIHVzZXIgY2hhbmdlcyB3aWxsIHN0aWxsIHVzZSBhblxyXG4gICAgICAgIC8vIHVwLXRvLWRhdGUgcmVzdW1lIHRva2VuIHJlZ2FyZGxlc3Mgb2Ygd2hhdCB3ZSBkbyBoZXJlLlxyXG4gICAgICAgIHZhciBjaGFuZ2VzID0gY2hhbmdlLmFkZGVkRG9jdW1lbnRzLnNpemUgK1xyXG4gICAgICAgICAgICBjaGFuZ2UubW9kaWZpZWREb2N1bWVudHMuc2l6ZSArXHJcbiAgICAgICAgICAgIGNoYW5nZS5yZW1vdmVkRG9jdW1lbnRzLnNpemU7XHJcbiAgICAgICAgcmV0dXJuIGNoYW5nZXMgPiAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTm90aWZ5IGxvY2FsIHN0b3JlIG9mIHRoZSBjaGFuZ2VkIHZpZXdzIHRvIGxvY2FsbHkgcGluIGRvY3VtZW50cy5cclxuICAgICAqL1xyXG4gICAgTG9jYWxTdG9yZS5wcm90b3R5cGUubm90aWZ5TG9jYWxWaWV3Q2hhbmdlcyA9IGZ1bmN0aW9uICh2aWV3Q2hhbmdlcykge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgdmlld0NoYW5nZXNfMSA9IHZpZXdDaGFuZ2VzOyBfaSA8IHZpZXdDaGFuZ2VzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB2aWV3Q2hhbmdlID0gdmlld0NoYW5nZXNfMVtfaV07XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxWaWV3UmVmZXJlbmNlcy5hZGRSZWZlcmVuY2VzKHZpZXdDaGFuZ2UuYWRkZWRLZXlzLCB2aWV3Q2hhbmdlLnRhcmdldElkKTtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbFZpZXdSZWZlcmVuY2VzLnJlbW92ZVJlZmVyZW5jZXModmlld0NoYW5nZS5yZW1vdmVkS2V5cywgdmlld0NoYW5nZS50YXJnZXRJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbXV0YXRpb24gYmF0Y2ggYWZ0ZXIgdGhlIHBhc3NlZCBpbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZVxyXG4gICAgICogb3IgbnVsbCBpZiBlbXB0eS5cclxuICAgICAqIEBwYXJhbSBhZnRlckJhdGNoSWQgSWYgcHJvdmlkZWQsIHRoZSBiYXRjaCB0byBzZWFyY2ggYWZ0ZXIuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgbmV4dCBtdXRhdGlvbiBvciBudWxsIGlmIHRoZXJlIHdhc24ndCBvbmUuXHJcbiAgICAgKi9cclxuICAgIExvY2FsU3RvcmUucHJvdG90eXBlLm5leHRNdXRhdGlvbkJhdGNoID0gZnVuY3Rpb24gKGFmdGVyQmF0Y2hJZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oJ0dldCBuZXh0IG11dGF0aW9uIGJhdGNoJywgJ3JlYWRvbmx5JywgZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgICAgICBpZiAoYWZ0ZXJCYXRjaElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGFmdGVyQmF0Y2hJZCA9IEJBVENISURfVU5LTk9XTjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMubXV0YXRpb25RdWV1ZS5nZXROZXh0TXV0YXRpb25CYXRjaEFmdGVyQmF0Y2hJZCh0eG4sIGFmdGVyQmF0Y2hJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIHRoZSBjdXJyZW50IHZhbHVlIG9mIGEgRG9jdW1lbnQgd2l0aCBhIGdpdmVuIGtleSBvciBudWxsIGlmIG5vdFxyXG4gICAgICogZm91bmQgLSB1c2VkIGZvciB0ZXN0aW5nLlxyXG4gICAgICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5yZWFkRG9jdW1lbnQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbigncmVhZCBkb2N1bWVudCcsICdyZWFkb25seScsIGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxvY2FsRG9jdW1lbnRzLmdldERvY3VtZW50KHR4biwga2V5KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFzc2lnbnMgdGhlIGdpdmVuIHF1ZXJ5IGFuIGludGVybmFsIElEIHNvIHRoYXQgaXRzIHJlc3VsdHMgY2FuIGJlIHBpbm5lZCBzb1xyXG4gICAgICogdGhleSBkb24ndCBnZXQgR0MnZC4gQSBxdWVyeSBtdXN0IGJlIGFsbG9jYXRlZCBpbiB0aGUgbG9jYWwgc3RvcmUgYmVmb3JlXHJcbiAgICAgKiB0aGUgc3RvcmUgY2FuIGJlIHVzZWQgdG8gbWFuYWdlIGl0cyB2aWV3LlxyXG4gICAgICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5hbGxvY2F0ZVF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbignQWxsb2NhdGUgcXVlcnknLCAncmVhZHdyaXRlJywgZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlEYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucXVlcnlDYWNoZVxyXG4gICAgICAgICAgICAgICAgLmdldFF1ZXJ5RGF0YSh0eG4sIHF1ZXJ5KVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKGNhY2hlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcXVlcnkgaGFzIGJlZW4gbGlzdGVuZWQgdG8gcHJldmlvdXNseSwgc28gcmV1c2UgdGhlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJldmlvdXMgdGFyZ2V0SUQuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhtY2cpOiBmcmVzaGVuIGxhc3QgYWNjZXNzZWQgZGF0ZT9cclxuICAgICAgICAgICAgICAgICAgICBxdWVyeURhdGEgPSBjYWNoZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucXVlcnlDYWNoZS5hbGxvY2F0ZVRhcmdldElkKHR4bikubmV4dChmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlEYXRhID0gbmV3IFF1ZXJ5RGF0YShxdWVyeSwgdGFyZ2V0SWQsIFF1ZXJ5UHVycG9zZS5MaXN0ZW4sIHR4bi5jdXJyZW50U2VxdWVuY2VOdW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucXVlcnlDYWNoZS5hZGRRdWVyeURhdGEodHhuLCBxdWVyeURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KCFfdGhpcy5xdWVyeURhdGFCeVRhcmdldFtxdWVyeURhdGEudGFyZ2V0SWRdLCAnVHJpZWQgdG8gYWxsb2NhdGUgYW4gYWxyZWFkeSBhbGxvY2F0ZWQgcXVlcnk6ICcgKyBxdWVyeSk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5xdWVyeURhdGFCeVRhcmdldFtxdWVyeURhdGEudGFyZ2V0SWRdID0gcXVlcnlEYXRhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5RGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVbnBpbiBhbGwgdGhlIGRvY3VtZW50cyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIHF1ZXJ5LiBJZlxyXG4gICAgICogYGtlZXBQZXJzaXN0ZWRRdWVyeURhdGFgIGlzIHNldCB0byBmYWxzZSBhbmQgRWFnZXIgR0MgZW5hYmxlZCwgdGhlIG1ldGhvZFxyXG4gICAgICogZGlyZWN0bHkgcmVtb3ZlcyB0aGUgYXNzb2NpYXRlZCBxdWVyeSBkYXRhIGZyb20gdGhlIHF1ZXJ5IGNhY2hlLlxyXG4gICAgICovXHJcbiAgICAvLyBQT1JUSU5HIE5PVEU6IGBrZWVwUGVyc2lzdGVkUXVlcnlEYXRhYCBpcyBtdWx0aS10YWIgb25seS5cclxuICAgIExvY2FsU3RvcmUucHJvdG90eXBlLnJlbGVhc2VRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSwga2VlcFBlcnNpc3RlZFF1ZXJ5RGF0YSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG1vZGUgPSBrZWVwUGVyc2lzdGVkUXVlcnlEYXRhID8gJ3JlYWRvbmx5JyA6ICdyZWFkd3JpdGUtcHJpbWFyeSc7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oJ1JlbGVhc2UgcXVlcnknLCBtb2RlLCBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5xdWVyeUNhY2hlXHJcbiAgICAgICAgICAgICAgICAuZ2V0UXVlcnlEYXRhKHR4biwgcXVlcnkpXHJcbiAgICAgICAgICAgICAgICAubmV4dChmdW5jdGlvbiAocXVlcnlEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQocXVlcnlEYXRhICE9IG51bGwsICdUcmllZCB0byByZWxlYXNlIG5vbmV4aXN0ZW50IHF1ZXJ5OiAnICsgcXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldElkID0gcXVlcnlEYXRhLnRhcmdldElkO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhY2hlZFF1ZXJ5RGF0YSA9IF90aGlzLnF1ZXJ5RGF0YUJ5VGFyZ2V0W3RhcmdldElkXTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvY2FsVmlld1JlZmVyZW5jZXMucmVtb3ZlUmVmZXJlbmNlc0ZvcklkKHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5xdWVyeURhdGFCeVRhcmdldFt0YXJnZXRJZF07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBQZXJzaXN0ZWRRdWVyeURhdGEgJiYgX3RoaXMuZ2FyYmFnZUNvbGxlY3Rvci5pc0VhZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnF1ZXJ5Q2FjaGUucmVtb3ZlUXVlcnlEYXRhKHR4biwgcXVlcnlEYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNhY2hlZFF1ZXJ5RGF0YS5zbmFwc2hvdFZlcnNpb24gPiBxdWVyeURhdGEuc25hcHNob3RWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgYmVlbiBhdm9pZGluZyBwZXJzaXN0aW5nIHRoZSByZXN1bWVUb2tlbiAoc2VlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvdWxkUGVyc2lzdFF1ZXJ5RGF0YSBmb3IgY29uZGl0aW9ucyBhbmQgcmF0aW9uYWxlKSB3ZSBuZWVkIHRvXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcGVyc2lzdCB0aGUgdG9rZW4gbm93IGJlY2F1c2UgdGhlcmUgd2lsbCBubyBsb25nZXIgYmUgYW5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpbi1tZW1vcnkgdmVyc2lvbiB0byBmYWxsIGJhY2sgb24uXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnF1ZXJ5Q2FjaGUudXBkYXRlUXVlcnlEYXRhKHR4biwgY2FjaGVkUXVlcnlEYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJ1bnMgdGhlIHNwZWNpZmllZCBxdWVyeSBhZ2FpbnN0IGFsbCB0aGUgZG9jdW1lbnRzIGluIHRoZSBsb2NhbCBzdG9yZSBhbmRcclxuICAgICAqIHJldHVybnMgdGhlIHJlc3VsdHMuXHJcbiAgICAgKi9cclxuICAgIExvY2FsU3RvcmUucHJvdG90eXBlLmV4ZWN1dGVRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oJ0V4ZWN1dGUgcXVlcnknLCAncmVhZG9ubHknLCBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5sb2NhbERvY3VtZW50cy5nZXREb2N1bWVudHNNYXRjaGluZ1F1ZXJ5KHR4biwgcXVlcnkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUga2V5cyBvZiB0aGUgZG9jdW1lbnRzIHRoYXQgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW5cclxuICAgICAqIHRhcmdldCBpZCBpbiB0aGUgcmVtb3RlIHRhYmxlLlxyXG4gICAgICovXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5yZW1vdGVEb2N1bWVudEtleXMgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKCdSZW1vdGUgZG9jdW1lbnQga2V5cycsICdyZWFkb25seScsIGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnF1ZXJ5Q2FjaGUuZ2V0TWF0Y2hpbmdLZXlzRm9yVGFyZ2V0SWQodHhuLCB0YXJnZXRJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb2xsZWN0IGdhcmJhZ2UgaWYgbmVjZXNzYXJ5LlxyXG4gICAgICogU2hvdWxkIGJlIGNhbGxlZCBwZXJpb2RpY2FsbHkgYnkgU3luYyBFbmdpbmUgdG8gcmVjb3ZlciByZXNvdXJjZXMuIFRoZVxyXG4gICAgICogaW1wbGVtZW50YXRpb24gbXVzdCBndWFyYW50ZWUgdGhhdCBHQyB3b24ndCBoYXBwZW4gaW4gb3RoZXIgcGxhY2VzIHRoYW5cclxuICAgICAqIHRoaXMgbWV0aG9kIGNhbGwuXHJcbiAgICAgKi9cclxuICAgIExvY2FsU3RvcmUucHJvdG90eXBlLmNvbGxlY3RHYXJiYWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gQ2FsbCBjb2xsZWN0R2FyYmFnZSByZWdhcmRsZXNzIG9mIHdoZXRoZXIgaXNHQ0VuYWJsZWQgc28gdGhlIHJlZmVyZW5jZVNldFxyXG4gICAgICAgIC8vIGRvZXNuJ3QgY29udGludWUgdG8gYWNjdW11bGF0ZSB0aGUgZ2FyYmFnZSBrZXlzLlxyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKCdHYXJiYWdlIGNvbGxlY3Rpb24nLCAncmVhZHdyaXRlLXByaW1hcnknLCBmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5nYXJiYWdlQ29sbGVjdG9yLmNvbGxlY3RHYXJiYWdlKHR4bikubmV4dChmdW5jdGlvbiAoZ2FyYmFnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107XHJcbiAgICAgICAgICAgICAgICBnYXJiYWdlLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goX3RoaXMucmVtb3RlRG9jdW1lbnRzLnJlbW92ZUVudHJ5KHR4biwga2V5KSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2Uud2FpdEZvcihwcm9taXNlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5nZXRBY3RpdmVDbGllbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLmdldEFjdGl2ZUNsaWVudHMoKTtcclxuICAgIH07XHJcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxyXG4gICAgTG9jYWxTdG9yZS5wcm90b3R5cGUucmVtb3ZlQ2FjaGVkTXV0YXRpb25CYXRjaE1ldGFkYXRhID0gZnVuY3Rpb24gKGJhdGNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUucmVtb3ZlQ2FjaGVkTXV0YXRpb25LZXlzKGJhdGNoSWQpO1xyXG4gICAgfTtcclxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5zZXROZXR3b3JrRW5hYmxlZCA9IGZ1bmN0aW9uIChuZXR3b3JrRW5hYmxlZCkge1xyXG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2Uuc2V0TmV0d29ya0VuYWJsZWQobmV0d29ya0VuYWJsZWQpO1xyXG4gICAgfTtcclxuICAgIExvY2FsU3RvcmUucHJvdG90eXBlLmFwcGx5V3JpdGVUb1JlbW90ZURvY3VtZW50cyA9IGZ1bmN0aW9uICh0eG4sIGJhdGNoUmVzdWx0LCBkb2N1bWVudEJ1ZmZlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGJhdGNoID0gYmF0Y2hSZXN1bHQuYmF0Y2g7XHJcbiAgICAgICAgdmFyIGRvY0tleXMgPSBiYXRjaC5rZXlzKCk7XHJcbiAgICAgICAgdmFyIHByb21pc2VDaGFpbiA9IFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgZG9jS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChkb2NLZXkpIHtcclxuICAgICAgICAgICAgcHJvbWlzZUNoYWluID0gcHJvbWlzZUNoYWluXHJcbiAgICAgICAgICAgICAgICAubmV4dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnRCdWZmZXIuZ2V0RW50cnkodHhuLCBkb2NLZXkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKHJlbW90ZURvYykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IHJlbW90ZURvYztcclxuICAgICAgICAgICAgICAgIHZhciBhY2tWZXJzaW9uID0gYmF0Y2hSZXN1bHQuZG9jVmVyc2lvbnMuZ2V0KGRvY0tleSk7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQoYWNrVmVyc2lvbiAhPT0gbnVsbCwgJ2Fja1ZlcnNpb25zIHNob3VsZCBjb250YWluIGV2ZXJ5IGRvYyBpbiB0aGUgd3JpdGUuJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRvYyB8fCBkb2MudmVyc2lvbi5jb21wYXJlVG8oYWNrVmVyc2lvbikgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jID0gYmF0Y2guYXBwbHlUb1JlbW90ZURvY3VtZW50KGRvY0tleSwgZG9jLCBiYXRjaFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KCFyZW1vdGVEb2MsICdNdXRhdGlvbiBiYXRjaCAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhdGNoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgYXBwbGllZCB0byBkb2N1bWVudCAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZURvYyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHJlc3VsdGVkIGluIG51bGwnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50QnVmZmVyLmFkZEVudHJ5KGRvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUNoYWluLm5leHQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMubXV0YXRpb25RdWV1ZS5yZW1vdmVNdXRhdGlvbkJhdGNoKHR4biwgYmF0Y2gpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5nZXRRdWVyeUZvclRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMucXVlcnlEYXRhQnlUYXJnZXRbdGFyZ2V0SWRdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5xdWVyeURhdGFCeVRhcmdldFt0YXJnZXRJZF0ucXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oJ0dldCBxdWVyeSBkYXRhJywgJ3JlYWRvbmx5JywgZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnF1ZXJ5Q2FjaGVcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0UXVlcnlEYXRhRm9yVGFyZ2V0KHR4biwgdGFyZ2V0SWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLm5leHQoZnVuY3Rpb24gKHF1ZXJ5RGF0YSkgeyByZXR1cm4gKHF1ZXJ5RGF0YSA/IHF1ZXJ5RGF0YS5xdWVyeSA6IG51bGwpOyB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXHJcbiAgICBMb2NhbFN0b3JlLnByb3RvdHlwZS5nZXROZXdEb2N1bWVudENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbignR2V0IG5ldyBkb2N1bWVudCBjaGFuZ2VzJywgJ3JlYWRvbmx5JywgZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3RlRG9jdW1lbnRzLmdldE5ld0RvY3VtZW50Q2hhbmdlcyh0eG4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1heGltdW0gdGltZSB0byBsZWF2ZSBhIHJlc3VtZSB0b2tlbiBidWZmZXJlZCB3aXRob3V0IHdyaXRpbmcgaXQgb3V0LlxyXG4gICAgICogVGhpcyB2YWx1ZSBpcyBhcmJpdHJhcnk6IGl0J3MgbG9uZyBlbm91Z2ggdG8gYXZvaWQgc2V2ZXJhbCB3cml0ZXNcclxuICAgICAqIChwb3NzaWJseSBpbmRlZmluaXRlbHkgaWYgdXBkYXRlcyBjb21lIG1vcmUgZnJlcXVlbnRseSB0aGFuIHRoaXMpIGJ1dFxyXG4gICAgICogc2hvcnQgZW5vdWdoIHRoYXQgcmVzdGFydGluZyBhZnRlciBjcmFzaGluZyB3aWxsIHN0aWxsIGhhdmUgYSBwcmV0dHlcclxuICAgICAqIHJlY2VudCByZXN1bWUgdG9rZW4uXHJcbiAgICAgKi9cclxuICAgIExvY2FsU3RvcmUuUkVTVU1FX1RPS0VOX01BWF9BR0VfTUlDUk9TID0gNSAqIDYwICogMWU2O1xyXG4gICAgcmV0dXJuIExvY2FsU3RvcmU7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgTWVtb3J5TXV0YXRpb25RdWV1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1lbW9yeU11dGF0aW9uUXVldWUoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHNldCBvZiBhbGwgbXV0YXRpb25zIHRoYXQgaGF2ZSBiZWVuIHNlbnQgYnV0IG5vdCB5ZXQgYmVlbiBhcHBsaWVkIHRvXHJcbiAgICAgICAgICogdGhlIGJhY2tlbmQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlID0gW107XHJcbiAgICAgICAgLyoqIE5leHQgdmFsdWUgdG8gdXNlIHdoZW4gYXNzaWduaW5nIHNlcXVlbnRpYWwgSURzIHRvIGVhY2ggbXV0YXRpb24gYmF0Y2guICovXHJcbiAgICAgICAgdGhpcy5uZXh0QmF0Y2hJZCA9IDE7XHJcbiAgICAgICAgLyoqIFRoZSBoaWdoZXN0IGFja25vd2xlZGdlZCBtdXRhdGlvbiBpbiB0aGUgcXVldWUuICovXHJcbiAgICAgICAgdGhpcy5oaWdoZXN0QWNrbm93bGVkZ2VkQmF0Y2hJZCA9IEJBVENISURfVU5LTk9XTjtcclxuICAgICAgICAvKiogVGhlIGxhc3QgcmVjZWl2ZWQgc3RyZWFtIHRva2VuIGZyb20gdGhlIHNlcnZlciwgdXNlZCB0byBhY2tub3dsZWRnZSB3aGljaFxyXG4gICAgICAgICAqIHJlc3BvbnNlcyB0aGUgY2xpZW50IGhhcyBwcm9jZXNzZWQuIFN0cmVhbSB0b2tlbnMgYXJlIG9wYXF1ZSBjaGVja3BvaW50XHJcbiAgICAgICAgICogbWFya2VycyB3aG9zZSBvbmx5IHJlYWwgdmFsdWUgaXMgdGhlaXIgaW5jbHVzaW9uIGluIHRoZSBuZXh0IHJlcXVlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5sYXN0U3RyZWFtVG9rZW4gPSBlbXB0eUJ5dGVTdHJpbmcoKTtcclxuICAgICAgICAvKiogVGhlIGdhcmJhZ2UgY29sbGVjdG9yIHRvIG5vdGlmeSBhYm91dCBwb3RlbnRpYWwgZ2FyYmFnZSBrZXlzLiAqL1xyXG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IG51bGw7XHJcbiAgICAgICAgLyoqIEFuIG9yZGVyZWQgbWFwcGluZyBiZXR3ZWVuIGRvY3VtZW50cyBhbmQgdGhlIG11dGF0aW9ucyBiYXRjaCBJRHMuICovXHJcbiAgICAgICAgdGhpcy5iYXRjaGVzQnlEb2N1bWVudEtleSA9IG5ldyBTb3J0ZWRTZXQoRG9jUmVmZXJlbmNlLmNvbXBhcmVCeUtleSk7XHJcbiAgICB9XHJcbiAgICBNZW1vcnlNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbikge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLmhpZ2hlc3RBY2tub3dsZWRnZWRCYXRjaElkIDwgdGhpcy5uZXh0QmF0Y2hJZCwgJ2hpZ2hlc3RBY2tub3dsZWRnZWRCYXRjaElkIG11c3QgYmUgbGVzcyB0aGFuIHRoZSBuZXh0QmF0Y2hJZCcpO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeU11dGF0aW9uUXVldWUucHJvdG90eXBlLmNoZWNrRW1wdHkgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUodGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCA9PT0gMCk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5TXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuYWNrbm93bGVkZ2VCYXRjaCA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgYmF0Y2gsIHN0cmVhbVRva2VuKSB7XHJcbiAgICAgICAgdmFyIGJhdGNoSWQgPSBiYXRjaC5iYXRjaElkO1xyXG4gICAgICAgIGFzc2VydChiYXRjaElkID4gdGhpcy5oaWdoZXN0QWNrbm93bGVkZ2VkQmF0Y2hJZCwgJ011dGF0aW9uIGJhdGNoSURzIG11c3QgYmUgYWNrbm93bGVkZ2VkIGluIG9yZGVyJyk7XHJcbiAgICAgICAgdmFyIGJhdGNoSW5kZXggPSB0aGlzLmluZGV4T2ZFeGlzdGluZ0JhdGNoSWQoYmF0Y2hJZCwgJ2Fja25vd2xlZGdlZCcpO1xyXG4gICAgICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBiYXRjaCBpbiB0aGUgcXVldWUgaXMgdGhlIG9uZSB0byBiZSBhY2tub3dsZWRnZWQuXHJcbiAgICAgICAgdmFyIGNoZWNrID0gdGhpcy5tdXRhdGlvblF1ZXVlW2JhdGNoSW5kZXhdO1xyXG4gICAgICAgIGFzc2VydChiYXRjaElkID09PSBjaGVjay5iYXRjaElkLCAnUXVldWUgb3JkZXJpbmcgZmFpbHVyZTogZXhwZWN0ZWQgYmF0Y2ggJyArXHJcbiAgICAgICAgICAgIGJhdGNoSWQgK1xyXG4gICAgICAgICAgICAnLCBnb3QgYmF0Y2ggJyArXHJcbiAgICAgICAgICAgIGNoZWNrLmJhdGNoSWQpO1xyXG4gICAgICAgIGFzc2VydCghY2hlY2suaXNUb21ic3RvbmUoKSwgXCJDYW4ndCBhY2tub3dsZWRnZSBhIHByZXZpb3VzbHkgcmVtb3ZlZCBiYXRjaFwiKTtcclxuICAgICAgICB0aGlzLmhpZ2hlc3RBY2tub3dsZWRnZWRCYXRjaElkID0gYmF0Y2hJZDtcclxuICAgICAgICB0aGlzLmxhc3RTdHJlYW1Ub2tlbiA9IHN0cmVhbVRva2VuO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeU11dGF0aW9uUXVldWUucHJvdG90eXBlLmdldExhc3RTdHJlYW1Ub2tlbiA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLmxhc3RTdHJlYW1Ub2tlbik7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5TXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuc2V0TGFzdFN0cmVhbVRva2VuID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBzdHJlYW1Ub2tlbikge1xyXG4gICAgICAgIHRoaXMubGFzdFN0cmVhbVRva2VuID0gc3RyZWFtVG9rZW47XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5TXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuYWRkTXV0YXRpb25CYXRjaCA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgbG9jYWxXcml0ZVRpbWUsIG11dGF0aW9ucykge1xyXG4gICAgICAgIGFzc2VydChtdXRhdGlvbnMubGVuZ3RoICE9PSAwLCAnTXV0YXRpb24gYmF0Y2hlcyBzaG91bGQgbm90IGJlIGVtcHR5Jyk7XHJcbiAgICAgICAgdmFyIGJhdGNoSWQgPSB0aGlzLm5leHRCYXRjaElkO1xyXG4gICAgICAgIHRoaXMubmV4dEJhdGNoSWQrKztcclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHByaW9yID0gdGhpcy5tdXRhdGlvblF1ZXVlW3RoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgYXNzZXJ0KHByaW9yLmJhdGNoSWQgPCBiYXRjaElkLCAnTXV0YXRpb24gYmF0Y2hJRHMgbXVzdCBiZSBtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcgb3JkZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJhdGNoID0gbmV3IE11dGF0aW9uQmF0Y2goYmF0Y2hJZCwgbG9jYWxXcml0ZVRpbWUsIG11dGF0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlLnB1c2goYmF0Y2gpO1xyXG4gICAgICAgIC8vIFRyYWNrIHJlZmVyZW5jZXMgYnkgZG9jdW1lbnQga2V5LlxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgbXV0YXRpb25zXzEgPSBtdXRhdGlvbnM7IF9pIDwgbXV0YXRpb25zXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBtdXRhdGlvbiA9IG11dGF0aW9uc18xW19pXTtcclxuICAgICAgICAgICAgdGhpcy5iYXRjaGVzQnlEb2N1bWVudEtleSA9IHRoaXMuYmF0Y2hlc0J5RG9jdW1lbnRLZXkuYWRkKG5ldyBEb2NSZWZlcmVuY2UobXV0YXRpb24ua2V5LCBiYXRjaElkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShiYXRjaCk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5TXV0YXRpb25RdWV1ZS5wcm90b3R5cGUubG9va3VwTXV0YXRpb25CYXRjaCA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgYmF0Y2hJZCkge1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSh0aGlzLmZpbmRNdXRhdGlvbkJhdGNoKGJhdGNoSWQpKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5sb29rdXBNdXRhdGlvbktleXMgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGJhdGNoSWQpIHtcclxuICAgICAgICB2YXIgbXV0YXRpb25CYXRjaCA9IHRoaXMuZmluZE11dGF0aW9uQmF0Y2goYmF0Y2hJZCk7XHJcbiAgICAgICAgYXNzZXJ0KG11dGF0aW9uQmF0Y2ggIT0gbnVsbCwgJ0ZhaWxlZCB0byBmaW5kIGxvY2FsIG11dGF0aW9uIGJhdGNoLicpO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSghbXV0YXRpb25CYXRjaC5pc1RvbWJzdG9uZSgpID8gbXV0YXRpb25CYXRjaC5rZXlzKCkgOiBudWxsKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5nZXROZXh0TXV0YXRpb25CYXRjaEFmdGVyQmF0Y2hJZCA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgYmF0Y2hJZCkge1xyXG4gICAgICAgIHZhciBzaXplID0gdGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aDtcclxuICAgICAgICAvLyBBbGwgYmF0Y2hlcyB3aXRoIGJhdGNoSWQgPD0gdGhpcy5oaWdoZXN0QWNrbm93bGVkZ2VkQmF0Y2hJZCBoYXZlIGJlZW5cclxuICAgICAgICAvLyBhY2tub3dsZWRnZWQgc28gdGhlIGZpcnN0IHVuYWNrbm93bGVkZ2VkIGJhdGNoIGFmdGVyIGJhdGNoSUQgd2lsbCBoYXZlIGFcclxuICAgICAgICAvLyBiYXRjaElEIGxhcmdlciB0aGFuIGJvdGggb2YgdGhlc2UgdmFsdWVzLlxyXG4gICAgICAgIHZhciBuZXh0QmF0Y2hJZCA9IE1hdGgubWF4KGJhdGNoSWQsIHRoaXMuaGlnaGVzdEFja25vd2xlZGdlZEJhdGNoSWQpICsgMTtcclxuICAgICAgICAvLyBUaGUgcmVxdWVzdGVkIGJhdGNoSWQgbWF5IHN0aWxsIGJlIG91dCBvZiByYW5nZSBzbyBub3JtYWxpemUgaXQgdG8gdGhlXHJcbiAgICAgICAgLy8gc3RhcnQgb2YgdGhlIHF1ZXVlLlxyXG4gICAgICAgIHZhciByYXdJbmRleCA9IHRoaXMuaW5kZXhPZkJhdGNoSWQobmV4dEJhdGNoSWQpO1xyXG4gICAgICAgIHZhciBpbmRleCA9IHJhd0luZGV4IDwgMCA/IDAgOiByYXdJbmRleDtcclxuICAgICAgICAvLyBGaW5hbGx5IHJldHVybiB0aGUgZmlyc3Qgbm9uLXRvbWJzdG9uZSBiYXRjaC5cclxuICAgICAgICBmb3IgKDsgaW5kZXggPCBzaXplOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIHZhciBiYXRjaCA9IHRoaXMubXV0YXRpb25RdWV1ZVtpbmRleF07XHJcbiAgICAgICAgICAgIGlmICghYmF0Y2guaXNUb21ic3RvbmUoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKGJhdGNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5TXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuZ2V0QWxsTXV0YXRpb25CYXRjaGVzID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHRoaXMuZ2V0QWxsTGl2ZU11dGF0aW9uQmF0Y2hlc0JlZm9yZUluZGV4KHRoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGgpKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5nZXRBbGxNdXRhdGlvbkJhdGNoZXNBZmZlY3RpbmdEb2N1bWVudEtleSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgZG9jdW1lbnRLZXkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzdGFydCA9IG5ldyBEb2NSZWZlcmVuY2UoZG9jdW1lbnRLZXksIDApO1xyXG4gICAgICAgIHZhciBlbmQgPSBuZXcgRG9jUmVmZXJlbmNlKGRvY3VtZW50S2V5LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICB0aGlzLmJhdGNoZXNCeURvY3VtZW50S2V5LmZvckVhY2hJblJhbmdlKFtzdGFydCwgZW5kXSwgZnVuY3Rpb24gKHJlZikge1xyXG4gICAgICAgICAgICBhc3NlcnQoZG9jdW1lbnRLZXkuaXNFcXVhbChyZWYua2V5KSwgXCJTaG91bGQgb25seSBpdGVyYXRlIG92ZXIgYSBzaW5nbGUga2V5J3MgYmF0Y2hlc1wiKTtcclxuICAgICAgICAgICAgdmFyIGJhdGNoID0gX3RoaXMuZmluZE11dGF0aW9uQmF0Y2gocmVmLnRhcmdldE9yQmF0Y2hJZCk7XHJcbiAgICAgICAgICAgIGFzc2VydChiYXRjaCAhPT0gbnVsbCwgJ0JhdGNoZXMgaW4gdGhlIGluZGV4IG11c3QgZXhpc3QgaW4gdGhlIG1haW4gdGFibGUnKTtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYmF0Y2gpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeU11dGF0aW9uUXVldWUucHJvdG90eXBlLmdldEFsbE11dGF0aW9uQmF0Y2hlc0FmZmVjdGluZ0RvY3VtZW50S2V5cyA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgZG9jdW1lbnRLZXlzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdW5pcXVlQmF0Y2hJRHMgPSBuZXcgU29ydGVkU2V0KHByaW1pdGl2ZUNvbXBhcmF0b3IpO1xyXG4gICAgICAgIGRvY3VtZW50S2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChkb2N1bWVudEtleSkge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBuZXcgRG9jUmVmZXJlbmNlKGRvY3VtZW50S2V5LCAwKTtcclxuICAgICAgICAgICAgdmFyIGVuZCA9IG5ldyBEb2NSZWZlcmVuY2UoZG9jdW1lbnRLZXksIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XHJcbiAgICAgICAgICAgIF90aGlzLmJhdGNoZXNCeURvY3VtZW50S2V5LmZvckVhY2hJblJhbmdlKFtzdGFydCwgZW5kXSwgZnVuY3Rpb24gKHJlZikge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRvY3VtZW50S2V5LmlzRXF1YWwocmVmLmtleSksIFwiRm9yIGVhY2gga2V5LCBzaG91bGQgb25seSBpdGVyYXRlIG92ZXIgYSBzaW5nbGUga2V5J3MgYmF0Y2hlc1wiKTtcclxuICAgICAgICAgICAgICAgIHVuaXF1ZUJhdGNoSURzID0gdW5pcXVlQmF0Y2hJRHMuYWRkKHJlZi50YXJnZXRPckJhdGNoSWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUodGhpcy5maW5kTXV0YXRpb25CYXRjaGVzKHVuaXF1ZUJhdGNoSURzKSk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5TXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuZ2V0QWxsTXV0YXRpb25CYXRjaGVzQWZmZWN0aW5nUXVlcnkgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHF1ZXJ5KSB7XHJcbiAgICAgICAgLy8gVXNlIHRoZSBxdWVyeSBwYXRoIGFzIGEgcHJlZml4IGZvciB0ZXN0aW5nIGlmIGEgZG9jdW1lbnQgbWF0Y2hlcyB0aGVcclxuICAgICAgICAvLyBxdWVyeS5cclxuICAgICAgICB2YXIgcHJlZml4ID0gcXVlcnkucGF0aDtcclxuICAgICAgICB2YXIgaW1tZWRpYXRlQ2hpbGRyZW5QYXRoTGVuZ3RoID0gcHJlZml4Lmxlbmd0aCArIDE7XHJcbiAgICAgICAgLy8gQ29uc3RydWN0IGEgZG9jdW1lbnQgcmVmZXJlbmNlIGZvciBhY3R1YWxseSBzY2FubmluZyB0aGUgaW5kZXguIFVubGlrZVxyXG4gICAgICAgIC8vIHRoZSBwcmVmaXggdGhlIGRvY3VtZW50IGtleSBpbiB0aGlzIHJlZmVyZW5jZSBtdXN0IGhhdmUgYW4gZXZlbiBudW1iZXIgb2ZcclxuICAgICAgICAvLyBzZWdtZW50cy4gVGhlIGVtcHR5IHNlZ21lbnQgY2FuIGJlIHVzZWQgYSBzdWZmaXggb2YgdGhlIHF1ZXJ5IHBhdGhcclxuICAgICAgICAvLyBiZWNhdXNlIGl0IHByZWNlZGVzIGFsbCBvdGhlciBzZWdtZW50cyBpbiBhbiBvcmRlcmVkIHRyYXZlcnNhbC5cclxuICAgICAgICB2YXIgc3RhcnRQYXRoID0gcHJlZml4O1xyXG4gICAgICAgIGlmICghRG9jdW1lbnRLZXkuaXNEb2N1bWVudEtleShzdGFydFBhdGgpKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0UGF0aCA9IHN0YXJ0UGF0aC5jaGlsZCgnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdGFydCA9IG5ldyBEb2NSZWZlcmVuY2UobmV3IERvY3VtZW50S2V5KHN0YXJ0UGF0aCksIDApO1xyXG4gICAgICAgIC8vIEZpbmQgdW5pcXVlIGJhdGNoSURzIHJlZmVyZW5jZWQgYnkgYWxsIGRvY3VtZW50cyBwb3RlbnRpYWxseSBtYXRjaGluZyB0aGVcclxuICAgICAgICAvLyBxdWVyeS5cclxuICAgICAgICB2YXIgdW5pcXVlQmF0Y2hJRHMgPSBuZXcgU29ydGVkU2V0KHByaW1pdGl2ZUNvbXBhcmF0b3IpO1xyXG4gICAgICAgIHRoaXMuYmF0Y2hlc0J5RG9jdW1lbnRLZXkuZm9yRWFjaFdoaWxlKGZ1bmN0aW9uIChyZWYpIHtcclxuICAgICAgICAgICAgdmFyIHJvd0tleVBhdGggPSByZWYua2V5LnBhdGg7XHJcbiAgICAgICAgICAgIGlmICghcHJlZml4LmlzUHJlZml4T2Yocm93S2V5UGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFJvd3Mgd2l0aCBkb2N1bWVudCBrZXlzIG1vcmUgdGhhbiBvbmUgc2VnbWVudCBsb25nZXIgdGhhbiB0aGUgcXVlcnlcclxuICAgICAgICAgICAgICAgIC8vIHBhdGggY2FuJ3QgYmUgbWF0Y2hlcy4gRm9yIGV4YW1wbGUsIGEgcXVlcnkgb24gJ3Jvb21zJyBjYW4ndCBtYXRjaFxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGRvY3VtZW50IC9yb29tcy9hYmMvbWVzc2FnZXMveHl4LlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhtY2cpOiB3ZSdsbCBuZWVkIGEgZGlmZmVyZW50IHNjYW5uZXIgd2hlbiB3ZSBpbXBsZW1lbnRcclxuICAgICAgICAgICAgICAgIC8vIGFuY2VzdG9yIHF1ZXJpZXMuXHJcbiAgICAgICAgICAgICAgICBpZiAocm93S2V5UGF0aC5sZW5ndGggPT09IGltbWVkaWF0ZUNoaWxkcmVuUGF0aExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVuaXF1ZUJhdGNoSURzID0gdW5pcXVlQmF0Y2hJRHMuYWRkKHJlZi50YXJnZXRPckJhdGNoSWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBzdGFydCk7XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHRoaXMuZmluZE11dGF0aW9uQmF0Y2hlcyh1bmlxdWVCYXRjaElEcykpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeU11dGF0aW9uUXVldWUucHJvdG90eXBlLmZpbmRNdXRhdGlvbkJhdGNoZXMgPSBmdW5jdGlvbiAoYmF0Y2hJRHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIENvbnN0cnVjdCBhbiBhcnJheSBvZiBtYXRjaGluZyBiYXRjaGVzLCBzb3J0ZWQgYnkgYmF0Y2hJRCB0byBlbnN1cmUgdGhhdFxyXG4gICAgICAgIC8vIG11bHRpcGxlIG11dGF0aW9ucyBhZmZlY3RpbmcgdGhlIHNhbWUgZG9jdW1lbnQga2V5IGFyZSBhcHBsaWVkIGluIG9yZGVyLlxyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBiYXRjaElEcy5mb3JFYWNoKGZ1bmN0aW9uIChiYXRjaElkKSB7XHJcbiAgICAgICAgICAgIHZhciBiYXRjaCA9IF90aGlzLmZpbmRNdXRhdGlvbkJhdGNoKGJhdGNoSWQpO1xyXG4gICAgICAgICAgICBpZiAoYmF0Y2ggIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGJhdGNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5TXV0YXRpb25RdWV1ZS5wcm90b3R5cGUucmVtb3ZlTXV0YXRpb25CYXRjaCA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgYmF0Y2gpIHtcclxuICAgICAgICAvLyBGaW5kIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3QgYmF0Y2ggZm9yIHJlbW92YWwuIFRoaXMgbmVlZCBub3QgYmUgdGhlXHJcbiAgICAgICAgLy8gZmlyc3QgZW50cnkgaW4gdGhlIHF1ZXVlLlxyXG4gICAgICAgIHZhciBiYXRjaEluZGV4ID0gdGhpcy5pbmRleE9mRXhpc3RpbmdCYXRjaElkKGJhdGNoLmJhdGNoSWQsICdyZW1vdmVkJyk7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMubXV0YXRpb25RdWV1ZVtiYXRjaEluZGV4XS5iYXRjaElkID09PSBiYXRjaC5iYXRjaElkLCAnUmVtb3ZlZCBiYXRjaGVzIG11c3QgZXhpc3QgaW4gdGhlIHF1ZXVlJyk7XHJcbiAgICAgICAgLy8gT25seSBhY3R1YWxseSByZW1vdmUgYmF0Y2hlcyBpZiByZW1vdmluZyBhdCB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlLlxyXG4gICAgICAgIC8vIFByZXZpb3VzbHkgcmVqZWN0ZWQgYmF0Y2hlcyBtYXkgaGF2ZSBsZWZ0IHRvbWJzdG9uZXMgaW4gdGhlIHF1ZXVlLCBzb1xyXG4gICAgICAgIC8vIGV4cGFuZCB0aGUgcmVtb3ZhbCByYW5nZSB0byBpbmNsdWRlIGFueSB0b21ic3RvbmVzLlxyXG4gICAgICAgIGlmIChiYXRjaEluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHZhciBlbmRJbmRleCA9IDE7XHJcbiAgICAgICAgICAgIGZvciAoOyBlbmRJbmRleCA8IHRoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGg7IGVuZEluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBiYXRjaF8xID0gdGhpcy5tdXRhdGlvblF1ZXVlW2VuZEluZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmICghYmF0Y2hfMS5pc1RvbWJzdG9uZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlLnNwbGljZSgwLCBlbmRJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWVbYmF0Y2hJbmRleF0gPSB0aGlzLm11dGF0aW9uUXVldWVbYmF0Y2hJbmRleF0udG9Ub21ic3RvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlZmVyZW5jZXMgPSB0aGlzLmJhdGNoZXNCeURvY3VtZW50S2V5O1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBiYXRjaC5tdXRhdGlvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBtdXRhdGlvbiA9IF9hW19pXTtcclxuICAgICAgICAgICAgdmFyIGtleSA9IG11dGF0aW9uLmtleTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FyYmFnZUNvbGxlY3RvciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYXJiYWdlQ29sbGVjdG9yLmFkZFBvdGVudGlhbEdhcmJhZ2VLZXkoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmVmID0gbmV3IERvY1JlZmVyZW5jZShrZXksIGJhdGNoLmJhdGNoSWQpO1xyXG4gICAgICAgICAgICByZWZlcmVuY2VzID0gcmVmZXJlbmNlcy5kZWxldGUocmVmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5iYXRjaGVzQnlEb2N1bWVudEtleSA9IHJlZmVyZW5jZXM7XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5TXV0YXRpb25RdWV1ZS5wcm90b3R5cGUucmVtb3ZlQ2FjaGVkTXV0YXRpb25LZXlzID0gZnVuY3Rpb24gKGJhdGNoSWQpIHtcclxuICAgICAgICAvLyBOby1vcCBzaW5jZSB0aGUgbWVtb3J5IG11dGF0aW9uIHF1ZXVlIGRvZXMgbm90IG1haW50YWluIGEgc2VwYXJhdGUgY2FjaGUuXHJcbiAgICB9O1xyXG4gICAgTWVtb3J5TXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuc2V0R2FyYmFnZUNvbGxlY3RvciA9IGZ1bmN0aW9uIChnYXJiYWdlQ29sbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5nYXJiYWdlQ29sbGVjdG9yID0gZ2FyYmFnZUNvbGxlY3RvcjtcclxuICAgIH07XHJcbiAgICBNZW1vcnlNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5jb250YWluc0tleSA9IGZ1bmN0aW9uICh0eG4sIGtleSkge1xyXG4gICAgICAgIHZhciByZWYgPSBuZXcgRG9jUmVmZXJlbmNlKGtleSwgMCk7XHJcbiAgICAgICAgdmFyIGZpcnN0UmVmID0gdGhpcy5iYXRjaGVzQnlEb2N1bWVudEtleS5maXJzdEFmdGVyT3JFcXVhbChyZWYpO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShrZXkuaXNFcXVhbChmaXJzdFJlZiAmJiBmaXJzdFJlZi5rZXkpKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5wZXJmb3JtQ29uc2lzdGVuY3lDaGVjayA9IGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBhc3NlcnQodGhpcy5iYXRjaGVzQnlEb2N1bWVudEtleS5pc0VtcHR5KCksICdEb2N1bWVudCBsZWFrIC0tIGRldGVjdGVkIGRhbmdsaW5nIG11dGF0aW9uIHJlZmVyZW5jZXMgd2hlbiBxdWV1ZSBpcyBlbXB0eS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHByaXZhdGUgaGVscGVyIHRoYXQgY29sbGVjdHMgYWxsIHRoZSBtdXRhdGlvbnMgYmF0Y2hlcyBpbiB0aGUgcXVldWUgdXAgdG9cclxuICAgICAqIGJ1dCBub3QgaW5jbHVkaW5nIHRoZSBnaXZlbiBlbmRJbmRleC4gQWxsIHRvbWJzdG9uZXMgaW4gdGhlIHF1ZXVlIGFyZVxyXG4gICAgICogZXhjbHVkZWQuXHJcbiAgICAgKi9cclxuICAgIE1lbW9yeU11dGF0aW9uUXVldWUucHJvdG90eXBlLmdldEFsbExpdmVNdXRhdGlvbkJhdGNoZXNCZWZvcmVJbmRleCA9IGZ1bmN0aW9uIChlbmRJbmRleCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuZEluZGV4OyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGJhdGNoID0gdGhpcy5tdXRhdGlvblF1ZXVlW2ldO1xyXG4gICAgICAgICAgICBpZiAoIWJhdGNoLmlzVG9tYnN0b25lKCkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGJhdGNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZSBhbmQgYXNzZXJ0cyB0aGF0XHJcbiAgICAgKiB0aGUgcmVzdWx0aW5nIGluZGV4IGlzIHdpdGhpbiB0aGUgYm91bmRzIG9mIHRoZSBxdWV1ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYmF0Y2hJZCBUaGUgYmF0Y2hJZCB0byBzZWFyY2ggZm9yXHJcbiAgICAgKiBAcGFyYW0gYWN0aW9uIEEgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgY2FsbGVyIGlzIGRvaW5nLCBwaHJhc2VkIGluIHBhc3NpdmVcclxuICAgICAqIGZvcm0gKGUuZy4gXCJhY2tub3dsZWRnZWRcIiBpbiBhIHJvdXRpbmUgdGhhdCBhY2tub3dsZWRnZXMgYmF0Y2hlcykuXHJcbiAgICAgKi9cclxuICAgIE1lbW9yeU11dGF0aW9uUXVldWUucHJvdG90eXBlLmluZGV4T2ZFeGlzdGluZ0JhdGNoSWQgPSBmdW5jdGlvbiAoYmF0Y2hJZCwgYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mQmF0Y2hJZChiYXRjaElkKTtcclxuICAgICAgICBhc3NlcnQoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGgsICdCYXRjaGVzIG11c3QgZXhpc3QgdG8gYmUgJyArIGFjdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZS4gVGhpcyBvcGVyYXRpb25cclxuICAgICAqIGlzIE8oMSkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBUaGUgY29tcHV0ZWQgaW5kZXggb2YgdGhlIGJhdGNoIHdpdGggdGhlIGdpdmVuIGJhdGNoSWQsIGJhc2VkIG9uXHJcbiAgICAgKiB0aGUgc3RhdGUgb2YgdGhlIHF1ZXVlLiBOb3RlIHRoaXMgaW5kZXggY2FuIGJlIG5lZ2F0aXZlIGlmIHRoZSByZXF1ZXN0ZWRcclxuICAgICAqIGJhdGNoSWQgaGFzIGFscmVhZHkgYmVlbiByZW12b2VkIGZyb20gdGhlIHF1ZXVlIG9yIHBhc3QgdGhlIGVuZCBvZiB0aGVcclxuICAgICAqIHF1ZXVlIGlmIHRoZSBiYXRjaElkIGlzIGxhcmdlciB0aGFuIHRoZSBsYXN0IGFkZGVkIGJhdGNoLlxyXG4gICAgICovXHJcbiAgICBNZW1vcnlNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5pbmRleE9mQmF0Y2hJZCA9IGZ1bmN0aW9uIChiYXRjaElkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubXV0YXRpb25RdWV1ZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgLy8gQXMgYW4gaW5kZXggdGhpcyBpcyBwYXN0IHRoZSBlbmQgb2YgdGhlIHF1ZXVlXHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBFeGFtaW5lIHRoZSBmcm9udCBvZiB0aGUgcXVldWUgdG8gZmlndXJlIG91dCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZVxyXG4gICAgICAgIC8vIGJhdGNoSWQgYW5kIGluZGV4ZXMgaW4gdGhlIGFycmF5LiBOb3RlIHRoYXQgc2luY2UgdGhlIHF1ZXVlIGlzIG9yZGVyZWRcclxuICAgICAgICAvLyBieSBiYXRjaElkLCBpZiB0aGUgZmlyc3QgYmF0Y2ggaGFzIGEgbGFyZ2VyIGJhdGNoSWQgdGhlbiB0aGUgcmVxdWVzdGVkXHJcbiAgICAgICAgLy8gYmF0Y2hJZCBkb2Vzbid0IGV4aXN0IGluIHRoZSBxdWV1ZS5cclxuICAgICAgICB2YXIgZmlyc3RCYXRjaElkID0gdGhpcy5tdXRhdGlvblF1ZXVlWzBdLmJhdGNoSWQ7XHJcbiAgICAgICAgcmV0dXJuIGJhdGNoSWQgLSBmaXJzdEJhdGNoSWQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHZlcnNpb24gb2YgbG9va3VwTXV0YXRpb25CYXRjaCB0aGF0IGRvZXNuJ3QgcmV0dXJuIGEgcHJvbWlzZSwgdGhpcyBtYWtlc1xyXG4gICAgICogb3RoZXIgZnVuY3Rpb25zIHRoYXQgdXNlcyB0aGlzIGNvZGUgZWFzaWVyIHRvIHJlYWQgYW5kIG1vcmUgZWZmaWNlbnQuXHJcbiAgICAgKi9cclxuICAgIE1lbW9yeU11dGF0aW9uUXVldWUucHJvdG90eXBlLmZpbmRNdXRhdGlvbkJhdGNoID0gZnVuY3Rpb24gKGJhdGNoSWQpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2ZCYXRjaElkKGJhdGNoSWQpO1xyXG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5tdXRhdGlvblF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJhdGNoID0gdGhpcy5tdXRhdGlvblF1ZXVlW2luZGV4XTtcclxuICAgICAgICBhc3NlcnQoYmF0Y2guYmF0Y2hJZCA9PT0gYmF0Y2hJZCwgJ0lmIGZvdW5kIGJhdGNoIG11c3QgbWF0Y2gnKTtcclxuICAgICAgICByZXR1cm4gYmF0Y2guaXNUb21ic3RvbmUoKSA/IG51bGwgOiBiYXRjaDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTWVtb3J5TXV0YXRpb25RdWV1ZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBIG1hcCBpbXBsZW1lbnRhdGlvbiB0aGF0IHVzZXMgb2JqZWN0cyBhcyBrZXlzLiBPYmplY3RzIG11c3QgaW1wbGVtZW50IHRoZVxyXG4gKiBFcXVhdGFibGUgaW50ZXJmYWNlIGFuZCBtdXN0IGJlIGltbXV0YWJsZS4gRW50cmllcyBpbiB0aGUgbWFwIGFyZSBzdG9yZWRcclxuICogdG9nZXRoZXIgd2l0aCB0aGUga2V5IGJlaW5nIHByb2R1Y2VkIGZyb20gdGhlIG1hcEtleUZuLiBUaGlzIG1hcFxyXG4gKiBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgY29sbGlzaW9ucyBvZiBrZXlzLlxyXG4gKi9cclxudmFyIE9iamVjdE1hcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9iamVjdE1hcChtYXBLZXlGbikge1xyXG4gICAgICAgIHRoaXMubWFwS2V5Rm4gPSBtYXBLZXlGbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgaW5uZXIgbWFwIGZvciBhIGtleSAtPiB2YWx1ZSBwYWlyLiBEdWUgdG8gdGhlIHBvc3NpYmlsaXR5IG9mXHJcbiAgICAgICAgICogY29sbGlzaW9ucyB3ZSBrZWVwIGEgbGlzdCBvZiBlbnRyaWVzIHRoYXQgd2UgZG8gYSBsaW5lYXIgc2VhcmNoIHRocm91Z2hcclxuICAgICAgICAgKiB0byBmaW5kIGFuIGFjdHVhbCBtYXRjaC4gTm90ZSB0aGF0IGNvbGxpc2lvbnMgc2hvdWxkIGJlIHJhcmUsIHNvIHdlIHN0aWxsXHJcbiAgICAgICAgICogZXhwZWN0IG5lYXIgY29uc3RhbnQgdGltZSBsb29rdXBzIGluIHByYWN0aWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaW5uZXIgPSB7fTtcclxuICAgIH1cclxuICAgIC8qKiBHZXQgYSB2YWx1ZSBmb3IgdGhpcyBrZXksIG9yIHVuZGVmaW5lZCBpZiBpdCBkb2VzIG5vdCBleGlzdC4gKi9cclxuICAgIE9iamVjdE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBpZCA9IHRoaXMubWFwS2V5Rm4oa2V5KTtcclxuICAgICAgICB2YXIgbWF0Y2hlcyA9IHRoaXMuaW5uZXJbaWRdO1xyXG4gICAgICAgIGlmIChtYXRjaGVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtYXRjaGVzXzEgPSBtYXRjaGVzOyBfaSA8IG1hdGNoZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIF9hID0gbWF0Y2hlc18xW19pXSwgb3RoZXJLZXkgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcclxuICAgICAgICAgICAgaWYgKG90aGVyS2V5LmlzRXF1YWwoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0TWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSkgIT09IHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICAvKiogUHV0IHRoaXMga2V5IGFuZCB2YWx1ZSBpbiB0aGUgbWFwLiAqL1xyXG4gICAgT2JqZWN0TWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBpZCA9IHRoaXMubWFwS2V5Rm4oa2V5KTtcclxuICAgICAgICB2YXIgbWF0Y2hlcyA9IHRoaXMuaW5uZXJbaWRdO1xyXG4gICAgICAgIGlmIChtYXRjaGVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pbm5lcltpZF0gPSBbW2tleSwgdmFsdWVdXTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG1hdGNoZXNbaV1bMF0uaXNFcXVhbChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzW2ldID0gW2tleSwgdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1hdGNoZXMucHVzaChba2V5LCB2YWx1ZV0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIHRoaXMga2V5IGZyb20gdGhlIG1hcC4gUmV0dXJucyBhIGJvb2xlYW4gaWYgYW55dGhpbmcgd2FzIGRlbGV0ZWQuXHJcbiAgICAgKi9cclxuICAgIE9iamVjdE1hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBpZCA9IHRoaXMubWFwS2V5Rm4oa2V5KTtcclxuICAgICAgICB2YXIgbWF0Y2hlcyA9IHRoaXMuaW5uZXJbaWRdO1xyXG4gICAgICAgIGlmIChtYXRjaGVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG1hdGNoZXNbaV1bMF0uaXNFcXVhbChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5pbm5lcltpZF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBPYmplY3RNYXAucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICBmb3JFYWNoKHRoaXMuaW5uZXIsIGZ1bmN0aW9uIChfLCBlbnRyaWVzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZW50cmllc18xID0gZW50cmllczsgX2kgPCBlbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBlbnRyaWVzXzFbX2ldLCBrID0gX2FbMF0sIHYgPSBfYVsxXTtcclxuICAgICAgICAgICAgICAgIGZuKGssIHYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0TWFwLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBpc0VtcHR5KHRoaXMuaW5uZXIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPYmplY3RNYXA7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgTWVtb3J5UXVlcnlDYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1lbW9yeVF1ZXJ5Q2FjaGUoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFwcyBhIHF1ZXJ5IHRvIHRoZSBkYXRhIGFib3V0IHRoYXQgcXVlcnlcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBuZXcgT2JqZWN0TWFwKGZ1bmN0aW9uIChxKSB7IHJldHVybiBxLmNhbm9uaWNhbElkKCk7IH0pO1xyXG4gICAgICAgIC8qKiBUaGUgbGFzdCByZWNlaXZlZCBzbmFwc2hvdCB2ZXJzaW9uLiAqL1xyXG4gICAgICAgIHRoaXMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiA9IFNuYXBzaG90VmVyc2lvbi5NSU47XHJcbiAgICAgICAgLyoqIFRoZSBoaWdoZXN0IG51bWJlcmVkIHRhcmdldCBJRCBlbmNvdW50ZXJlZC4gKi9cclxuICAgICAgICB0aGlzLmhpZ2hlc3RUYXJnZXRJZCA9IDA7XHJcbiAgICAgICAgLyoqIFRoZSBoaWdoZXN0IHNlcXVlbmNlIG51bWJlciBlbmNvdW50ZXJlZC4gKi9cclxuICAgICAgICB0aGlzLmhpZ2hlc3RTZXF1ZW5jZU51bWJlciA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBvcmRlcmVkIGJpZGlyZWN0aW9uYWwgbWFwcGluZyBiZXR3ZWVuIGRvY3VtZW50cyBhbmQgdGhlIHJlbW90ZSB0YXJnZXRcclxuICAgICAgICAgKiBJRHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzID0gbmV3IFJlZmVyZW5jZVNldCgpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0Q291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0SWRHZW5lcmF0b3IgPSBUYXJnZXRJZEdlbmVyYXRvci5mb3JRdWVyeUNhY2hlKCk7XHJcbiAgICB9XHJcbiAgICBNZW1vcnlRdWVyeUNhY2hlLnByb3RvdHlwZS5nZXRMYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHRoaXMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbik7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5UXVlcnlDYWNoZS5wcm90b3R5cGUuZ2V0SGlnaGVzdFNlcXVlbmNlTnVtYmVyID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKHRoaXMuaGlnaGVzdFNlcXVlbmNlTnVtYmVyKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlRdWVyeUNhY2hlLnByb3RvdHlwZS5hbGxvY2F0ZVRhcmdldElkID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG5leHRUYXJnZXRJZCA9IHRoaXMudGFyZ2V0SWRHZW5lcmF0b3IuYWZ0ZXIodGhpcy5oaWdoZXN0VGFyZ2V0SWQpO1xyXG4gICAgICAgIHRoaXMuaGlnaGVzdFRhcmdldElkID0gbmV4dFRhcmdldElkO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShuZXh0VGFyZ2V0SWQpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVF1ZXJ5Q2FjaGUucHJvdG90eXBlLnNldFRhcmdldHNNZXRhZGF0YSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyLCBsYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKSB7XHJcbiAgICAgICAgaWYgKGxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uID0gbGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA+IHRoaXMuaGlnaGVzdFNlcXVlbmNlTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlnaGVzdFNlcXVlbmNlTnVtYmVyID0gaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlRdWVyeUNhY2hlLnByb3RvdHlwZS5zYXZlUXVlcnlEYXRhID0gZnVuY3Rpb24gKHF1ZXJ5RGF0YSkge1xyXG4gICAgICAgIHRoaXMucXVlcmllcy5zZXQocXVlcnlEYXRhLnF1ZXJ5LCBxdWVyeURhdGEpO1xyXG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHF1ZXJ5RGF0YS50YXJnZXRJZDtcclxuICAgICAgICBpZiAodGFyZ2V0SWQgPiB0aGlzLmhpZ2hlc3RUYXJnZXRJZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhpZ2hlc3RUYXJnZXRJZCA9IHRhcmdldElkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocXVlcnlEYXRhLnNlcXVlbmNlTnVtYmVyID4gdGhpcy5oaWdoZXN0U2VxdWVuY2VOdW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWdoZXN0U2VxdWVuY2VOdW1iZXIgPSBxdWVyeURhdGEuc2VxdWVuY2VOdW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1lbW9yeVF1ZXJ5Q2FjaGUucHJvdG90eXBlLmFkZFF1ZXJ5RGF0YSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcXVlcnlEYXRhKSB7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLnF1ZXJpZXMuaGFzKHF1ZXJ5RGF0YS5xdWVyeSksICdBZGRpbmcgYSBxdWVyeSB0aGF0IGFscmVhZHkgZXhpc3RzJyk7XHJcbiAgICAgICAgdGhpcy5zYXZlUXVlcnlEYXRhKHF1ZXJ5RGF0YSk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRDb3VudCArPSAxO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVF1ZXJ5Q2FjaGUucHJvdG90eXBlLnVwZGF0ZVF1ZXJ5RGF0YSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcXVlcnlEYXRhKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMucXVlcmllcy5oYXMocXVlcnlEYXRhLnF1ZXJ5KSwgJ1VwZGF0aW5nIGEgbm9uLWV4aXN0ZW50IHF1ZXJ5Jyk7XHJcbiAgICAgICAgdGhpcy5zYXZlUXVlcnlEYXRhKHF1ZXJ5RGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5UXVlcnlDYWNoZS5wcm90b3R5cGUucmVtb3ZlUXVlcnlEYXRhID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBxdWVyeURhdGEpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy50YXJnZXRDb3VudCA+IDAsICdSZW1vdmluZyBhIHRhcmdldCBmcm9tIGFuIGVtcHR5IGNhY2hlJyk7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMucXVlcmllcy5oYXMocXVlcnlEYXRhLnF1ZXJ5KSwgJ1JlbW92aW5nIGEgbm9uLWV4aXN0ZW50IHRhcmdldCBmcm9tIHRoZSBjYWNoZScpO1xyXG4gICAgICAgIHRoaXMucXVlcmllcy5kZWxldGUocXVlcnlEYXRhLnF1ZXJ5KTtcclxuICAgICAgICB0aGlzLnJlZmVyZW5jZXMucmVtb3ZlUmVmZXJlbmNlc0ZvcklkKHF1ZXJ5RGF0YS50YXJnZXRJZCk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRDb3VudCAtPSAxO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVF1ZXJ5Q2FjaGUucHJvdG90eXBlLmdldFF1ZXJ5Q291bnQgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUodGhpcy50YXJnZXRDb3VudCk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5UXVlcnlDYWNoZS5wcm90b3R5cGUuZ2V0UXVlcnlEYXRhID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBxdWVyeSkge1xyXG4gICAgICAgIHZhciBxdWVyeURhdGEgPSB0aGlzLnF1ZXJpZXMuZ2V0KHF1ZXJ5KSB8fCBudWxsO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShxdWVyeURhdGEpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVF1ZXJ5Q2FjaGUucHJvdG90eXBlLmdldFF1ZXJ5RGF0YUZvclRhcmdldCA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgdGFyZ2V0SWQpIHtcclxuICAgICAgICAvLyBUaGlzIG1ldGhvZCBpcyBvbmx5IG5lZWRlZCBmb3IgbXVsdGktdGFiIGFuZCB3ZSBjYW4ndCBpbXBsZW1lbnQgaXRcclxuICAgICAgICAvLyBlZmZpY2llbnRseSB3aXRob3V0IGFkZGl0aW9uYWwgZGF0YSBzdHJ1Y3R1cmVzLlxyXG4gICAgICAgIHJldHVybiBmYWlsKCdOb3QgeWV0IGltcGxlbWVudGVkLicpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVF1ZXJ5Q2FjaGUucHJvdG90eXBlLmFkZE1hdGNoaW5nS2V5cyA9IGZ1bmN0aW9uICh0eG4sIGtleXMsIHRhcmdldElkKSB7XHJcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzLmFkZFJlZmVyZW5jZXMoa2V5cywgdGFyZ2V0SWQpO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVF1ZXJ5Q2FjaGUucHJvdG90eXBlLnJlbW92ZU1hdGNoaW5nS2V5cyA9IGZ1bmN0aW9uICh0eG4sIGtleXMsIHRhcmdldElkKSB7XHJcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzLnJlbW92ZVJlZmVyZW5jZXMoa2V5cywgdGFyZ2V0SWQpO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVF1ZXJ5Q2FjaGUucHJvdG90eXBlLnJlbW92ZU1hdGNoaW5nS2V5c0ZvclRhcmdldElkID0gZnVuY3Rpb24gKHR4biwgdGFyZ2V0SWQpIHtcclxuICAgICAgICB0aGlzLnJlZmVyZW5jZXMucmVtb3ZlUmVmZXJlbmNlc0ZvcklkKHRhcmdldElkKTtcclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlRdWVyeUNhY2hlLnByb3RvdHlwZS5nZXRNYXRjaGluZ0tleXNGb3JUYXJnZXRJZCA9IGZ1bmN0aW9uICh0eG4sIHRhcmdldElkKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoaW5nS2V5cyA9IHRoaXMucmVmZXJlbmNlcy5yZWZlcmVuY2VzRm9ySWQodGFyZ2V0SWQpO1xyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShtYXRjaGluZ0tleXMpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVF1ZXJ5Q2FjaGUucHJvdG90eXBlLnNldEdhcmJhZ2VDb2xsZWN0b3IgPSBmdW5jdGlvbiAoZ2MpIHtcclxuICAgICAgICB0aGlzLnJlZmVyZW5jZXMuc2V0R2FyYmFnZUNvbGxlY3RvcihnYyk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5UXVlcnlDYWNoZS5wcm90b3R5cGUuY29udGFpbnNLZXkgPSBmdW5jdGlvbiAodHhuLCBrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWZlcmVuY2VzLmNvbnRhaW5zS2V5KHR4biwga2V5KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTWVtb3J5UXVlcnlDYWNoZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTWVtb3J5UmVtb3RlRG9jdW1lbnRDYWNoZSgpIHtcclxuICAgICAgICB0aGlzLmRvY3MgPSBtYXliZURvY3VtZW50TWFwKCk7XHJcbiAgICAgICAgdGhpcy5uZXdEb2N1bWVudENoYW5nZXMgPSBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgfVxyXG4gICAgTWVtb3J5UmVtb3RlRG9jdW1lbnRDYWNoZS5wcm90b3R5cGUuYWRkRW50cmllcyA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgbWF5YmVEb2N1bWVudHMpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG1heWJlRG9jdW1lbnRzXzEgPSBtYXliZURvY3VtZW50czsgX2kgPCBtYXliZURvY3VtZW50c18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgbWF5YmVEb2N1bWVudCA9IG1heWJlRG9jdW1lbnRzXzFbX2ldO1xyXG4gICAgICAgICAgICB0aGlzLmRvY3MgPSB0aGlzLmRvY3MuaW5zZXJ0KG1heWJlRG9jdW1lbnQua2V5LCBtYXliZURvY3VtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5uZXdEb2N1bWVudENoYW5nZXMgPSB0aGlzLm5ld0RvY3VtZW50Q2hhbmdlcy5hZGQobWF5YmVEb2N1bWVudC5rZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlLnByb3RvdHlwZS5yZW1vdmVFbnRyeSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgZG9jdW1lbnRLZXkpIHtcclxuICAgICAgICB0aGlzLmRvY3MgPSB0aGlzLmRvY3MucmVtb3ZlKGRvY3VtZW50S2V5KTtcclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlLnByb3RvdHlwZS5nZXRFbnRyeSA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgZG9jdW1lbnRLZXkpIHtcclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUodGhpcy5kb2NzLmdldChkb2N1bWVudEtleSkpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVJlbW90ZURvY3VtZW50Q2FjaGUucHJvdG90eXBlLmdldERvY3VtZW50c01hdGNoaW5nUXVlcnkgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBkb2N1bWVudE1hcCgpO1xyXG4gICAgICAgIC8vIERvY3VtZW50cyBhcmUgb3JkZXJlZCBieSBrZXksIHNvIHdlIGNhbiB1c2UgYSBwcmVmaXggc2NhbiB0byBuYXJyb3cgZG93blxyXG4gICAgICAgIC8vIHRoZSBkb2N1bWVudHMgd2UgbmVlZCB0byBtYXRjaCB0aGUgcXVlcnkgYWdhaW5zdC5cclxuICAgICAgICB2YXIgcHJlZml4ID0gbmV3IERvY3VtZW50S2V5KHF1ZXJ5LnBhdGguY2hpbGQoJycpKTtcclxuICAgICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLmRvY3MuZ2V0SXRlcmF0b3JGcm9tKHByZWZpeCk7XHJcbiAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLmhhc05leHQoKSkge1xyXG4gICAgICAgICAgICB2YXIgX2EgPSBpdGVyYXRvci5nZXROZXh0KCksIGtleSA9IF9hLmtleSwgbWF5YmVEb2MgPSBfYS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKCFxdWVyeS5wYXRoLmlzUHJlZml4T2Yoa2V5LnBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobWF5YmVEb2MgaW5zdGFuY2VvZiBEb2N1bWVudCAmJiBxdWVyeS5tYXRjaGVzKG1heWJlRG9jKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuaW5zZXJ0KG1heWJlRG9jLmtleSwgbWF5YmVEb2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQZXJzaXN0ZW5jZVByb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlLnByb3RvdHlwZS5nZXROZXdEb2N1bWVudENoYW5nZXMgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjaGFuZ2VkRG9jcyA9IG1heWJlRG9jdW1lbnRNYXAoKTtcclxuICAgICAgICB0aGlzLm5ld0RvY3VtZW50Q2hhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgY2hhbmdlZERvY3MgPSBjaGFuZ2VkRG9jcy5pbnNlcnQoa2V5LCBfdGhpcy5kb2NzLmdldChrZXkpIHx8XHJcbiAgICAgICAgICAgICAgICBuZXcgTm9Eb2N1bWVudChrZXksIFNuYXBzaG90VmVyc2lvbi5mb3JEZWxldGVkRG9jKCkpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm5ld0RvY3VtZW50Q2hhbmdlcyA9IGRvY3VtZW50S2V5U2V0KCk7XHJcbiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbmNlUHJvbWlzZS5yZXNvbHZlKGNoYW5nZWREb2NzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTWVtb3J5UmVtb3RlRG9jdW1lbnRDYWNoZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBMT0dfVEFHJDQgPSAnTWVtb3J5UGVyc2lzdGVuY2UnO1xyXG4vKipcclxuICogQSBtZW1vcnktYmFja2VkIGluc3RhbmNlIG9mIFBlcnNpc3RlbmNlLiBEYXRhIGlzIHN0b3JlZCBvbmx5IGluIFJBTSBhbmRcclxuICogbm90IHBlcnNpc3RlZCBhY3Jvc3Mgc2Vzc2lvbnMuXHJcbiAqL1xyXG52YXIgTWVtb3J5UGVyc2lzdGVuY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZW1vcnlQZXJzaXN0ZW5jZShjbGllbnRJZCkge1xyXG4gICAgICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBOb3RlIHRoYXQgdGhlc2UgYXJlIHJldGFpbmVkIGhlcmUgdG8gbWFrZSBpdCBlYXNpZXIgdG8gd3JpdGUgdGVzdHNcclxuICAgICAgICAgKiBhZmZlY3RpbmcgYm90aCB0aGUgaW4tbWVtb3J5IGFuZCBJbmRleGVkREItYmFja2VkIHBlcnNpc3RlbmNlIGxheWVycy4gVGVzdHNcclxuICAgICAgICAgKiBjYW4gY3JlYXRlIGEgbmV3IExvY2FsU3RvcmUgd3JhcHBpbmcgdGhpcyBQZXJzaXN0ZW5jZSBpbnN0YW5jZSBhbmQgdGhpc1xyXG4gICAgICAgICAqIHdpbGwgbWFrZSB0aGUgaW4tbWVtb3J5IHBlcnNpc3RlbmNlIGxheWVyIGJlaGF2ZSBhcyBpZiBpdCB3ZXJlIGFjdHVhbGx5XHJcbiAgICAgICAgICogcGVyc2lzdGluZyB2YWx1ZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlcyA9IHt9O1xyXG4gICAgICAgIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZSA9IG5ldyBNZW1vcnlSZW1vdGVEb2N1bWVudENhY2hlKCk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNhY2hlID0gbmV3IE1lbW9yeVF1ZXJ5Q2FjaGUoKTtcclxuICAgICAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBNZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUuc2h1dGRvd24gPSBmdW5jdGlvbiAoZGVsZXRlRGF0YSkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIC8vIE5vIGR1cmFibGUgc3RhdGUgdG8gZW5zdXJlIGlzIGNsb3NlZCBvbiBzaHV0ZG93bi5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZSwgXCJzdGFydGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0ZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBNZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUuZ2V0QWN0aXZlQ2xpZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgW3RoaXMuY2xpZW50SWRdXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLnNldFByaW1hcnlTdGF0ZUxpc3RlbmVyID0gZnVuY3Rpb24gKHByaW1hcnlTdGF0ZUxpc3RlbmVyKSB7XHJcbiAgICAgICAgLy8gQWxsIGNsaWVudHMgdXNpbmcgbWVtb3J5IHBlcnNpc3RlbmNlIGFjdCBhcyBwcmltYXJ5LlxyXG4gICAgICAgIHJldHVybiBwcmltYXJ5U3RhdGVMaXN0ZW5lcih0cnVlKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUuc2V0TmV0d29ya0VuYWJsZWQgPSBmdW5jdGlvbiAobmV0d29ya0VuYWJsZWQpIHtcclxuICAgICAgICAvLyBObyBvcC5cclxuICAgIH07XHJcbiAgICBNZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUuZ2V0TXV0YXRpb25RdWV1ZSA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgdmFyIHF1ZXVlID0gdGhpcy5tdXRhdGlvblF1ZXVlc1t1c2VyLnRvS2V5KCldO1xyXG4gICAgICAgIGlmICghcXVldWUpIHtcclxuICAgICAgICAgICAgcXVldWUgPSBuZXcgTWVtb3J5TXV0YXRpb25RdWV1ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWVzW3VzZXIudG9LZXkoKV0gPSBxdWV1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHF1ZXVlO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVBlcnNpc3RlbmNlLnByb3RvdHlwZS5nZXRRdWVyeUNhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5Q2FjaGU7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5UGVyc2lzdGVuY2UucHJvdG90eXBlLmdldFJlbW90ZURvY3VtZW50Q2FjaGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3RlRG9jdW1lbnRDYWNoZTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlQZXJzaXN0ZW5jZS5wcm90b3R5cGUucnVuVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uLCBtb2RlLCB0cmFuc2FjdGlvbk9wZXJhdGlvbikge1xyXG4gICAgICAgIGRlYnVnKExPR19UQUckNCwgJ1N0YXJ0aW5nIHRyYW5zYWN0aW9uOicsIGFjdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uT3BlcmF0aW9uKG5ldyBNZW1vcnlUcmFuc2FjdGlvbihMaXN0ZW5TZXF1ZW5jZS5JTlZBTElEKSkudG9Qcm9taXNlKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1lbW9yeVBlcnNpc3RlbmNlO1xyXG59KCkpO1xyXG4vKipcclxuICogTWVtb3J5IHBlcnNpc3RlbmNlIGlzIG5vdCBhY3R1YWxseSB0cmFuc2FjdGlvbmFsLCBidXQgZnV0dXJlIGltcGxlbWVudGF0aW9uc1xyXG4gKiBtYXkgaGF2ZSB0cmFuc2FjdGlvbi1zY29wZWQgc3RhdGUuXHJcbiAqL1xyXG52YXIgTWVtb3J5VHJhbnNhY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZW1vcnlUcmFuc2FjdGlvbihjdXJyZW50U2VxdWVuY2VOdW1iZXIpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZU51bWJlciA9IGN1cnJlbnRTZXF1ZW5jZU51bWJlcjtcclxuICAgIH1cclxuICAgIHJldHVybiBNZW1vcnlUcmFuc2FjdGlvbjtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBIGdhcmJhZ2UgY29sbGVjdG9yIGltcGxlbWVudGF0aW9uIHRoYXQgZG9lcyBhYnNvbHV0ZWx5IG5vdGhpbmcuIEl0IGlnbm9yZXNcclxuICogYWxsIGFkZEdhcmJhZ2VTb3VyY2UgYW5kIGFkZFBvdGVudGlhbEdhcmJhZ2VLZXkgbWVzc2FnZXMgYW5kIGFuZCBuZXZlclxyXG4gKiBwcm9kdWNlcyBhbnkgZ2FyYmFnZS5cclxuICovXHJcbnZhciBOb09wR2FyYmFnZUNvbGxlY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5vT3BHYXJiYWdlQ29sbGVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaXNFYWdlciA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgTm9PcEdhcmJhZ2VDb2xsZWN0b3IucHJvdG90eXBlLmFkZEdhcmJhZ2VTb3VyY2UgPSBmdW5jdGlvbiAoZ2FyYmFnZVNvdXJjZSkge1xyXG4gICAgICAgIC8vIE5vdCB0cmFja2luZyBnYXJiYWdlIHNvIGRvbid0IHRyYWNrIHNvdXJjZXMuXHJcbiAgICB9O1xyXG4gICAgTm9PcEdhcmJhZ2VDb2xsZWN0b3IucHJvdG90eXBlLnJlbW92ZUdhcmJhZ2VTb3VyY2UgPSBmdW5jdGlvbiAoZ2FyYmFnZVNvdXJjZSkge1xyXG4gICAgICAgIC8vIE5vdCB0cmFja2luZyBnYXJiYWdlIHNvIGRvbid0IHRyYWNrIHNvdXJjZXMuXHJcbiAgICB9O1xyXG4gICAgTm9PcEdhcmJhZ2VDb2xsZWN0b3IucHJvdG90eXBlLmFkZFBvdGVudGlhbEdhcmJhZ2VLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgLy8gTm90IHRyYWNraW5nIGdhcmJhZ2Ugc28gaWdub3JlLlxyXG4gICAgfTtcclxuICAgIE5vT3BHYXJiYWdlQ29sbGVjdG9yLnByb3RvdHlwZS5jb2xsZWN0R2FyYmFnZSA9IGZ1bmN0aW9uICh0eG4pIHtcclxuICAgICAgICByZXR1cm4gUGVyc2lzdGVuY2VQcm9taXNlLnJlc29sdmUoZG9jdW1lbnRLZXlTZXQoKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE5vT3BHYXJiYWdlQ29sbGVjdG9yO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIExPR19UQUckNSA9ICdFeHBvbmVudGlhbEJhY2tvZmYnO1xyXG4vKipcclxuICogQSBoZWxwZXIgZm9yIHJ1bm5pbmcgZGVsYXllZCB0YXNrcyBmb2xsb3dpbmcgYW4gZXhwb25lbnRpYWwgYmFja29mZiBjdXJ2ZVxyXG4gKiBiZXR3ZWVuIGF0dGVtcHRzLlxyXG4gKlxyXG4gKiBFYWNoIGRlbGF5IGlzIG1hZGUgdXAgb2YgYSBcImJhc2VcIiBkZWxheSB3aGljaCBmb2xsb3dzIHRoZSBleHBvbmVudGlhbFxyXG4gKiBiYWNrb2ZmIGN1cnZlLCBhbmQgYSArLy0gNTAlIFwiaml0dGVyXCIgdGhhdCBpcyBjYWxjdWxhdGVkIGFuZCBhZGRlZCB0byB0aGVcclxuICogYmFzZSBkZWxheS4gVGhpcyBwcmV2ZW50cyBjbGllbnRzIGZyb20gYWNjaWRlbnRhbGx5IHN5bmNocm9uaXppbmcgdGhlaXJcclxuICogZGVsYXlzIGNhdXNpbmcgc3Bpa2VzIG9mIGxvYWQgdG8gdGhlIGJhY2tlbmQuXHJcbiAqL1xyXG52YXIgRXhwb25lbnRpYWxCYWNrb2ZmID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXhwb25lbnRpYWxCYWNrb2ZmKFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgQXN5bmNRdWV1ZSB0byBydW4gYmFja29mZiBvcGVyYXRpb25zIG9uLlxyXG4gICAgICovXHJcbiAgICBxdWV1ZSwgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBJRCB0byB1c2Ugd2hlbiBzY2hlZHVsaW5nIGJhY2tvZmYgb3BlcmF0aW9ucyBvbiB0aGUgQXN5bmNRdWV1ZS5cclxuICAgICAqL1xyXG4gICAgdGltZXJJZCwgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpbml0aWFsIGRlbGF5ICh1c2VkIGFzIHRoZSBiYXNlIGRlbGF5IG9uIHRoZSBmaXJzdCByZXRyeSBhdHRlbXB0KS5cclxuICAgICAqIE5vdGUgdGhhdCBqaXR0ZXIgd2lsbCBzdGlsbCBiZSBhcHBsaWVkLCBzbyB0aGUgYWN0dWFsIGRlbGF5IGNvdWxkIGJlIGFzXHJcbiAgICAgKiBsaXR0bGUgYXMgMC41KmluaXRpYWxEZWxheU1zLlxyXG4gICAgICovXHJcbiAgICBpbml0aWFsRGVsYXlNcywgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtdWx0aXBsaWVyIHRvIHVzZSB0byBkZXRlcm1pbmUgdGhlIGV4dGVuZGVkIGJhc2UgZGVsYXkgYWZ0ZXIgZWFjaFxyXG4gICAgICogYXR0ZW1wdC5cclxuICAgICAqL1xyXG4gICAgYmFja29mZkZhY3RvciwgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtYXhpbXVtIGJhc2UgZGVsYXkgYWZ0ZXIgd2hpY2ggbm8gZnVydGhlciBiYWNrb2ZmIGlzIHBlcmZvcm1lZC5cclxuICAgICAqIE5vdGUgdGhhdCBqaXR0ZXIgd2lsbCBzdGlsbCBiZSBhcHBsaWVkLCBzbyB0aGUgYWN0dWFsIGRlbGF5IGNvdWxkIGJlIGFzXHJcbiAgICAgKiBtdWNoIGFzIDEuNSptYXhEZWxheU1zLlxyXG4gICAgICovXHJcbiAgICBtYXhEZWxheU1zKSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IHF1ZXVlO1xyXG4gICAgICAgIHRoaXMudGltZXJJZCA9IHRpbWVySWQ7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsRGVsYXlNcyA9IGluaXRpYWxEZWxheU1zO1xyXG4gICAgICAgIHRoaXMuYmFja29mZkZhY3RvciA9IGJhY2tvZmZGYWN0b3I7XHJcbiAgICAgICAgdGhpcy5tYXhEZWxheU1zID0gbWF4RGVsYXlNcztcclxuICAgICAgICB0aGlzLnRpbWVyUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgLyoqIFRoZSBsYXN0IGJhY2tvZmYgYXR0ZW1wdCwgYXMgZXBvY2ggbWlsbGlzZWNvbmRzLiAqL1xyXG4gICAgICAgIHRoaXMubGFzdEF0dGVtcHRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0cyB0aGUgYmFja29mZiBkZWxheS5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgdmVyeSBuZXh0IGJhY2tvZmZBbmRXYWl0KCkgd2lsbCBoYXZlIG5vIGRlbGF5LiBJZiBpdCBpcyBjYWxsZWQgYWdhaW5cclxuICAgICAqIChpLmUuIGR1ZSB0byBhbiBlcnJvciksIGluaXRpYWxEZWxheU1zIChwbHVzIGppdHRlcikgd2lsbCBiZSB1c2VkLCBhbmRcclxuICAgICAqIHN1YnNlcXVlbnQgb25lcyB3aWxsIGluY3JlYXNlIGFjY29yZGluZyB0byB0aGUgYmFja29mZkZhY3Rvci5cclxuICAgICAqL1xyXG4gICAgRXhwb25lbnRpYWxCYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRCYXNlTXMgPSAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVzZXRzIHRoZSBiYWNrb2ZmIGRlbGF5IHRvIHRoZSBtYXhpbXVtIGRlbGF5IChlLmcuIGZvciB1c2UgYWZ0ZXIgYVxyXG4gICAgICogUkVTT1VSQ0VfRVhIQVVTVEVEIGVycm9yKS5cclxuICAgICAqL1xyXG4gICAgRXhwb25lbnRpYWxCYWNrb2ZmLnByb3RvdHlwZS5yZXNldFRvTWF4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudEJhc2VNcyA9IHRoaXMubWF4RGVsYXlNcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgY3VycmVudERlbGF5TXMsIGFuZCBpbmNyZWFzZXMgdGhlXHJcbiAgICAgKiBkZWxheSBmb3IgYW55IHN1YnNlcXVlbnQgYXR0ZW1wdHMuIElmIHRoZXJlIHdhcyBhIHBlbmRpbmcgYmFja29mZiBvcGVyYXRpb25cclxuICAgICAqIGFscmVhZHksIGl0IHdpbGwgYmUgY2FuY2VsZWQuXHJcbiAgICAgKi9cclxuICAgIEV4cG9uZW50aWFsQmFja29mZi5wcm90b3R5cGUuYmFja29mZkFuZFJ1biA9IGZ1bmN0aW9uIChvcCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gQ2FuY2VsIGFueSBwZW5kaW5nIGJhY2tvZmYgb3BlcmF0aW9uLlxyXG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XHJcbiAgICAgICAgLy8gRmlyc3Qgc2NoZWR1bGUgdXNpbmcgdGhlIGN1cnJlbnQgYmFzZSAod2hpY2ggbWF5IGJlIDAgYW5kIHNob3VsZCBiZVxyXG4gICAgICAgIC8vIGhvbm9yZWQgYXMgc3VjaCkuXHJcbiAgICAgICAgdmFyIGRlc2lyZWREZWxheVdpdGhKaXR0ZXJNcyA9IE1hdGguZmxvb3IodGhpcy5jdXJyZW50QmFzZU1zICsgdGhpcy5qaXR0ZXJEZWxheU1zKCkpO1xyXG4gICAgICAgIC8vIEd1YXJkIGFnYWluc3QgbGFzdEF0dGVtcHRUaW1lIGJlaW5nIGluIHRoZSBmdXR1cmUgZHVlIHRvIGEgY2xvY2sgY2hhbmdlLlxyXG4gICAgICAgIHZhciBkZWxheVNvRmFyTXMgPSBNYXRoLm1heCgwLCBEYXRlLm5vdygpIC0gdGhpcy5sYXN0QXR0ZW1wdFRpbWUpO1xyXG4gICAgICAgIC8vIEd1YXJkIGFnYWluc3QgdGhlIGJhY2tvZmYgZGVsYXkgYWxyZWFkeSBiZWluZyBwYXN0LlxyXG4gICAgICAgIHZhciByZW1haW5pbmdEZWxheU1zID0gTWF0aC5tYXgoMCwgZGVzaXJlZERlbGF5V2l0aEppdHRlck1zIC0gZGVsYXlTb0Zhck1zKTtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50QmFzZU1zID4gMCkge1xyXG4gICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDUsIFwiQmFja2luZyBvZmYgZm9yIFwiICsgcmVtYWluaW5nRGVsYXlNcyArIFwiIG1zIFwiICtcclxuICAgICAgICAgICAgICAgIChcIihiYXNlIGRlbGF5OiBcIiArIHRoaXMuY3VycmVudEJhc2VNcyArIFwiIG1zLCBcIikgK1xyXG4gICAgICAgICAgICAgICAgKFwiZGVsYXkgd2l0aCBqaXR0ZXI6IFwiICsgZGVzaXJlZERlbGF5V2l0aEppdHRlck1zICsgXCIgbXMsIFwiKSArXHJcbiAgICAgICAgICAgICAgICAoXCJsYXN0IGF0dGVtcHQ6IFwiICsgZGVsYXlTb0Zhck1zICsgXCIgbXMgYWdvKVwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGltZXJQcm9taXNlID0gdGhpcy5xdWV1ZS5lbnF1ZXVlQWZ0ZXJEZWxheSh0aGlzLnRpbWVySWQsIHJlbWFpbmluZ0RlbGF5TXMsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMubGFzdEF0dGVtcHRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgcmV0dXJuIG9wKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gQXBwbHkgYmFja29mZiBmYWN0b3IgdG8gZGV0ZXJtaW5lIG5leHQgZGVsYXkgYW5kIGVuc3VyZSBpdCBpcyB3aXRoaW5cclxuICAgICAgICAvLyBib3VuZHMuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50QmFzZU1zICo9IHRoaXMuYmFja29mZkZhY3RvcjtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50QmFzZU1zIDwgdGhpcy5pbml0aWFsRGVsYXlNcykge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRCYXNlTXMgPSB0aGlzLmluaXRpYWxEZWxheU1zO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50QmFzZU1zID4gdGhpcy5tYXhEZWxheU1zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEJhc2VNcyA9IHRoaXMubWF4RGVsYXlNcztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRXhwb25lbnRpYWxCYWNrb2ZmLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZXJQcm9taXNlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXJQcm9taXNlLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVyUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBSZXR1cm5zIGEgcmFuZG9tIHZhbHVlIGluIHRoZSByYW5nZSBbLWN1cnJlbnRCYXNlTXMvMiwgY3VycmVudEJhc2VNcy8yXSAqL1xyXG4gICAgRXhwb25lbnRpYWxCYWNrb2ZmLnByb3RvdHlwZS5qaXR0ZXJEZWxheU1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiB0aGlzLmN1cnJlbnRCYXNlTXM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEV4cG9uZW50aWFsQmFja29mZjtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBMT0dfVEFHJDYgPSAnUGVyc2lzdGVudFN0cmVhbSc7XHJcbi8qKlxyXG4gKiBQZXJzaXN0ZW50U3RyZWFtIGNhbiBiZSBpbiBvbmUgb2YgNSBzdGF0ZXMgKGVhY2ggZGVzY3JpYmVkIGluIGRldGFpbCBiZWxvdylcclxuICogYmFzZWQgb24gdGhlIGZvbGxvd2luZyBzdGF0ZSB0cmFuc2l0aW9uIGRpYWdyYW06XHJcbiAqXHJcbiAqICAgICAgICAgIHN0YXJ0KCkgY2FsbGVkICAgICAgICAgICAgIGF1dGggJiBjb25uZWN0aW9uIHN1Y2NlZWRlZFxyXG4gKiBJTklUSUFMIC0tLS0tLS0tLS0tLS0tLS0+IFNUQVJUSU5HIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPiBPUEVOXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICB8ICAgICAgICAgICAgICAgICAgICBlcnJvciBvY2N1cnJlZCB8XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBcXC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tdi0tLS0tL1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgICAgICAgICAgICAgICAgYmFja29mZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiAgICAgICAgICAgICAgICAgICAgZWxhcHNlZCAgfCAgICAgICAgICAgICAgc3RhcnQoKSBjYWxsZWQgICAgfFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFwtLS0gQkFDS09GRiA8LS0tLS0tLS0tLS0tLS0tLSBFUlJPUlxyXG4gKlxyXG4gKiBbYW55IHN0YXRlXSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLT4gSU5JVElBTFxyXG4gKiAgICAgICAgICAgICAgIHN0b3AoKSBjYWxsZWQgb3JcclxuICogICAgICAgICAgICAgICBpZGxlIHRpbWVyIGV4cGlyZWRcclxuICovXHJcbnZhciBQZXJzaXN0ZW50U3RyZWFtU3RhdGU7XHJcbihmdW5jdGlvbiAoUGVyc2lzdGVudFN0cmVhbVN0YXRlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdHJlYW1pbmcgUlBDIGlzIG5vdCB5ZXQgcnVubmluZyBhbmQgdGhlcmUncyBubyBlcnJvciBjb25kaXRpb24uXHJcbiAgICAgKiBDYWxsaW5nIHN0YXJ0KCkgd2lsbCBzdGFydCB0aGUgc3RyZWFtIGltbWVkaWF0ZWx5IHdpdGhvdXQgYmFja29mZi5cclxuICAgICAqIFdoaWxlIGluIHRoaXMgc3RhdGUgaXNTdGFydGVkKCkgd2lsbCByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZVtQZXJzaXN0ZW50U3RyZWFtU3RhdGVbXCJJbml0aWFsXCJdID0gMF0gPSBcIkluaXRpYWxcIjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHN0cmVhbSBpcyBzdGFydGluZywgZWl0aGVyIHdhaXRpbmcgZm9yIGFuIGF1dGggdG9rZW4gb3IgZm9yIHRoZSBzdHJlYW1cclxuICAgICAqIHRvIHN1Y2Nlc3NmdWxseSBvcGVuLiBXaGlsZSBpbiB0aGlzIHN0YXRlLCBpc1N0YXJ0ZWQoKSB3aWxsIHJldHVybiB0cnVlIGJ1dFxyXG4gICAgICogaXNPcGVuKCkgd2lsbCByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZVtQZXJzaXN0ZW50U3RyZWFtU3RhdGVbXCJTdGFydGluZ1wiXSA9IDFdID0gXCJTdGFydGluZ1wiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3RyZWFtaW5nIFJQQyBpcyB1cCBhbmQgcnVubmluZy4gUmVxdWVzdHMgYW5kIHJlc3BvbnNlcyBjYW4gZmxvd1xyXG4gICAgICogZnJlZWx5LiBCb3RoIGlzU3RhcnRlZCgpIGFuZCBpc09wZW4oKSB3aWxsIHJldHVybiB0cnVlLlxyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50U3RyZWFtU3RhdGVbUGVyc2lzdGVudFN0cmVhbVN0YXRlW1wiT3BlblwiXSA9IDJdID0gXCJPcGVuXCI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdHJlYW0gZW5jb3VudGVyZWQgYW4gZXJyb3IuIFRoZSBuZXh0IHN0YXJ0IGF0dGVtcHQgd2lsbCBiYWNrIG9mZi5cclxuICAgICAqIFdoaWxlIGluIHRoaXMgc3RhdGUgaXNTdGFydGVkKCkgd2lsbCByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRTdHJlYW1TdGF0ZVtQZXJzaXN0ZW50U3RyZWFtU3RhdGVbXCJFcnJvclwiXSA9IDNdID0gXCJFcnJvclwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBpbi1iZXR3ZWVuIHN0YXRlIGFmdGVyIGFuIGVycm9yIHdoZXJlIHRoZSBzdHJlYW0gaXMgd2FpdGluZyBiZWZvcmVcclxuICAgICAqIHJlLXN0YXJ0aW5nLiBBZnRlciB3YWl0aW5nIGlzIGNvbXBsZXRlLCB0aGUgc3RyZWFtIHdpbGwgdHJ5IHRvIG9wZW4uXHJcbiAgICAgKiBXaGlsZSBpbiB0aGlzIHN0YXRlIGlzU3RhcnRlZCgpIHdpbGwgcmV0dXJuIHRydWUgYnV0IGlzT3BlbigpIHdpbGwgcmV0dXJuXHJcbiAgICAgKiBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudFN0cmVhbVN0YXRlW1BlcnNpc3RlbnRTdHJlYW1TdGF0ZVtcIkJhY2tvZmZcIl0gPSA0XSA9IFwiQmFja29mZlwiO1xyXG59KShQZXJzaXN0ZW50U3RyZWFtU3RhdGUgfHwgKFBlcnNpc3RlbnRTdHJlYW1TdGF0ZSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBJbml0aWFsIGJhY2tvZmYgdGltZSBpbiBtaWxsaXNlY29uZHMgYWZ0ZXIgYW4gZXJyb3IuXHJcbiAqIFNldCB0byAxcyBhY2NvcmRpbmcgdG8gaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2FwaXMvZGVzaWduL2Vycm9ycy5cclxuICovXHJcbnZhciBCQUNLT0ZGX0lOSVRJQUxfREVMQVlfTVMgPSAxMDAwO1xyXG4vKiogTWF4aW11bSBiYWNrb2ZmIHRpbWUgaW4gbWlsbGlzZWNvbmRzICovXHJcbnZhciBCQUNLT0ZGX01BWF9ERUxBWV9NUyA9IDYwICogMTAwMDtcclxudmFyIEJBQ0tPRkZfRkFDVE9SID0gMS41O1xyXG4vKiogVGhlIHRpbWUgYSBzdHJlYW0gc3RheXMgb3BlbiBhZnRlciBpdCBpcyBtYXJrZWQgaWRsZS4gKi9cclxudmFyIElETEVfVElNRU9VVF9NUyA9IDYwICogMTAwMDtcclxuLyoqXHJcbiAqIEEgUGVyc2lzdGVudFN0cmVhbSBpcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHN0cmVhbWluZyBSUENcclxuICogdG8gdGhlIEZpcmVzdG9yZSBiYWNrZW5kLiBJdCdzIGJ1aWx0IG9uIHRvcCBvZiB0aGUgY29ubmVjdGlvbnMgb3duIHN1cHBvcnRcclxuICogZm9yIHN0cmVhbWluZyBSUENzLCBhbmQgYWRkcyBzZXZlcmFsIGNyaXRpY2FsIGZlYXR1cmVzIGZvciBvdXIgY2xpZW50czpcclxuICpcclxuICogICAtIEV4cG9uZW50aWFsIGJhY2tvZmYgb24gZmFpbHVyZVxyXG4gKiAgIC0gQXV0aGVudGljYXRpb24gdmlhIENyZWRlbnRpYWxzUHJvdmlkZXJcclxuICogICAtIERpc3BhdGNoaW5nIGFsbCBjYWxsYmFja3MgaW50byB0aGUgc2hhcmVkIHdvcmtlciBxdWV1ZVxyXG4gKiAgIC0gQ2xvc2luZyBpZGxlIHN0cmVhbXMgYWZ0ZXIgNjAgc2Vjb25kcyBvZiBpbmFjdGl2aXR5XHJcbiAqXHJcbiAqIFN1YmNsYXNzZXMgb2YgUGVyc2lzdGVudFN0cmVhbSBpbXBsZW1lbnQgc2VyaWFsaXphdGlvbiBvZiBtb2RlbHMgdG8gYW5kXHJcbiAqIGZyb20gdGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHByb3RvY29sIGJ1ZmZlcnMgZm9yIGEgc3BlY2lmaWNcclxuICogc3RyZWFtaW5nIFJQQy5cclxuICpcclxuICogIyMgU3RhcnRpbmcgYW5kIFN0b3BwaW5nXHJcbiAqXHJcbiAqIFN0cmVhbWluZyBSUENzIGFyZSBzdGF0ZWZ1bCBhbmQgbmVlZCB0byBiZSBzdGFydCgpZWQgYmVmb3JlIG1lc3NhZ2VzIGNhblxyXG4gKiBiZSBzZW50IGFuZCByZWNlaXZlZC4gVGhlIFBlcnNpc3RlbnRTdHJlYW0gd2lsbCBjYWxsIHRoZSBvbk9wZW4oKSBmdW5jdGlvblxyXG4gKiBvZiB0aGUgbGlzdGVuZXIgb25jZSB0aGUgc3RyZWFtIGlzIHJlYWR5IHRvIGFjY2VwdCByZXF1ZXN0cy5cclxuICpcclxuICogU2hvdWxkIGEgc3RhcnQoKSBmYWlsLCBQZXJzaXN0ZW50U3RyZWFtIHdpbGwgY2FsbCB0aGUgcmVnaXN0ZXJlZCBvbkNsb3NlKClcclxuICogbGlzdGVuZXIgd2l0aCBhIEZpcmVzdG9yZUVycm9yIGluZGljYXRpbmcgd2hhdCB3ZW50IHdyb25nLlxyXG4gKlxyXG4gKiBBIFBlcnNpc3RlbnRTdHJlYW0gY2FuIGJlIHN0YXJ0ZWQgYW5kIHN0b3BwZWQgcmVwZWF0ZWRseS5cclxuICpcclxuICogR2VuZXJpYyB0eXBlczpcclxuICogIFNlbmRUeXBlOiBUaGUgdHlwZSBvZiB0aGUgb3V0Z29pbmcgbWVzc2FnZSBvZiB0aGUgdW5kZXJseWluZ1xyXG4gKiAgICBjb25uZWN0aW9uIHN0cmVhbVxyXG4gKiAgUmVjZWl2ZVR5cGU6IFRoZSB0eXBlIG9mIHRoZSBpbmNvbWluZyBtZXNzYWdlIG9mIHRoZSB1bmRlcmx5aW5nXHJcbiAqICAgIGNvbm5lY3Rpb24gc3RyZWFtXHJcbiAqICBMaXN0ZW5lclR5cGU6IFRoZSB0eXBlIG9mIHRoZSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgY2FsbGJhY2tzXHJcbiAqL1xyXG52YXIgUGVyc2lzdGVudFN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBlcnNpc3RlbnRTdHJlYW0ocXVldWUsIGNvbm5lY3Rpb25UaW1lcklkLCBpZGxlVGltZXJJZCwgY29ubmVjdGlvbiwgY3JlZGVudGlhbHNQcm92aWRlciwgbGlzdGVuZXIpIHtcclxuICAgICAgICB0aGlzLnF1ZXVlID0gcXVldWU7XHJcbiAgICAgICAgdGhpcy5pZGxlVGltZXJJZCA9IGlkbGVUaW1lcklkO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XHJcbiAgICAgICAgdGhpcy5jcmVkZW50aWFsc1Byb3ZpZGVyID0gY3JlZGVudGlhbHNQcm92aWRlcjtcclxuICAgICAgICB0aGlzLmxpc3RlbmVyID0gbGlzdGVuZXI7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5Jbml0aWFsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgY2xvc2UgY291bnQgdGhhdCdzIGluY3JlbWVudGVkIGV2ZXJ5IHRpbWUgdGhlIHN0cmVhbSBpcyBjbG9zZWQ7IHVzZWQgYnlcclxuICAgICAgICAgKiBnZXRDbG9zZUd1YXJkZWREaXNwYXRjaGVyKCkgdG8gaW52YWxpZGF0ZSBjYWxsYmFja3MgdGhhdCBoYXBwZW4gYWZ0ZXJcclxuICAgICAgICAgKiBjbG9zZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNsb3NlQ291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuaWRsZVRpbWVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN0cmVhbSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5iYWNrb2ZmID0gbmV3IEV4cG9uZW50aWFsQmFja29mZihxdWV1ZSwgY29ubmVjdGlvblRpbWVySWQsIEJBQ0tPRkZfSU5JVElBTF9ERUxBWV9NUywgQkFDS09GRl9GQUNUT1IsIEJBQ0tPRkZfTUFYX0RFTEFZX01TKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHN0YXJ0KCkgaGFzIGJlZW4gY2FsbGVkIGFuZCBubyBlcnJvciBoYXMgb2NjdXJyZWQuIFRydWVcclxuICAgICAqIGluZGljYXRlcyB0aGUgc3RyZWFtIGlzIG9wZW4gb3IgaW4gdGhlIHByb2Nlc3Mgb2Ygb3BlbmluZyAod2hpY2hcclxuICAgICAqIGVuY29tcGFzc2VzIHJlc3BlY3RpbmcgYmFja29mZiwgZ2V0dGluZyBhdXRoIHRva2VucywgYW5kIHN0YXJ0aW5nIHRoZVxyXG4gICAgICogYWN0dWFsIFJQQykuIFVzZSBpc09wZW4oKSB0byBkZXRlcm1pbmUgaWYgdGhlIHN0cmVhbSBpcyBvcGVuIGFuZCByZWFkeSBmb3JcclxuICAgICAqIG91dGJvdW5kIHJlcXVlc3RzLlxyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50U3RyZWFtLnByb3RvdHlwZS5pc1N0YXJ0ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnN0YXRlID09PSBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuU3RhcnRpbmcgfHxcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9PT0gUGVyc2lzdGVudFN0cmVhbVN0YXRlLk9wZW4gfHxcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9PT0gUGVyc2lzdGVudFN0cmVhbVN0YXRlLkJhY2tvZmYpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB1bmRlcmx5aW5nIFJQQyBpcyBvcGVuICh0aGUgb25PcGVuKCkgbGlzdGVuZXIgaGFzIGJlZW5cclxuICAgICAqIGNhbGxlZCkgYW5kIHRoZSBzdHJlYW0gaXMgcmVhZHkgZm9yIG91dGJvdW5kIHJlcXVlc3RzLlxyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50U3RyZWFtLnByb3RvdHlwZS5pc09wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUgPT09IFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5PcGVuO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIHRoZSBSUEMuIE9ubHkgYWxsb3dlZCBpZiBpc1N0YXJ0ZWQoKSByZXR1cm5zIGZhbHNlLiBUaGUgc3RyZWFtIGlzXHJcbiAgICAgKiBub3QgaW1tZWRpYXRlbHkgcmVhZHkgZm9yIHVzZTogb25PcGVuKCkgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIFJQQyBpc1xyXG4gICAgICogcmVhZHkgZm9yIG91dGJvdW5kIHJlcXVlc3RzLCBhdCB3aGljaCBwb2ludCBpc09wZW4oKSB3aWxsIHJldHVybiB0cnVlLlxyXG4gICAgICpcclxuICAgICAqIFdoZW4gc3RhcnQgcmV0dXJucywgaXNTdGFydGVkKCkgd2lsbCByZXR1cm4gdHJ1ZS5cclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudFN0cmVhbS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5FcnJvcikge1xyXG4gICAgICAgICAgICB0aGlzLnBlcmZvcm1CYWNrb2ZmKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuc3RhdGUgPT09IFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5Jbml0aWFsLCAnQWxyZWFkeSBzdGFydGVkJyk7XHJcbiAgICAgICAgdGhpcy5hdXRoKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyB0aGUgUlBDLiBUaGlzIGNhbGwgaXMgaWRlbXBvdGVudCBhbmQgYWxsb3dlZCByZWdhcmRsZXNzIG9mIHRoZVxyXG4gICAgICogY3VycmVudCBpc1N0YXJ0ZWQoKSBzdGF0ZS5cclxuICAgICAqXHJcbiAgICAgKiBXaGVuIHN0b3AgcmV0dXJucywgaXNTdGFydGVkKCkgYW5kIGlzT3BlbigpIHdpbGwgYm90aCByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRTdHJlYW0ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU3RhcnRlZCgpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jbG9zZShQZXJzaXN0ZW50U3RyZWFtU3RhdGUuSW5pdGlhbCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWZ0ZXIgYW4gZXJyb3IgdGhlIHN0cmVhbSB3aWxsIHVzdWFsbHkgYmFjayBvZmYgb24gdGhlIG5leHQgYXR0ZW1wdCB0b1xyXG4gICAgICogc3RhcnQgaXQuIElmIHRoZSBlcnJvciB3YXJyYW50cyBhbiBpbW1lZGlhdGUgcmVzdGFydCBvZiB0aGUgc3RyZWFtLCB0aGVcclxuICAgICAqIHNlbmRlciBjYW4gdXNlIHRoaXMgdG8gaW5kaWNhdGUgdGhhdCB0aGUgcmVjZWl2ZXIgc2hvdWxkIG5vdCBiYWNrIG9mZi5cclxuICAgICAqXHJcbiAgICAgKiBFYWNoIGVycm9yIHdpbGwgY2FsbCB0aGUgb25DbG9zZSgpIGxpc3RlbmVyLiBUaGF0IGZ1bmN0aW9uIGNhbiBkZWNpZGUgdG9cclxuICAgICAqIGluaGliaXQgYmFja29mZiBpZiByZXF1aXJlZC5cclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudFN0cmVhbS5wcm90b3R5cGUuaW5oaWJpdEJhY2tvZmYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLmlzU3RhcnRlZCgpLCAnQ2FuIG9ubHkgaW5oaWJpdCBiYWNrb2ZmIGluIGEgc3RvcHBlZCBzdGF0ZScpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuSW5pdGlhbDtcclxuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE1hcmtzIHRoaXMgc3RyZWFtIGFzIGlkbGUuIElmIG5vIGZ1cnRoZXIgYWN0aW9ucyBhcmUgcGVyZm9ybWVkIG9uIHRoZVxyXG4gICAgICogc3RyZWFtIGZvciBvbmUgbWludXRlLCB0aGUgc3RyZWFtIHdpbGwgYXV0b21hdGljYWxseSBjbG9zZSBpdHNlbGYgYW5kXHJcbiAgICAgKiBub3RpZnkgdGhlIHN0cmVhbSdzIG9uQ2xvc2UoKSBoYW5kbGVyIHdpdGggU3RhdHVzLk9LLiBUaGUgc3RyZWFtIHdpbGwgdGhlblxyXG4gICAgICogYmUgaW4gYSAhaXNTdGFydGVkKCkgc3RhdGUsIHJlcXVpcmluZyB0aGUgY2FsbGVyIHRvIHN0YXJ0IHRoZSBzdHJlYW0gYWdhaW5cclxuICAgICAqIGJlZm9yZSBmdXJ0aGVyIHVzZS5cclxuICAgICAqXHJcbiAgICAgKiBPbmx5IHN0cmVhbXMgdGhhdCBhcmUgaW4gc3RhdGUgJ09wZW4nIGNhbiBiZSBtYXJrZWQgaWRsZSwgYXMgYWxsIG90aGVyXHJcbiAgICAgKiBzdGF0ZXMgaW1wbHkgcGVuZGluZyBuZXR3b3JrIG9wZXJhdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRTdHJlYW0ucHJvdG90eXBlLm1hcmtJZGxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gU3RhcnRzIHRoZSBpZGxlIHRpbWUgaWYgd2UgYXJlIGluIHN0YXRlICdPcGVuJyBhbmQgYXJlIG5vdCB5ZXQgYWxyZWFkeVxyXG4gICAgICAgIC8vIHJ1bm5pbmcgYSB0aW1lciAoaW4gd2hpY2ggY2FzZSB0aGUgcHJldmlvdXMgaWRsZSB0aW1lb3V0IHN0aWxsIGFwcGxpZXMpLlxyXG4gICAgICAgIGlmICh0aGlzLmlzT3BlbigpICYmIHRoaXMuaWRsZVRpbWVyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaWRsZVRpbWVyID0gdGhpcy5xdWV1ZS5lbnF1ZXVlQWZ0ZXJEZWxheSh0aGlzLmlkbGVUaW1lcklkLCBJRExFX1RJTUVPVVRfTVMsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmhhbmRsZUlkbGVDbG9zZVRpbWVyKCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSB1bmRlcmx5aW5nIHN0cmVhbS4gKi9cclxuICAgIFBlcnNpc3RlbnRTdHJlYW0ucHJvdG90eXBlLnNlbmRSZXF1ZXN0ID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgIHRoaXMuY2FuY2VsSWRsZUNoZWNrKCk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW0uc2VuZChtc2cpO1xyXG4gICAgfTtcclxuICAgIC8qKiBDYWxsZWQgYnkgdGhlIGlkbGUgdGltZXIgd2hlbiB0aGUgc3RyZWFtIHNob3VsZCBjbG9zZSBkdWUgdG8gaW5hY3Rpdml0eS4gKi9cclxuICAgIFBlcnNpc3RlbnRTdHJlYW0ucHJvdG90eXBlLmhhbmRsZUlkbGVDbG9zZVRpbWVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzT3BlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB0aW1pbmcgb3V0IGFuIGlkbGUgc3RyZWFtIHRoZXJlJ3Mgbm8gcmVhc29uIHRvIGZvcmNlIHRoZSBzdHJlYW0gaW50byBiYWNrb2ZmIHdoZW5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpdCByZXN0YXJ0cyBzbyBzZXQgdGhlIHN0cmVhbSBzdGF0ZSB0byBJbml0aWFsIGluc3RlYWQgb2YgRXJyb3IuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuY2xvc2UoUGVyc2lzdGVudFN0cmVhbVN0YXRlLkluaXRpYWwpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIE1hcmtzIHRoZSBzdHJlYW0gYXMgYWN0aXZlIGFnYWluLiAqL1xyXG4gICAgUGVyc2lzdGVudFN0cmVhbS5wcm90b3R5cGUuY2FuY2VsSWRsZUNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlkbGVUaW1lcikge1xyXG4gICAgICAgICAgICB0aGlzLmlkbGVUaW1lci5jYW5jZWwoKTtcclxuICAgICAgICAgICAgdGhpcy5pZGxlVGltZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENsb3NlcyB0aGUgc3RyZWFtIGFuZCBjbGVhbnMgdXAgYXMgbmVjZXNzYXJ5OlxyXG4gICAgICpcclxuICAgICAqICogY2xvc2VzIHRoZSB1bmRlcmx5aW5nIEdSUEMgc3RyZWFtO1xyXG4gICAgICogKiBjYWxscyB0aGUgb25DbG9zZSBoYW5kbGVyIHdpdGggdGhlIGdpdmVuICdlcnJvcic7XHJcbiAgICAgKiAqIHNldHMgaW50ZXJuYWwgc3RyZWFtIHN0YXRlIHRvICdmaW5hbFN0YXRlJztcclxuICAgICAqICogYWRqdXN0cyB0aGUgYmFja29mZiB0aW1lciBiYXNlZCBvbiB0aGUgZXJyb3JcclxuICAgICAqXHJcbiAgICAgKiBBIG5ldyBzdHJlYW0gY2FuIGJlIG9wZW5lZCBieSBjYWxsaW5nIHN0YXJ0KCkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGZpbmFsU3RhdGUgdGhlIGludGVuZGVkIHN0YXRlIG9mIHRoZSBzdHJlYW0gYWZ0ZXIgY2xvc2luZy5cclxuICAgICAqIEBwYXJhbSBlcnJvciB0aGUgZXJyb3IgdGhlIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCB3aXRoLlxyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50U3RyZWFtLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChmaW5hbFN0YXRlLCBlcnJvciQkMSkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCh0aGlzLmlzU3RhcnRlZCgpLCAnT25seSBzdGFydGVkIHN0cmVhbXMgc2hvdWxkIGJlIGNsb3NlZC4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGZpbmFsU3RhdGUgPT09IFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5FcnJvciB8fCBpc051bGxPclVuZGVmaW5lZChlcnJvciQkMSksIFwiQ2FuJ3QgcHJvdmlkZSBhbiBlcnJvciB3aGVuIG5vdCBpbiBhbiBlcnJvciBzdGF0ZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbCBhbnkgb3V0c3RhbmRpbmcgdGltZXJzICh0aGV5J3JlIGd1YXJhbnRlZWQgbm90IHRvIGV4ZWN1dGUpLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbElkbGVDaGVjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhY2tvZmYuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWRhdGVzIGFueSBzdHJlYW0tcmVsYXRlZCBjYWxsYmFja3MgKGUuZy4gZnJvbSBhdXRoIG9yIHRoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1bmRlcmx5aW5nIHN0cmVhbSksIGd1YXJhbnRlZWluZyB0aGV5IHdvbid0IGV4ZWN1dGUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmluYWxTdGF0ZSAhPT0gUGVyc2lzdGVudFN0cmVhbVN0YXRlLkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGFuIGludGVudGlvbmFsIGNsb3NlIGVuc3VyZSB3ZSBkb24ndCBkZWxheSBvdXIgbmV4dCBjb25uZWN0aW9uIGF0dGVtcHQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnJvciQkMSAmJiBlcnJvciQkMS5jb2RlID09PSBDb2RlLlJFU09VUkNFX0VYSEFVU1RFRCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9nIHRoZSBlcnJvci4gKFByb2JhYmx5IGVpdGhlciAncXVvdGEgZXhjZWVkZWQnIG9yICdtYXggcXVldWUgbGVuZ3RoIHJlYWNoZWQnLilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKGVycm9yJCQxLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IoJ1VzaW5nIG1heGltdW0gYmFja29mZiBkZWxheSB0byBwcmV2ZW50IG92ZXJsb2FkaW5nIHRoZSBiYWNrZW5kLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0VG9NYXgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnJvciQkMSAmJiBlcnJvciQkMS5jb2RlID09PSBDb2RlLlVOQVVUSEVOVElDQVRFRCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCJ1bmF1dGhlbnRpY2F0ZWRcIiBlcnJvciBtZWFucyB0aGUgdG9rZW4gd2FzIHJlamVjdGVkLiBUcnkgZm9yY2UgcmVmcmVzaGluZyBpdCBpbiBjYXNlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IGV4cGlyZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWRlbnRpYWxzUHJvdmlkZXIuaW52YWxpZGF0ZVRva2VuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIHVuZGVybHlpbmcgc3RyZWFtIGJlY2F1c2Ugd2UgYXJlIG5vIGxvbmdlciBpbnRlcmVzdGVkIGluIGV2ZW50cy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RyZWFtICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlYXJEb3duKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc3RhdGUgbXVzdCBiZSBhc3NpZ25lZCBiZWZvcmUgY2FsbGluZyBvbkNsb3NlKCkgdG8gYWxsb3cgdGhlIGNhbGxiYWNrIHRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaGliaXQgYmFja29mZiBvciBvdGhlcndpc2UgbWFuaXB1bGF0ZSB0aGUgc3RhdGUgaW4gaXRzIG5vbi1zdGFydGVkIHN0YXRlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gZmluYWxTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IHRoZSBsaXN0ZW5lciB0aGF0IHRoZSBzdHJlYW0gY2xvc2VkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxpc3RlbmVyLm9uQ2xvc2UoZXJyb3IkJDEpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGlmeSB0aGUgbGlzdGVuZXIgdGhhdCB0aGUgc3RyZWFtIGNsb3NlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FuIGJlIG92ZXJyaWRkZW4gdG8gcGVyZm9ybSBhZGRpdGlvbmFsIGNsZWFudXAgYmVmb3JlIHRoZSBzdHJlYW0gaXMgY2xvc2VkLlxyXG4gICAgICogQ2FsbGluZyBzdXBlci50ZWFyRG93bigpIGlzIG5vdCByZXF1aXJlZC5cclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudFN0cmVhbS5wcm90b3R5cGUudGVhckRvd24gPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICBQZXJzaXN0ZW50U3RyZWFtLnByb3RvdHlwZS5hdXRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuc3RhdGUgPT09IFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5Jbml0aWFsLCAnTXVzdCBiZSBpbiBpbml0aWFsIHN0YXRlIHRvIGF1dGgnKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gUGVyc2lzdGVudFN0cmVhbVN0YXRlLlN0YXJ0aW5nO1xyXG4gICAgICAgIHZhciBkaXNwYXRjaElmTm90Q2xvc2VkID0gdGhpcy5nZXRDbG9zZUd1YXJkZWREaXNwYXRjaGVyKHRoaXMuY2xvc2VDb3VudCk7XHJcbiAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBKdXN0IHVzZSBkaXNwYXRjaElmTm90Q2xvc2VkLCBidXQgc2VlIFRPRE8gYmVsb3cuXHJcbiAgICAgICAgdmFyIGNsb3NlQ291bnQgPSB0aGlzLmNsb3NlQ291bnQ7XHJcbiAgICAgICAgdGhpcy5jcmVkZW50aWFsc1Byb3ZpZGVyLmdldFRva2VuKCkudGhlbihmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICAgICAgLy8gU3RyZWFtIGNhbiBiZSBzdG9wcGVkIHdoaWxlIHdhaXRpbmcgZm9yIGF1dGhlbnRpY2F0aW9uLlxyXG4gICAgICAgICAgICAvLyBUT0RPKG1pa2VsZWhlbik6IFdlIHJlYWxseSBzaG91bGQganVzdCB1c2UgZGlzcGF0Y2hJZk5vdENsb3NlZFxyXG4gICAgICAgICAgICAvLyBhbmQgbGV0IHRoaXMgZGlzcGF0Y2ggb250byB0aGUgcXVldWUsIGJ1dCB0aGF0IG9wZW5lZCBhIHNwZWMgdGVzdCBjYW5cclxuICAgICAgICAgICAgLy8gb2Ygd29ybXMgdGhhdCBJIGRvbid0IHdhbnQgdG8gZGVhbCB3aXRoIGluIHRoaXMgUFIuXHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5jbG9zZUNvdW50ID09PSBjbG9zZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOb3JtYWxseSB3ZSdkIGhhdmUgdG8gc2NoZWR1bGUgdGhlIGNhbGxiYWNrIG9uIHRoZSBBc3luY1F1ZXVlLlxyXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgdGhlIGZvbGxvd2luZyBjYWxscyBhcmUgc2FmZSB0byBiZSBjYWxsZWQgb3V0c2lkZSB0aGVcclxuICAgICAgICAgICAgICAgIC8vIEFzeW5jUXVldWUgc2luY2UgdGhleSBkb24ndCBjaGFpbiBhc3luY2hyb25vdXMgY2FsbHNcclxuICAgICAgICAgICAgICAgIF90aGlzLnN0YXJ0U3RyZWFtKHRva2VuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvciQkMSkge1xyXG4gICAgICAgICAgICBkaXNwYXRjaElmTm90Q2xvc2VkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBycGNFcnJvciA9IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLlVOS05PV04sICdGZXRjaGluZyBhdXRoIHRva2VuIGZhaWxlZDogJyArIGVycm9yJCQxLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZVN0cmVhbUNsb3NlKHJwY0Vycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudFN0cmVhbS5wcm90b3R5cGUuc3RhcnRTdHJlYW0gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnN0YXRlID09PSBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuU3RhcnRpbmcsICdUcnlpbmcgdG8gc3RhcnQgc3RyZWFtIGluIGEgbm9uLXN0YXJ0aW5nIHN0YXRlJyk7XHJcbiAgICAgICAgdmFyIGRpc3BhdGNoSWZOb3RDbG9zZWQgPSB0aGlzLmdldENsb3NlR3VhcmRlZERpc3BhdGNoZXIodGhpcy5jbG9zZUNvdW50KTtcclxuICAgICAgICB0aGlzLnN0cmVhbSA9IHRoaXMuc3RhcnRScGModG9rZW4pO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtLm9uT3BlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoSWZOb3RDbG9zZWQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KF90aGlzLnN0YXRlID09PSBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuU3RhcnRpbmcsICdFeHBlY3RlZCBzdHJlYW0gdG8gYmUgaW4gc3RhdGUgU3RhcnRpbmcsIGJ1dCB3YXMgJyArIF90aGlzLnN0YXRlKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlID0gUGVyc2lzdGVudFN0cmVhbVN0YXRlLk9wZW47XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubGlzdGVuZXIub25PcGVuKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtLm9uQ2xvc2UoZnVuY3Rpb24gKGVycm9yJCQxKSB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoSWZOb3RDbG9zZWQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZVN0cmVhbUNsb3NlKGVycm9yJCQxKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW0ub25NZXNzYWdlKGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICAgICAgZGlzcGF0Y2hJZk5vdENsb3NlZChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMub25NZXNzYWdlKG1zZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRTdHJlYW0ucHJvdG90eXBlLnBlcmZvcm1CYWNrb2ZmID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuc3RhdGUgPT09IFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5FcnJvciwgJ1Nob3VsZCBvbmx5IHBlcmZvcm0gYmFja29mZiB3aGVuIGluIEVycm9yIHN0YXRlJyk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFBlcnNpc3RlbnRTdHJlYW1TdGF0ZS5CYWNrb2ZmO1xyXG4gICAgICAgIHRoaXMuYmFja29mZi5iYWNrb2ZmQW5kUnVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydCh0aGlzLnN0YXRlID09PSBQZXJzaXN0ZW50U3RyZWFtU3RhdGUuQmFja29mZiwgJ0JhY2tvZmYgZWxhcHNlZCBidXQgc3RhdGUgaXMgbm93OiAnICsgdGhpcy5zdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gUGVyc2lzdGVudFN0cmVhbVN0YXRlLkluaXRpYWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQodGhpcy5pc1N0YXJ0ZWQoKSwgJ1BlcnNpc3RlbnRTdHJlYW0gc2hvdWxkIGhhdmUgc3RhcnRlZCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICB9O1xyXG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdHNcclxuICAgIFBlcnNpc3RlbnRTdHJlYW0ucHJvdG90eXBlLmhhbmRsZVN0cmVhbUNsb3NlID0gZnVuY3Rpb24gKGVycm9yJCQxKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuaXNTdGFydGVkKCksIFwiQ2FuJ3QgaGFuZGxlIHNlcnZlciBjbG9zZSBvbiBub24tc3RhcnRlZCBzdHJlYW1cIik7XHJcbiAgICAgICAgZGVidWcoTE9HX1RBRyQ2LCBcImNsb3NlIHdpdGggZXJyb3I6IFwiICsgZXJyb3IkJDEpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtID0gbnVsbDtcclxuICAgICAgICAvLyBJbiB0aGVvcnkgdGhlIHN0cmVhbSBjb3VsZCBjbG9zZSBjbGVhbmx5LCBob3dldmVyLCBpbiBvdXIgY3VycmVudCBtb2RlbFxyXG4gICAgICAgIC8vIHdlIG5ldmVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWNhdXNlIGlmIHdlIHN0b3AgYSBzdHJlYW0gb3Vyc2VsdmVzLFxyXG4gICAgICAgIC8vIHRoaXMgY2FsbGJhY2sgd2lsbCBuZXZlciBiZSBjYWxsZWQuIFRvIHByZXZlbnQgY2FzZXMgd2hlcmUgd2UgcmV0cnlcclxuICAgICAgICAvLyB3aXRob3V0IGEgYmFja29mZiBhY2NpZGVudGFsbHksIHdlIHNldCB0aGUgc3RyZWFtIHRvIGVycm9yIGluIGFsbCBjYXNlcy5cclxuICAgICAgICByZXR1cm4gdGhpcy5jbG9zZShQZXJzaXN0ZW50U3RyZWFtU3RhdGUuRXJyb3IsIGVycm9yJCQxKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBcImRpc3BhdGNoZXJcIiBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgb3BlcmF0aW9ucyBvbnRvIHRoZVxyXG4gICAgICogQXN5bmNRdWV1ZSBidXQgb25seSBydW5zIHRoZW0gaWYgY2xvc2VDb3VudCByZW1haW5zIHVuY2hhbmdlZC4gVGhpcyBhbGxvd3NcclxuICAgICAqIHVzIHRvIHR1cm4gYXV0aCAvIHN0cmVhbSBjYWxsYmFja3MgaW50byBuby1vcHMgaWYgdGhlIHN0cmVhbSBpcyBjbG9zZWQgL1xyXG4gICAgICogcmUtb3BlbmVkLCBldGMuXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRTdHJlYW0ucHJvdG90eXBlLmdldENsb3NlR3VhcmRlZERpc3BhdGNoZXIgPSBmdW5jdGlvbiAoc3RhcnRDbG9zZUNvdW50KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnF1ZXVlLmVucXVldWVBbmRGb3JnZXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmNsb3NlQ291bnQgPT09IHN0YXJ0Q2xvc2VDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRyQ2LCAnc3RyZWFtIGNhbGxiYWNrIHNraXBwZWQgYnkgZ2V0Q2xvc2VHdWFyZGVkRGlzcGF0Y2hlci4nKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBlcnNpc3RlbnRTdHJlYW07XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBIFBlcnNpc3RlbnRTdHJlYW0gdGhhdCBpbXBsZW1lbnRzIHRoZSBMaXN0ZW4gUlBDLlxyXG4gKlxyXG4gKiBPbmNlIHRoZSBMaXN0ZW4gc3RyZWFtIGhhcyBjYWxsZWQgdGhlIG9uT3BlbigpIGxpc3RlbmVyLCBhbnkgbnVtYmVyIG9mXHJcbiAqIGxpc3RlbigpIGFuZCB1bmxpc3RlbigpIGNhbGxzIGNhbiBiZSBtYWRlIHRvIGNvbnRyb2wgd2hhdCBjaGFuZ2VzIHdpbGwgYmVcclxuICogc2VudCBmcm9tIHRoZSBzZXJ2ZXIgZm9yIExpc3RlblJlc3BvbnNlcy5cclxuICovXHJcbnZhciBQZXJzaXN0ZW50TGlzdGVuU3RyZWFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUGVyc2lzdGVudExpc3RlblN0cmVhbSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFBlcnNpc3RlbnRMaXN0ZW5TdHJlYW0ocXVldWUsIGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBzZXJpYWxpemVyLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHF1ZXVlLCBUaW1lcklkLkxpc3RlblN0cmVhbUNvbm5lY3Rpb25CYWNrb2ZmLCBUaW1lcklkLkxpc3RlblN0cmVhbUlkbGUsIGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBsaXN0ZW5lcikgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5zZXJpYWxpemVyID0gc2VyaWFsaXplcjtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBQZXJzaXN0ZW50TGlzdGVuU3RyZWFtLnByb3RvdHlwZS5zdGFydFJwYyA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24ub3BlblN0cmVhbSgnTGlzdGVuJywgdG9rZW4pO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRMaXN0ZW5TdHJlYW0ucHJvdG90eXBlLm9uTWVzc2FnZSA9IGZ1bmN0aW9uICh3YXRjaENoYW5nZVByb3RvKSB7XHJcbiAgICAgICAgLy8gQSBzdWNjZXNzZnVsIHJlc3BvbnNlIG1lYW5zIHRoZSBzdHJlYW0gaXMgaGVhbHRoeVxyXG4gICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xyXG4gICAgICAgIHZhciB3YXRjaENoYW5nZSA9IHRoaXMuc2VyaWFsaXplci5mcm9tV2F0Y2hDaGFuZ2Uod2F0Y2hDaGFuZ2VQcm90byk7XHJcbiAgICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5zZXJpYWxpemVyLnZlcnNpb25Gcm9tTGlzdGVuUmVzcG9uc2Uod2F0Y2hDaGFuZ2VQcm90byk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIub25XYXRjaENoYW5nZSh3YXRjaENoYW5nZSwgc25hcHNob3QpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJzIGludGVyZXN0IGluIHRoZSByZXN1bHRzIG9mIHRoZSBnaXZlbiBxdWVyeS4gSWYgdGhlIHF1ZXJ5XHJcbiAgICAgKiBpbmNsdWRlcyBhIHJlc3VtZVRva2VuIGl0IHdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIHJlcXVlc3QuIFJlc3VsdHMgdGhhdFxyXG4gICAgICogYWZmZWN0IHRoZSBxdWVyeSB3aWxsIGJlIHN0cmVhbWVkIGJhY2sgYXMgV2F0Y2hDaGFuZ2UgbWVzc2FnZXMgdGhhdFxyXG4gICAgICogcmVmZXJlbmNlIHRoZSB0YXJnZXRJZC5cclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudExpc3RlblN0cmVhbS5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiAocXVlcnlEYXRhKSB7XHJcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7fTtcclxuICAgICAgICByZXF1ZXN0LmRhdGFiYXNlID0gdGhpcy5zZXJpYWxpemVyLmVuY29kZWREYXRhYmFzZUlkO1xyXG4gICAgICAgIHJlcXVlc3QuYWRkVGFyZ2V0ID0gdGhpcy5zZXJpYWxpemVyLnRvVGFyZ2V0KHF1ZXJ5RGF0YSk7XHJcbiAgICAgICAgdmFyIGxhYmVscyA9IHRoaXMuc2VyaWFsaXplci50b0xpc3RlblJlcXVlc3RMYWJlbHMocXVlcnlEYXRhKTtcclxuICAgICAgICBpZiAobGFiZWxzKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QubGFiZWxzID0gbGFiZWxzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVW5yZWdpc3RlcnMgaW50ZXJlc3QgaW4gdGhlIHJlc3VsdHMgb2YgdGhlIHF1ZXJ5IGFzc29jaWF0ZWQgd2l0aCB0aGVcclxuICAgICAqIGdpdmVuIHRhcmdldElkLlxyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50TGlzdGVuU3RyZWFtLnByb3RvdHlwZS51bndhdGNoID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7fTtcclxuICAgICAgICByZXF1ZXN0LmRhdGFiYXNlID0gdGhpcy5zZXJpYWxpemVyLmVuY29kZWREYXRhYmFzZUlkO1xyXG4gICAgICAgIHJlcXVlc3QucmVtb3ZlVGFyZ2V0ID0gdGFyZ2V0SWQ7XHJcbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUGVyc2lzdGVudExpc3RlblN0cmVhbTtcclxufShQZXJzaXN0ZW50U3RyZWFtKSk7XHJcbi8qKlxyXG4gKiBBIFN0cmVhbSB0aGF0IGltcGxlbWVudHMgdGhlIFdyaXRlIFJQQy5cclxuICpcclxuICogVGhlIFdyaXRlIFJQQyByZXF1aXJlcyB0aGUgY2FsbGVyIHRvIG1haW50YWluIHNwZWNpYWwgc3RyZWFtVG9rZW5cclxuICogc3RhdGUgaW4gYmV0d2VlbiBjYWxscywgdG8gaGVscCB0aGUgc2VydmVyIHVuZGVyc3RhbmQgd2hpY2ggcmVzcG9uc2VzIHRoZVxyXG4gKiBjbGllbnQgaGFzIHByb2Nlc3NlZCBieSB0aGUgdGltZSB0aGUgbmV4dCByZXF1ZXN0IGlzIG1hZGUuIEV2ZXJ5IHJlc3BvbnNlXHJcbiAqIHdpbGwgY29udGFpbiBhIHN0cmVhbVRva2VuOyB0aGlzIHZhbHVlIG11c3QgYmUgcGFzc2VkIHRvIHRoZSBuZXh0XHJcbiAqIHJlcXVlc3QuXHJcbiAqXHJcbiAqIEFmdGVyIGNhbGxpbmcgc3RhcnQoKSBvbiB0aGlzIHN0cmVhbSwgdGhlIG5leHQgcmVxdWVzdCBtdXN0IGJlIGEgaGFuZHNoYWtlLFxyXG4gKiBjb250YWluaW5nIHdoYXRldmVyIHN0cmVhbVRva2VuIGlzIG9uIGhhbmQuIE9uY2UgYSByZXNwb25zZSB0byB0aGlzXHJcbiAqIHJlcXVlc3QgaXMgcmVjZWl2ZWQsIGFsbCBwZW5kaW5nIG11dGF0aW9ucyBtYXkgYmUgc3VibWl0dGVkLiBXaGVuXHJcbiAqIHN1Ym1pdHRpbmcgbXVsdGlwbGUgYmF0Y2hlcyBvZiBtdXRhdGlvbnMgYXQgdGhlIHNhbWUgdGltZSwgaXQnc1xyXG4gKiBva2F5IHRvIHVzZSB0aGUgc2FtZSBzdHJlYW1Ub2tlbiBmb3IgdGhlIGNhbGxzIHRvIHdyaXRlTXV0YXRpb25zLlxyXG4gKlxyXG4gKiBUT0RPKGIvMzMyNzEyMzUpOiBVc2UgcHJvdG8gdHlwZXNcclxuICovXHJcbnZhciBQZXJzaXN0ZW50V3JpdGVTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhQZXJzaXN0ZW50V3JpdGVTdHJlYW0sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQZXJzaXN0ZW50V3JpdGVTdHJlYW0ocXVldWUsIGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBzZXJpYWxpemVyLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHF1ZXVlLCBUaW1lcklkLldyaXRlU3RyZWFtQ29ubmVjdGlvbkJhY2tvZmYsIFRpbWVySWQuV3JpdGVTdHJlYW1JZGxlLCBjb25uZWN0aW9uLCBjcmVkZW50aWFscywgbGlzdGVuZXIpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuc2VyaWFsaXplciA9IHNlcmlhbGl6ZXI7XHJcbiAgICAgICAgX3RoaXMuaGFuZHNoYWtlQ29tcGxldGVfID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBlcnNpc3RlbnRXcml0ZVN0cmVhbS5wcm90b3R5cGUsIFwiaGFuZHNoYWtlQ29tcGxldGVcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRyYWNrcyB3aGV0aGVyIG9yIG5vdCBhIGhhbmRzaGFrZSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgZXhjaGFuZ2VkIGFuZFxyXG4gICAgICAgICAqIHRoZSBzdHJlYW0gaXMgcmVhZHkgdG8gYWNjZXB0IG11dGF0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZHNoYWtlQ29tcGxldGVfO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLy8gT3ZlcnJpZGUgb2YgUGVyc2lzdGVudFN0cmVhbS5zdGFydFxyXG4gICAgUGVyc2lzdGVudFdyaXRlU3RyZWFtLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmhhbmRzaGFrZUNvbXBsZXRlXyA9IGZhbHNlO1xyXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuc3RhcnQuY2FsbCh0aGlzKTtcclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50V3JpdGVTdHJlYW0ucHJvdG90eXBlLnRlYXJEb3duID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhhbmRzaGFrZUNvbXBsZXRlXykge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlTXV0YXRpb25zKFtdKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudFdyaXRlU3RyZWFtLnByb3RvdHlwZS5zdGFydFJwYyA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24ub3BlblN0cmVhbSgnV3JpdGUnLCB0b2tlbik7XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudFdyaXRlU3RyZWFtLnByb3RvdHlwZS5vbk1lc3NhZ2UgPSBmdW5jdGlvbiAocmVzcG9uc2VQcm90bykge1xyXG4gICAgICAgIC8vIEFsd2F5cyBjYXB0dXJlIHRoZSBsYXN0IHN0cmVhbSB0b2tlbi5cclxuICAgICAgICBhc3NlcnQoISFyZXNwb25zZVByb3RvLnN0cmVhbVRva2VuLCAnR290IGEgd3JpdGUgcmVzcG9uc2Ugd2l0aG91dCBhIHN0cmVhbSB0b2tlbicpO1xyXG4gICAgICAgIHRoaXMubGFzdFN0cmVhbVRva2VuID0gcmVzcG9uc2VQcm90by5zdHJlYW1Ub2tlbjtcclxuICAgICAgICBpZiAoIXRoaXMuaGFuZHNoYWtlQ29tcGxldGVfKSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCByZXNwb25zZSBpcyBhbHdheXMgdGhlIGhhbmRzaGFrZSByZXNwb25zZVxyXG4gICAgICAgICAgICBhc3NlcnQoIXJlc3BvbnNlUHJvdG8ud3JpdGVSZXN1bHRzIHx8IHJlc3BvbnNlUHJvdG8ud3JpdGVSZXN1bHRzLmxlbmd0aCA9PT0gMCwgJ0dvdCBtdXRhdGlvbiByZXN1bHRzIGZvciBoYW5kc2hha2UnKTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kc2hha2VDb21wbGV0ZV8gPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5vbkhhbmRzaGFrZUNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBBIHN1Y2Nlc3NmdWwgZmlyc3Qgd3JpdGUgcmVzcG9uc2UgbWVhbnMgdGhlIHN0cmVhbSBpcyBoZWFsdGh5LFxyXG4gICAgICAgICAgICAvLyBOb3RlLCB0aGF0IHdlIGNvdWxkIGNvbnNpZGVyIGEgc3VjY2Vzc2Z1bCBoYW5kc2hha2UgaGVhbHRoeSwgaG93ZXZlcixcclxuICAgICAgICAgICAgLy8gdGhlIHdyaXRlIGl0c2VsZiBtaWdodCBiZSBjYXVzaW5nIGFuIGVycm9yIHdlIHdhbnQgdG8gYmFjayBvZmYgZnJvbS5cclxuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gdGhpcy5zZXJpYWxpemVyLmZyb21Xcml0ZVJlc3VsdHMocmVzcG9uc2VQcm90by53cml0ZVJlc3VsdHMsIHJlc3BvbnNlUHJvdG8uY29tbWl0VGltZSk7XHJcbiAgICAgICAgICAgIHZhciBjb21taXRWZXJzaW9uID0gdGhpcy5zZXJpYWxpemVyLmZyb21WZXJzaW9uKHJlc3BvbnNlUHJvdG8uY29tbWl0VGltZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLm9uTXV0YXRpb25SZXN1bHQoY29tbWl0VmVyc2lvbiwgcmVzdWx0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgYW4gaW5pdGlhbCBzdHJlYW1Ub2tlbiB0byB0aGUgc2VydmVyLCBwZXJmb3JtaW5nIHRoZSBoYW5kc2hha2VcclxuICAgICAqIHJlcXVpcmVkIHRvIG1ha2UgdGhlIFN0cmVhbWluZ1dyaXRlIFJQQyB3b3JrLiBTdWJzZXF1ZW50XHJcbiAgICAgKiBjYWxscyBzaG91bGQgd2FpdCB1bnRpbCBvbkhhbmRzaGFrZUNvbXBsZXRlIHdhcyBjYWxsZWQuXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRXcml0ZVN0cmVhbS5wcm90b3R5cGUud3JpdGVIYW5kc2hha2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuaXNPcGVuKCksICdXcml0aW5nIGhhbmRzaGFrZSByZXF1aXJlcyBhbiBvcGVuZWQgc3RyZWFtJyk7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLmhhbmRzaGFrZUNvbXBsZXRlXywgJ0hhbmRzaGFrZSBhbHJlYWR5IGNvbXBsZXRlZCcpO1xyXG4gICAgICAgIC8vIFRPRE8oZGltb25kKTogU3VwcG9ydCBzdHJlYW0gcmVzdW1wdGlvbi4gV2UgaW50ZW50aW9uYWxseSBkbyBub3Qgc2V0IHRoZVxyXG4gICAgICAgIC8vIHN0cmVhbSB0b2tlbiBvbiB0aGUgaGFuZHNoYWtlLCBpZ25vcmluZyBhbnkgc3RyZWFtIHRva2VuIHdlIG1pZ2h0IGhhdmUuXHJcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7fTtcclxuICAgICAgICByZXF1ZXN0LmRhdGFiYXNlID0gdGhpcy5zZXJpYWxpemVyLmVuY29kZWREYXRhYmFzZUlkO1xyXG4gICAgICAgIHRoaXMuc2VuZFJlcXVlc3QocmVxdWVzdCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIFNlbmRzIGEgZ3JvdXAgb2YgbXV0YXRpb25zIHRvIHRoZSBGaXJlc3RvcmUgYmFja2VuZCB0byBhcHBseS4gKi9cclxuICAgIFBlcnNpc3RlbnRXcml0ZVN0cmVhbS5wcm90b3R5cGUud3JpdGVNdXRhdGlvbnMgPSBmdW5jdGlvbiAobXV0YXRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBhc3NlcnQodGhpcy5pc09wZW4oKSwgJ1dyaXRpbmcgbXV0YXRpb25zIHJlcXVpcmVzIGFuIG9wZW5lZCBzdHJlYW0nKTtcclxuICAgICAgICBhc3NlcnQodGhpcy5oYW5kc2hha2VDb21wbGV0ZV8sICdIYW5kc2hha2UgbXVzdCBiZSBjb21wbGV0ZSBiZWZvcmUgd3JpdGluZyBtdXRhdGlvbnMnKTtcclxuICAgICAgICBhc3NlcnQodGhpcy5sYXN0U3RyZWFtVG9rZW4ubGVuZ3RoID4gMCwgJ1RyeWluZyB0byB3cml0ZSBtdXRhdGlvbiB3aXRob3V0IGEgdG9rZW4nKTtcclxuICAgICAgICB2YXIgcmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgLy8gUHJvdG9zIGFyZSB0eXBlZCB3aXRoIHN0cmluZywgYnV0IHdlIHN1cHBvcnQgVUludDhBcnJheSBvbiBOb2RlXHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcclxuICAgICAgICAgICAgc3RyZWFtVG9rZW46IHRoaXMubGFzdFN0cmVhbVRva2VuLFxyXG4gICAgICAgICAgICB3cml0ZXM6IG11dGF0aW9ucy5tYXAoZnVuY3Rpb24gKG11dGF0aW9uKSB7IHJldHVybiBfdGhpcy5zZXJpYWxpemVyLnRvTXV0YXRpb24obXV0YXRpb24pOyB9KVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUGVyc2lzdGVudFdyaXRlU3RyZWFtO1xyXG59KFBlcnNpc3RlbnRTdHJlYW0pKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEYXRhc3RvcmUgaXMgYSB3cmFwcGVyIGFyb3VuZCB0aGUgZXh0ZXJuYWwgR29vZ2xlIENsb3VkIERhdGFzdG9yZSBncnBjIEFQSSxcclxuICogd2hpY2ggcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRoYXQgaXMgbW9yZSBjb252ZW5pZW50IGZvciB0aGUgcmVzdCBvZiB0aGVcclxuICogY2xpZW50IFNESyBhcmNoaXRlY3R1cmUgdG8gY29uc3VtZS5cclxuICovXHJcbnZhciBEYXRhc3RvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYXRhc3RvcmUocXVldWUsIGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBzZXJpYWxpemVyKSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IHF1ZXVlO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XHJcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xyXG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IHNlcmlhbGl6ZXI7XHJcbiAgICB9XHJcbiAgICBEYXRhc3RvcmUucHJvdG90eXBlLm5ld1BlcnNpc3RlbnRXcml0ZVN0cmVhbSA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUGVyc2lzdGVudFdyaXRlU3RyZWFtKHRoaXMucXVldWUsIHRoaXMuY29ubmVjdGlvbiwgdGhpcy5jcmVkZW50aWFscywgdGhpcy5zZXJpYWxpemVyLCBsaXN0ZW5lcik7XHJcbiAgICB9O1xyXG4gICAgRGF0YXN0b3JlLnByb3RvdHlwZS5uZXdQZXJzaXN0ZW50V2F0Y2hTdHJlYW0gPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBlcnNpc3RlbnRMaXN0ZW5TdHJlYW0odGhpcy5xdWV1ZSwgdGhpcy5jb25uZWN0aW9uLCB0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLnNlcmlhbGl6ZXIsIGxpc3RlbmVyKTtcclxuICAgIH07XHJcbiAgICBEYXRhc3RvcmUucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIGRhdGFiYXNlOiB0aGlzLnNlcmlhbGl6ZXIuZW5jb2RlZERhdGFiYXNlSWQsXHJcbiAgICAgICAgICAgIHdyaXRlczogbXV0YXRpb25zLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gX3RoaXMuc2VyaWFsaXplci50b011dGF0aW9uKG0pOyB9KVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW52b2tlUlBDKCdDb21taXQnLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zZXJpYWxpemVyLmZyb21Xcml0ZVJlc3VsdHMocmVzcG9uc2Uud3JpdGVSZXN1bHRzLCByZXNwb25zZS5jb21taXRUaW1lKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBEYXRhc3RvcmUucHJvdG90eXBlLmxvb2t1cCA9IGZ1bmN0aW9uIChrZXlzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICBkYXRhYmFzZTogdGhpcy5zZXJpYWxpemVyLmVuY29kZWREYXRhYmFzZUlkLFxyXG4gICAgICAgICAgICBkb2N1bWVudHM6IGtleXMubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBfdGhpcy5zZXJpYWxpemVyLnRvTmFtZShrKTsgfSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludm9rZVN0cmVhbWluZ1JQQygnQmF0Y2hHZXREb2N1bWVudHMnLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHZhciBkb2NzID0gbWF5YmVEb2N1bWVudE1hcCgpO1xyXG4gICAgICAgICAgICByZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIChwcm90bykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IF90aGlzLnNlcmlhbGl6ZXIuZnJvbU1heWJlRG9jdW1lbnQocHJvdG8pO1xyXG4gICAgICAgICAgICAgICAgZG9jcyA9IGRvY3MuaW5zZXJ0KGRvYy5rZXksIGRvYyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZG9jcy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgICAgIGFzc2VydCghIWRvYywgJ01pc3NpbmcgZW50aXR5IGluIHdyaXRlIHJlc3BvbnNlIGZvciAnICsga2V5KTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRvYyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBHZXRzIGFuIGF1dGggdG9rZW4gYW5kIGludm9rZXMgdGhlIHByb3ZpZGVkIFJQQy4gKi9cclxuICAgIERhdGFzdG9yZS5wcm90b3R5cGUuaW52b2tlUlBDID0gZnVuY3Rpb24gKHJwY05hbWUsIHJlcXVlc3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWRlbnRpYWxzXHJcbiAgICAgICAgICAgIC5nZXRUb2tlbigpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY29ubmVjdGlvbi5pbnZva2VSUEMocnBjTmFtZSwgcmVxdWVzdCwgdG9rZW4pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IENvZGUuVU5BVVRIRU5USUNBVEVEKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jcmVkZW50aWFscy5pbnZhbGlkYXRlVG9rZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKiogR2V0cyBhbiBhdXRoIHRva2VuIGFuZCBpbnZva2VzIHRoZSBwcm92aWRlZCBSUEMgd2l0aCBzdHJlYW1lZCByZXN1bHRzLiAqL1xyXG4gICAgRGF0YXN0b3JlLnByb3RvdHlwZS5pbnZva2VTdHJlYW1pbmdSUEMgPSBmdW5jdGlvbiAocnBjTmFtZSwgcmVxdWVzdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlZGVudGlhbHNcclxuICAgICAgICAgICAgLmdldFRva2VuKClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jb25uZWN0aW9uLmludm9rZVN0cmVhbWluZ1JQQyhycGNOYW1lLCByZXF1ZXN0LCB0b2tlbik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gQ29kZS5VTkFVVEhFTlRJQ0FURUQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNyZWRlbnRpYWxzLmludmFsaWRhdGVUb2tlbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEYXRhc3RvcmU7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogSW50ZXJuYWwgdHJhbnNhY3Rpb24gb2JqZWN0IHJlc3BvbnNpYmxlIGZvciBhY2N1bXVsYXRpbmcgdGhlIG11dGF0aW9ucyB0b1xyXG4gKiBwZXJmb3JtIGFuZCB0aGUgYmFzZSB2ZXJzaW9ucyBmb3IgYW55IGRvY3VtZW50cyByZWFkLlxyXG4gKi9cclxudmFyIFRyYW5zYWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oZGF0YXN0b3JlKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhc3RvcmUgPSBkYXRhc3RvcmU7XHJcbiAgICAgICAgLy8gVGhlIHZlcnNpb24gb2YgZWFjaCBkb2N1bWVudCB0aGF0IHdhcyByZWFkIGR1cmluZyB0aGlzIHRyYW5zYWN0aW9uLlxyXG4gICAgICAgIHRoaXMucmVhZFZlcnNpb25zID0gZG9jdW1lbnRWZXJzaW9uTWFwKCk7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbW1pdHRlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnJlY29yZFZlcnNpb24gPSBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgdmFyIGRvY1ZlcnNpb247XHJcbiAgICAgICAgaWYgKGRvYyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIGRvY1ZlcnNpb24gPSBkb2MudmVyc2lvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZG9jIGluc3RhbmNlb2YgTm9Eb2N1bWVudCkge1xyXG4gICAgICAgICAgICAvLyBGb3IgZGVsZXRlZCBkb2NzLCB3ZSBtdXN0IHVzZSBiYXNlVmVyc2lvbiAwIHdoZW4gd2Ugb3ZlcndyaXRlIHRoZW0uXHJcbiAgICAgICAgICAgIGRvY1ZlcnNpb24gPSBTbmFwc2hvdFZlcnNpb24uZm9yRGVsZXRlZERvYygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgZmFpbCgnRG9jdW1lbnQgaW4gYSB0cmFuc2FjdGlvbiB3YXMgYSAnICsgZG9jLmNvbnN0cnVjdG9yLm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZXhpc3RpbmdWZXJzaW9uID0gdGhpcy5yZWFkVmVyc2lvbnMuZ2V0KGRvYy5rZXkpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ1ZlcnNpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKCFkb2NWZXJzaW9uLmlzRXF1YWwoZXhpc3RpbmdWZXJzaW9uKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyB0cmFuc2FjdGlvbiB3aWxsIGZhaWwgbm8gbWF0dGVyIHdoYXQuXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5BQk9SVEVELCAnRG9jdW1lbnQgdmVyc2lvbiBjaGFuZ2VkIGJldHdlZW4gdHdvIHJlYWRzLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlYWRWZXJzaW9ucyA9IHRoaXMucmVhZFZlcnNpb25zLmluc2VydChkb2Mua2V5LCBkb2NWZXJzaW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLmxvb2t1cCA9IGZ1bmN0aW9uIChrZXlzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5jb21taXR0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdUcmFuc2FjdGlvbiBoYXMgYWxyZWFkeSBjb21wbGV0ZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm11dGF0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnVHJhbnNhY3Rpb25zIGxvb2t1cHMgYXJlIGludmFsaWQgYWZ0ZXIgd3JpdGVzLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhc3RvcmUubG9va3VwKGtleXMpLnRoZW4oZnVuY3Rpb24gKGRvY3MpIHtcclxuICAgICAgICAgICAgZG9jcy5mb3JFYWNoKGZ1bmN0aW9uIChkb2MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkb2MgaW5zdGFuY2VvZiBOb0RvY3VtZW50IHx8IGRvYyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVjb3JkVmVyc2lvbihkb2MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbCgnRG9jdW1lbnQgaW4gYSB0cmFuc2FjdGlvbiB3YXMgYSAnICsgZG9jLmNvbnN0cnVjdG9yLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGRvY3M7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucykge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbW1pdHRlZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5GQUlMRURfUFJFQ09ORElUSU9OLCAnVHJhbnNhY3Rpb24gaGFzIGFscmVhZHkgY29tcGxldGVkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm11dGF0aW9ucyA9IHRoaXMubXV0YXRpb25zLmNvbmNhdChtdXRhdGlvbnMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgdmVyc2lvbiBvZiB0aGlzIGRvY3VtZW50IHdoZW4gaXQgd2FzIHJlYWQgaW4gdGhpcyB0cmFuc2FjdGlvbixcclxuICAgICAqIGFzIGEgcHJlY29uZGl0aW9uLCBvciBubyBwcmVjb25kaXRpb24gaWYgaXQgd2FzIG5vdCByZWFkLlxyXG4gICAgICovXHJcbiAgICBUcmFuc2FjdGlvbi5wcm90b3R5cGUucHJlY29uZGl0aW9uID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciB2ZXJzaW9uID0gdGhpcy5yZWFkVmVyc2lvbnMuZ2V0KGtleSk7XHJcbiAgICAgICAgaWYgKHZlcnNpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByZWNvbmRpdGlvbi51cGRhdGVUaW1lKHZlcnNpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByZWNvbmRpdGlvbi5OT05FO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHByZWNvbmRpdGlvbiBmb3IgYSBkb2N1bWVudCBpZiB0aGUgb3BlcmF0aW9uIGlzIGFuIHVwZGF0ZS5cclxuICAgICAqL1xyXG4gICAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnByZWNvbmRpdGlvbkZvclVwZGF0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgdmVyc2lvbiA9IHRoaXMucmVhZFZlcnNpb25zLmdldChrZXkpO1xyXG4gICAgICAgIGlmICh2ZXJzaW9uICYmIHZlcnNpb24uaXNFcXVhbChTbmFwc2hvdFZlcnNpb24uZm9yRGVsZXRlZERvYygpKSkge1xyXG4gICAgICAgICAgICAvLyBUaGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdCwgc28gZmFpbCB0aGUgdHJhbnNhY3Rpb24uXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiQ2FuJ3QgdXBkYXRlIGEgZG9jdW1lbnQgdGhhdCBkb2Vzbid0IGV4aXN0LlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmVyc2lvbikge1xyXG4gICAgICAgICAgICAvLyBEb2N1bWVudCBleGlzdHMsIGJhc2UgcHJlY29uZGl0aW9uIG9uIGRvY3VtZW50IHVwZGF0ZSB0aW1lLlxyXG4gICAgICAgICAgICByZXR1cm4gUHJlY29uZGl0aW9uLnVwZGF0ZVRpbWUodmVyc2lvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBEb2N1bWVudCB3YXMgbm90IHJlYWQsIHNvIHdlIGp1c3QgdXNlIHRoZSBwcmVjb25kaXRpb25zIGZvciBhIGJsaW5kXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZS5cclxuICAgICAgICAgICAgcmV0dXJuIFByZWNvbmRpdGlvbi5leGlzdHModHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCBkYXRhKSB7XHJcbiAgICAgICAgdGhpcy53cml0ZShkYXRhLnRvTXV0YXRpb25zKGtleSwgdGhpcy5wcmVjb25kaXRpb24oa2V5KSkpO1xyXG4gICAgfTtcclxuICAgIFRyYW5zYWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoa2V5LCBkYXRhKSB7XHJcbiAgICAgICAgdGhpcy53cml0ZShkYXRhLnRvTXV0YXRpb25zKGtleSwgdGhpcy5wcmVjb25kaXRpb25Gb3JVcGRhdGUoa2V5KSkpO1xyXG4gICAgfTtcclxuICAgIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdGhpcy53cml0ZShbbmV3IERlbGV0ZU11dGF0aW9uKGtleSwgdGhpcy5wcmVjb25kaXRpb24oa2V5KSldKTtcclxuICAgICAgICAvLyBTaW5jZSB0aGUgZGVsZXRlIHdpbGwgYmUgYXBwbGllZCBiZWZvcmUgYWxsIGZvbGxvd2luZyB3cml0ZXMsIHdlIG5lZWQgdG9cclxuICAgICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgcHJlY29uZGl0aW9uIGZvciB0aGUgbmV4dCB3cml0ZSB3aWxsIGJlIGV4aXN0czogZmFsc2UuXHJcbiAgICAgICAgdGhpcy5yZWFkVmVyc2lvbnMgPSB0aGlzLnJlYWRWZXJzaW9ucy5pbnNlcnQoa2V5LCBTbmFwc2hvdFZlcnNpb24uZm9yRGVsZXRlZERvYygpKTtcclxuICAgIH07XHJcbiAgICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHVud3JpdHRlbiA9IHRoaXMucmVhZFZlcnNpb25zO1xyXG4gICAgICAgIC8vIEZvciBlYWNoIG11dGF0aW9uLCBub3RlIHRoYXQgdGhlIGRvYyB3YXMgd3JpdHRlbi5cclxuICAgICAgICB0aGlzLm11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xyXG4gICAgICAgICAgICB1bndyaXR0ZW4gPSB1bndyaXR0ZW4ucmVtb3ZlKG11dGF0aW9uLmtleSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKCF1bndyaXR0ZW4uaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChFcnJvcignRXZlcnkgZG9jdW1lbnQgcmVhZCBpbiBhIHRyYW5zYWN0aW9uIG11c3QgYWxzbyBiZSB3cml0dGVuLicpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YXN0b3JlLmNvbW1pdCh0aGlzLm11dGF0aW9ucykudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbW1pdHRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERlc2NyaWJlcyB0aGUgb25saW5lIHN0YXRlIG9mIHRoZSBGaXJlc3RvcmUgY2xpZW50LiBOb3RlIHRoYXQgdGhpcyBkb2VzIG5vdFxyXG4gKiBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGUgcmVtb3RlIHN0b3JlIGlzIHRyeWluZyB0byBjb25uZWN0IG9yIG5vdC4gVGhpcyBpc1xyXG4gKiBwcmltYXJpbHkgdXNlZCBieSB0aGUgVmlldyAvIEV2ZW50TWFuYWdlciBjb2RlIHRvIGNoYW5nZSB0aGVpciBiZWhhdmlvciB3aGlsZVxyXG4gKiBvZmZsaW5lIChlLmcuIGdldCgpIGNhbGxzIHNob3VsZG4ndCB3YWl0IGZvciBkYXRhIGZyb20gdGhlIHNlcnZlciBhbmRcclxuICogc25hcHNob3QgZXZlbnRzIHNob3VsZCBzZXQgbWV0YWRhdGEuaXNGcm9tQ2FjaGU9dHJ1ZSkuXHJcbiAqL1xyXG52YXIgT25saW5lU3RhdGU7XHJcbihmdW5jdGlvbiAoT25saW5lU3RhdGUpIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIEZpcmVzdG9yZSBjbGllbnQgaXMgaW4gYW4gdW5rbm93biBvbmxpbmUgc3RhdGUuIFRoaXMgbWVhbnMgdGhlIGNsaWVudFxyXG4gICAgICogaXMgZWl0aGVyIG5vdCBhY3RpdmVseSB0cnlpbmcgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiBvciBpdCBpcyBjdXJyZW50bHlcclxuICAgICAqIHRyeWluZyB0byBlc3RhYmxpc2ggYSBjb25uZWN0aW9uLCBidXQgaXQgaGFzIG5vdCBzdWNjZWVkZWQgb3IgZmFpbGVkIHlldC5cclxuICAgICAqIEhpZ2hlci1sZXZlbCBjb21wb25lbnRzIHNob3VsZCBub3Qgb3BlcmF0ZSBpbiBvZmZsaW5lIG1vZGUuXHJcbiAgICAgKi9cclxuICAgIE9ubGluZVN0YXRlW09ubGluZVN0YXRlW1wiVW5rbm93blwiXSA9IDBdID0gXCJVbmtub3duXCI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBjbGllbnQgaXMgY29ubmVjdGVkIGFuZCB0aGUgY29ubmVjdGlvbnMgYXJlIGhlYWx0aHkuIFRoaXMgc3RhdGUgaXNcclxuICAgICAqIHJlYWNoZWQgYWZ0ZXIgYSBzdWNjZXNzZnVsIGNvbm5lY3Rpb24gYW5kIHRoZXJlIGhhcyBiZWVuIGF0IGxlYXN0IG9uZVxyXG4gICAgICogc3VjY2Vzc2Z1bCBtZXNzYWdlIHJlY2VpdmVkIGZyb20gdGhlIGJhY2tlbmRzLlxyXG4gICAgICovXHJcbiAgICBPbmxpbmVTdGF0ZVtPbmxpbmVTdGF0ZVtcIk9ubGluZVwiXSA9IDFdID0gXCJPbmxpbmVcIjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGNsaWVudCBpcyBlaXRoZXIgdHJ5aW5nIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gYnV0IGZhaWxpbmcsIG9yIGl0XHJcbiAgICAgKiBoYXMgYmVlbiBleHBsaWNpdGx5IG1hcmtlZCBvZmZsaW5lIHZpYSBhIGNhbGwgdG8gZGlzYWJsZU5ldHdvcmsoKS5cclxuICAgICAqIEhpZ2hlci1sZXZlbCBjb21wb25lbnRzIHNob3VsZCBvcGVyYXRlIGluIG9mZmxpbmUgbW9kZS5cclxuICAgICAqL1xyXG4gICAgT25saW5lU3RhdGVbT25saW5lU3RhdGVbXCJPZmZsaW5lXCJdID0gMl0gPSBcIk9mZmxpbmVcIjtcclxufSkoT25saW5lU3RhdGUgfHwgKE9ubGluZVN0YXRlID0ge30pKTtcclxuLyoqIFRoZSBzb3VyY2Ugb2YgYW4gb25saW5lIHN0YXRlIGV2ZW50LiAqL1xyXG52YXIgT25saW5lU3RhdGVTb3VyY2U7XHJcbihmdW5jdGlvbiAoT25saW5lU3RhdGVTb3VyY2UpIHtcclxuICAgIE9ubGluZVN0YXRlU291cmNlW09ubGluZVN0YXRlU291cmNlW1wiUmVtb3RlU3RvcmVcIl0gPSAwXSA9IFwiUmVtb3RlU3RvcmVcIjtcclxuICAgIE9ubGluZVN0YXRlU291cmNlW09ubGluZVN0YXRlU291cmNlW1wiU2hhcmVkQ2xpZW50U3RhdGVcIl0gPSAxXSA9IFwiU2hhcmVkQ2xpZW50U3RhdGVcIjtcclxufSkoT25saW5lU3RhdGVTb3VyY2UgfHwgKE9ubGluZVN0YXRlU291cmNlID0ge30pKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBMT0dfVEFHJDcgPSAnT25saW5lU3RhdGVUcmFja2VyJztcclxuLy8gVG8gZGVhbCB3aXRoIHRyYW5zaWVudCBmYWlsdXJlcywgd2UgYWxsb3cgbXVsdGlwbGUgc3RyZWFtIGF0dGVtcHRzIGJlZm9yZVxyXG4vLyBnaXZpbmcgdXAgYW5kIHRyYW5zaXRpb25pbmcgZnJvbSBPbmxpbmVTdGF0ZS5Vbmtub3duIHRvIE9mZmxpbmUuXHJcbi8vIFRPRE8obWlrZWxlaGVuKTogVGhpcyB1c2VkIHRvIGJlIHNldCB0byAyIGFzIGEgbWl0aWdhdGlvbiBmb3IgYi82NjIyODM5NC5cclxuLy8gQGpkaW1vbmQgdGhpbmtzIHRoYXQgYnVnIGlzIHN1ZmZpY2llbnRseSBmaXhlZCBzbyB0aGF0IHdlIGNhbiBzZXQgdGhpcyBiYWNrXHJcbi8vIHRvIDEuIElmIHRoYXQgd29ya3Mgb2theSwgd2UgY291bGQgcG90ZW50aWFsbHkgcmVtb3ZlIHRoaXMgbG9naWMgZW50aXJlbHkuXHJcbnZhciBNQVhfV0FUQ0hfU1RSRUFNX0ZBSUxVUkVTID0gMTtcclxuLy8gVG8gZGVhbCB3aXRoIHN0cmVhbSBhdHRlbXB0cyB0aGF0IGRvbid0IHN1Y2NlZWQgb3IgZmFpbCBpbiBhIHRpbWVseSBtYW5uZXIsXHJcbi8vIHdlIGhhdmUgYSB0aW1lb3V0IGZvciBPbmxpbmVTdGF0ZSB0byByZWFjaCBPbmxpbmUgb3IgT2ZmbGluZS5cclxuLy8gSWYgdGhlIHRpbWVvdXQgaXMgcmVhY2hlZCwgd2UgdHJhbnNpdGlvbiB0byBPZmZsaW5lIHJhdGhlciB0aGFuIHdhaXRpbmdcclxuLy8gaW5kZWZpbml0ZWx5LlxyXG52YXIgT05MSU5FX1NUQVRFX1RJTUVPVVRfTVMgPSAxMCAqIDEwMDA7XHJcbi8qKlxyXG4gKiBBIGNvbXBvbmVudCB1c2VkIGJ5IHRoZSBSZW1vdGVTdG9yZSB0byB0cmFjayB0aGUgT25saW5lU3RhdGUgKHRoYXQgaXMsXHJcbiAqIHdoZXRoZXIgb3Igbm90IHRoZSBjbGllbnQgYXMgYSB3aG9sZSBzaG91bGQgYmUgY29uc2lkZXJlZCB0byBiZSBvbmxpbmUgb3JcclxuICogb2ZmbGluZSksIGltcGxlbWVudGluZyB0aGUgYXBwcm9wcmlhdGUgaGV1cmlzdGljcy5cclxuICpcclxuICogSW4gcGFydGljdWxhciwgd2hlbiB0aGUgY2xpZW50IGlzIHRyeWluZyB0byBjb25uZWN0IHRvIHRoZSBiYWNrZW5kLCB3ZVxyXG4gKiBhbGxvdyB1cCB0byBNQVhfV0FUQ0hfU1RSRUFNX0ZBSUxVUkVTIHdpdGhpbiBPTkxJTkVfU1RBVEVfVElNRU9VVF9NUyBmb3JcclxuICogYSBjb25uZWN0aW9uIHRvIHN1Y2NlZWQuIElmIHdlIGhhdmUgdG9vIG1hbnkgZmFpbHVyZXMgb3IgdGhlIHRpbWVvdXQgZWxhcHNlcyxcclxuICogdGhlbiB3ZSBzZXQgdGhlIE9ubGluZVN0YXRlIHRvIE9mZmxpbmUsIGFuZCB0aGUgY2xpZW50IHdpbGwgYmVoYXZlIGFzIGlmXHJcbiAqIGl0IGlzIG9mZmxpbmUgKGdldCgpcyB3aWxsIHJldHVybiBjYWNoZWQgZGF0YSwgZXRjLikuXHJcbiAqL1xyXG52YXIgT25saW5lU3RhdGVUcmFja2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gT25saW5lU3RhdGVUcmFja2VyKGFzeW5jUXVldWUsIG9ubGluZVN0YXRlSGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZSA9IGFzeW5jUXVldWU7XHJcbiAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZUhhbmRsZXIgPSBvbmxpbmVTdGF0ZUhhbmRsZXI7XHJcbiAgICAgICAgLyoqIFRoZSBjdXJyZW50IE9ubGluZVN0YXRlLiAqL1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBPbmxpbmVTdGF0ZS5Vbmtub3duO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgY291bnQgb2YgY29uc2VjdXRpdmUgZmFpbHVyZXMgdG8gb3BlbiB0aGUgc3RyZWFtLiBJZiBpdCByZWFjaGVzIHRoZVxyXG4gICAgICAgICAqIG1heGltdW0gZGVmaW5lZCBieSBNQVhfV0FUQ0hfU1RSRUFNX0ZBSUxVUkVTLCB3ZSdsbCBzZXQgdGhlIE9ubGluZVN0YXRlIHRvXHJcbiAgICAgICAgICogT2ZmbGluZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLndhdGNoU3RyZWFtRmFpbHVyZXMgPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgdGltZXIgdGhhdCBlbGFwc2VzIGFmdGVyIE9OTElORV9TVEFURV9USU1FT1VUX01TLCBhdCB3aGljaCBwb2ludCB3ZVxyXG4gICAgICAgICAqIHRyYW5zaXRpb24gZnJvbSBPbmxpbmVTdGF0ZS5Vbmtub3duIHRvIE9ubGluZVN0YXRlLk9mZmxpbmUgd2l0aG91dCB3YWl0aW5nXHJcbiAgICAgICAgICogZm9yIHRoZSBzdHJlYW0gdG8gYWN0dWFsbHkgZmFpbCAoTUFYX1dBVENIX1NUUkVBTV9GQUlMVVJFUyB0aW1lcykuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZVRpbWVyID0gbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGV0aGVyIHRoZSBjbGllbnQgc2hvdWxkIGxvZyBhIHdhcm5pbmcgbWVzc2FnZSBpZiBpdCBmYWlscyB0byBjb25uZWN0IHRvXHJcbiAgICAgICAgICogdGhlIGJhY2tlbmQgKGluaXRpYWxseSB0cnVlLCBjbGVhcmVkIGFmdGVyIGEgc3VjY2Vzc2Z1bCBzdHJlYW0sIG9yIGlmIHdlJ3ZlXHJcbiAgICAgICAgICogbG9nZ2VkIHRoZSBtZXNzYWdlIGFscmVhZHkpLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2hvdWxkV2FybkNsaWVudElzT2ZmbGluZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBieSBSZW1vdGVTdG9yZSB3aGVuIGEgd2F0Y2ggc3RyZWFtIGlzIHN0YXJ0ZWQgKGluY2x1ZGluZyBvbiBlYWNoXHJcbiAgICAgKiBiYWNrb2ZmIGF0dGVtcHQpLlxyXG4gICAgICpcclxuICAgICAqIElmIHRoaXMgaXMgdGhlIGZpcnN0IGF0dGVtcHQsIGl0IHNldHMgdGhlIE9ubGluZVN0YXRlIHRvIFVua25vd24gYW5kIHN0YXJ0c1xyXG4gICAgICogdGhlIG9ubGluZVN0YXRlVGltZXIuXHJcbiAgICAgKi9cclxuICAgIE9ubGluZVN0YXRlVHJhY2tlci5wcm90b3R5cGUuaGFuZGxlV2F0Y2hTdHJlYW1TdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLndhdGNoU3RyZWFtRmFpbHVyZXMgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRBbmRCcm9hZGNhc3QoT25saW5lU3RhdGUuVW5rbm93bik7XHJcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLm9ubGluZVN0YXRlVGltZXIgPT09IG51bGwsIFwib25saW5lU3RhdGVUaW1lciBzaG91bGRuJ3QgYmUgc3RhcnRlZCB5ZXRcIik7XHJcbiAgICAgICAgICAgIHRoaXMub25saW5lU3RhdGVUaW1lciA9IHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQWZ0ZXJEZWxheShUaW1lcklkLk9ubGluZVN0YXRlVGltZW91dCwgT05MSU5FX1NUQVRFX1RJTUVPVVRfTVMsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9ubGluZVN0YXRlVGltZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KF90aGlzLnN0YXRlID09PSBPbmxpbmVTdGF0ZS5Vbmtub3duLCAnVGltZXIgc2hvdWxkIGJlIGNhbmNlbGVkIGlmIHdlIHRyYW5zaXRpb25lZCB0byBhIGRpZmZlcmVudCBzdGF0ZS4nKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvZ0NsaWVudE9mZmxpbmVXYXJuaW5nSWZOZWNlc3NhcnkoXCJCYWNrZW5kIGRpZG4ndCByZXNwb25kIHdpdGhpbiBcIiArIE9OTElORV9TVEFURV9USU1FT1VUX01TIC8gMTAwMCArIFwiIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcInNlY29uZHMuXCIpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0QW5kQnJvYWRjYXN0KE9ubGluZVN0YXRlLk9mZmxpbmUpO1xyXG4gICAgICAgICAgICAgICAgLy8gTk9URTogaGFuZGxlV2F0Y2hTdHJlYW1GYWlsdXJlKCkgd2lsbCBjb250aW51ZSB0byBpbmNyZW1lbnRcclxuICAgICAgICAgICAgICAgIC8vIHdhdGNoU3RyZWFtRmFpbHVyZXMgZXZlbiB0aG91Z2ggd2UgYXJlIGFscmVhZHkgbWFya2VkIE9mZmxpbmUsXHJcbiAgICAgICAgICAgICAgICAvLyBidXQgdGhpcyBpcyBub24taGFybWZ1bC5cclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBvdXIgT25saW5lU3RhdGUgYXMgYXBwcm9wcmlhdGUgYWZ0ZXIgdGhlIHdhdGNoIHN0cmVhbSByZXBvcnRzIGFcclxuICAgICAqIGZhaWx1cmUuIFRoZSBmaXJzdCBmYWlsdXJlIG1vdmVzIHVzIHRvIHRoZSAnVW5rbm93bicgc3RhdGUuIFdlIHRoZW4gbWF5XHJcbiAgICAgKiBhbGxvdyBtdWx0aXBsZSBmYWlsdXJlcyAoYmFzZWQgb24gTUFYX1dBVENIX1NUUkVBTV9GQUlMVVJFUykgYmVmb3JlIHdlXHJcbiAgICAgKiBhY3R1YWxseSB0cmFuc2l0aW9uIHRvIHRoZSAnT2ZmbGluZScgc3RhdGUuXHJcbiAgICAgKi9cclxuICAgIE9ubGluZVN0YXRlVHJhY2tlci5wcm90b3R5cGUuaGFuZGxlV2F0Y2hTdHJlYW1GYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yJCQxKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IE9ubGluZVN0YXRlLk9ubGluZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldEFuZEJyb2FkY2FzdChPbmxpbmVTdGF0ZS5Vbmtub3duKTtcclxuICAgICAgICAgICAgLy8gVG8gZ2V0IHRvIE9ubGluZVN0YXRlLk9ubGluZSwgc2V0KCkgbXVzdCBoYXZlIGJlZW4gY2FsbGVkIHdoaWNoIHdvdWxkXHJcbiAgICAgICAgICAgIC8vIGhhdmUgcmVzZXQgb3VyIGhldXJpc3RpY3MuXHJcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLndhdGNoU3RyZWFtRmFpbHVyZXMgPT09IDAsICd3YXRjaFN0cmVhbUZhaWx1cmVzIG11c3QgYmUgMCcpO1xyXG4gICAgICAgICAgICBhc3NlcnQodGhpcy5vbmxpbmVTdGF0ZVRpbWVyID09PSBudWxsLCAnb25saW5lU3RhdGVUaW1lciBtdXN0IGJlIG51bGwnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2hTdHJlYW1GYWlsdXJlcysrO1xyXG4gICAgICAgICAgICBpZiAodGhpcy53YXRjaFN0cmVhbUZhaWx1cmVzID49IE1BWF9XQVRDSF9TVFJFQU1fRkFJTFVSRVMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJPbmxpbmVTdGF0ZVRpbWVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ0NsaWVudE9mZmxpbmVXYXJuaW5nSWZOZWNlc3NhcnkoXCJDb25uZWN0aW9uIGZhaWxlZCBcIiArIE1BWF9XQVRDSF9TVFJFQU1fRkFJTFVSRVMgKyBcIiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgKFwidGltZXMuIE1vc3QgcmVjZW50IGVycm9yOiBcIiArIGVycm9yJCQxLnRvU3RyaW5nKCkpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0QW5kQnJvYWRjYXN0KE9ubGluZVN0YXRlLk9mZmxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRXhwbGljaXRseSBzZXRzIHRoZSBPbmxpbmVTdGF0ZSB0byB0aGUgc3BlY2lmaWVkIHN0YXRlLlxyXG4gICAgICpcclxuICAgICAqIE5vdGUgdGhhdCB0aGlzIHJlc2V0cyBvdXIgdGltZXJzIC8gZmFpbHVyZSBjb3VudGVycywgZXRjLiB1c2VkIGJ5IG91clxyXG4gICAgICogT2ZmbGluZSBoZXVyaXN0aWNzLCBzbyBtdXN0IG5vdCBiZSB1c2VkIGluIHBsYWNlIG9mXHJcbiAgICAgKiBoYW5kbGVXYXRjaFN0cmVhbVN0YXJ0KCkgYW5kIGhhbmRsZVdhdGNoU3RyZWFtRmFpbHVyZSgpLlxyXG4gICAgICovXHJcbiAgICBPbmxpbmVTdGF0ZVRyYWNrZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJPbmxpbmVTdGF0ZVRpbWVyKCk7XHJcbiAgICAgICAgdGhpcy53YXRjaFN0cmVhbUZhaWx1cmVzID0gMDtcclxuICAgICAgICBpZiAobmV3U3RhdGUgPT09IE9ubGluZVN0YXRlLk9ubGluZSkge1xyXG4gICAgICAgICAgICAvLyBXZSd2ZSBjb25uZWN0ZWQgdG8gd2F0Y2ggYXQgbGVhc3Qgb25jZS4gRG9uJ3Qgd2FybiB0aGUgZGV2ZWxvcGVyXHJcbiAgICAgICAgICAgIC8vIGFib3V0IGJlaW5nIG9mZmxpbmUgZ29pbmcgZm9yd2FyZC5cclxuICAgICAgICAgICAgdGhpcy5zaG91bGRXYXJuQ2xpZW50SXNPZmZsaW5lID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0QW5kQnJvYWRjYXN0KG5ld1N0YXRlKTtcclxuICAgIH07XHJcbiAgICBPbmxpbmVTdGF0ZVRyYWNrZXIucHJvdG90eXBlLnNldEFuZEJyb2FkY2FzdCA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xyXG4gICAgICAgIGlmIChuZXdTdGF0ZSAhPT0gdGhpcy5zdGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gbmV3U3RhdGU7XHJcbiAgICAgICAgICAgIHRoaXMub25saW5lU3RhdGVIYW5kbGVyKG5ld1N0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT25saW5lU3RhdGVUcmFja2VyLnByb3RvdHlwZS5sb2dDbGllbnRPZmZsaW5lV2FybmluZ0lmTmVjZXNzYXJ5ID0gZnVuY3Rpb24gKGRldGFpbHMpIHtcclxuICAgICAgICB2YXIgbWVzc2FnZSA9IFwiQ291bGQgbm90IHJlYWNoIENsb3VkIEZpcmVzdG9yZSBiYWNrZW5kLiBcIiArIGRldGFpbHMgKyBcIlxcblwiICtcclxuICAgICAgICAgICAgXCJUaGlzIHR5cGljYWxseSBpbmRpY2F0ZXMgdGhhdCB5b3VyIGRldmljZSBkb2VzIG5vdCBoYXZlIGEgaGVhbHRoeSBcIiArXHJcbiAgICAgICAgICAgIFwiSW50ZXJuZXQgY29ubmVjdGlvbiBhdCB0aGUgbW9tZW50LiBUaGUgY2xpZW50IHdpbGwgb3BlcmF0ZSBpbiBvZmZsaW5lIFwiICtcclxuICAgICAgICAgICAgXCJtb2RlIHVudGlsIGl0IGlzIGFibGUgdG8gc3VjY2Vzc2Z1bGx5IGNvbm5lY3QgdG8gdGhlIGJhY2tlbmQuXCI7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkV2FybkNsaWVudElzT2ZmbGluZSkge1xyXG4gICAgICAgICAgICBlcnJvcihtZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhpcy5zaG91bGRXYXJuQ2xpZW50SXNPZmZsaW5lID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDcsIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPbmxpbmVTdGF0ZVRyYWNrZXIucHJvdG90eXBlLmNsZWFyT25saW5lU3RhdGVUaW1lciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vbmxpbmVTdGF0ZVRpbWVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25saW5lU3RhdGVUaW1lci5jYW5jZWwoKTtcclxuICAgICAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZVRpbWVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ubGluZVN0YXRlVHJhY2tlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBMT0dfVEFHJDggPSAnUmVtb3RlU3RvcmUnO1xyXG4vLyBUT0RPKGIvMzU4NTM0MDIpOiBOZWdvdGlhdGUgdGhpcyB3aXRoIHRoZSBzdHJlYW0uXHJcbnZhciBNQVhfUEVORElOR19XUklURVMgPSAxMDtcclxuLyoqXHJcbiAqIFJlbW90ZVN0b3JlIC0gQW4gaW50ZXJmYWNlIHRvIHJlbW90ZWx5IHN0b3JlZCBkYXRhLCBiYXNpY2FsbHkgcHJvdmlkaW5nIGFcclxuICogd3JhcHBlciBhcm91bmQgdGhlIERhdGFzdG9yZSB0aGF0IGlzIG1vcmUgcmVsaWFibGUgZm9yIHRoZSByZXN0IG9mIHRoZVxyXG4gKiBzeXN0ZW0uXHJcbiAqXHJcbiAqIFJlbW90ZVN0b3JlIGlzIHJlc3BvbnNpYmxlIGZvciBtYWludGFpbmluZyB0aGUgY29ubmVjdGlvbiB0byB0aGUgc2VydmVyLlxyXG4gKiAtIG1haW50YWluaW5nIGEgbGlzdCBvZiBhY3RpdmUgbGlzdGVucy5cclxuICogLSByZWNvbm5lY3Rpbmcgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBkcm9wcGVkLlxyXG4gKiAtIHJlc3VtaW5nIGFsbCB0aGUgYWN0aXZlIGxpc3RlbnMgb24gcmVjb25uZWN0LlxyXG4gKlxyXG4gKiBSZW1vdGVTdG9yZSBoYW5kbGVzIGFsbCBpbmNvbWluZyBldmVudHMgZnJvbSB0aGUgRGF0YXN0b3JlLlxyXG4gKiAtIGxpc3RlbmluZyB0byB0aGUgd2F0Y2ggc3RyZWFtIGFuZCByZXBhY2thZ2luZyB0aGUgZXZlbnRzIGFzIFJlbW90ZUV2ZW50c1xyXG4gKiAtIG5vdGlmeWluZyBTeW5jRW5naW5lIG9mIGFueSBjaGFuZ2VzIHRvIHRoZSBhY3RpdmUgbGlzdGVucy5cclxuICpcclxuICogUmVtb3RlU3RvcmUgdGFrZXMgd3JpdGVzIGZyb20gb3RoZXIgY29tcG9uZW50cyBhbmQgaGFuZGxlcyB0aGVtIHJlbGlhYmx5LlxyXG4gKiAtIHB1bGxpbmcgcGVuZGluZyBtdXRhdGlvbnMgZnJvbSBMb2NhbFN0b3JlIGFuZCBzZW5kaW5nIHRoZW0gdG8gRGF0YXN0b3JlLlxyXG4gKiAtIHJldHJ5aW5nIG11dGF0aW9ucyB0aGF0IGZhaWxlZCBiZWNhdXNlIG9mIG5ldHdvcmsgcHJvYmxlbXMuXHJcbiAqIC0gYWNraW5nIG11dGF0aW9ucyB0byB0aGUgU3luY0VuZ2luZSBvbmNlIHRoZXkgYXJlIGFjY2VwdGVkIG9yIHJlamVjdGVkLlxyXG4gKi9cclxudmFyIFJlbW90ZVN0b3JlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVtb3RlU3RvcmUoXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBsb2NhbCBzdG9yZSwgdXNlZCB0byBmaWxsIHRoZSB3cml0ZSBwaXBlbGluZSB3aXRoIG91dGJvdW5kIG11dGF0aW9ucy5cclxuICAgICAqL1xyXG4gICAgbG9jYWxTdG9yZSwgXHJcbiAgICAvKiogVGhlIGNsaWVudC1zaWRlIHByb3h5IGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBiYWNrZW5kLiAqL1xyXG4gICAgZGF0YXN0b3JlLCBhc3luY1F1ZXVlLCBvbmxpbmVTdGF0ZUhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLmxvY2FsU3RvcmUgPSBsb2NhbFN0b3JlO1xyXG4gICAgICAgIHRoaXMuZGF0YXN0b3JlID0gZGF0YXN0b3JlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbGlzdCBvZiB1cCB0byBNQVhfUEVORElOR19XUklURVMgd3JpdGVzIHRoYXQgd2UgaGF2ZSBmZXRjaGVkIGZyb20gdGhlXHJcbiAgICAgICAgICogTG9jYWxTdG9yZSB2aWEgZmlsbFdyaXRlUGlwZWxpbmUoKSBhbmQgaGF2ZSBvciB3aWxsIHNlbmQgdG8gdGhlIHdyaXRlXHJcbiAgICAgICAgICogc3RyZWFtLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogV2hlbmV2ZXIgd3JpdGVQaXBlbGluZS5sZW5ndGggPiAwIHRoZSBSZW1vdGVTdG9yZSB3aWxsIGF0dGVtcHQgdG8gc3RhcnQgb3JcclxuICAgICAgICAgKiByZXN0YXJ0IHRoZSB3cml0ZSBzdHJlYW0uIFdoZW4gdGhlIHN0cmVhbSBpcyBlc3RhYmxpc2hlZCB0aGUgd3JpdGVzIGluIHRoZVxyXG4gICAgICAgICAqIHBpcGVsaW5lIHdpbGwgYmUgc2VudCBpbiBvcmRlci5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFdyaXRlcyByZW1haW4gaW4gd3JpdGVQaXBlbGluZSB1bnRpbCB0aGV5IGFyZSBhY2tub3dsZWRnZWQgYnkgdGhlIGJhY2tlbmRcclxuICAgICAgICAgKiBhbmQgdGh1cyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgcmUtc2VudCBpZiB0aGUgc3RyZWFtIGlzIGludGVycnVwdGVkIC9cclxuICAgICAgICAgKiByZXN0YXJ0ZWQgYmVmb3JlIHRoZXkncmUgYWNrbm93bGVkZ2VkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogV3JpdGUgcmVzcG9uc2VzIGZyb20gdGhlIGJhY2tlbmQgYXJlIGxpbmtlZCB0byB0aGVpciBvcmlnaW5hdGluZyByZXF1ZXN0XHJcbiAgICAgICAgICogcHVyZWx5IGJhc2VkIG9uIG9yZGVyLCBhbmQgc28gd2UgY2FuIGp1c3Qgc2hpZnQoKSB3cml0ZXMgZnJvbSB0aGUgZnJvbnQgb2ZcclxuICAgICAgICAgKiB0aGUgd3JpdGVQaXBlbGluZSBhcyB3ZSByZWNlaXZlIHJlc3BvbnNlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLndyaXRlUGlwZWxpbmUgPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG1hcHBpbmcgb2Ygd2F0Y2hlZCB0YXJnZXRzIHRoYXQgdGhlIGNsaWVudCBjYXJlcyBhYm91dCB0cmFja2luZyBhbmQgdGhlXHJcbiAgICAgICAgICogdXNlciBoYXMgZXhwbGljaXRseSBjYWxsZWQgYSAnbGlzdGVuJyBmb3IgdGhpcyB0YXJnZXQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBUaGVzZSB0YXJnZXRzIG1heSBvciBtYXkgbm90IGhhdmUgYmVlbiBzZW50IHRvIG9yIGFja25vd2xlZGdlZCBieSB0aGVcclxuICAgICAgICAgKiBzZXJ2ZXIuIE9uIHJlLWVzdGFibGlzaGluZyB0aGUgbGlzdGVuIHN0cmVhbSwgdGhlc2UgdGFyZ2V0cyBzaG91bGQgYmUgc2VudFxyXG4gICAgICAgICAqIHRvIHRoZSBzZXJ2ZXIuIFRoZSB0YXJnZXRzIHJlbW92ZWQgd2l0aCB1bmxpc3RlbnMgYXJlIHJlbW92ZWQgZWFnZXJseVxyXG4gICAgICAgICAqIHdpdGhvdXQgd2FpdGluZyBmb3IgY29uZmlybWF0aW9uIGZyb20gdGhlIGxpc3RlbiBzdHJlYW0uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5saXN0ZW5UYXJnZXRzID0ge307XHJcbiAgICAgICAgdGhpcy53YXRjaENoYW5nZUFnZ3JlZ2F0b3IgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldCB0byB0cnVlIGJ5IGVuYWJsZU5ldHdvcmsoKSBhbmQgZmFsc2UgYnkgZGlzYWJsZU5ldHdvcmsoKSBhbmQgaW5kaWNhdGVzXHJcbiAgICAgICAgICogdGhlIHVzZXItcHJlZmVycmVkIG5ldHdvcmsgc3RhdGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5uZXR3b3JrRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNQcmltYXJ5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZVRyYWNrZXIgPSBuZXcgT25saW5lU3RhdGVUcmFja2VyKGFzeW5jUXVldWUsIG9ubGluZVN0YXRlSGFuZGxlcik7XHJcbiAgICAgICAgLy8gQ3JlYXRlIHN0cmVhbXMgKGJ1dCBub3RlIHRoZXkncmUgbm90IHN0YXJ0ZWQgeWV0KS5cclxuICAgICAgICB0aGlzLndhdGNoU3RyZWFtID0gdGhpcy5kYXRhc3RvcmUubmV3UGVyc2lzdGVudFdhdGNoU3RyZWFtKHtcclxuICAgICAgICAgICAgb25PcGVuOiB0aGlzLm9uV2F0Y2hTdHJlYW1PcGVuLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIG9uQ2xvc2U6IHRoaXMub25XYXRjaFN0cmVhbUNsb3NlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIG9uV2F0Y2hDaGFuZ2U6IHRoaXMub25XYXRjaFN0cmVhbUNoYW5nZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53cml0ZVN0cmVhbSA9IHRoaXMuZGF0YXN0b3JlLm5ld1BlcnNpc3RlbnRXcml0ZVN0cmVhbSh7XHJcbiAgICAgICAgICAgIG9uT3BlbjogdGhpcy5vbldyaXRlU3RyZWFtT3Blbi5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICBvbkNsb3NlOiB0aGlzLm9uV3JpdGVTdHJlYW1DbG9zZS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICBvbkhhbmRzaGFrZUNvbXBsZXRlOiB0aGlzLm9uV3JpdGVIYW5kc2hha2VDb21wbGV0ZS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICBvbk11dGF0aW9uUmVzdWx0OiB0aGlzLm9uTXV0YXRpb25SZXN1bHQuYmluZCh0aGlzKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgdXAgdGhlIHJlbW90ZSBzdG9yZSwgY3JlYXRpbmcgc3RyZWFtcywgcmVzdG9yaW5nIHN0YXRlIGZyb21cclxuICAgICAqIExvY2FsU3RvcmUsIGV0Yy5cclxuICAgICAqL1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuYWJsZU5ldHdvcmsoKTtcclxuICAgIH07XHJcbiAgICAvKiogUmUtZW5hYmxlcyB0aGUgbmV0d29yay4gSWRlbXBvdGVudC4gKi9cclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5lbmFibGVOZXR3b3JrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXR3b3JrRW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYW5Vc2VOZXR3b3JrKCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMud3JpdGVTdHJlYW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZS5nZXRMYXN0U3RyZWFtVG9rZW4oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYXN0U3RyZWFtVG9rZW4gPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZFN0YXJ0V2F0Y2hTdHJlYW0oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFdhdGNoU3RyZWFtKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9ubGluZVN0YXRlVHJhY2tlci5zZXQoT25saW5lU3RhdGUuVW5rbm93bik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHN0YXJ0IHRoZSB3cml0ZSBzdHJlYW0gaWYgbmVjZXNzYXJ5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmZpbGxXcml0ZVBpcGVsaW5lKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHN0YXJ0IHRoZSB3cml0ZSBzdHJlYW0gaWYgbmVjZXNzYXJ5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUZW1wb3JhcmlseSBkaXNhYmxlcyB0aGUgbmV0d29yay4gVGhlIG5ldHdvcmsgY2FuIGJlIHJlLWVuYWJsZWQgdXNpbmdcclxuICAgICAqIGVuYWJsZU5ldHdvcmsoKS5cclxuICAgICAqL1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmRpc2FibGVOZXR3b3JrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV0d29ya0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5kaXNhYmxlTmV0d29ya0ludGVybmFsKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIE9ubGluZVN0YXRlIHRvIE9mZmxpbmUgc28gZ2V0KClzIHJldHVybiBmcm9tIGNhY2hlLCBldGMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25saW5lU3RhdGVUcmFja2VyLnNldChPbmxpbmVTdGF0ZS5PZmZsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBSZW1vdGVTdG9yZS5wcm90b3R5cGUuZGlzYWJsZU5ldHdvcmtJbnRlcm5hbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLndyaXRlU3RyZWFtLnN0b3AoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMud2F0Y2hTdHJlYW0uc3RvcCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud3JpdGVQaXBlbGluZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDgsIFwiU3RvcHBpbmcgd3JpdGUgc3RyZWFtIHdpdGggXCIgKyB0aGlzLndyaXRlUGlwZWxpbmUubGVuZ3RoICsgXCIgcGVuZGluZyB3cml0ZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndyaXRlUGlwZWxpbmUgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFuVXBXYXRjaFN0cmVhbVN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLnNodXRkb3duID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUckOCwgJ1JlbW90ZVN0b3JlIHNodXR0aW5nIGRvd24uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV0d29ya0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5kaXNhYmxlTmV0d29ya0ludGVybmFsKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIE9ubGluZVN0YXRlIHRvIFVua25vd24gKHJhdGhlciB0aGFuIE9mZmxpbmUpIHRvIGF2b2lkIHBvdGVudGlhbGx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXJpbmcgc3B1cmlvdXMgbGlzdGVuZXIgZXZlbnRzIHdpdGggY2FjaGVkIGRhdGEsIGV0Yy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZVRyYWNrZXIuc2V0KE9ubGluZVN0YXRlLlVua25vd24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBTdGFydHMgbmV3IGxpc3RlbiBmb3IgdGhlIGdpdmVuIHF1ZXJ5LiBVc2VzIHJlc3VtZSB0b2tlbiBpZiBwcm92aWRlZCAqL1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uIChxdWVyeURhdGEpIHtcclxuICAgICAgICBhc3NlcnQoIWNvbnRhaW5zKHRoaXMubGlzdGVuVGFyZ2V0cywgcXVlcnlEYXRhLnRhcmdldElkKSwgJ2xpc3RlbiBjYWxsZWQgd2l0aCBkdXBsaWNhdGUgdGFyZ2V0SWQhJyk7XHJcbiAgICAgICAgLy8gTWFyayB0aGlzIGFzIHNvbWV0aGluZyB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBsaXN0ZW5pbmcgZm9yLlxyXG4gICAgICAgIHRoaXMubGlzdGVuVGFyZ2V0c1txdWVyeURhdGEudGFyZ2V0SWRdID0gcXVlcnlEYXRhO1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFN0YXJ0V2F0Y2hTdHJlYW0oKSkge1xyXG4gICAgICAgICAgICAvLyBUaGUgbGlzdGVuIHdpbGwgYmUgc2VudCBpbiBvbldhdGNoU3RyZWFtT3BlblxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0V2F0Y2hTdHJlYW0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy53YXRjaFN0cmVhbS5pc09wZW4oKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRXYXRjaFJlcXVlc3QocXVlcnlEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIFJlbW92ZXMgdGhlIGxpc3RlbiBmcm9tIHNlcnZlciAqL1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgYXNzZXJ0KGNvbnRhaW5zKHRoaXMubGlzdGVuVGFyZ2V0cywgdGFyZ2V0SWQpLCAndW5saXN0ZW4gY2FsbGVkIHdpdGhvdXQgYXNzaWduZWQgdGFyZ2V0IElEIScpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlblRhcmdldHNbdGFyZ2V0SWRdO1xyXG4gICAgICAgIGlmICh0aGlzLndhdGNoU3RyZWFtLmlzT3BlbigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZFVud2F0Y2hSZXF1ZXN0KHRhcmdldElkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzRW1wdHkodGhpcy5saXN0ZW5UYXJnZXRzKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy53YXRjaFN0cmVhbS5pc09wZW4oKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53YXRjaFN0cmVhbS5tYXJrSWRsZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuY2FuVXNlTmV0d29yaygpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZXZlcnQgdG8gT25saW5lU3RhdGUuVW5rbm93biBpZiB0aGUgd2F0Y2ggc3RyZWFtIGlzIG5vdCBvcGVuIGFuZCB3ZVxyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBubyBsaXN0ZW5lcnMsIHNpbmNlIHdpdGhvdXQgYW55IGxpc3RlbnMgdG8gc2VuZCB3ZSBjYW5ub3RcclxuICAgICAgICAgICAgICAgIC8vIGNvbmZpcm0gaWYgdGhlIHN0cmVhbSBpcyBoZWFsdGh5IGFuZCB1cGdyYWRlIHRvIE9ubGluZVN0YXRlLk9ubGluZS5cclxuICAgICAgICAgICAgICAgIHRoaXMub25saW5lU3RhdGVUcmFja2VyLnNldChPbmxpbmVTdGF0ZS5Vbmtub3duKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKioge0BsaW5rIFRhcmdldE1ldGFkYXRhUHJvdmlkZXIuZ2V0UXVlcnlEYXRhRm9yVGFyZ2V0fSAqL1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmdldFF1ZXJ5RGF0YUZvclRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlblRhcmdldHNbdGFyZ2V0SWRdIHx8IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqIHtAbGluayBUYXJnZXRNZXRhZGF0YVByb3ZpZGVyLmdldFJlbW90ZUtleXNGb3JUYXJnZXR9ICovXHJcbiAgICBSZW1vdGVTdG9yZS5wcm90b3R5cGUuZ2V0UmVtb3RlS2V5c0ZvclRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNFbmdpbmUuZ2V0UmVtb3RlS2V5c0ZvclRhcmdldCh0YXJnZXRJZCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXZSBuZWVkIHRvIGluY3JlbWVudCB0aGUgdGhlIGV4cGVjdGVkIG51bWJlciBvZiBwZW5kaW5nIHJlc3BvbnNlcyB3ZSdyZSBkdWVcclxuICAgICAqIGZyb20gd2F0Y2ggc28gd2Ugd2FpdCBmb3IgdGhlIGFjayB0byBwcm9jZXNzIGFueSBtZXNzYWdlcyBmcm9tIHRoaXMgdGFyZ2V0LlxyXG4gICAgICovXHJcbiAgICBSZW1vdGVTdG9yZS5wcm90b3R5cGUuc2VuZFdhdGNoUmVxdWVzdCA9IGZ1bmN0aW9uIChxdWVyeURhdGEpIHtcclxuICAgICAgICB0aGlzLndhdGNoQ2hhbmdlQWdncmVnYXRvci5yZWNvcmRQZW5kaW5nVGFyZ2V0UmVxdWVzdChxdWVyeURhdGEudGFyZ2V0SWQpO1xyXG4gICAgICAgIHRoaXMud2F0Y2hTdHJlYW0ud2F0Y2gocXVlcnlEYXRhKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFdlIG5lZWQgdG8gaW5jcmVtZW50IHRoZSBleHBlY3RlZCBudW1iZXIgb2YgcGVuZGluZyByZXNwb25zZXMgd2UncmUgZHVlXHJcbiAgICAgKiBmcm9tIHdhdGNoIHNvIHdlIHdhaXQgZm9yIHRoZSByZW1vdmFsIG9uIHRoZSBzZXJ2ZXIgYmVmb3JlIHdlIHByb2Nlc3MgYW55XHJcbiAgICAgKiBtZXNzYWdlcyBmcm9tIHRoaXMgdGFyZ2V0LlxyXG4gICAgICovXHJcbiAgICBSZW1vdGVTdG9yZS5wcm90b3R5cGUuc2VuZFVud2F0Y2hSZXF1ZXN0ID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgdGhpcy53YXRjaENoYW5nZUFnZ3JlZ2F0b3IucmVjb3JkUGVuZGluZ1RhcmdldFJlcXVlc3QodGFyZ2V0SWQpO1xyXG4gICAgICAgIHRoaXMud2F0Y2hTdHJlYW0udW53YXRjaCh0YXJnZXRJZCk7XHJcbiAgICB9O1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLnN0YXJ0V2F0Y2hTdHJlYW0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuc2hvdWxkU3RhcnRXYXRjaFN0cmVhbSgpLCAnc3RhcnRXYXRjaFN0cmVhbSgpIGNhbGxlZCB3aGVuIHNob3VsZFN0YXJ0V2F0Y2hTdHJlYW0oKSBpcyBmYWxzZS4nKTtcclxuICAgICAgICB0aGlzLndhdGNoQ2hhbmdlQWdncmVnYXRvciA9IG5ldyBXYXRjaENoYW5nZUFnZ3JlZ2F0b3IodGhpcyk7XHJcbiAgICAgICAgdGhpcy53YXRjaFN0cmVhbS5zdGFydCgpO1xyXG4gICAgICAgIHRoaXMub25saW5lU3RhdGVUcmFja2VyLmhhbmRsZVdhdGNoU3RyZWFtU3RhcnQoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgd2F0Y2ggc3RyZWFtIHNob3VsZCBiZSBzdGFydGVkIGJlY2F1c2UgaXQncyBuZWNlc3NhcnlcclxuICAgICAqIGFuZCBoYXMgbm90IHlldCBiZWVuIHN0YXJ0ZWQuXHJcbiAgICAgKi9cclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5zaG91bGRTdGFydFdhdGNoU3RyZWFtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5jYW5Vc2VOZXR3b3JrKCkgJiZcclxuICAgICAgICAgICAgIXRoaXMud2F0Y2hTdHJlYW0uaXNTdGFydGVkKCkgJiZcclxuICAgICAgICAgICAgIWlzRW1wdHkodGhpcy5saXN0ZW5UYXJnZXRzKSk7XHJcbiAgICB9O1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmNhblVzZU5ldHdvcmsgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNQcmltYXJ5ICYmIHRoaXMubmV0d29ya0VuYWJsZWQ7XHJcbiAgICB9O1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmNsZWFuVXBXYXRjaFN0cmVhbVN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMud2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBSZW1vdGVTdG9yZS5wcm90b3R5cGUub25XYXRjaFN0cmVhbU9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgZm9yRWFjaE51bWJlcih0aGlzLmxpc3RlblRhcmdldHMsIGZ1bmN0aW9uICh0YXJnZXRJZCwgcXVlcnlEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VuZFdhdGNoUmVxdWVzdChxdWVyeURhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5vbldhdGNoU3RyZWFtQ2xvc2UgPSBmdW5jdGlvbiAoZXJyb3IkJDEpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IkJDEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdyYWNlZnVsIHN0b3AgKGR1ZSB0byBzdG9wKCkgb3IgaWRsZSB0aW1lb3V0KS4gTWFrZSBzdXJlIHRoYXQnc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlc2lyYWJsZS5cclxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoIXRoaXMuc2hvdWxkU3RhcnRXYXRjaFN0cmVhbSgpLCAnV2F0Y2ggc3RyZWFtIHdhcyBzdG9wcGVkIGdyYWNlZnVsbHkgd2hpbGUgc3RpbGwgbmVlZGVkLicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhblVwV2F0Y2hTdHJlYW1TdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgd2Ugc3RpbGwgbmVlZCB0aGUgd2F0Y2ggc3RyZWFtLCByZXRyeSB0aGUgY29ubmVjdGlvbi5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZFN0YXJ0V2F0Y2hTdHJlYW0oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25saW5lU3RhdGVUcmFja2VyLmhhbmRsZVdhdGNoU3RyZWFtRmFpbHVyZShlcnJvciQkMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFdhdGNoU3RyZWFtKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBObyBuZWVkIHRvIHJlc3RhcnQgd2F0Y2ggc3RyZWFtIGJlY2F1c2UgdGhlcmUgYXJlIG5vIGFjdGl2ZSB0YXJnZXRzLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBvbmxpbmUgc3RhdGUgaXMgc2V0IHRvIHVua25vd24gYmVjYXVzZSB0aGVyZSBpcyBubyBhY3RpdmUgYXR0ZW1wdFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF0IGVzdGFibGlzaGluZyBhIGNvbm5lY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ubGluZVN0YXRlVHJhY2tlci5zZXQoT25saW5lU3RhdGUuVW5rbm93bik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5vbldhdGNoU3RyZWFtQ2hhbmdlID0gZnVuY3Rpb24gKHdhdGNoQ2hhbmdlLCBzbmFwc2hvdFZlcnNpb24pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb247XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgY2xpZW50IGFzIG9ubGluZSBzaW5jZSB3ZSBnb3QgYSBtZXNzYWdlIGZyb20gdGhlIHNlcnZlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9ubGluZVN0YXRlVHJhY2tlci5zZXQoT25saW5lU3RhdGUuT25saW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGNoQ2hhbmdlIGluc3RhbmNlb2YgV2F0Y2hUYXJnZXRDaGFuZ2UgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoQ2hhbmdlLnN0YXRlID09PSBXYXRjaFRhcmdldENoYW5nZVN0YXRlLlJlbW92ZWQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoQ2hhbmdlLmNhdXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSB3YXMgYW4gZXJyb3Igb24gYSB0YXJnZXQsIGRvbid0IHdhaXQgZm9yIGEgY29uc2lzdGVudCBzbmFwc2hvdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gcmFpc2UgZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5oYW5kbGVUYXJnZXRFcnJvcih3YXRjaENoYW5nZSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaENoYW5nZSBpbnN0YW5jZW9mIERvY3VtZW50V2F0Y2hDaGFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yLmhhbmRsZURvY3VtZW50Q2hhbmdlKHdhdGNoQ2hhbmdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh3YXRjaENoYW5nZSBpbnN0YW5jZW9mIEV4aXN0ZW5jZUZpbHRlckNoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YXRjaENoYW5nZUFnZ3JlZ2F0b3IuaGFuZGxlRXhpc3RlbmNlRmlsdGVyKHdhdGNoQ2hhbmdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCh3YXRjaENoYW5nZSBpbnN0YW5jZW9mIFdhdGNoVGFyZ2V0Q2hhbmdlLCAnRXhwZWN0ZWQgd2F0Y2hDaGFuZ2UgdG8gYmUgYW4gaW5zdGFuY2Ugb2YgV2F0Y2hUYXJnZXRDaGFuZ2UnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yLmhhbmRsZVRhcmdldENoYW5nZSh3YXRjaENoYW5nZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhc25hcHNob3RWZXJzaW9uLmlzRXF1YWwoU25hcHNob3RWZXJzaW9uLk1JTikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvY2FsU3RvcmUuZ2V0TGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHNuYXBzaG90VmVyc2lvbi5jb21wYXJlVG8obGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbikgPj0gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHJlY2VpdmVkIGEgdGFyZ2V0IGNoYW5nZSB3aXRoIGEgZ2xvYmFsIHNuYXBzaG90IGlmIHRoZSBzbmFwc2hvdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2ZXJzaW9uIGlzIG5vdCBlcXVhbCB0byBTbmFwc2hvdFZlcnNpb24uTUlOLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJhaXNlV2F0Y2hTbmFwc2hvdChzbmFwc2hvdFZlcnNpb24pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgcmVjZWl2ZWQgYSB0YXJnZXQgY2hhbmdlIHdpdGggYSBnbG9iYWwgc25hcHNob3QgaWYgdGhlIHNuYXBzaG90XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZlcnNpb24gaXMgbm90IGVxdWFsIHRvIFNuYXBzaG90VmVyc2lvbi5NSU4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIGEgYmF0Y2ggb2YgY2hhbmdlcyBmcm9tIHRoZSBEYXRhc3RvcmUsIHJlcGFja2FnZXMgdGhlbSBhcyBhXHJcbiAgICAgKiBSZW1vdGVFdmVudCwgYW5kIHBhc3NlcyB0aGF0IG9uIHRvIHRoZSBsaXN0ZW5lciwgd2hpY2ggaXMgdHlwaWNhbGx5IHRoZVxyXG4gICAgICogU3luY0VuZ2luZS5cclxuICAgICAqL1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLnJhaXNlV2F0Y2hTbmFwc2hvdCA9IGZ1bmN0aW9uIChzbmFwc2hvdFZlcnNpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGFzc2VydCghc25hcHNob3RWZXJzaW9uLmlzRXF1YWwoU25hcHNob3RWZXJzaW9uLk1JTiksIFwiQ2FuJ3QgcmFpc2UgZXZlbnQgZm9yIHVua25vd24gU25hcHNob3RWZXJzaW9uXCIpO1xyXG4gICAgICAgIHZhciByZW1vdGVFdmVudCA9IHRoaXMud2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yLmNyZWF0ZVJlbW90ZUV2ZW50KHNuYXBzaG90VmVyc2lvbik7XHJcbiAgICAgICAgLy8gVXBkYXRlIGluLW1lbW9yeSByZXN1bWUgdG9rZW5zLiBMb2NhbFN0b3JlIHdpbGwgdXBkYXRlIHRoZVxyXG4gICAgICAgIC8vIHBlcnNpc3RlbnQgdmlldyBvZiB0aGVzZSB3aGVuIGFwcGx5aW5nIHRoZSBjb21wbGV0ZWQgUmVtb3RlRXZlbnQuXHJcbiAgICAgICAgZm9yRWFjaE51bWJlcihyZW1vdGVFdmVudC50YXJnZXRDaGFuZ2VzLCBmdW5jdGlvbiAodGFyZ2V0SWQsIGNoYW5nZSkge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlLnJlc3VtZVRva2VuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBxdWVyeURhdGEgPSBfdGhpcy5saXN0ZW5UYXJnZXRzW3RhcmdldElkXTtcclxuICAgICAgICAgICAgICAgIC8vIEEgd2F0Y2hlZCB0YXJnZXQgbWlnaHQgaGF2ZSBiZWVuIHJlbW92ZWQgYWxyZWFkeS5cclxuICAgICAgICAgICAgICAgIGlmIChxdWVyeURhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5saXN0ZW5UYXJnZXRzW3RhcmdldElkXSA9IHF1ZXJ5RGF0YS5jb3B5KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdW1lVG9rZW46IGNoYW5nZS5yZXN1bWVUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc25hcHNob3RWZXJzaW9uOiBzbmFwc2hvdFZlcnNpb25cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFJlLWVzdGFibGlzaCBsaXN0ZW5zIGZvciB0aGUgdGFyZ2V0cyB0aGF0IGhhdmUgYmVlbiBpbnZhbGlkYXRlZCBieVxyXG4gICAgICAgIC8vIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy5cclxuICAgICAgICByZW1vdGVFdmVudC50YXJnZXRNaXNtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeURhdGEgPSBfdGhpcy5saXN0ZW5UYXJnZXRzW3RhcmdldElkXTtcclxuICAgICAgICAgICAgaWYgKCFxdWVyeURhdGEpIHtcclxuICAgICAgICAgICAgICAgIC8vIEEgd2F0Y2hlZCB0YXJnZXQgbWlnaHQgaGF2ZSBiZWVuIHJlbW92ZWQgYWxyZWFkeS5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBDbGVhciB0aGUgcmVzdW1lIHRva2VuIGZvciB0aGUgcXVlcnksIHNpbmNlIHdlJ3JlIGluIGEga25vd24gbWlzbWF0Y2hcclxuICAgICAgICAgICAgLy8gc3RhdGUuXHJcbiAgICAgICAgICAgIF90aGlzLmxpc3RlblRhcmdldHNbdGFyZ2V0SWRdID0gcXVlcnlEYXRhLmNvcHkoe1xyXG4gICAgICAgICAgICAgICAgcmVzdW1lVG9rZW46IGVtcHR5Qnl0ZVN0cmluZygpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBDYXVzZSBhIGhhcmQgcmVzZXQgYnkgdW53YXRjaGluZyBhbmQgcmV3YXRjaGluZyBpbW1lZGlhdGVseSwgYnV0XHJcbiAgICAgICAgICAgIC8vIGRlbGliZXJhdGVseSBkb24ndCBzZW5kIGEgcmVzdW1lIHRva2VuIHNvIHRoYXQgd2UgZ2V0IGEgZnVsbCB1cGRhdGUuXHJcbiAgICAgICAgICAgIF90aGlzLnNlbmRVbndhdGNoUmVxdWVzdCh0YXJnZXRJZCk7XHJcbiAgICAgICAgICAgIC8vIE1hcmsgdGhlIHF1ZXJ5IHdlIHNlbmQgYXMgYmVpbmcgb24gYmVoYWxmIG9mIGFuIGV4aXN0ZW5jZSBmaWx0ZXJcclxuICAgICAgICAgICAgLy8gbWlzbWF0Y2gsIGJ1dCBkb24ndCBhY3R1YWxseSByZXRhaW4gdGhhdCBpbiBsaXN0ZW5UYXJnZXRzLiBUaGlzIGVuc3VyZXNcclxuICAgICAgICAgICAgLy8gdGhhdCB3ZSBmbGFnIHRoZSBmaXJzdCByZS1saXN0ZW4gdGhpcyB3YXkgd2l0aG91dCBpbXBhY3RpbmcgZnV0dXJlXHJcbiAgICAgICAgICAgIC8vIGxpc3RlbnMgb2YgdGhpcyB0YXJnZXQgKHRoYXQgbWlnaHQgaGFwcGVuIGUuZy4gb24gcmVjb25uZWN0KS5cclxuICAgICAgICAgICAgdmFyIHJlcXVlc3RRdWVyeURhdGEgPSBuZXcgUXVlcnlEYXRhKHF1ZXJ5RGF0YS5xdWVyeSwgdGFyZ2V0SWQsIFF1ZXJ5UHVycG9zZS5FeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaCwgcXVlcnlEYXRhLnNlcXVlbmNlTnVtYmVyKTtcclxuICAgICAgICAgICAgX3RoaXMuc2VuZFdhdGNoUmVxdWVzdChyZXF1ZXN0UXVlcnlEYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBGaW5hbGx5IHJhaXNlIHJlbW90ZSBldmVudFxyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNFbmdpbmUuYXBwbHlSZW1vdGVFdmVudChyZW1vdGVFdmVudCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEhhbmRsZXMgYW4gZXJyb3Igb24gYSB0YXJnZXQgKi9cclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5oYW5kbGVUYXJnZXRFcnJvciA9IGZ1bmN0aW9uICh3YXRjaENoYW5nZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgYXNzZXJ0KCEhd2F0Y2hDaGFuZ2UuY2F1c2UsICdIYW5kbGluZyB0YXJnZXQgZXJyb3Igd2l0aG91dCBhIGNhdXNlJyk7XHJcbiAgICAgICAgdmFyIGVycm9yJCQxID0gd2F0Y2hDaGFuZ2UuY2F1c2U7XHJcbiAgICAgICAgdmFyIHByb21pc2VDaGFpbiA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHdhdGNoQ2hhbmdlLnRhcmdldElkcy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICBwcm9taXNlQ2hhaW4gPSBwcm9taXNlQ2hhaW4udGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEEgd2F0Y2hlZCB0YXJnZXQgbWlnaHQgaGF2ZSBiZWVuIHJlbW92ZWQgYWxyZWFkeS5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbnModGhpcy5saXN0ZW5UYXJnZXRzLCB0YXJnZXRJZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuVGFyZ2V0c1t0YXJnZXRJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yLnJlbW92ZVRhcmdldCh0YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnN5bmNFbmdpbmUucmVqZWN0TGlzdGVuKHRhcmdldElkLCBlcnJvciQkMSldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlQ2hhaW47XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRlbXB0cyB0byBmaWxsIG91ciB3cml0ZSBwaXBlbGluZSB3aXRoIHdyaXRlcyBmcm9tIHRoZSBMb2NhbFN0b3JlLlxyXG4gICAgICpcclxuICAgICAqIENhbGxlZCBpbnRlcm5hbGx5IHRvIGJvb3RzdHJhcCBvciByZWZpbGwgdGhlIHdyaXRlIHBpcGVsaW5lIGFuZCBieVxyXG4gICAgICogU3luY0VuZ2luZSB3aGVuZXZlciB0aGVyZSBhcmUgbmV3IG11dGF0aW9ucyB0byBwcm9jZXNzLlxyXG4gICAgICpcclxuICAgICAqIFN0YXJ0cyB0aGUgd3JpdGUgc3RyZWFtIGlmIG5lY2Vzc2FyeS5cclxuICAgICAqL1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmZpbGxXcml0ZVBpcGVsaW5lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbGFzdEJhdGNoSWRSZXRyaWV2ZWQsIGJhdGNoO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYW5BZGRUb1dyaXRlUGlwZWxpbmUoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RCYXRjaElkUmV0cmlldmVkID0gdGhpcy53cml0ZVBpcGVsaW5lLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy53cml0ZVBpcGVsaW5lW3RoaXMud3JpdGVQaXBlbGluZS5sZW5ndGggLSAxXS5iYXRjaElkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IEJBVENISURfVU5LTk9XTjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2NhbFN0b3JlLm5leHRNdXRhdGlvbkJhdGNoKGxhc3RCYXRjaElkUmV0cmlldmVkKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXRjaCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoYmF0Y2ggPT09IG51bGwpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud3JpdGVQaXBlbGluZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGVTdHJlYW0ubWFya0lkbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVG9Xcml0ZVBpcGVsaW5lKGJhdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5maWxsV3JpdGVQaXBlbGluZSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkU3RhcnRXcml0ZVN0cmVhbSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0V3JpdGVTdHJlYW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGNhbiBhZGQgdG8gdGhlIHdyaXRlIHBpcGVsaW5lIChpLmUuIHRoZSBuZXR3b3JrIGlzXHJcbiAgICAgKiBlbmFibGVkIGFuZCB0aGUgd3JpdGUgcGlwZWxpbmUgaXMgbm90IGZ1bGwpLlxyXG4gICAgICovXHJcbiAgICBSZW1vdGVTdG9yZS5wcm90b3R5cGUuY2FuQWRkVG9Xcml0ZVBpcGVsaW5lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5jYW5Vc2VOZXR3b3JrKCkgJiYgdGhpcy53cml0ZVBpcGVsaW5lLmxlbmd0aCA8IE1BWF9QRU5ESU5HX1dSSVRFUyk7XHJcbiAgICB9O1xyXG4gICAgLy8gRm9yIHRlc3RpbmdcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5vdXRzdGFuZGluZ1dyaXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVBpcGVsaW5lLmxlbmd0aDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFF1ZXVlcyBhZGRpdGlvbmFsIHdyaXRlcyB0byBiZSBzZW50IHRvIHRoZSB3cml0ZSBzdHJlYW0sIHNlbmRpbmcgdGhlbVxyXG4gICAgICogaW1tZWRpYXRlbHkgaWYgdGhlIHdyaXRlIHN0cmVhbSBpcyBlc3RhYmxpc2hlZC5cclxuICAgICAqL1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmFkZFRvV3JpdGVQaXBlbGluZSA9IGZ1bmN0aW9uIChiYXRjaCkge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLmNhbkFkZFRvV3JpdGVQaXBlbGluZSgpLCAnYWRkVG9Xcml0ZVBpcGVsaW5lIGNhbGxlZCB3aGVuIHBpcGVsaW5lIGlzIGZ1bGwnKTtcclxuICAgICAgICB0aGlzLndyaXRlUGlwZWxpbmUucHVzaChiYXRjaCk7XHJcbiAgICAgICAgaWYgKHRoaXMud3JpdGVTdHJlYW0uaXNPcGVuKCkgJiYgdGhpcy53cml0ZVN0cmVhbS5oYW5kc2hha2VDb21wbGV0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlU3RyZWFtLndyaXRlTXV0YXRpb25zKGJhdGNoLm11dGF0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5zaG91bGRTdGFydFdyaXRlU3RyZWFtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5jYW5Vc2VOZXR3b3JrKCkgJiZcclxuICAgICAgICAgICAgIXRoaXMud3JpdGVTdHJlYW0uaXNTdGFydGVkKCkgJiZcclxuICAgICAgICAgICAgdGhpcy53cml0ZVBpcGVsaW5lLmxlbmd0aCA+IDApO1xyXG4gICAgfTtcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5zdGFydFdyaXRlU3RyZWFtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnNob3VsZFN0YXJ0V3JpdGVTdHJlYW0oKSwgJ3N0YXJ0V3JpdGVTdHJlYW0oKSBjYWxsZWQgd2hlbiBzaG91bGRTdGFydFdyaXRlU3RyZWFtKCkgaXMgZmFsc2UuJyk7XHJcbiAgICAgICAgdGhpcy53cml0ZVN0cmVhbS5zdGFydCgpO1xyXG4gICAgfTtcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5vbldyaXRlU3RyZWFtT3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlU3RyZWFtLndyaXRlSGFuZHNoYWtlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5vbldyaXRlSGFuZHNoYWtlQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBSZWNvcmQgdGhlIHN0cmVhbSB0b2tlbi5cclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFN0b3JlXHJcbiAgICAgICAgICAgIC5zZXRMYXN0U3RyZWFtVG9rZW4odGhpcy53cml0ZVN0cmVhbS5sYXN0U3RyZWFtVG9rZW4pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gU2VuZCB0aGUgd3JpdGUgcGlwZWxpbmUgbm93IHRoYXQgdGhlIHN0cmVhbSBpcyBlc3RhYmxpc2hlZC5cclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IF90aGlzLndyaXRlUGlwZWxpbmU7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmF0Y2ggPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBfdGhpcy53cml0ZVN0cmVhbS53cml0ZU11dGF0aW9ucyhiYXRjaC5tdXRhdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIF90aGlzLmlnbm9yZUlmUHJpbWFyeUxlYXNlTG9zcyhlcnIpOyB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFZlcmlmaWVzIHRoZSBlcnJvciB0aHJvd24gYnkgYW4gTG9jYWxTdG9yZSBvcGVyYXRpb24uIElmIGEgTG9jYWxTdG9yZVxyXG4gICAgICogb3BlcmF0aW9uIGZhaWxzIGJlY2F1c2UgdGhlIHByaW1hcnkgbGVhc2UgaGFzIGJlZW4gdGFrZW4gYnkgYW5vdGhlciBjbGllbnQsXHJcbiAgICAgKiB3ZSBpZ25vcmUgdGhlIGVycm9yLiBBbGwgb3RoZXIgZXJyb3JzIGFyZSByZS10aHJvd24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVyciBBbiBlcnJvciByZXR1cm5lZCBieSBhIExvY2FsU3RvcmUgb3BlcmF0aW9uLlxyXG4gICAgICogQHJldHVybiBBIFByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciB3ZSByZWNvdmVyZWQsIG9yIHRoZSBvcmlnaW5hbCBlcnJvci5cclxuICAgICAqL1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmlnbm9yZUlmUHJpbWFyeUxlYXNlTG9zcyA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICBpZiAoaXNQcmltYXJ5TGVhc2VMb3N0RXJyb3IoZXJyKSkge1xyXG4gICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDgsICdVbmV4cGVjdGVkbHkgbG9zdCBwcmltYXJ5IGxlYXNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5vbk11dGF0aW9uUmVzdWx0ID0gZnVuY3Rpb24gKGNvbW1pdFZlcnNpb24sIHJlc3VsdHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIFRoaXMgaXMgYSByZXNwb25zZSB0byBhIHdyaXRlIGNvbnRhaW5pbmcgbXV0YXRpb25zIGFuZCBzaG91bGQgYmVcclxuICAgICAgICAvLyBjb3JyZWxhdGVkIHRvIHRoZSBmaXJzdCB3cml0ZSBpbiBvdXIgd3JpdGUgcGlwZWxpbmUuXHJcbiAgICAgICAgYXNzZXJ0KHRoaXMud3JpdGVQaXBlbGluZS5sZW5ndGggPiAwLCAnR290IHJlc3VsdCBmb3IgZW1wdHkgd3JpdGUgcGlwZWxpbmUnKTtcclxuICAgICAgICB2YXIgYmF0Y2ggPSB0aGlzLndyaXRlUGlwZWxpbmUuc2hpZnQoKTtcclxuICAgICAgICB2YXIgc3VjY2VzcyA9IE11dGF0aW9uQmF0Y2hSZXN1bHQuZnJvbShiYXRjaCwgY29tbWl0VmVyc2lvbiwgcmVzdWx0cywgdGhpcy53cml0ZVN0cmVhbS5sYXN0U3RyZWFtVG9rZW4pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNFbmdpbmUuYXBwbHlTdWNjZXNzZnVsV3JpdGUoc3VjY2VzcykudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3aXRoIHRoZSBjb21wbGV0aW9uIG9mIHRoaXMgbXV0YXRpb24gYW5vdGhlclxyXG4gICAgICAgICAgICAvLyBzbG90IGhhcyBmcmVlZCB1cC5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZpbGxXcml0ZVBpcGVsaW5lKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLm9uV3JpdGVTdHJlYW1DbG9zZSA9IGZ1bmN0aW9uIChlcnJvciQkMSkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JIYW5kbGluZztcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IkJDEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdyYWNlZnVsIHN0b3AgKGR1ZSB0byBzdG9wKCkgb3IgaWRsZSB0aW1lb3V0KS4gTWFrZSBzdXJlIHRoYXQnc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlc2lyYWJsZS5cclxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoIXRoaXMuc2hvdWxkU3RhcnRXcml0ZVN0cmVhbSgpLCAnV3JpdGUgc3RyZWFtIHdhcyBzdG9wcGVkIGdyYWNlZnVsbHkgd2hpbGUgc3RpbGwgbmVlZGVkLicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHdyaXRlIHN0cmVhbSBjbG9zZWQgZHVlIHRvIGFuIGVycm9yLCBpbnZva2UgdGhlIGVycm9yIGNhbGxiYWNrcyBpZlxyXG4gICAgICAgICAgICAgICAgLy8gdGhlcmUgYXJlIHBlbmRpbmcgd3JpdGVzLlxyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yJCQxICYmIHRoaXMud3JpdGVQaXBlbGluZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53cml0ZVN0cmVhbS5oYW5kc2hha2VDb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGVycm9yIGFmZmVjdHMgdGhlIGFjdHVhbCB3cml0ZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZyA9IHRoaXMuaGFuZGxlV3JpdGVFcnJvcihlcnJvciQkMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYW4gZXJyb3IgYmVmb3JlIHRoZSBoYW5kc2hha2UgaGFzIGZpbmlzaGVkLCBpdCdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvc3NpYmxlIHRoYXQgdGhlIHNlcnZlciBpcyB1bmFibGUgdG8gcHJvY2VzcyB0aGUgc3RyZWFtIHRva2VuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIHNlbmRpbmcuIChQZXJoYXBzIGl0J3MgdG9vIG9sZD8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcgPSB0aGlzLmhhbmRsZUhhbmRzaGFrZUVycm9yKGVycm9yJCQxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVycm9ySGFuZGxpbmcudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgd3JpdGUgc3RyZWFtIG1pZ2h0IGhhdmUgYmVlbiBzdGFydGVkIGJ5IHJlZmlsbGluZyB0aGUgd3JpdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBpcGVsaW5lIGZvciBmYWlsZWQgd3JpdGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2hvdWxkU3RhcnRXcml0ZVN0cmVhbSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3RhcnRXcml0ZVN0cmVhbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5oYW5kbGVIYW5kc2hha2VFcnJvciA9IGZ1bmN0aW9uIChlcnJvciQkMSkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSB0b2tlbiBpZiBpdCdzIGEgcGVybWFuZW50IGVycm9yIG9yIHRoZSBlcnJvciBjb2RlIGlzXHJcbiAgICAgICAgICAgICAgICAvLyBBQk9SVEVELCBzaWduYWxpbmcgdGhlIHdyaXRlIHN0cmVhbSBpcyBubyBsb25nZXIgdmFsaWQuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNQZXJtYW5lbnRFcnJvcihlcnJvciQkMS5jb2RlKSB8fCBlcnJvciQkMS5jb2RlID09PSBDb2RlLkFCT1JURUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDgsICdSZW1vdGVTdG9yZSBlcnJvciBiZWZvcmUgY29tcGxldGVkIGhhbmRzaGFrZTsgcmVzZXR0aW5nIHN0cmVhbSB0b2tlbjogJywgdGhpcy53cml0ZVN0cmVhbS5sYXN0U3RyZWFtVG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGVTdHJlYW0ubGFzdFN0cmVhbVRva2VuID0gZW1wdHlCeXRlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMubG9jYWxTdG9yZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldExhc3RTdHJlYW1Ub2tlbihlbXB0eUJ5dGVTdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBfdGhpcy5pZ25vcmVJZlByaW1hcnlMZWFzZUxvc3MoZXJyKTsgfSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU29tZSBvdGhlciBlcnJvciwgZG9uJ3QgcmVzZXQgc3RyZWFtIHRva2VuLiBPdXIgc3RyZWFtIGxvZ2ljIHdpbGxcclxuICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHJldHJ5IHdpdGggZXhwb25lbnRpYWwgYmFja29mZi5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmhhbmRsZVdyaXRlRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IkJDEpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGJhdGNoO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1Blcm1hbmVudEVycm9yKGVycm9yJCQxLmNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmF0Y2ggPSB0aGlzLndyaXRlUGlwZWxpbmUuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UgaXQncyBhbHNvIHVubGlrZWx5IHRoYXQgdGhlIHNlcnZlciBpdHNlbGYgaXMgbWVsdGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRvd24gLS0gdGhpcyB3YXMganVzdCBhIGJhZCByZXF1ZXN0IHNvIGluaGliaXQgYmFja29mZiBvbiB0aGUgbmV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc3RhcnQuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZVN0cmVhbS5pbmhpYml0QmFja29mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnN5bmNFbmdpbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWplY3RGYWlsZWRXcml0ZShiYXRjaC5iYXRjaElkLCBlcnJvciQkMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3aXRoIHRoZSBjb21wbGV0aW9uIG9mIHRoaXMgbXV0YXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFub3RoZXIgc2xvdCBoYXMgZnJlZWQgdXAuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZmlsbFdyaXRlUGlwZWxpbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJhbnNpZW50IGVycm9yLCBqdXN0IGxldCB0aGUgcmV0cnkgbG9naWMga2ljayBpbi5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVtb3RlU3RvcmUucHJvdG90eXBlLmNyZWF0ZVRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24odGhpcy5kYXRhc3RvcmUpO1xyXG4gICAgfTtcclxuICAgIFJlbW90ZVN0b3JlLnByb3RvdHlwZS5oYW5kbGVDcmVkZW50aWFsQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYW5Vc2VOZXR3b3JrKCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUZWFyIGRvd24gYW5kIHJlLWNyZWF0ZSBvdXIgbmV0d29yayBzdHJlYW1zLiBUaGlzIHdpbGwgZW5zdXJlIHdlIGdldCBhIGZyZXNoIGF1dGggdG9rZW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIHRoZSBuZXcgdXNlciBhbmQgcmUtZmlsbCB0aGUgd3JpdGUgcGlwZWxpbmUgd2l0aCBuZXcgbXV0YXRpb25zIGZyb20gdGhlIExvY2FsU3RvcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKHNpbmNlIG11dGF0aW9ucyBhcmUgcGVyLXVzZXIpLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDgsICdSZW1vdGVTdG9yZSByZXN0YXJ0aW5nIHN0cmVhbXMgZm9yIG5ldyBjcmVkZW50aWFsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV0d29ya0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5kaXNhYmxlTmV0d29ya0ludGVybmFsKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9ubGluZVN0YXRlVHJhY2tlci5zZXQoT25saW5lU3RhdGUuVW5rbm93bik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW5hYmxlTmV0d29yaygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRvZ2dsZXMgdGhlIG5ldHdvcmsgc3RhdGUgd2hlbiB0aGUgY2xpZW50IGdhaW5zIG9yIGxvc2VzIGl0cyBwcmltYXJ5IGxlYXNlLlxyXG4gICAgICovXHJcbiAgICBSZW1vdGVTdG9yZS5wcm90b3R5cGUuYXBwbHlQcmltYXJ5U3RhdGUgPSBmdW5jdGlvbiAoaXNQcmltYXJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1ByaW1hcnkgPSBpc1ByaW1hcnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlzUHJpbWFyeSAmJiB0aGlzLm5ldHdvcmtFbmFibGVkKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZW5hYmxlTmV0d29yaygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFpc1ByaW1hcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmRpc2FibGVOZXR3b3JrSW50ZXJuYWwoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25saW5lU3RhdGVUcmFja2VyLnNldChPbmxpbmVTdGF0ZS5Vbmtub3duKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVtb3RlU3RvcmU7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogSG9sZHMgdGhlIGxpc3RlbmVycyBhbmQgdGhlIGxhc3QgcmVjZWl2ZWQgVmlld1NuYXBzaG90IGZvciBhIHF1ZXJ5IGJlaW5nXHJcbiAqIHRyYWNrZWQgYnkgRXZlbnRNYW5hZ2VyLlxyXG4gKi9cclxudmFyIFF1ZXJ5TGlzdGVuZXJzSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFF1ZXJ5TGlzdGVuZXJzSW5mbygpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFF1ZXJ5TGlzdGVuZXJzSW5mbztcclxufSgpKTtcclxuLyoqXHJcbiAqIEV2ZW50TWFuYWdlciBpcyByZXNwb25zaWJsZSBmb3IgbWFwcGluZyBxdWVyaWVzIHRvIHF1ZXJ5IGV2ZW50IGVtaXR0ZXJzLlxyXG4gKiBJdCBoYW5kbGVzIFwiZmFuLW91dFwiLiAtLSBJZGVudGljYWwgcXVlcmllcyB3aWxsIHJlLXVzZSB0aGUgc2FtZSB3YXRjaCBvbiB0aGVcclxuICogYmFja2VuZC5cclxuICovXHJcbnZhciBFdmVudE1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFdmVudE1hbmFnZXIoc3luY0VuZ2luZSkge1xyXG4gICAgICAgIHRoaXMuc3luY0VuZ2luZSA9IHN5bmNFbmdpbmU7XHJcbiAgICAgICAgdGhpcy5xdWVyaWVzID0gbmV3IE9iamVjdE1hcChmdW5jdGlvbiAocSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcS5jYW5vbmljYWxJZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMub25saW5lU3RhdGUgPSBPbmxpbmVTdGF0ZS5Vbmtub3duO1xyXG4gICAgICAgIHRoaXMuc3luY0VuZ2luZS5zdWJzY3JpYmUodGhpcyk7XHJcbiAgICB9XHJcbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBxdWVyeSA9IGxpc3RlbmVyLnF1ZXJ5O1xyXG4gICAgICAgIHZhciBmaXJzdExpc3RlbiA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBxdWVyeUluZm8gPSB0aGlzLnF1ZXJpZXMuZ2V0KHF1ZXJ5KTtcclxuICAgICAgICBpZiAoIXF1ZXJ5SW5mbykge1xyXG4gICAgICAgICAgICBmaXJzdExpc3RlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHF1ZXJ5SW5mbyA9IG5ldyBRdWVyeUxpc3RlbmVyc0luZm8oKTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyaWVzLnNldChxdWVyeSwgcXVlcnlJbmZvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcXVlcnlJbmZvLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICBsaXN0ZW5lci5hcHBseU9ubGluZVN0YXRlQ2hhbmdlKHRoaXMub25saW5lU3RhdGUpO1xyXG4gICAgICAgIGlmIChxdWVyeUluZm8udmlld1NuYXApXHJcbiAgICAgICAgICAgIGxpc3RlbmVyLm9uVmlld1NuYXBzaG90KHF1ZXJ5SW5mby52aWV3U25hcCk7XHJcbiAgICAgICAgaWYgKGZpcnN0TGlzdGVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNFbmdpbmUubGlzdGVuKHF1ZXJ5KS50aGVuKGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLnRhcmdldElkID0gdGFyZ2V0SWQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0SWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShxdWVyeUluZm8udGFyZ2V0SWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeSwgbGFzdExpc3RlbiwgcXVlcnlJbmZvLCBpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gbGlzdGVuZXIucXVlcnk7XHJcbiAgICAgICAgICAgICAgICBsYXN0TGlzdGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBxdWVyeUluZm8gPSB0aGlzLnF1ZXJpZXMuZ2V0KHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgIGlmIChxdWVyeUluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gcXVlcnlJbmZvLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5SW5mby5saXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0TGlzdGVuID0gcXVlcnlJbmZvLmxpc3RlbmVycy5sZW5ndGggPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RMaXN0ZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJpZXMuZGVsZXRlKHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5zeW5jRW5naW5lLnVubGlzdGVuKHF1ZXJ5KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEV2ZW50TWFuYWdlci5wcm90b3R5cGUub25XYXRjaENoYW5nZSA9IGZ1bmN0aW9uICh2aWV3U25hcHMpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHZpZXdTbmFwc18xID0gdmlld1NuYXBzOyBfaSA8IHZpZXdTbmFwc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgdmlld1NuYXAgPSB2aWV3U25hcHNfMVtfaV07XHJcbiAgICAgICAgICAgIHZhciBxdWVyeSA9IHZpZXdTbmFwLnF1ZXJ5O1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlJbmZvID0gdGhpcy5xdWVyaWVzLmdldChxdWVyeSk7XHJcbiAgICAgICAgICAgIGlmIChxdWVyeUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgX2IgPSBxdWVyeUluZm8ubGlzdGVuZXJzOyBfYSA8IF9iLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IF9iW19hXTtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5vblZpZXdTbmFwc2hvdCh2aWV3U25hcCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBxdWVyeUluZm8udmlld1NuYXAgPSB2aWV3U25hcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLm9uV2F0Y2hFcnJvciA9IGZ1bmN0aW9uIChxdWVyeSwgZXJyb3IpIHtcclxuICAgICAgICB2YXIgcXVlcnlJbmZvID0gdGhpcy5xdWVyaWVzLmdldChxdWVyeSk7XHJcbiAgICAgICAgaWYgKHF1ZXJ5SW5mbykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gcXVlcnlJbmZvLmxpc3RlbmVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyLm9uRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzLiBOT1RFOiBXZSBkb24ndCBuZWVkIHRvIGNhbGwgc3luY0VuZ2luZS51bmxpc3RlbigpXHJcbiAgICAgICAgLy8gYWZ0ZXIgYW4gZXJyb3IuXHJcbiAgICAgICAgdGhpcy5xdWVyaWVzLmRlbGV0ZShxdWVyeSk7XHJcbiAgICB9O1xyXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5vbk9ubGluZVN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKG9ubGluZVN0YXRlKSB7XHJcbiAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZSA9IG9ubGluZVN0YXRlO1xyXG4gICAgICAgIHRoaXMucXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChfLCBxdWVyeUluZm8pIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHF1ZXJ5SW5mby5saXN0ZW5lcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5hcHBseU9ubGluZVN0YXRlQ2hhbmdlKG9ubGluZVN0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFdmVudE1hbmFnZXI7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBRdWVyeUxpc3RlbmVyIHRha2VzIGEgc2VyaWVzIG9mIGludGVybmFsIHZpZXcgc25hcHNob3RzIGFuZCBkZXRlcm1pbmVzXHJcbiAqIHdoZW4gdG8gcmFpc2UgdGhlIGV2ZW50LlxyXG4gKlxyXG4gKiBJdCB1c2VzIGFuIE9ic2VydmVyIHRvIGRpc3BhdGNoIGV2ZW50cy5cclxuICovXHJcbnZhciBRdWVyeUxpc3RlbmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUXVlcnlMaXN0ZW5lcihxdWVyeSwgcXVlcnlPYnNlcnZlciwgb3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgICAgICB0aGlzLnF1ZXJ5T2JzZXJ2ZXIgPSBxdWVyeU9ic2VydmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluaXRpYWwgc25hcHNob3RzIChlLmcuIGZyb20gY2FjaGUpIG1heSBub3QgYmUgcHJvcGFnYXRlZCB0byB0aGUgd3JhcHBlZFxyXG4gICAgICAgICAqIG9ic2VydmVyLiBUaGlzIGZsYWcgaXMgc2V0IHRvIHRydWUgb25jZSB3ZSd2ZSBhY3R1YWxseSByYWlzZWQgYW4gZXZlbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5yYWlzZWRJbml0aWFsRXZlbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9ubGluZVN0YXRlID0gT25saW5lU3RhdGUuVW5rbm93bjtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgfVxyXG4gICAgUXVlcnlMaXN0ZW5lci5wcm90b3R5cGUub25WaWV3U25hcHNob3QgPSBmdW5jdGlvbiAoc25hcCkge1xyXG4gICAgICAgIGFzc2VydChzbmFwLmRvY0NoYW5nZXMubGVuZ3RoID4gMCB8fCBzbmFwLnN5bmNTdGF0ZUNoYW5nZWQsICdXZSBnb3QgYSBuZXcgc25hcHNob3Qgd2l0aCBubyBjaGFuZ2VzPycpO1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmluY2x1ZGVNZXRhZGF0YUNoYW5nZXMpIHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBtZXRhZGF0YSBvbmx5IGNoYW5nZXMuXHJcbiAgICAgICAgICAgIHZhciBkb2NDaGFuZ2VzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBzbmFwLmRvY0NoYW5nZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZG9jQ2hhbmdlID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRvY0NoYW5nZS50eXBlICE9PSBDaGFuZ2VUeXBlLk1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jQ2hhbmdlcy5wdXNoKGRvY0NoYW5nZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc25hcCA9IG5ldyBWaWV3U25hcHNob3Qoc25hcC5xdWVyeSwgc25hcC5kb2NzLCBzbmFwLm9sZERvY3MsIGRvY0NoYW5nZXMsIHNuYXAubXV0YXRlZEtleXMsIHNuYXAuZnJvbUNhY2hlLCBzbmFwLnN5bmNTdGF0ZUNoYW5nZWQsIFxyXG4gICAgICAgICAgICAvKiBleGNsdWRlc01ldGFkYXRhQ2hhbmdlcz0gKi8gdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5yYWlzZWRJbml0aWFsRXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkUmFpc2VJbml0aWFsRXZlbnQoc25hcCwgdGhpcy5vbmxpbmVTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmFpc2VJbml0aWFsRXZlbnQoc25hcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zaG91bGRSYWlzZUV2ZW50KHNuYXApKSB7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnlPYnNlcnZlci5uZXh0KHNuYXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNuYXAgPSBzbmFwO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5TGlzdGVuZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLnF1ZXJ5T2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5TGlzdGVuZXIucHJvdG90eXBlLmFwcGx5T25saW5lU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiAob25saW5lU3RhdGUpIHtcclxuICAgICAgICB0aGlzLm9ubGluZVN0YXRlID0gb25saW5lU3RhdGU7XHJcbiAgICAgICAgaWYgKHRoaXMuc25hcCAmJlxyXG4gICAgICAgICAgICAhdGhpcy5yYWlzZWRJbml0aWFsRXZlbnQgJiZcclxuICAgICAgICAgICAgdGhpcy5zaG91bGRSYWlzZUluaXRpYWxFdmVudCh0aGlzLnNuYXAsIG9ubGluZVN0YXRlKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJhaXNlSW5pdGlhbEV2ZW50KHRoaXMuc25hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFF1ZXJ5TGlzdGVuZXIucHJvdG90eXBlLnNob3VsZFJhaXNlSW5pdGlhbEV2ZW50ID0gZnVuY3Rpb24gKHNuYXAsIG9ubGluZVN0YXRlKSB7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLnJhaXNlZEluaXRpYWxFdmVudCwgJ0RldGVybWluaW5nIHdoZXRoZXIgdG8gcmFpc2UgZmlyc3QgZXZlbnQgYnV0IGFscmVhZHkgaGFkIGZpcnN0IGV2ZW50Jyk7XHJcbiAgICAgICAgLy8gQWx3YXlzIHJhaXNlIHRoZSBmaXJzdCBldmVudCB3aGVuIHdlJ3JlIHN5bmNlZFxyXG4gICAgICAgIGlmICghc25hcC5mcm9tQ2FjaGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5PVEU6IFdlIGNvbnNpZGVyIE9ubGluZVN0YXRlLlVua25vd24gYXMgb25saW5lIChpdCBzaG91bGQgYmVjb21lIE9mZmxpbmVcclxuICAgICAgICAvLyBvciBPbmxpbmUgaWYgd2Ugd2FpdCBsb25nIGVub3VnaCkuXHJcbiAgICAgICAgdmFyIG1heWJlT25saW5lID0gb25saW5lU3RhdGUgIT09IE9ubGluZVN0YXRlLk9mZmxpbmU7XHJcbiAgICAgICAgLy8gRG9uJ3QgcmFpc2UgdGhlIGV2ZW50IGlmIHdlJ3JlIG9ubGluZSwgYXJlbid0IHN5bmNlZCB5ZXQgKGNoZWNrZWRcclxuICAgICAgICAvLyBhYm92ZSkgYW5kIGFyZSB3YWl0aW5nIGZvciBhIHN5bmMuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53YWl0Rm9yU3luY1doZW5PbmxpbmUgJiYgbWF5YmVPbmxpbmUpIHtcclxuICAgICAgICAgICAgYXNzZXJ0KHNuYXAuZnJvbUNhY2hlLCAnV2FpdGluZyBmb3Igc3luYywgYnV0IHNuYXBzaG90IGlzIG5vdCBmcm9tIGNhY2hlJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmFpc2UgZGF0YSBmcm9tIGNhY2hlIGlmIHdlIGhhdmUgYW55IGRvY3VtZW50cyBvciB3ZSBhcmUgb2ZmbGluZVxyXG4gICAgICAgIHJldHVybiAhc25hcC5kb2NzLmlzRW1wdHkoKSB8fCBvbmxpbmVTdGF0ZSA9PT0gT25saW5lU3RhdGUuT2ZmbGluZTtcclxuICAgIH07XHJcbiAgICBRdWVyeUxpc3RlbmVyLnByb3RvdHlwZS5zaG91bGRSYWlzZUV2ZW50ID0gZnVuY3Rpb24gKHNuYXApIHtcclxuICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGhhbmRsZSBpbmNsdWRlRG9jdW1lbnRNZXRhZGF0YUNoYW5nZXMgaGVyZSBiZWNhdXNlXHJcbiAgICAgICAgLy8gdGhlIE1ldGFkYXRhIG9ubHkgY2hhbmdlcyBoYXZlIGFscmVhZHkgYmVlbiBzdHJpcHBlZCBvdXQgaWYgbmVlZGVkLlxyXG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIG9ubHkgY2hhbmdlcyB3ZSB3aWxsIHNlZSBhcmUgdGhlIG9uZXMgd2Ugc2hvdWxkXHJcbiAgICAgICAgLy8gcHJvcGFnYXRlLlxyXG4gICAgICAgIGlmIChzbmFwLmRvY0NoYW5nZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGhhc1BlbmRpbmdXcml0ZXNDaGFuZ2VkID0gdGhpcy5zbmFwICYmIHRoaXMuc25hcC5oYXNQZW5kaW5nV3JpdGVzICE9PSBzbmFwLmhhc1BlbmRpbmdXcml0ZXM7XHJcbiAgICAgICAgaWYgKHNuYXAuc3luY1N0YXRlQ2hhbmdlZCB8fCBoYXNQZW5kaW5nV3JpdGVzQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmluY2x1ZGVNZXRhZGF0YUNoYW5nZXMgPT09IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEdlbmVyYWxseSB3ZSBzaG91bGQgaGF2ZSBoaXQgb25lIG9mIHRoZSBjYXNlcyBhYm92ZSwgYnV0IGl0J3MgcG9zc2libGVcclxuICAgICAgICAvLyB0byBnZXQgaGVyZSBpZiB0aGVyZSB3ZXJlIG9ubHkgbWV0YWRhdGEgZG9jQ2hhbmdlcyBhbmQgdGhleSBnb3RcclxuICAgICAgICAvLyBzdHJpcHBlZCBvdXQuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5TGlzdGVuZXIucHJvdG90eXBlLnJhaXNlSW5pdGlhbEV2ZW50ID0gZnVuY3Rpb24gKHNuYXApIHtcclxuICAgICAgICBhc3NlcnQoIXRoaXMucmFpc2VkSW5pdGlhbEV2ZW50LCAnVHJ5aW5nIHRvIHJhaXNlIGluaXRpYWwgZXZlbnRzIGZvciBzZWNvbmQgdGltZScpO1xyXG4gICAgICAgIHNuYXAgPSBWaWV3U25hcHNob3QuZnJvbUluaXRpYWxEb2N1bWVudHMoc25hcC5xdWVyeSwgc25hcC5kb2NzLCBzbmFwLm11dGF0ZWRLZXlzLCBzbmFwLmZyb21DYWNoZSk7XHJcbiAgICAgICAgdGhpcy5yYWlzZWRJbml0aWFsRXZlbnQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucXVlcnlPYnNlcnZlci5uZXh0KHNuYXApO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBRdWVyeUxpc3RlbmVyO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgc2V0IG9mIGNoYW5nZXMgdG8gd2hhdCBkb2N1bWVudHMgYXJlIGN1cnJlbnRseSBpbiB2aWV3IGFuZCBvdXQgb2YgdmlldyBmb3JcclxuICogYSBnaXZlbiBxdWVyeS4gVGhlc2UgY2hhbmdlcyBhcmUgc2VudCB0byB0aGUgTG9jYWxTdG9yZSBieSB0aGUgVmlldyAodmlhXHJcbiAqIHRoZSBTeW5jRW5naW5lKSBhbmQgYXJlIHVzZWQgdG8gcGluIC8gdW5waW4gZG9jdW1lbnRzIGFzIGFwcHJvcHJpYXRlLlxyXG4gKi9cclxudmFyIExvY2FsVmlld0NoYW5nZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMb2NhbFZpZXdDaGFuZ2VzKHRhcmdldElkLCBhZGRlZEtleXMsIHJlbW92ZWRLZXlzKSB7XHJcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IHRhcmdldElkO1xyXG4gICAgICAgIHRoaXMuYWRkZWRLZXlzID0gYWRkZWRLZXlzO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlZEtleXMgPSByZW1vdmVkS2V5cztcclxuICAgIH1cclxuICAgIExvY2FsVmlld0NoYW5nZXMuZnJvbVNuYXBzaG90ID0gZnVuY3Rpb24gKHRhcmdldElkLCB2aWV3U25hcHNob3QpIHtcclxuICAgICAgICB2YXIgYWRkZWRLZXlzID0gZG9jdW1lbnRLZXlTZXQoKTtcclxuICAgICAgICB2YXIgcmVtb3ZlZEtleXMgPSBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB2aWV3U25hcHNob3QuZG9jQ2hhbmdlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGRvY0NoYW5nZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgc3dpdGNoIChkb2NDaGFuZ2UudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDaGFuZ2VUeXBlLkFkZGVkOlxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGVkS2V5cyA9IGFkZGVkS2V5cy5hZGQoZG9jQ2hhbmdlLmRvYy5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDaGFuZ2VUeXBlLlJlbW92ZWQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZEtleXMgPSByZW1vdmVkS2V5cy5hZGQoZG9jQ2hhbmdlLmRvYy5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IExvY2FsVmlld0NoYW5nZXModGFyZ2V0SWQsIGFkZGVkS2V5cywgcmVtb3ZlZEtleXMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBMb2NhbFZpZXdDaGFuZ2VzO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIEFkZGVkTGltYm9Eb2N1bWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFkZGVkTGltYm9Eb2N1bWVudChrZXkpIHtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgIH1cclxuICAgIHJldHVybiBBZGRlZExpbWJvRG9jdW1lbnQ7XHJcbn0oKSk7XHJcbnZhciBSZW1vdmVkTGltYm9Eb2N1bWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlbW92ZWRMaW1ib0RvY3VtZW50KGtleSkge1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlbW92ZWRMaW1ib0RvY3VtZW50O1xyXG59KCkpO1xyXG4vKipcclxuICogVmlldyBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0aW5nIHRoZSBmaW5hbCBtZXJnZWQgdHJ1dGggb2Ygd2hhdCBkb2NzIGFyZSBpblxyXG4gKiBhIHF1ZXJ5LiBJdCBnZXRzIG5vdGlmaWVkIG9mIGxvY2FsIGFuZCByZW1vdGUgY2hhbmdlcyB0byBkb2NzLCBhbmQgYXBwbGllc1xyXG4gKiB0aGUgcXVlcnkgZmlsdGVycyBhbmQgbGltaXRzIHRvIGRldGVybWluZSB0aGUgbW9zdCBjb3JyZWN0IHBvc3NpYmxlIHJlc3VsdHMuXHJcbiAqL1xyXG52YXIgVmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZpZXcocXVlcnksIFxyXG4gICAgLyoqIERvY3VtZW50cyBpbmNsdWRlZCBpbiB0aGUgcmVtb3RlIHRhcmdldCAqL1xyXG4gICAgX3N5bmNlZERvY3VtZW50cykge1xyXG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgICAgICB0aGlzLl9zeW5jZWREb2N1bWVudHMgPSBfc3luY2VkRG9jdW1lbnRzO1xyXG4gICAgICAgIHRoaXMuc3luY1N0YXRlID0gbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGZsYWcgd2hldGhlciB0aGUgdmlldyBpcyBjdXJyZW50IHdpdGggdGhlIGJhY2tlbmQuIEEgdmlldyBpcyBjb25zaWRlcmVkXHJcbiAgICAgICAgICogY3VycmVudCBhZnRlciBpdCBoYXMgc2VlbiB0aGUgY3VycmVudCBmbGFnIGZyb20gdGhlIGJhY2tlbmQgYW5kIGRpZCBub3RcclxuICAgICAgICAgKiBsb3NlIGNvbnNpc3RlbmN5IHdpdGhpbiB0aGUgd2F0Y2ggc3RyZWFtIChlLmcuIGJlY2F1c2Ugb2YgYW4gZXhpc3RlbmNlXHJcbiAgICAgICAgICogZmlsdGVyIG1pc21hdGNoKS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgICAvKiogRG9jdW1lbnRzIGluIHRoZSB2aWV3IGJ1dCBub3QgaW4gdGhlIHJlbW90ZSB0YXJnZXQgKi9cclxuICAgICAgICB0aGlzLmxpbWJvRG9jdW1lbnRzID0gZG9jdW1lbnRLZXlTZXQoKTtcclxuICAgICAgICAvKiogRG9jdW1lbnQgS2V5cyB0aGF0IGhhdmUgbG9jYWwgY2hhbmdlcyAqL1xyXG4gICAgICAgIHRoaXMubXV0YXRlZEtleXMgPSBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRTZXQgPSBuZXcgRG9jdW1lbnRTZXQocXVlcnkuZG9jQ29tcGFyYXRvci5iaW5kKHF1ZXJ5KSk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlldy5wcm90b3R5cGUsIFwic3luY2VkRG9jdW1lbnRzXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgc2V0IG9mIHJlbW90ZSBkb2N1bWVudHMgdGhhdCB0aGUgc2VydmVyIGhhcyB0b2xkIHVzIGJlbG9uZ3MgdG8gdGhlIHRhcmdldCBhc3NvY2lhdGVkIHdpdGhcclxuICAgICAgICAgKiB0aGlzIHZpZXcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zeW5jZWREb2N1bWVudHM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYSBzZXQgb2YgZG9jIGNoYW5nZXMsIGFwcGxpZXMgdGhlIHF1ZXJ5IGxpbWl0LCBhbmQgY29tcHV0ZXNcclxuICAgICAqIHdoYXQgdGhlIG5ldyByZXN1bHRzIHNob3VsZCBiZSwgd2hhdCB0aGUgY2hhbmdlcyB3ZXJlLCBhbmQgd2hldGhlciB3ZSBtYXlcclxuICAgICAqIG5lZWQgdG8gZ28gYmFjayB0byB0aGUgbG9jYWwgY2FjaGUgZm9yIG1vcmUgcmVzdWx0cy4gRG9lcyBub3QgbWFrZSBhbnlcclxuICAgICAqIGNoYW5nZXMgdG8gdGhlIHZpZXcuXHJcbiAgICAgKiBAcGFyYW0gZG9jQ2hhbmdlcyBUaGUgZG9jIGNoYW5nZXMgdG8gYXBwbHkgdG8gdGhpcyB2aWV3LlxyXG4gICAgICogQHBhcmFtIHByZXZpb3VzQ2hhbmdlcyBJZiB0aGlzIGlzIGJlaW5nIGNhbGxlZCB3aXRoIGEgcmVmaWxsLCB0aGVuIHN0YXJ0XHJcbiAgICAgKiAgICAgICAgd2l0aCB0aGlzIHNldCBvZiBkb2NzIGFuZCBjaGFuZ2VzIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgdmlldy5cclxuICAgICAqIEByZXR1cm4gYSBuZXcgc2V0IG9mIGRvY3MsIGNoYW5nZXMsIGFuZCByZWZpbGwgZmxhZy5cclxuICAgICAqL1xyXG4gICAgVmlldy5wcm90b3R5cGUuY29tcHV0ZURvY0NoYW5nZXMgPSBmdW5jdGlvbiAoZG9jQ2hhbmdlcywgcHJldmlvdXNDaGFuZ2VzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY2hhbmdlU2V0ID0gcHJldmlvdXNDaGFuZ2VzXHJcbiAgICAgICAgICAgID8gcHJldmlvdXNDaGFuZ2VzLmNoYW5nZVNldFxyXG4gICAgICAgICAgICA6IG5ldyBEb2N1bWVudENoYW5nZVNldCgpO1xyXG4gICAgICAgIHZhciBvbGREb2N1bWVudFNldCA9IHByZXZpb3VzQ2hhbmdlc1xyXG4gICAgICAgICAgICA/IHByZXZpb3VzQ2hhbmdlcy5kb2N1bWVudFNldFxyXG4gICAgICAgICAgICA6IHRoaXMuZG9jdW1lbnRTZXQ7XHJcbiAgICAgICAgdmFyIG5ld011dGF0ZWRLZXlzID0gcHJldmlvdXNDaGFuZ2VzXHJcbiAgICAgICAgICAgID8gcHJldmlvdXNDaGFuZ2VzLm11dGF0ZWRLZXlzXHJcbiAgICAgICAgICAgIDogdGhpcy5tdXRhdGVkS2V5cztcclxuICAgICAgICB2YXIgbmV3RG9jdW1lbnRTZXQgPSBvbGREb2N1bWVudFNldDtcclxuICAgICAgICB2YXIgbmVlZHNSZWZpbGwgPSBmYWxzZTtcclxuICAgICAgICAvLyBUcmFjayB0aGUgbGFzdCBkb2MgaW4gYSAoZnVsbCkgbGltaXQuIFRoaXMgaXMgbmVjZXNzYXJ5LCBiZWNhdXNlIHNvbWVcclxuICAgICAgICAvLyB1cGRhdGUgKGEgZGVsZXRlLCBvciBhbiB1cGRhdGUgbW92aW5nIGEgZG9jIHBhc3QgdGhlIG9sZCBsaW1pdCkgbWlnaHRcclxuICAgICAgICAvLyBtZWFuIHRoZXJlIGlzIHNvbWUgb3RoZXIgZG9jdW1lbnQgaW4gdGhlIGxvY2FsIGNhY2hlIHRoYXQgZWl0aGVyIHNob3VsZFxyXG4gICAgICAgIC8vIGNvbWUgKDEpIGJldHdlZW4gdGhlIG9sZCBsYXN0IGxpbWl0IGRvYyBhbmQgdGhlIG5ldyBsYXN0IGRvY3VtZW50LCBpbiB0aGVcclxuICAgICAgICAvLyBjYXNlIG9mIHVwZGF0ZXMsIG9yICgyKSBhZnRlciB0aGUgbmV3IGxhc3QgZG9jdW1lbnQsIGluIHRoZSBjYXNlIG9mXHJcbiAgICAgICAgLy8gZGVsZXRlcy4gU28gd2Uga2VlcCB0aGlzIGRvYyBhdCB0aGUgb2xkIGxpbWl0IHRvIGNvbXBhcmUgdGhlIHVwZGF0ZXMgdG8uXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBzaG91bGQgbmV2ZXIgZ2V0IHVzZWQgaW4gYSByZWZpbGwgKHdoZW4gcHJldmlvdXNDaGFuZ2VzIGlzXHJcbiAgICAgICAgLy8gc2V0KSwgYmVjYXVzZSB0aGVyZSB3aWxsIG9ubHkgYmUgYWRkcyAtLSBubyBkZWxldGVzIG9yIHVwZGF0ZXMuXHJcbiAgICAgICAgdmFyIGxhc3REb2NJbkxpbWl0ID0gdGhpcy5xdWVyeS5oYXNMaW1pdCgpICYmIG9sZERvY3VtZW50U2V0LnNpemUgPT09IHRoaXMucXVlcnkubGltaXRcclxuICAgICAgICAgICAgPyBvbGREb2N1bWVudFNldC5sYXN0KClcclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIGRvY0NoYW5nZXMuaW5vcmRlclRyYXZlcnNhbChmdW5jdGlvbiAoa2V5LCBuZXdNYXliZURvYykge1xyXG4gICAgICAgICAgICB2YXIgb2xkRG9jID0gb2xkRG9jdW1lbnRTZXQuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIHZhciBuZXdEb2MgPSBuZXdNYXliZURvYyBpbnN0YW5jZW9mIERvY3VtZW50ID8gbmV3TWF5YmVEb2MgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAobmV3RG9jKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQoa2V5LmlzRXF1YWwobmV3RG9jLmtleSksICdNaXNtYXRjaGluZyBrZXlzIGZvdW5kIGluIGRvY3VtZW50IGNoYW5nZXM6ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGtleSArXHJcbiAgICAgICAgICAgICAgICAgICAgJyAhPSAnICtcclxuICAgICAgICAgICAgICAgICAgICBuZXdEb2Mua2V5KTtcclxuICAgICAgICAgICAgICAgIG5ld0RvYyA9IF90aGlzLnF1ZXJ5Lm1hdGNoZXMobmV3RG9jKSA/IG5ld0RvYyA6IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG9sZERvY0hhZFBlbmRpbmdNdXRhdGlvbnMgPSBvbGREb2NcclxuICAgICAgICAgICAgICAgID8gX3RoaXMubXV0YXRlZEtleXMuaGFzKG9sZERvYy5rZXkpXHJcbiAgICAgICAgICAgICAgICA6IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgbmV3RG9jSGFzUGVuZGluZ011dGF0aW9ucyA9IG5ld0RvY1xyXG4gICAgICAgICAgICAgICAgPyBuZXdEb2MuaGFzTG9jYWxNdXRhdGlvbnMgfHxcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IGNvbnNpZGVyIGNvbW1pdHRlZCBtdXRhdGlvbnMgZm9yIGRvY3VtZW50cyB0aGF0IHdlcmVcclxuICAgICAgICAgICAgICAgICAgICAvLyBtdXRhdGVkIGR1cmluZyB0aGUgbGlmZXRpbWUgb2YgdGhlIHZpZXcuXHJcbiAgICAgICAgICAgICAgICAgICAgKF90aGlzLm11dGF0ZWRLZXlzLmhhcyhuZXdEb2Mua2V5KSAmJiBuZXdEb2MuaGFzQ29tbWl0dGVkTXV0YXRpb25zKVxyXG4gICAgICAgICAgICAgICAgOiBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZUFwcGxpZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGNoYW5nZVxyXG4gICAgICAgICAgICBpZiAob2xkRG9jICYmIG5ld0RvYykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRvY3NFcXVhbCA9IG9sZERvYy5kYXRhLmlzRXF1YWwobmV3RG9jLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkb2NzRXF1YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNob3VsZFdhaXRGb3JTeW5jZWREb2N1bWVudChvbGREb2MsIG5ld0RvYykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlU2V0LnRyYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IENoYW5nZVR5cGUuTW9kaWZpZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2M6IG5ld0RvY1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlQXBwbGllZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0RG9jSW5MaW1pdCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucXVlcnkuZG9jQ29tcGFyYXRvcihuZXdEb2MsIGxhc3REb2NJbkxpbWl0KSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgZG9jIG1vdmVkIGZyb20gaW5zaWRlIHRoZSBsaW1pdCB0byBhZnRlciB0aGUgbGltaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGF0IG1lYW5zIHRoZXJlIG1heSBiZSBzb21lIGRvYyBpbiB0aGUgbG9jYWwgY2FjaGUgdGhhdCdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhY3R1YWxseSBsZXNzIHRoYW4gdGhpcyBvbmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkc1JlZmlsbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvbGREb2NIYWRQZW5kaW5nTXV0YXRpb25zICE9PSBuZXdEb2NIYXNQZW5kaW5nTXV0YXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlU2V0LnRyYWNrKHsgdHlwZTogQ2hhbmdlVHlwZS5NZXRhZGF0YSwgZG9jOiBuZXdEb2MgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlQXBwbGllZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIW9sZERvYyAmJiBuZXdEb2MpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZVNldC50cmFjayh7IHR5cGU6IENoYW5nZVR5cGUuQWRkZWQsIGRvYzogbmV3RG9jIH0pO1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlQXBwbGllZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAob2xkRG9jICYmICFuZXdEb2MpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZVNldC50cmFjayh7IHR5cGU6IENoYW5nZVR5cGUuUmVtb3ZlZCwgZG9jOiBvbGREb2MgfSk7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VBcHBsaWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0RG9jSW5MaW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEEgZG9jIHdhcyByZW1vdmVkIGZyb20gYSBmdWxsIGxpbWl0IHF1ZXJ5LiBXZSdsbCBuZWVkIHRvXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVxdWVyeSBmcm9tIHRoZSBsb2NhbCBjYWNoZSB0byBzZWUgaWYgd2Uga25vdyBhYm91dCBzb21lIG90aGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9jIHRoYXQgc2hvdWxkIGJlIGluIHRoZSByZXN1bHRzLlxyXG4gICAgICAgICAgICAgICAgICAgIG5lZWRzUmVmaWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlQXBwbGllZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0RvYykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0RvY3VtZW50U2V0ID0gbmV3RG9jdW1lbnRTZXQuYWRkKG5ld0RvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0RvY0hhc1BlbmRpbmdNdXRhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TXV0YXRlZEtleXMgPSBuZXdNdXRhdGVkS2V5cy5hZGQoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld011dGF0ZWRLZXlzID0gbmV3TXV0YXRlZEtleXMuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RG9jdW1lbnRTZXQgPSBuZXdEb2N1bWVudFNldC5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdNdXRhdGVkS2V5cyA9IG5ld011dGF0ZWRLZXlzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMucXVlcnkuaGFzTGltaXQoKSkge1xyXG4gICAgICAgICAgICB3aGlsZSAobmV3RG9jdW1lbnRTZXQuc2l6ZSA+IHRoaXMucXVlcnkubGltaXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvbGREb2MgPSBuZXdEb2N1bWVudFNldC5sYXN0KCk7XHJcbiAgICAgICAgICAgICAgICBuZXdEb2N1bWVudFNldCA9IG5ld0RvY3VtZW50U2V0LmRlbGV0ZShvbGREb2Mua2V5KTtcclxuICAgICAgICAgICAgICAgIG5ld011dGF0ZWRLZXlzID0gbmV3TXV0YXRlZEtleXMuZGVsZXRlKG9sZERvYy5rZXkpO1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlU2V0LnRyYWNrKHsgdHlwZTogQ2hhbmdlVHlwZS5SZW1vdmVkLCBkb2M6IG9sZERvYyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhc3NlcnQoIW5lZWRzUmVmaWxsIHx8ICFwcmV2aW91c0NoYW5nZXMsICdWaWV3IHdhcyByZWZpbGxlZCB1c2luZyBkb2NzIHRoYXQgdGhlbXNlbHZlcyBuZWVkZWQgcmVmaWxsaW5nLicpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50U2V0OiBuZXdEb2N1bWVudFNldCxcclxuICAgICAgICAgICAgY2hhbmdlU2V0OiBjaGFuZ2VTZXQsXHJcbiAgICAgICAgICAgIG5lZWRzUmVmaWxsOiBuZWVkc1JlZmlsbCxcclxuICAgICAgICAgICAgbXV0YXRlZEtleXM6IG5ld011dGF0ZWRLZXlzXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBWaWV3LnByb3RvdHlwZS5zaG91bGRXYWl0Rm9yU3luY2VkRG9jdW1lbnQgPSBmdW5jdGlvbiAob2xkRG9jLCBuZXdEb2MpIHtcclxuICAgICAgICAvLyBXZSBzdXBwcmVzcyB0aGUgaW5pdGlhbCBjaGFuZ2UgZXZlbnQgZm9yIGRvY3VtZW50cyB0aGF0IHdlcmUgbW9kaWZpZWQgYXNcclxuICAgICAgICAvLyBwYXJ0IG9mIGEgd3JpdGUgYWNrbm93bGVkZ21lbnQgKGUuZy4gd2hlbiB0aGUgdmFsdWUgb2YgYSBzZXJ2ZXIgdHJhbnNmb3JtXHJcbiAgICAgICAgLy8gaXMgYXBwbGllZCkgYXMgV2F0Y2ggd2lsbCBzZW5kIHVzIHRoZSBzYW1lIGRvY3VtZW50IGFnYWluLlxyXG4gICAgICAgIC8vIEJ5IHN1cHByZXNzaW5nIHRoZSBldmVudCwgd2Ugb25seSByYWlzZSB0d28gdXNlciB2aXNpYmxlIGV2ZW50cyAob25lIHdpdGhcclxuICAgICAgICAvLyBgaGFzUGVuZGluZ1dyaXRlc2AgYW5kIHRoZSBmaW5hbCBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQpIGluc3RlYWQgb2YgdGhyZWVcclxuICAgICAgICAvLyAob25lIHdpdGggYGhhc1BlbmRpbmdXcml0ZXNgLCB0aGUgbW9kaWZpZWQgZG9jdW1lbnQgd2l0aFxyXG4gICAgICAgIC8vIGBoYXNQZW5kaW5nV3JpdGVzYCBhbmQgdGhlIGZpbmFsIHN0YXRlIG9mIHRoZSBkb2N1bWVudCkuXHJcbiAgICAgICAgcmV0dXJuIChvbGREb2MuaGFzTG9jYWxNdXRhdGlvbnMgJiZcclxuICAgICAgICAgICAgbmV3RG9jLmhhc0NvbW1pdHRlZE11dGF0aW9ucyAmJlxyXG4gICAgICAgICAgICAhbmV3RG9jLmhhc0xvY2FsTXV0YXRpb25zKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgdGhlIHZpZXcgd2l0aCB0aGUgZ2l2ZW4gVmlld0RvY3VtZW50Q2hhbmdlcyBhbmQgb3B0aW9uYWxseSB1cGRhdGVzXHJcbiAgICAgKiBsaW1ibyBkb2NzIGFuZCBzeW5jIHN0YXRlIGZyb20gdGhlIHByb3ZpZGVkIHRhcmdldCBjaGFuZ2UuXHJcbiAgICAgKiBAcGFyYW0gZG9jQ2hhbmdlcyBUaGUgc2V0IG9mIGNoYW5nZXMgdG8gbWFrZSB0byB0aGUgdmlldydzIGRvY3MuXHJcbiAgICAgKiBAcGFyYW0gdXBkYXRlTGltYm9Eb2N1bWVudHMgV2hldGhlciB0byB1cGRhdGUgbGltYm8gZG9jdW1lbnRzIGJhc2VkIG9uIHRoaXNcclxuICAgICAqICAgICAgICBjaGFuZ2UuXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0Q2hhbmdlIEEgdGFyZ2V0IGNoYW5nZSB0byBhcHBseSBmb3IgY29tcHV0aW5nIGxpbWJvIGRvY3MgYW5kXHJcbiAgICAgKiAgICAgICAgc3luYyBzdGF0ZS5cclxuICAgICAqIEByZXR1cm4gQSBuZXcgVmlld0NoYW5nZSB3aXRoIHRoZSBnaXZlbiBkb2NzLCBjaGFuZ2VzLCBhbmQgc3luYyBzdGF0ZS5cclxuICAgICAqL1xyXG4gICAgLy8gUE9SVElORyBOT1RFOiBUaGUgaU9TL0FuZHJvaWQgY2xpZW50cyBhbHdheXMgY29tcHV0ZSBsaW1ibyBkb2N1bWVudCBjaGFuZ2VzLlxyXG4gICAgVmlldy5wcm90b3R5cGUuYXBwbHlDaGFuZ2VzID0gZnVuY3Rpb24gKGRvY0NoYW5nZXMsIHVwZGF0ZUxpbWJvRG9jdW1lbnRzLCB0YXJnZXRDaGFuZ2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGFzc2VydCghZG9jQ2hhbmdlcy5uZWVkc1JlZmlsbCwgJ0Nhbm5vdCBhcHBseSBjaGFuZ2VzIHRoYXQgbmVlZCBhIHJlZmlsbCcpO1xyXG4gICAgICAgIHZhciBvbGREb2NzID0gdGhpcy5kb2N1bWVudFNldDtcclxuICAgICAgICB0aGlzLmRvY3VtZW50U2V0ID0gZG9jQ2hhbmdlcy5kb2N1bWVudFNldDtcclxuICAgICAgICB0aGlzLm11dGF0ZWRLZXlzID0gZG9jQ2hhbmdlcy5tdXRhdGVkS2V5cztcclxuICAgICAgICAvLyBTb3J0IGNoYW5nZXMgYmFzZWQgb24gdHlwZSBhbmQgcXVlcnkgY29tcGFyYXRvclxyXG4gICAgICAgIHZhciBjaGFuZ2VzID0gZG9jQ2hhbmdlcy5jaGFuZ2VTZXQuZ2V0Q2hhbmdlcygpO1xyXG4gICAgICAgIGNoYW5nZXMuc29ydChmdW5jdGlvbiAoYzEsIGMyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoY29tcGFyZUNoYW5nZVR5cGUoYzEudHlwZSwgYzIudHlwZSkgfHxcclxuICAgICAgICAgICAgICAgIF90aGlzLnF1ZXJ5LmRvY0NvbXBhcmF0b3IoYzEuZG9jLCBjMi5kb2MpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFwcGx5VGFyZ2V0Q2hhbmdlKHRhcmdldENoYW5nZSk7XHJcbiAgICAgICAgdmFyIGxpbWJvQ2hhbmdlcyA9IHVwZGF0ZUxpbWJvRG9jdW1lbnRzXHJcbiAgICAgICAgICAgID8gdGhpcy51cGRhdGVMaW1ib0RvY3VtZW50cygpXHJcbiAgICAgICAgICAgIDogW107XHJcbiAgICAgICAgdmFyIHN5bmNlZCA9IHRoaXMubGltYm9Eb2N1bWVudHMuc2l6ZSA9PT0gMCAmJiB0aGlzLmN1cnJlbnQ7XHJcbiAgICAgICAgdmFyIG5ld1N5bmNTdGF0ZSA9IHN5bmNlZCA/IFN5bmNTdGF0ZS5TeW5jZWQgOiBTeW5jU3RhdGUuTG9jYWw7XHJcbiAgICAgICAgdmFyIHN5bmNTdGF0ZUNoYW5nZWQgPSBuZXdTeW5jU3RhdGUgIT09IHRoaXMuc3luY1N0YXRlO1xyXG4gICAgICAgIHRoaXMuc3luY1N0YXRlID0gbmV3U3luY1N0YXRlO1xyXG4gICAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCA9PT0gMCAmJiAhc3luY1N0YXRlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAvLyBubyBjaGFuZ2VzXHJcbiAgICAgICAgICAgIHJldHVybiB7IGxpbWJvQ2hhbmdlczogbGltYm9DaGFuZ2VzIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc25hcCA9IG5ldyBWaWV3U25hcHNob3QodGhpcy5xdWVyeSwgZG9jQ2hhbmdlcy5kb2N1bWVudFNldCwgb2xkRG9jcywgY2hhbmdlcywgZG9jQ2hhbmdlcy5tdXRhdGVkS2V5cywgbmV3U3luY1N0YXRlID09PSBTeW5jU3RhdGUuTG9jYWwsIHN5bmNTdGF0ZUNoYW5nZWQsIFxyXG4gICAgICAgICAgICAvKiBleGNsdWRlc01ldGFkYXRhQ2hhbmdlcz0gKi8gZmFsc2UpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc25hcHNob3Q6IHNuYXAsXHJcbiAgICAgICAgICAgICAgICBsaW1ib0NoYW5nZXM6IGxpbWJvQ2hhbmdlc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFwcGxpZXMgYW4gT25saW5lU3RhdGUgY2hhbmdlIHRvIHRoZSB2aWV3LCBwb3RlbnRpYWxseSBnZW5lcmF0aW5nIGFcclxuICAgICAqIFZpZXdDaGFuZ2UgaWYgdGhlIHZpZXcncyBzeW5jU3RhdGUgY2hhbmdlcyBhcyBhIHJlc3VsdC5cclxuICAgICAqL1xyXG4gICAgVmlldy5wcm90b3R5cGUuYXBwbHlPbmxpbmVTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChvbmxpbmVTdGF0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQgJiYgb25saW5lU3RhdGUgPT09IE9ubGluZVN0YXRlLk9mZmxpbmUpIHtcclxuICAgICAgICAgICAgLy8gSWYgd2UncmUgb2ZmbGluZSwgc2V0IGBjdXJyZW50YCB0byBmYWxzZSBhbmQgdGhlbiBjYWxsIGFwcGx5Q2hhbmdlcygpXHJcbiAgICAgICAgICAgIC8vIHRvIHJlZnJlc2ggb3VyIHN5bmNTdGF0ZSBhbmQgZ2VuZXJhdGUgYSBWaWV3Q2hhbmdlIGFzIGFwcHJvcHJpYXRlLiBXZVxyXG4gICAgICAgICAgICAvLyBhcmUgZ3VhcmFudGVlZCB0byBnZXQgYSBuZXcgVGFyZ2V0Q2hhbmdlIHRoYXQgc2V0cyBgY3VycmVudGAgYmFjayB0b1xyXG4gICAgICAgICAgICAvLyB0cnVlIG9uY2UgdGhlIGNsaWVudCBpcyBiYWNrIG9ubGluZS5cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5Q2hhbmdlcyh7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudFNldDogdGhpcy5kb2N1bWVudFNldCxcclxuICAgICAgICAgICAgICAgIGNoYW5nZVNldDogbmV3IERvY3VtZW50Q2hhbmdlU2V0KCksXHJcbiAgICAgICAgICAgICAgICBtdXRhdGVkS2V5czogdGhpcy5tdXRhdGVkS2V5cyxcclxuICAgICAgICAgICAgICAgIG5lZWRzUmVmaWxsOiBmYWxzZVxyXG4gICAgICAgICAgICB9LCBcclxuICAgICAgICAgICAgLyogdXBkYXRlTGltYm9Eb2N1bWVudHM9ICovIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIE5vIGVmZmVjdCwganVzdCByZXR1cm4gYSBuby1vcCBWaWV3Q2hhbmdlLlxyXG4gICAgICAgICAgICByZXR1cm4geyBsaW1ib0NoYW5nZXM6IFtdIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBkb2MgZm9yIHRoZSBnaXZlbiBrZXkgc2hvdWxkIGJlIGluIGxpbWJvLlxyXG4gICAgICovXHJcbiAgICBWaWV3LnByb3RvdHlwZS5zaG91bGRCZUluTGltYm8gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgLy8gSWYgdGhlIHJlbW90ZSBlbmQgc2F5cyBpdCdzIHBhcnQgb2YgdGhpcyBxdWVyeSwgaXQncyBub3QgaW4gbGltYm8uXHJcbiAgICAgICAgaWYgKHRoaXMuX3N5bmNlZERvY3VtZW50cy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRoZSBsb2NhbCBzdG9yZSBkb2Vzbid0IHRoaW5rIGl0J3MgYSByZXN1bHQsIHNvIGl0IHNob3VsZG4ndCBiZSBpbiBsaW1iby5cclxuICAgICAgICBpZiAoIXRoaXMuZG9jdW1lbnRTZXQuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbG9jYWwgY2hhbmdlcyB0byB0aGUgZG9jLCB0aGV5IG1pZ2h0IGV4cGxhaW4gd2h5IHRoZSBzZXJ2ZXJcclxuICAgICAgICAvLyBkb2Vzbid0IGtub3cgdGhhdCBpdCdzIHBhcnQgb2YgdGhlIHF1ZXJ5LiBTbyBkb24ndCBwdXQgaXQgaW4gbGltYm8uXHJcbiAgICAgICAgLy8gVE9ETyhrbGltdCk6IElkZWFsbHksIHdlIHdvdWxkIG9ubHkgY29uc2lkZXIgY2hhbmdlcyB0aGF0IG1pZ2h0IGFjdHVhbGx5XHJcbiAgICAgICAgLy8gYWZmZWN0IHRoaXMgc3BlY2lmaWMgcXVlcnkuXHJcbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRTZXQuZ2V0KGtleSkuaGFzTG9jYWxNdXRhdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBFdmVyeXRoaW5nIGVsc2UgaXMgaW4gbGltYm8uXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHN5bmNlZERvY3VtZW50cywgY3VycmVudCwgYW5kIGxpbWJvIGRvY3MgYmFzZWQgb24gdGhlIGdpdmVuIGNoYW5nZS5cclxuICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgY2hhbmdlcyB0byB3aGljaCBkb2NzIGFyZSBpbiBsaW1iby5cclxuICAgICAqL1xyXG4gICAgVmlldy5wcm90b3R5cGUuYXBwbHlUYXJnZXRDaGFuZ2UgPSBmdW5jdGlvbiAodGFyZ2V0Q2hhbmdlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGFyZ2V0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRhcmdldENoYW5nZS5hZGRlZERvY3VtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIChfdGhpcy5fc3luY2VkRG9jdW1lbnRzID0gX3RoaXMuX3N5bmNlZERvY3VtZW50cy5hZGQoa2V5KSk7IH0pO1xyXG4gICAgICAgICAgICB0YXJnZXRDaGFuZ2UubW9kaWZpZWREb2N1bWVudHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXNzZXJ0KF90aGlzLl9zeW5jZWREb2N1bWVudHMuaGFzKGtleSksIFwiTW9kaWZpZWQgZG9jdW1lbnQgXCIgKyBrZXkgKyBcIiBub3QgZm91bmQgaW4gdmlldy5cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0YXJnZXRDaGFuZ2UucmVtb3ZlZERvY3VtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIChfdGhpcy5fc3luY2VkRG9jdW1lbnRzID0gX3RoaXMuX3N5bmNlZERvY3VtZW50cy5kZWxldGUoa2V5KSk7IH0pO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB0YXJnZXRDaGFuZ2UuY3VycmVudDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVmlldy5wcm90b3R5cGUudXBkYXRlTGltYm9Eb2N1bWVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBXZSBjYW4gb25seSBkZXRlcm1pbmUgbGltYm8gZG9jdW1lbnRzIHdoZW4gd2UncmUgaW4tc3luYyB3aXRoIHRoZSBzZXJ2ZXIuXHJcbiAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPKGtsaW10KTogRG8gdGhpcyBpbmNyZW1lbnRhbGx5IHNvIHRoYXQgaXQncyBub3QgcXVhZHJhdGljIHdoZW5cclxuICAgICAgICAvLyB1cGRhdGluZyBtYW55IGRvY3VtZW50cy5cclxuICAgICAgICB2YXIgb2xkTGltYm9Eb2N1bWVudHMgPSB0aGlzLmxpbWJvRG9jdW1lbnRzO1xyXG4gICAgICAgIHRoaXMubGltYm9Eb2N1bWVudHMgPSBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRTZXQuZm9yRWFjaChmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5zaG91bGRCZUluTGltYm8oZG9jLmtleSkpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxpbWJvRG9jdW1lbnRzID0gX3RoaXMubGltYm9Eb2N1bWVudHMuYWRkKGRvYy5rZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gRGlmZiB0aGUgbmV3IGxpbWJvIGRvY3Mgd2l0aCB0aGUgb2xkIGxpbWJvIGRvY3MuXHJcbiAgICAgICAgdmFyIGNoYW5nZXMgPSBbXTtcclxuICAgICAgICBvbGRMaW1ib0RvY3VtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKCFfdGhpcy5saW1ib0RvY3VtZW50cy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoKG5ldyBSZW1vdmVkTGltYm9Eb2N1bWVudChrZXkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubGltYm9Eb2N1bWVudHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmICghb2xkTGltYm9Eb2N1bWVudHMuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaChuZXcgQWRkZWRMaW1ib0RvY3VtZW50KGtleSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNoYW5nZXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIGluLW1lbW9yeSBzdGF0ZSBvZiB0aGUgY3VycmVudCB2aWV3IHdpdGggdGhlIHN0YXRlIHJlYWQgZnJvbVxyXG4gICAgICogcGVyc2lzdGVuY2UuXHJcbiAgICAgKlxyXG4gICAgICogV2UgdXBkYXRlIHRoZSBxdWVyeSB2aWV3IHdoZW5ldmVyIGEgY2xpZW50J3MgcHJpbWFyeSBzdGF0dXMgY2hhbmdlczpcclxuICAgICAqIC0gV2hlbiBhIGNsaWVudCB0cmFuc2l0aW9ucyBmcm9tIHByaW1hcnkgdG8gc2Vjb25kYXJ5LCBpdCBjYW4gbWlzc1xyXG4gICAgICogICBMb2NhbFN0b3JhZ2UgdXBkYXRlcyBhbmQgaXRzIHF1ZXJ5IHZpZXdzIG1heSB0ZW1wb3JhcmlseSBub3QgYmVcclxuICAgICAqICAgc3luY2hyb25pemVkIHdpdGggdGhlIHN0YXRlIG9uIGRpc2suXHJcbiAgICAgKiAtIEZvciBzZWNvbmRhcnkgdG8gcHJpbWFyeSB0cmFuc2l0aW9ucywgdGhlIGNsaWVudCBuZWVkcyB0byB1cGRhdGUgdGhlIGxpc3RcclxuICAgICAqICAgb2YgYHN5bmNlZERvY3VtZW50c2Agc2luY2Ugc2Vjb25kYXJ5IGNsaWVudHMgdXBkYXRlIHRoZWlyIHF1ZXJ5IHZpZXdzXHJcbiAgICAgKiAgIGJhc2VkIHB1cmVseSBvbiBzeW50aGVzaXplZCBSZW1vdGVFdmVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGxvY2FsRG9jcyAtIFRoZSBkb2N1bWVudHMgdGhhdCBtYXRjaCB0aGUgcXVlcnkgYWNjb3JkaW5nIHRvIHRoZVxyXG4gICAgICogTG9jYWxTdG9yZS5cclxuICAgICAqIEBwYXJhbSByZW1vdGVLZXlzIC0gVGhlIGtleXMgb2YgdGhlIGRvY3VtZW50cyB0aGF0IG1hdGNoIHRoZSBxdWVyeVxyXG4gICAgICogYWNjb3JkaW5nIHRvIHRoZSBiYWNrZW5kLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gVGhlIFZpZXdDaGFuZ2UgdGhhdCByZXN1bHRlZCBmcm9tIHRoaXMgc3luY2hyb25pemF0aW9uLlxyXG4gICAgICovXHJcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxyXG4gICAgVmlldy5wcm90b3R5cGUuc3luY2hyb25pemVXaXRoUGVyc2lzdGVkU3RhdGUgPSBmdW5jdGlvbiAobG9jYWxEb2NzLCByZW1vdGVLZXlzKSB7XHJcbiAgICAgICAgdGhpcy5fc3luY2VkRG9jdW1lbnRzID0gcmVtb3RlS2V5cztcclxuICAgICAgICB0aGlzLmxpbWJvRG9jdW1lbnRzID0gZG9jdW1lbnRLZXlTZXQoKTtcclxuICAgICAgICB2YXIgZG9jQ2hhbmdlcyA9IHRoaXMuY29tcHV0ZURvY0NoYW5nZXMobG9jYWxEb2NzKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseUNoYW5nZXMoZG9jQ2hhbmdlcywgLyp1cGRhdGVMaW1ib0RvY3VtZW50cz0qLyB0cnVlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSB2aWV3IHNuYXBzaG90IGFzIGlmIHRoaXMgcXVlcnkgd2FzIGp1c3QgbGlzdGVuZWQgdG8uIENvbnRhaW5zXHJcbiAgICAgKiBhIGRvY3VtZW50IGFkZCBmb3IgZXZlcnkgZXhpc3RpbmcgZG9jdW1lbnQgYW5kIHRoZSBgZnJvbUNhY2hlYCBhbmRcclxuICAgICAqIGBoYXNQZW5kaW5nV3JpdGVzYCBzdGF0dXMgb2YgdGhlIGFscmVhZHkgZXN0YWJsaXNoZWQgdmlldy5cclxuICAgICAqL1xyXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cclxuICAgIFZpZXcucHJvdG90eXBlLmNvbXB1dGVJbml0aWFsU25hcHNob3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFZpZXdTbmFwc2hvdC5mcm9tSW5pdGlhbERvY3VtZW50cyh0aGlzLnF1ZXJ5LCB0aGlzLmRvY3VtZW50U2V0LCB0aGlzLm11dGF0ZWRLZXlzLCB0aGlzLnN5bmNTdGF0ZSA9PT0gU3luY1N0YXRlLkxvY2FsKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVmlldztcclxufSgpKTtcclxuZnVuY3Rpb24gY29tcGFyZUNoYW5nZVR5cGUoYzEsIGMyKSB7XHJcbiAgICB2YXIgb3JkZXIgPSBmdW5jdGlvbiAoY2hhbmdlKSB7XHJcbiAgICAgICAgc3dpdGNoIChjaGFuZ2UpIHtcclxuICAgICAgICAgICAgY2FzZSBDaGFuZ2VUeXBlLkFkZGVkOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIGNhc2UgQ2hhbmdlVHlwZS5Nb2RpZmllZDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAyO1xyXG4gICAgICAgICAgICBjYXNlIENoYW5nZVR5cGUuTWV0YWRhdGE6XHJcbiAgICAgICAgICAgICAgICAvLyBBIG1ldGFkYXRhIGNoYW5nZSBpcyBjb252ZXJ0ZWQgdG8gYSBtb2RpZmllZCBjaGFuZ2UgYXQgdGhlIHB1YmxpY1xyXG4gICAgICAgICAgICAgICAgLy8gYXBpIGxheWVyLiAgU2luY2Ugd2Ugc29ydCBieSBkb2N1bWVudCBrZXkgYW5kIHRoZW4gY2hhbmdlIHR5cGUsXHJcbiAgICAgICAgICAgICAgICAvLyBtZXRhZGF0YSBhbmQgbW9kaWZpZWQgY2hhbmdlcyBtdXN0IGJlIHNvcnRlZCBlcXVpdmFsZW50bHkuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcclxuICAgICAgICAgICAgY2FzZSBDaGFuZ2VUeXBlLlJlbW92ZWQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKCdVbmtub3duIENoYW5nZVR5cGU6ICcgKyBjaGFuZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gb3JkZXIoYzEpIC0gb3JkZXIoYzIpO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgTE9HX1RBRyQ5ID0gJ1N5bmNFbmdpbmUnO1xyXG4vKipcclxuICogUXVlcnlWaWV3IGNvbnRhaW5zIGFsbCBvZiB0aGUgZGF0YSB0aGF0IFN5bmNFbmdpbmUgbmVlZHMgdG8ga2VlcCB0cmFjayBvZiBmb3JcclxuICogYSBwYXJ0aWN1bGFyIHF1ZXJ5LlxyXG4gKi9cclxudmFyIFF1ZXJ5VmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFF1ZXJ5VmlldyhcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHF1ZXJ5IGl0c2VsZi5cclxuICAgICAqL1xyXG4gICAgcXVlcnksIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdGFyZ2V0IG51bWJlciBjcmVhdGVkIGJ5IHRoZSBjbGllbnQgdGhhdCBpcyB1c2VkIGluIHRoZSB3YXRjaFxyXG4gICAgICogc3RyZWFtIHRvIGlkZW50aWZ5IHRoaXMgcXVlcnkuXHJcbiAgICAgKi9cclxuICAgIHRhcmdldElkLCBcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHZpZXcgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGluZyB0aGUgZmluYWwgbWVyZ2VkIHRydXRoIG9mIHdoYXRcclxuICAgICAqIGRvY3MgYXJlIGluIHRoZSBxdWVyeS4gSXQgZ2V0cyBub3RpZmllZCBvZiBsb2NhbCBhbmQgcmVtb3RlIGNoYW5nZXMsXHJcbiAgICAgKiBhbmQgYXBwbGllcyB0aGUgcXVlcnkgZmlsdGVycyBhbmQgbGltaXRzIHRvIGRldGVybWluZSB0aGUgbW9zdCBjb3JyZWN0XHJcbiAgICAgKiBwb3NzaWJsZSByZXN1bHRzLlxyXG4gICAgICovXHJcbiAgICB2aWV3KSB7XHJcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSB0YXJnZXRJZDtcclxuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFF1ZXJ5VmlldztcclxufSgpKTtcclxuLyoqIFRyYWNrcyBhIGxpbWJvIHJlc29sdXRpb24uICovXHJcbnZhciBMaW1ib1Jlc29sdXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMaW1ib1Jlc29sdXRpb24oa2V5KSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTGltYm9SZXNvbHV0aW9uO1xyXG59KCkpO1xyXG4vKipcclxuICogU3luY0VuZ2luZSBpcyB0aGUgY2VudHJhbCBjb250cm9sbGVyIGluIHRoZSBjbGllbnQgU0RLIGFyY2hpdGVjdHVyZS4gSXQgaXNcclxuICogdGhlIGdsdWUgY29kZSBiZXR3ZWVuIHRoZSBFdmVudE1hbmFnZXIsIExvY2FsU3RvcmUsIGFuZCBSZW1vdGVTdG9yZS4gU29tZSBvZlxyXG4gKiBTeW5jRW5naW5lJ3MgcmVzcG9uc2liaWxpdGllcyBpbmNsdWRlOlxyXG4gKiAxLiBDb29yZGluYXRpbmcgY2xpZW50IHJlcXVlc3RzIGFuZCByZW1vdGUgZXZlbnRzIGJldHdlZW4gdGhlIEV2ZW50TWFuYWdlclxyXG4gKiAgICBhbmQgdGhlIGxvY2FsIGFuZCByZW1vdGUgZGF0YSBzdG9yZXMuXHJcbiAqIDIuIE1hbmFnaW5nIGEgVmlldyBvYmplY3QgZm9yIGVhY2ggcXVlcnksIHByb3ZpZGluZyB0aGUgdW5pZmllZCB2aWV3IGJldHdlZW5cclxuICogICAgdGhlIGxvY2FsIGFuZCByZW1vdGUgZGF0YSBzdG9yZXMuXHJcbiAqIDMuIE5vdGlmeWluZyB0aGUgUmVtb3RlU3RvcmUgd2hlbiB0aGUgTG9jYWxTdG9yZSBoYXMgbmV3IG11dGF0aW9ucyBpbiBpdHNcclxuICogICAgcXVldWUgdGhhdCBuZWVkIHNlbmRpbmcgdG8gdGhlIGJhY2tlbmQuXHJcbiAqXHJcbiAqIFRoZSBTeW5jRW5naW5l4oCZcyBtZXRob2RzIHNob3VsZCBvbmx5IGV2ZXIgYmUgY2FsbGVkIGJ5IG1ldGhvZHMgcnVubmluZyBpbiB0aGVcclxuICogZ2xvYmFsIGFzeW5jIHF1ZXVlLlxyXG4gKi9cclxudmFyIFN5bmNFbmdpbmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTeW5jRW5naW5lKGxvY2FsU3RvcmUsIHJlbW90ZVN0b3JlLCBcclxuICAgIC8vIFBPUlRJTkcgTk9URTogTWFuYWdlcyBzdGF0ZSBzeW5jaHJvbml6YXRpb24gaW4gbXVsdGktdGFiIGVudmlyb25tZW50cy5cclxuICAgIHNoYXJlZENsaWVudFN0YXRlLCBjdXJyZW50VXNlcikge1xyXG4gICAgICAgIHRoaXMubG9jYWxTdG9yZSA9IGxvY2FsU3RvcmU7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVTdG9yZSA9IHJlbW90ZVN0b3JlO1xyXG4gICAgICAgIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUgPSBzaGFyZWRDbGllbnRTdGF0ZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRVc2VyID0gY3VycmVudFVzZXI7XHJcbiAgICAgICAgdGhpcy5zeW5jRW5naW5lTGlzdGVuZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucXVlcnlWaWV3c0J5UXVlcnkgPSBuZXcgT2JqZWN0TWFwKGZ1bmN0aW9uIChxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBxLmNhbm9uaWNhbElkKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeVZpZXdzQnlUYXJnZXQgPSB7fTtcclxuICAgICAgICB0aGlzLmxpbWJvVGFyZ2V0c0J5S2V5ID0gbmV3IFNvcnRlZE1hcChEb2N1bWVudEtleS5jb21wYXJhdG9yKTtcclxuICAgICAgICB0aGlzLmxpbWJvUmVzb2x1dGlvbnNCeVRhcmdldCA9IHt9O1xyXG4gICAgICAgIHRoaXMubGltYm9Eb2N1bWVudFJlZnMgPSBuZXcgUmVmZXJlbmNlU2V0KCk7XHJcbiAgICAgICAgLyoqIFN0b3JlcyB1c2VyIGNvbXBsZXRpb24gaGFuZGxlcnMsIGluZGV4ZWQgYnkgVXNlciBhbmQgQmF0Y2hJZC4gKi9cclxuICAgICAgICB0aGlzLm11dGF0aW9uVXNlckNhbGxiYWNrcyA9IHt9O1xyXG4gICAgICAgIHRoaXMubGltYm9UYXJnZXRJZEdlbmVyYXRvciA9IFRhcmdldElkR2VuZXJhdG9yLmZvclN5bmNFbmdpbmUoKTtcclxuICAgICAgICAvLyBUaGUgcHJpbWFyeSBzdGF0ZSBpcyBzZXQgdG8gYHRydWVgIG9yIGBmYWxzZWAgaW1tZWRpYXRlbHkgYWZ0ZXIgRmlyZXN0b3JlXHJcbiAgICAgICAgLy8gc3RhcnR1cC4gSW4gdGhlIGludGVyaW0sIGEgY2xpZW50IHNob3VsZCBvbmx5IGJlIGNvbnNpZGVyZWQgcHJpbWFyeSBpZlxyXG4gICAgICAgIC8vIGBpc1ByaW1hcnlgIGlzIHRydWUuXHJcbiAgICAgICAgdGhpcy5pc1ByaW1hcnkgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZSA9IE9ubGluZVN0YXRlLlVua25vd247XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3luY0VuZ2luZS5wcm90b3R5cGUsIFwiaXNQcmltYXJ5Q2xpZW50XCIsIHtcclxuICAgICAgICAvLyBPbmx5IHVzZWQgZm9yIHRlc3RpbmcuXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzUHJpbWFyeSA9PT0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKiBTdWJzY3JpYmVzIHRvIFN5bmNFbmdpbmUgbm90aWZpY2F0aW9ucy4gSGFzIHRvIGJlIGNhbGxlZCBleGFjdGx5IG9uY2UuICovXHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3luY0VuZ2luZUxpc3RlbmVyKSB7XHJcbiAgICAgICAgYXNzZXJ0KHN5bmNFbmdpbmVMaXN0ZW5lciAhPT0gbnVsbCwgJ1N5bmNFbmdpbmUgbGlzdGVuZXIgY2Fubm90IGJlIG51bGwnKTtcclxuICAgICAgICBhc3NlcnQodGhpcy5zeW5jRW5naW5lTGlzdGVuZXIgPT09IG51bGwsICdTeW5jRW5naW5lIGFscmVhZHkgaGFzIGEgc3Vic2NyaWJlci4nKTtcclxuICAgICAgICB0aGlzLnN5bmNFbmdpbmVMaXN0ZW5lciA9IHN5bmNFbmdpbmVMaXN0ZW5lcjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYXRlcyB0aGUgbmV3IGxpc3RlbiwgcmVzb2x2ZXMgcHJvbWlzZSB3aGVuIGxpc3RlbiBlbnF1ZXVlZCB0byB0aGVcclxuICAgICAqIHNlcnZlci4gQWxsIHRoZSBzdWJzZXF1ZW50IHZpZXcgc25hcHNob3RzIG9yIGVycm9ycyBhcmUgc2VudCB0byB0aGVcclxuICAgICAqIHN1YnNjcmliZWQgaGFuZGxlcnMuIFJldHVybnMgdGhlIHRhcmdldElkIG9mIHRoZSBxdWVyeS5cclxuICAgICAqL1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXRJZCwgdmlld1NuYXBzaG90LCBxdWVyeVZpZXcsIHF1ZXJ5RGF0YSwgc3RhdHVzXzE7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3NlcnRTdWJzY3JpYmVkKCdsaXN0ZW4oKScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVZpZXcgPSB0aGlzLnF1ZXJ5Vmlld3NCeVF1ZXJ5LmdldChxdWVyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcXVlcnlWaWV3KSByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUE9SVElORyBOT1RFOiBXaXRoIE11bHQtVGFiIFdlYiwgaXQgaXMgcG9zc2libGUgdGhhdCBhIHF1ZXJ5IHZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBleGlzdHMgd2hlbiBFdmVudE1hbmFnZXIgY2FsbHMgdXMgZm9yIHRoZSBmaXJzdCB0aW1lLiBUaGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhcHBlbnMgd2hlbiB0aGUgcHJpbWFyeSB0YWIgaXMgYWxyZWFkeSBsaXN0ZW5pbmcgdG8gdGhpcyBxdWVyeSBvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWhhbGYgb2YgYW5vdGhlciB0YWIgYW5kIHRoZSB1c2VyIG9mIHRoZSBwcmltYXJ5IGFsc28gc3RhcnRzIGxpc3RlbmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byB0aGUgcXVlcnkuIEV2ZW50TWFuYWdlciB3aWxsIG5vdCBoYXZlIGFuIGFzc2lnbmVkIHRhcmdldCBJRCBpbiB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgYW5kIGNhbGxzIGBsaXN0ZW5gIHRvIG9idGFpbiB0aGlzIElELlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZCA9IHF1ZXJ5Vmlldy50YXJnZXRJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5hZGRMb2NhbFF1ZXJ5VGFyZ2V0KHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld1NuYXBzaG90ID0gcXVlcnlWaWV3LnZpZXcuY29tcHV0ZUluaXRpYWxTbmFwc2hvdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZS5hbGxvY2F0ZVF1ZXJ5KHF1ZXJ5KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeURhdGEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c18xID0gdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5hZGRMb2NhbFF1ZXJ5VGFyZ2V0KHF1ZXJ5RGF0YS50YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldElkID0gcXVlcnlEYXRhLnRhcmdldElkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmluaXRpYWxpemVWaWV3QW5kQ29tcHV0ZVNuYXBzaG90KHF1ZXJ5RGF0YSwgc3RhdHVzXzEgPT09ICdjdXJyZW50JyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld1NuYXBzaG90ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ByaW1hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3RlU3RvcmUubGlzdGVuKHF1ZXJ5RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW5jRW5naW5lTGlzdGVuZXIub25XYXRjaENoYW5nZShbdmlld1NuYXBzaG90XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0YXJnZXRJZF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJzIGEgdmlldyBmb3IgYSBwcmV2aW91c2x5IHVua25vd24gcXVlcnkgYW5kIGNvbXB1dGVzIGl0cyBpbml0aWFsXHJcbiAgICAgKiBzbmFwc2hvdC5cclxuICAgICAqL1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuaW5pdGlhbGl6ZVZpZXdBbmRDb21wdXRlU25hcHNob3QgPSBmdW5jdGlvbiAocXVlcnlEYXRhLCBjdXJyZW50KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcXVlcnkgPSBxdWVyeURhdGEucXVlcnk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxTdG9yZS5leGVjdXRlUXVlcnkocXVlcnkpLnRoZW4oZnVuY3Rpb24gKGRvY3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxvY2FsU3RvcmVcclxuICAgICAgICAgICAgICAgIC5yZW1vdGVEb2N1bWVudEtleXMocXVlcnlEYXRhLnRhcmdldElkKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlbW90ZUtleXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IFZpZXcocXVlcnksIHJlbW90ZUtleXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZXdEb2NDaGFuZ2VzID0gdmlldy5jb21wdXRlRG9jQ2hhbmdlcyhkb2NzKTtcclxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGggUHJldHRpZXIgZm9ybWF0cyB0aGlzIGV4Y2VlZCAxMDAgY2hhcmFjdGVycy5cclxuICAgICAgICAgICAgICAgIHZhciBzeW50aGVzaXplZFRhcmdldENoYW5nZSA9IFRhcmdldENoYW5nZS5jcmVhdGVTeW50aGVzaXplZFRhcmdldENoYW5nZUZvckN1cnJlbnRDaGFuZ2UocXVlcnlEYXRhLnRhcmdldElkLCBjdXJyZW50ICYmIF90aGlzLm9ubGluZVN0YXRlICE9PSBPbmxpbmVTdGF0ZS5PZmZsaW5lKTtcclxuICAgICAgICAgICAgICAgIHZhciB2aWV3Q2hhbmdlID0gdmlldy5hcHBseUNoYW5nZXModmlld0RvY0NoYW5nZXMsIFxyXG4gICAgICAgICAgICAgICAgLyogdXBkYXRlTGltYm9Eb2N1bWVudHM9ICovIF90aGlzLmlzUHJpbWFyeSA9PT0gdHJ1ZSwgc3ludGhlc2l6ZWRUYXJnZXRDaGFuZ2UpO1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KHZpZXdDaGFuZ2UubGltYm9DaGFuZ2VzLmxlbmd0aCA9PT0gMCwgJ1ZpZXcgcmV0dXJuZWQgbGltYm8gZG9jcyBiZWZvcmUgdGFyZ2V0IGFjayBmcm9tIHRoZSBzZXJ2ZXIuJyk7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQoISF2aWV3Q2hhbmdlLnNuYXBzaG90LCAnYXBwbHlDaGFuZ2VzIGZvciBuZXcgdmlldyBzaG91bGQgYWx3YXlzIHJldHVybiBhIHNuYXBzaG90Jyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IG5ldyBRdWVyeVZpZXcocXVlcnksIHF1ZXJ5RGF0YS50YXJnZXRJZCwgdmlldyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5xdWVyeVZpZXdzQnlRdWVyeS5zZXQocXVlcnksIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucXVlcnlWaWV3c0J5VGFyZ2V0W3F1ZXJ5RGF0YS50YXJnZXRJZF0gPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdDaGFuZ2Uuc25hcHNob3Q7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVjb25jaWxlIHRoZSBsaXN0IG9mIHN5bmNlZCBkb2N1bWVudHMgaW4gYW4gZXhpc3RpbmcgdmlldyB3aXRoIHRob3NlXHJcbiAgICAgKiBmcm9tIHBlcnNpc3RlbmNlLlxyXG4gICAgICovXHJcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuc3luY2hyb25pemVWaWV3QW5kQ29tcHV0ZVNuYXBzaG90ID0gZnVuY3Rpb24gKHF1ZXJ5Vmlldykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxTdG9yZS5leGVjdXRlUXVlcnkocXVlcnlWaWV3LnF1ZXJ5KS50aGVuKGZ1bmN0aW9uIChkb2NzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5sb2NhbFN0b3JlXHJcbiAgICAgICAgICAgICAgICAucmVtb3RlRG9jdW1lbnRLZXlzKHF1ZXJ5Vmlldy50YXJnZXRJZClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZW1vdGVLZXlzKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2aWV3U25hcHNob3Q7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdTbmFwc2hvdCA9IHF1ZXJ5Vmlldy52aWV3LnN5bmNocm9uaXplV2l0aFBlcnNpc3RlZFN0YXRlKGRvY3MsIHJlbW90ZUtleXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUHJpbWFyeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnVwZGF0ZVRyYWNrZWRMaW1ib3MocXVlcnlWaWV3LnRhcmdldElkLCB2aWV3U25hcHNob3QubGltYm9DaGFuZ2VzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgdmlld1NuYXBzaG90XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBTdG9wcyBsaXN0ZW5pbmcgdG8gdGhlIHF1ZXJ5LiAqL1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUudW5saXN0ZW4gPSBmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHF1ZXJ5VmlldywgdGFyZ2V0UmVtYWluc0FjdGl2ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2VydFN1YnNjcmliZWQoJ3VubGlzdGVuKCknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlWaWV3ID0gdGhpcy5xdWVyeVZpZXdzQnlRdWVyeS5nZXQocXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQoISFxdWVyeVZpZXcsICdUcnlpbmcgdG8gdW5saXN0ZW4gb24gcXVlcnkgbm90IGZvdW5kOicgKyBxdWVyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1ByaW1hcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHJlbW92ZSB0aGUgbG9jYWwgcXVlcnkgdGFyZ2V0IGZpcnN0IHRvIGFsbG93IHVzIHRvIHZlcmlmeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGV0aGVyIGFueSBvdGhlciBjbGllbnQgaXMgc3RpbGwgaW50ZXJlc3RlZCBpbiB0aGlzIHRhcmdldC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5yZW1vdmVMb2NhbFF1ZXJ5VGFyZ2V0KHF1ZXJ5Vmlldy50YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFJlbWFpbnNBY3RpdmUgPSB0aGlzLnNoYXJlZENsaWVudFN0YXRlLmlzQWN0aXZlUXVlcnlUYXJnZXQocXVlcnlWaWV3LnRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGFyZ2V0UmVtYWluc0FjdGl2ZSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWxlYXNlUXVlcnkocXVlcnksIC8qa2VlcFBlcnNpc3RlZFF1ZXJ5RGF0YT0qLyBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2hhcmVkQ2xpZW50U3RhdGUuY2xlYXJRdWVyeVN0YXRlKHF1ZXJ5Vmlldy50YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3RlU3RvcmUudW5saXN0ZW4ocXVlcnlWaWV3LnRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3ZlQW5kQ2xlYW51cFF1ZXJ5KHF1ZXJ5Vmlldyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmxvY2FsU3RvcmUuY29sbGVjdEdhcmJhZ2UoKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gX3RoaXMuaWdub3JlSWZQcmltYXJ5TGVhc2VMb3NzKGVycik7IH0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlbW92ZUFuZENsZWFudXBRdWVyeShxdWVyeVZpZXcpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2NhbFN0b3JlLnJlbGVhc2VRdWVyeShxdWVyeSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmtlZXBQZXJzaXN0ZWRRdWVyeURhdGE9Ki8gdHJ1ZSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDY7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhdGVzIHRoZSB3cml0ZSBvZiBsb2NhbCBtdXRhdGlvbiBiYXRjaCB3aGljaCBpbnZvbHZlcyBhZGRpbmcgdGhlXHJcbiAgICAgKiB3cml0ZXMgdG8gdGhlIG11dGF0aW9uIHF1ZXVlLCBub3RpZnlpbmcgdGhlIHJlbW90ZSBzdG9yZSBhYm91dCBuZXdcclxuICAgICAqIG11dGF0aW9ucyBhbmQgcmFpc2luZyBldmVudHMgZm9yIGFueSBjaGFuZ2VzIHRoaXMgd3JpdGUgY2F1c2VkLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoaXMgY2FsbCBpcyByZXNvbHZlZCB3aGVuIHRoZSBhYm92ZSBzdGVwc1xyXG4gICAgICogaGF2ZSBjb21wbGV0ZWQsICpub3QqIHdoZW4gdGhlIHdyaXRlIHdhcyBhY2tlZCBieSB0aGUgYmFja2VuZC4gVGhlXHJcbiAgICAgKiB1c2VyQ2FsbGJhY2sgaXMgcmVzb2x2ZWQgb25jZSB0aGUgd3JpdGUgd2FzIGFja2VkL3JlamVjdGVkIGJ5IHRoZVxyXG4gICAgICogYmFja2VuZCAob3IgZmFpbGVkIGxvY2FsbHkgZm9yIGFueSBvdGhlciByZWFzb24pLlxyXG4gICAgICovXHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChiYXRjaCwgdXNlckNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmFzc2VydFN1YnNjcmliZWQoJ3dyaXRlKCknKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFN0b3JlXHJcbiAgICAgICAgICAgIC5sb2NhbFdyaXRlKGJhdGNoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNoYXJlZENsaWVudFN0YXRlLmFkZFBlbmRpbmdNdXRhdGlvbihyZXN1bHQuYmF0Y2hJZCk7XHJcbiAgICAgICAgICAgIF90aGlzLmFkZE11dGF0aW9uQ2FsbGJhY2socmVzdWx0LmJhdGNoSWQsIHVzZXJDYWxsYmFjayk7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlKHJlc3VsdC5jaGFuZ2VzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdGVTdG9yZS5maWxsV3JpdGVQaXBlbGluZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIFRPRE8oa2xpbXQpOiBXcmFwIHRoZSBnaXZlbiBlcnJvciBpbiBhIHN0YW5kYXJkIEZpcmVzdG9yZSBlcnJvciBvYmplY3QuXHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS53cmFwVXBkYXRlRnVuY3Rpb25FcnJvciA9IGZ1bmN0aW9uIChlcnJvciQkMSkge1xyXG4gICAgICAgIHJldHVybiBlcnJvciQkMTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIGFuIHVwZGF0ZUZ1bmN0aW9uIGluIHdoaWNoIGEgc2V0IG9mIHJlYWRzIGFuZCB3cml0ZXMgY2FuIGJlIHBlcmZvcm1lZFxyXG4gICAgICogYXRvbWljYWxseS4gSW4gdGhlIHVwZGF0ZUZ1bmN0aW9uLCB0aGUgY2xpZW50IGNhbiByZWFkIGFuZCB3cml0ZSB2YWx1ZXNcclxuICAgICAqIHVzaW5nIHRoZSBzdXBwbGllZCB0cmFuc2FjdGlvbiBvYmplY3QuIEFmdGVyIHRoZSB1cGRhdGVGdW5jdGlvbiwgYWxsXHJcbiAgICAgKiBjaGFuZ2VzIHdpbGwgYmUgY29tbWl0dGVkLiBJZiBzb21lIG90aGVyIGNsaWVudCBoYXMgY2hhbmdlZCBhbnkgb2YgdGhlIGRhdGFcclxuICAgICAqIHJlZmVyZW5jZWQsIHRoZW4gdGhlIHVwZGF0ZUZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFnYWluLiBJZiB0aGVcclxuICAgICAqIHVwZGF0ZUZ1bmN0aW9uIHN0aWxsIGZhaWxzIGFmdGVyIHRoZSBnaXZlbiBudW1iZXIgb2YgcmV0cmllcywgdGhlbiB0aGVcclxuICAgICAqIHRyYW5zYWN0aW9uIHdpbGwgYmUgcmVqZWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIFRoZSB0cmFuc2FjdGlvbiBvYmplY3QgcGFzc2VkIHRvIHRoZSB1cGRhdGVGdW5jdGlvbiBjb250YWlucyBtZXRob2RzIGZvclxyXG4gICAgICogYWNjZXNzaW5nIGRvY3VtZW50cyBhbmQgY29sbGVjdGlvbnMuIFVubGlrZSBvdGhlciBkYXRhc3RvcmUgYWNjZXNzLCBkYXRhXHJcbiAgICAgKiBhY2Nlc3NlZCB3aXRoIHRoZSB0cmFuc2FjdGlvbiB3aWxsIG5vdCByZWZsZWN0IGxvY2FsIGNoYW5nZXMgdGhhdCBoYXZlIG5vdFxyXG4gICAgICogYmVlbiBjb21taXR0ZWQuIEZvciB0aGlzIHJlYXNvbiwgaXQgaXMgcmVxdWlyZWQgdGhhdCBhbGwgcmVhZHMgYXJlXHJcbiAgICAgKiBwZXJmb3JtZWQgYmVmb3JlIGFueSB3cml0ZXMuIFRyYW5zYWN0aW9ucyBtdXN0IGJlIHBlcmZvcm1lZCB3aGlsZSBvbmxpbmUuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHByb21pc2UgcmV0dXJuZWQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgdHJhbnNhY3Rpb24gaXMgZnVsbHkgY29tbWl0dGVkLlxyXG4gICAgICovXHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS5ydW5UcmFuc2FjdGlvbiA9IGZ1bmN0aW9uICh1cGRhdGVGdW5jdGlvbiwgcmV0cmllcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHJldHJpZXMgPT09IHZvaWQgMCkgeyByZXRyaWVzID0gNTsgfVxyXG4gICAgICAgIGFzc2VydChyZXRyaWVzID49IDAsICdHb3QgbmVnYXRpdmUgbnVtYmVyIG9mIHJldHJpZXMgZm9yIHRyYW5zYWN0aW9uLicpO1xyXG4gICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IHRoaXMucmVtb3RlU3RvcmUuY3JlYXRlVHJhbnNhY3Rpb24oKTtcclxuICAgICAgICB2YXIgd3JhcHBlZFVwZGF0ZUZ1bmN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVzZXJQcm9taXNlID0gdXBkYXRlRnVuY3Rpb24odHJhbnNhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHVzZXJQcm9taXNlKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICF1c2VyUHJvbWlzZS5jYXRjaCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICF1c2VyUHJvbWlzZS50aGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KEVycm9yKCdUcmFuc2FjdGlvbiBjYWxsYmFjayBtdXN0IHJldHVybiBhIFByb21pc2UnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlclByb21pc2UuY2F0Y2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoX3RoaXMud3JhcFVwZGF0ZUZ1bmN0aW9uRXJyb3IoZSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChfdGhpcy53cmFwVXBkYXRlRnVuY3Rpb25FcnJvcihlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB3cmFwcGVkVXBkYXRlRnVuY3Rpb24oKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uXHJcbiAgICAgICAgICAgICAgICAuY29tbWl0KClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yJCQxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0cmllcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvciQkMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPKGtsaW10KTogUHV0IGluIGEgcmV0cnkgZGVsYXk/XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucnVuVHJhbnNhY3Rpb24odXBkYXRlRnVuY3Rpb24sIHJldHJpZXMgLSAxKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuYXBwbHlSZW1vdGVFdmVudCA9IGZ1bmN0aW9uIChyZW1vdGVFdmVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5hc3NlcnRTdWJzY3JpYmVkKCdhcHBseVJlbW90ZUV2ZW50KCknKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFN0b3JlXHJcbiAgICAgICAgICAgIC5hcHBseVJlbW90ZUV2ZW50KHJlbW90ZUV2ZW50KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICAvLyBVcGRhdGUgYHJlY2VpdmVkRG9jdW1lbnRgIGFzIGFwcHJvcHJpYXRlIGZvciBhbnkgbGltYm8gdGFyZ2V0cy5cclxuICAgICAgICAgICAgZm9yRWFjaChyZW1vdGVFdmVudC50YXJnZXRDaGFuZ2VzLCBmdW5jdGlvbiAodGFyZ2V0SWQsIHRhcmdldENoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpbWJvUmVzb2x1dGlvbiA9IF90aGlzLmxpbWJvUmVzb2x1dGlvbnNCeVRhcmdldFt0YXJnZXRJZF07XHJcbiAgICAgICAgICAgICAgICBpZiAobGltYm9SZXNvbHV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyBhIGxpbWJvIHJlc29sdXRpb24gbG9va3VwLCBpdCdzIGZvciBhIHNpbmdsZSBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBpdCBjb3VsZCBiZSBhZGRlZCwgbW9kaWZpZWQsIG9yIHJlbW92ZWQsIGJ1dCBub3QgYSBjb21iaW5hdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQodGFyZ2V0Q2hhbmdlLmFkZGVkRG9jdW1lbnRzLnNpemUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDaGFuZ2UubW9kaWZpZWREb2N1bWVudHMuc2l6ZSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENoYW5nZS5yZW1vdmVkRG9jdW1lbnRzLnNpemUgPD1cclxuICAgICAgICAgICAgICAgICAgICAgICAgMSwgJ0xpbWJvIHJlc29sdXRpb24gZm9yIHNpbmdsZSBkb2N1bWVudCBjb250YWlucyBtdWx0aXBsZSBjaGFuZ2VzLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRDaGFuZ2UuYWRkZWREb2N1bWVudHMuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGltYm9SZXNvbHV0aW9uLnJlY2VpdmVkRG9jdW1lbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0YXJnZXRDaGFuZ2UubW9kaWZpZWREb2N1bWVudHMuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGxpbWJvUmVzb2x1dGlvbi5yZWNlaXZlZERvY3VtZW50LCAnUmVjZWl2ZWQgY2hhbmdlIGZvciBsaW1ibyB0YXJnZXQgZG9jdW1lbnQgd2l0aG91dCBhZGQuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldENoYW5nZS5yZW1vdmVkRG9jdW1lbnRzLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydChsaW1ib1Jlc29sdXRpb24ucmVjZWl2ZWREb2N1bWVudCwgJ1JlY2VpdmVkIHJlbW92ZSBmb3IgbGltYm8gdGFyZ2V0IGRvY3VtZW50IHdpdGhvdXQgYWRkLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1ib1Jlc29sdXRpb24ucmVjZWl2ZWREb2N1bWVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB3YXMgcHJvYmFibHkganVzdCBhIENVUlJFTlQgdGFyZ2V0Q2hhbmdlIG9yIHNpbWlsYXIuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmVtaXROZXdTbmFwc0FuZE5vdGlmeUxvY2FsU3RvcmUoY2hhbmdlcywgcmVtb3RlRXZlbnQpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBfdGhpcy5pZ25vcmVJZlByaW1hcnlMZWFzZUxvc3MoZXJyKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWVzIGFuIE9ubGluZVN0YXRlIGNoYW5nZSB0byB0aGUgc3luYyBlbmdpbmUgYW5kIG5vdGlmaWVzIGFueSB2aWV3cyBvZlxyXG4gICAgICogdGhlIGNoYW5nZS5cclxuICAgICAqL1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuYXBwbHlPbmxpbmVTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChvbmxpbmVTdGF0ZSwgc291cmNlKSB7XHJcbiAgICAgICAgLy8gSWYgd2UgYXJlIHRoZSBzZWNvbmRhcnkgY2xpZW50LCB3ZSBleHBsaWNpdGx5IGlnbm9yZSB0aGUgcmVtb3RlIHN0b3JlJ3NcclxuICAgICAgICAvLyBvbmxpbmUgc3RhdGUgKHRoZSBsb2NhbCBjbGllbnQgbWF5IGdvIG9mZmxpbmUsIGV2ZW4gdGhvdWdoIHRoZSBwcmltYXJ5XHJcbiAgICAgICAgLy8gdGFiIHJlbWFpbnMgb25saW5lKSBhbmQgb25seSBhcHBseSB0aGUgcHJpbWFyeSB0YWIncyBvbmxpbmUgc3RhdGUgZnJvbVxyXG4gICAgICAgIC8vIFNoYXJlZENsaWVudFN0YXRlLlxyXG4gICAgICAgIGlmICgodGhpcy5pc1ByaW1hcnkgJiYgc291cmNlID09PSBPbmxpbmVTdGF0ZVNvdXJjZS5SZW1vdGVTdG9yZSkgfHxcclxuICAgICAgICAgICAgKCF0aGlzLmlzUHJpbWFyeSAmJiBzb3VyY2UgPT09IE9ubGluZVN0YXRlU291cmNlLlNoYXJlZENsaWVudFN0YXRlKSkge1xyXG4gICAgICAgICAgICB2YXIgbmV3Vmlld1NuYXBzaG90c18xID0gW107XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnlWaWV3c0J5UXVlcnkuZm9yRWFjaChmdW5jdGlvbiAocXVlcnksIHF1ZXJ5Vmlldykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZXdDaGFuZ2UgPSBxdWVyeVZpZXcudmlldy5hcHBseU9ubGluZVN0YXRlQ2hhbmdlKG9ubGluZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydCh2aWV3Q2hhbmdlLmxpbWJvQ2hhbmdlcy5sZW5ndGggPT09IDAsICdPbmxpbmVTdGF0ZSBzaG91bGQgbm90IGFmZmVjdCBsaW1ibyBkb2N1bWVudHMuJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmlld0NoYW5nZS5zbmFwc2hvdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZpZXdTbmFwc2hvdHNfMS5wdXNoKHZpZXdDaGFuZ2Uuc25hcHNob3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5zeW5jRW5naW5lTGlzdGVuZXIub25PbmxpbmVTdGF0ZUNoYW5nZShvbmxpbmVTdGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3luY0VuZ2luZUxpc3RlbmVyLm9uV2F0Y2hDaGFuZ2UobmV3Vmlld1NuYXBzaG90c18xKTtcclxuICAgICAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZSA9IG9ubGluZVN0YXRlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1ByaW1hcnkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUuc2V0T25saW5lU3RhdGUob25saW5lU3RhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN5bmNFbmdpbmUucHJvdG90eXBlLnJlamVjdExpc3RlbiA9IGZ1bmN0aW9uICh0YXJnZXRJZCwgZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBsaW1ib1Jlc29sdXRpb24sIGxpbWJvS2V5LCBkb2N1bWVudFVwZGF0ZXMsIHJlc29sdmVkTGltYm9Eb2N1bWVudHMsIGV2ZW50XzEsIHF1ZXJ5Vmlld18xO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0U3Vic2NyaWJlZCgncmVqZWN0TGlzdGVucygpJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlUXVlcnlTdGF0ZSh0YXJnZXRJZCwgJ3JlamVjdGVkJywgZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGltYm9SZXNvbHV0aW9uID0gdGhpcy5saW1ib1Jlc29sdXRpb25zQnlUYXJnZXRbdGFyZ2V0SWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1ib0tleSA9IGxpbWJvUmVzb2x1dGlvbiAmJiBsaW1ib1Jlc29sdXRpb24ua2V5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxpbWJvS2V5KSByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBxdWVyeSBmYWlsZWQsIHdlIHdvbid0IHdhbnQgdG8gbWFudWFsbHkgdW5saXN0ZW4gdG8gaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvIGdvIGFoZWFkIGFuZCByZW1vdmUgaXQgZnJvbSBib29ra2VlcGluZy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saW1ib1RhcmdldHNCeUtleSA9IHRoaXMubGltYm9UYXJnZXRzQnlLZXkucmVtb3ZlKGxpbWJvS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubGltYm9SZXNvbHV0aW9uc0J5VGFyZ2V0W3RhcmdldElkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRVcGRhdGVzID0gbmV3IFNvcnRlZE1hcChEb2N1bWVudEtleS5jb21wYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRVcGRhdGVzID0gZG9jdW1lbnRVcGRhdGVzLmluc2VydChsaW1ib0tleSwgbmV3IE5vRG9jdW1lbnQobGltYm9LZXksIFNuYXBzaG90VmVyc2lvbi5mb3JEZWxldGVkRG9jKCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRMaW1ib0RvY3VtZW50cyA9IGRvY3VtZW50S2V5U2V0KCkuYWRkKGxpbWJvS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRfMSA9IG5ldyBSZW1vdGVFdmVudChTbmFwc2hvdFZlcnNpb24uTUlOLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyogdGFyZ2V0Q2hhbmdlcz0gKi8ge30sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiB0YXJnZXRNaXNtYXRjaGVzPSAqLyBuZXcgU29ydGVkU2V0KHByaW1pdGl2ZUNvbXBhcmF0b3IpLCBkb2N1bWVudFVwZGF0ZXMsIHJlc29sdmVkTGltYm9Eb2N1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5hcHBseVJlbW90ZUV2ZW50KGV2ZW50XzEpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5Vmlld18xID0gdGhpcy5xdWVyeVZpZXdzQnlUYXJnZXRbdGFyZ2V0SWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQoISFxdWVyeVZpZXdfMSwgJ1Vua25vd24gdGFyZ2V0SWQ6ICcgKyB0YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWxlYXNlUXVlcnkocXVlcnlWaWV3XzEucXVlcnksIC8qIGtlZXBQZXJzaXN0ZWRRdWVyeURhdGEgKi8gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVtb3ZlQW5kQ2xlYW51cFF1ZXJ5KHF1ZXJ5Vmlld18xKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gX3RoaXMuaWdub3JlSWZQcmltYXJ5TGVhc2VMb3NzKGVycik7IH0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW5jRW5naW5lTGlzdGVuZXIub25XYXRjaEVycm9yKHF1ZXJ5Vmlld18xLnF1ZXJ5LCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHlcclxuICAgIFN5bmNFbmdpbmUucHJvdG90eXBlLmFwcGx5QmF0Y2hTdGF0ZSA9IGZ1bmN0aW9uIChiYXRjaElkLCBiYXRjaFN0YXRlLCBlcnJvciQkMSkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZG9jdW1lbnRzO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0U3Vic2NyaWJlZCgnYXBwbHlCYXRjaFN0YXRlKCknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2NhbFN0b3JlLmxvb2t1cE11dGF0aW9uRG9jdW1lbnRzKGJhdGNoSWQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50cyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50cyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSB0aHJvdHRsZWQgdGFiIG1heSBub3QgaGF2ZSBzZWVuIHRoZSBtdXRhdGlvbiBiZWZvcmUgaXQgd2FzIGNvbXBsZXRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHJlbW92ZWQgZnJvbSB0aGUgbXV0YXRpb24gcXVldWUsIGluIHdoaWNoIGNhc2Ugd2Ugd29uJ3QgaGF2ZSBjYWNoZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBhZmZlY3RlZCBkb2N1bWVudHMuIEluIHRoaXMgY2FzZSB3ZSBjYW4gc2FmZWx5IGlnbm9yZSB0aGUgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGF0IG1lYW5zIHdlIGRpZG4ndCBhcHBseSB0aGUgbXV0YXRpb24gbG9jYWxseSBhdCBhbGwgKGlmIHdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYWQsIHdlIHdvdWxkIGhhdmUgY2FjaGVkIHRoZSBhZmZlY3RlZCBkb2N1bWVudHMpLCBhbmQgc28gd2Ugd2lsbCBqdXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWUgYW55IHJlc3VsdGluZyBkb2N1bWVudCBjaGFuZ2VzIHZpYSBub3JtYWwgcmVtb3RlIGRvY3VtZW50IHVwZGF0ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzIGFwcGxpY2FibGUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDksICdDYW5ub3QgYXBwbHkgbXV0YXRpb24gYmF0Y2ggd2l0aCBpZDogJyArIGJhdGNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGJhdGNoU3RhdGUgPT09ICdwZW5kaW5nJykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhcmUgdGhlIHByaW1hcnkgY2xpZW50LCB3ZSBuZWVkIHRvIHNlbmQgdGhpcyB3cml0ZSB0byB0aGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFja2VuZC4gU2Vjb25kYXJ5IGNsaWVudHMgd2lsbCBpZ25vcmUgdGhlc2Ugd3JpdGVzIHNpbmNlIHRoZWlyIHJlbW90ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25uZWN0aW9uIGlzIGRpc2FibGVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlbW90ZVN0b3JlLmZpbGxXcml0ZVBpcGVsaW5lKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHRoZSBwcmltYXJ5IGNsaWVudCwgd2UgbmVlZCB0byBzZW5kIHRoaXMgd3JpdGUgdG8gdGhlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJhY2tlbmQuIFNlY29uZGFyeSBjbGllbnRzIHdpbGwgaWdub3JlIHRoZXNlIHdyaXRlcyBzaW5jZSB0aGVpciByZW1vdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29ubmVjdGlvbiBpcyBkaXNhYmxlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYXRjaFN0YXRlID09PSAnYWNrbm93bGVkZ2VkJyB8fCBiYXRjaFN0YXRlID09PSAncmVqZWN0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBCb3RoIHRoZXNlIG1ldGhvZHMgYXJlIG5vLW9wcyBmb3IgYmF0Y2hlcyB0aGF0IG9yaWdpbmF0ZWQgZnJvbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXIgY2xpZW50cy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc1VzZXJDYWxsYmFjayhiYXRjaElkLCBlcnJvciQkMSA/IGVycm9yJCQxIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvY2FsU3RvcmUucmVtb3ZlQ2FjaGVkTXV0YXRpb25CYXRjaE1ldGFkYXRhKGJhdGNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbChcIlVua25vd24gYmF0Y2hTdGF0ZTogXCIgKyBiYXRjaFN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmVtaXROZXdTbmFwc0FuZE5vdGlmeUxvY2FsU3RvcmUoZG9jdW1lbnRzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuYXBwbHlTdWNjZXNzZnVsV3JpdGUgPSBmdW5jdGlvbiAobXV0YXRpb25CYXRjaFJlc3VsdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5hc3NlcnRTdWJzY3JpYmVkKCdhcHBseVN1Y2Nlc3NmdWxXcml0ZSgpJyk7XHJcbiAgICAgICAgdmFyIGJhdGNoSWQgPSBtdXRhdGlvbkJhdGNoUmVzdWx0LmJhdGNoLmJhdGNoSWQ7XHJcbiAgICAgICAgLy8gVGhlIGxvY2FsIHN0b3JlIG1heSBvciBtYXkgbm90IGJlIGFibGUgdG8gYXBwbHkgdGhlIHdyaXRlIHJlc3VsdCBhbmRcclxuICAgICAgICAvLyByYWlzZSBldmVudHMgaW1tZWRpYXRlbHkgKGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSB3YXRjaGVyIGlzIGNhdWdodFxyXG4gICAgICAgIC8vIHVwKSwgc28gd2UgcmFpc2UgdXNlciBjYWxsYmFja3MgZmlyc3Qgc28gdGhhdCB0aGV5IGNvbnNpc3RlbnRseSBoYXBwZW5cclxuICAgICAgICAvLyBiZWZvcmUgbGlzdGVuIGV2ZW50cy5cclxuICAgICAgICB0aGlzLnByb2Nlc3NVc2VyQ2FsbGJhY2soYmF0Y2hJZCwgLyplcnJvcj0qLyBudWxsKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFN0b3JlXHJcbiAgICAgICAgICAgIC5hY2tub3dsZWRnZUJhdGNoKG11dGF0aW9uQmF0Y2hSZXN1bHQpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNoYXJlZENsaWVudFN0YXRlLnVwZGF0ZU11dGF0aW9uU3RhdGUoYmF0Y2hJZCwgJ2Fja25vd2xlZGdlZCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdE5ld1NuYXBzQW5kTm90aWZ5TG9jYWxTdG9yZShjaGFuZ2VzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gX3RoaXMuaWdub3JlSWZQcmltYXJ5TGVhc2VMb3NzKGVycik7IH0pO1xyXG4gICAgfTtcclxuICAgIFN5bmNFbmdpbmUucHJvdG90eXBlLnJlamVjdEZhaWxlZFdyaXRlID0gZnVuY3Rpb24gKGJhdGNoSWQsIGVycm9yJCQxKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmFzc2VydFN1YnNjcmliZWQoJ3JlamVjdEZhaWxlZFdyaXRlKCknKTtcclxuICAgICAgICAvLyBUaGUgbG9jYWwgc3RvcmUgbWF5IG9yIG1heSBub3QgYmUgYWJsZSB0byBhcHBseSB0aGUgd3JpdGUgcmVzdWx0IGFuZFxyXG4gICAgICAgIC8vIHJhaXNlIGV2ZW50cyBpbW1lZGlhdGVseSAoZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHdhdGNoZXIgaXMgY2F1Z2h0IHVwKSxcclxuICAgICAgICAvLyBzbyB3ZSByYWlzZSB1c2VyIGNhbGxiYWNrcyBmaXJzdCBzbyB0aGF0IHRoZXkgY29uc2lzdGVudGx5IGhhcHBlbiBiZWZvcmVcclxuICAgICAgICAvLyBsaXN0ZW4gZXZlbnRzLlxyXG4gICAgICAgIHRoaXMucHJvY2Vzc1VzZXJDYWxsYmFjayhiYXRjaElkLCBlcnJvciQkMSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxTdG9yZVxyXG4gICAgICAgICAgICAucmVqZWN0QmF0Y2goYmF0Y2hJZClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgX3RoaXMuc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlTXV0YXRpb25TdGF0ZShiYXRjaElkLCAncmVqZWN0ZWQnLCBlcnJvciQkMSk7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlKGNoYW5nZXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBfdGhpcy5pZ25vcmVJZlByaW1hcnlMZWFzZUxvc3MoZXJyKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuYWRkTXV0YXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uIChiYXRjaElkLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBuZXdDYWxsYmFja3MgPSB0aGlzLm11dGF0aW9uVXNlckNhbGxiYWNrc1t0aGlzLmN1cnJlbnRVc2VyLnRvS2V5KCldO1xyXG4gICAgICAgIGlmICghbmV3Q2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIG5ld0NhbGxiYWNrcyA9IG5ldyBTb3J0ZWRNYXAocHJpbWl0aXZlQ29tcGFyYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5ld0NhbGxiYWNrcyA9IG5ld0NhbGxiYWNrcy5pbnNlcnQoYmF0Y2hJZCwgY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25Vc2VyQ2FsbGJhY2tzW3RoaXMuY3VycmVudFVzZXIudG9LZXkoKV0gPSBuZXdDYWxsYmFja3M7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlcyBvciByZWplY3RzIHRoZSB1c2VyIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gYmF0Y2ggYW5kIHRoZW4gZGlzY2FyZHNcclxuICAgICAqIGl0LlxyXG4gICAgICovXHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS5wcm9jZXNzVXNlckNhbGxiYWNrID0gZnVuY3Rpb24gKGJhdGNoSWQsIGVycm9yJCQxKSB7XHJcbiAgICAgICAgdmFyIG5ld0NhbGxiYWNrcyA9IHRoaXMubXV0YXRpb25Vc2VyQ2FsbGJhY2tzW3RoaXMuY3VycmVudFVzZXIudG9LZXkoKV07XHJcbiAgICAgICAgLy8gTk9URTogTXV0YXRpb25zIHJlc3RvcmVkIGZyb20gcGVyc2lzdGVuY2Ugd29uJ3QgaGF2ZSBjYWxsYmFja3MsIHNvIGl0J3NcclxuICAgICAgICAvLyBva2F5IGZvciB0aGVyZSB0byBiZSBubyBjYWxsYmFjayBmb3IgdGhpcyBJRC5cclxuICAgICAgICBpZiAobmV3Q2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IG5ld0NhbGxiYWNrcy5nZXQoYmF0Y2hJZCk7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGJhdGNoSWQgPT09IG5ld0NhbGxiYWNrcy5taW5LZXkoKSwgJ011dGF0aW9uIGNhbGxiYWNrcyBwcm9jZXNzZWQgb3V0LW9mLW9yZGVyPycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yJCQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sucmVqZWN0KGVycm9yJCQxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5ld0NhbGxiYWNrcyA9IG5ld0NhbGxiYWNrcy5yZW1vdmUoYmF0Y2hJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvblVzZXJDYWxsYmFja3NbdGhpcy5jdXJyZW50VXNlci50b0tleSgpXSA9IG5ld0NhbGxiYWNrcztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUucmVtb3ZlQW5kQ2xlYW51cFF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5Vmlldykge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgbGltYm9LZXlzO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUucmVtb3ZlTG9jYWxRdWVyeVRhcmdldChxdWVyeVZpZXcudGFyZ2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5Vmlld3NCeVF1ZXJ5LmRlbGV0ZShxdWVyeVZpZXcucXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5xdWVyeVZpZXdzQnlUYXJnZXRbcXVlcnlWaWV3LnRhcmdldElkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUHJpbWFyeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWJvS2V5cyA9IHRoaXMubGltYm9Eb2N1bWVudFJlZnMucmVmZXJlbmNlc0ZvcklkKHF1ZXJ5Vmlldy50YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGltYm9Eb2N1bWVudFJlZnMucmVtb3ZlUmVmZXJlbmNlc0ZvcklkKHF1ZXJ5Vmlldy50YXJnZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFBlcnNpc3RlbmNlUHJvbWlzZS5mb3JFYWNoKGxpbWJvS2V5cy50b0FycmF5KCksIGZ1bmN0aW9uIChsaW1ib0tleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5saW1ib0RvY3VtZW50UmVmc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29udGFpbnNLZXkobnVsbCwgbGltYm9LZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KGZ1bmN0aW9uIChpc1JlZmVyZW5jZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1JlZmVyZW5jZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHJlbW92ZWQgdGhlIGxhc3QgcmVmZXJlbmNlIGZvciB0aGlzIGtleVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlTGltYm9UYXJnZXQobGltYm9LZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50b1Byb21pc2UoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUucmVtb3ZlTGltYm9UYXJnZXQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHRoZSB0YXJnZXQgYWxyZWFkeSBnb3QgcmVtb3ZlZCBiZWNhdXNlIHRoZSBxdWVyeSBmYWlsZWQuIEluIHRoYXQgY2FzZSxcclxuICAgICAgICAvLyB0aGUga2V5IHdvbid0IGV4aXN0IGluIGBsaW1ib1RhcmdldHNCeUtleWAuIE9ubHkgZG8gdGhlIGNsZWFudXAgaWYgd2Ugc3RpbGwgaGF2ZSB0aGUgdGFyZ2V0LlxyXG4gICAgICAgIHZhciBsaW1ib1RhcmdldElkID0gdGhpcy5saW1ib1RhcmdldHNCeUtleS5nZXQoa2V5KTtcclxuICAgICAgICBpZiAobGltYm9UYXJnZXRJZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBUaGlzIHRhcmdldCBhbHJlYWR5IGdvdCByZW1vdmVkLCBiZWNhdXNlIHRoZSBxdWVyeSBmYWlsZWQuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW1vdGVTdG9yZS51bmxpc3RlbihsaW1ib1RhcmdldElkKTtcclxuICAgICAgICB0aGlzLmxpbWJvVGFyZ2V0c0J5S2V5ID0gdGhpcy5saW1ib1RhcmdldHNCeUtleS5yZW1vdmUoa2V5KTtcclxuICAgICAgICBkZWxldGUgdGhpcy5saW1ib1Jlc29sdXRpb25zQnlUYXJnZXRbbGltYm9UYXJnZXRJZF07XHJcbiAgICB9O1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUudXBkYXRlVHJhY2tlZExpbWJvcyA9IGZ1bmN0aW9uICh0YXJnZXRJZCwgbGltYm9DaGFuZ2VzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBfbG9vcF8xLCB0aGlzXzEsIF9pLCBsaW1ib0NoYW5nZXNfMSwgbGltYm9DaGFuZ2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSA9IGZ1bmN0aW9uIChsaW1ib0NoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShsaW1ib0NoYW5nZSBpbnN0YW5jZW9mIEFkZGVkTGltYm9Eb2N1bWVudCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc18xLmxpbWJvRG9jdW1lbnRSZWZzLmFkZFJlZmVyZW5jZShsaW1ib0NoYW5nZS5rZXksIHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfMS50cmFja0xpbWJvQ2hhbmdlKGxpbWJvQ2hhbmdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShsaW1ib0NoYW5nZSBpbnN0YW5jZW9mIFJlbW92ZWRMaW1ib0RvY3VtZW50KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDksICdEb2N1bWVudCBubyBsb25nZXIgaW4gbGltYm86ICcgKyBsaW1ib0NoYW5nZS5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc18xLmxpbWJvRG9jdW1lbnRSZWZzLnJlbW92ZVJlZmVyZW5jZShsaW1ib0NoYW5nZS5rZXksIHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXNfMS5saW1ib0RvY3VtZW50UmVmc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29udGFpbnNLZXkobnVsbCwgbGltYm9DaGFuZ2Uua2V5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubmV4dChmdW5jdGlvbiAoaXNSZWZlcmVuY2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNSZWZlcmVuY2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSByZW1vdmVkIHRoZSBsYXN0IHJlZmVyZW5jZSBmb3IgdGhpcyBrZXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZUxpbWJvVGFyZ2V0KGxpbWJvQ2hhbmdlLmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9Qcm9taXNlKCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCgnVW5rbm93biBsaW1ibyBjaGFuZ2U6ICcgKyBKU09OLnN0cmluZ2lmeShsaW1ib0NoYW5nZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc18xID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2kgPSAwLCBsaW1ib0NoYW5nZXNfMSA9IGxpbWJvQ2hhbmdlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBsaW1ib0NoYW5nZXNfMS5sZW5ndGgpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGltYm9DaGFuZ2UgPSBsaW1ib0NoYW5nZXNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNSAvKnlpZWxkKiovLCBfbG9vcF8xKGxpbWJvQ2hhbmdlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS50cmFja0xpbWJvQ2hhbmdlID0gZnVuY3Rpb24gKGxpbWJvQ2hhbmdlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGxpbWJvQ2hhbmdlLmtleTtcclxuICAgICAgICBpZiAoIXRoaXMubGltYm9UYXJnZXRzQnlLZXkuZ2V0KGtleSkpIHtcclxuICAgICAgICAgICAgZGVidWcoTE9HX1RBRyQ5LCAnTmV3IGRvY3VtZW50IGluIGxpbWJvOiAnICsga2V5KTtcclxuICAgICAgICAgICAgdmFyIGxpbWJvVGFyZ2V0SWQgPSB0aGlzLmxpbWJvVGFyZ2V0SWRHZW5lcmF0b3IubmV4dCgpO1xyXG4gICAgICAgICAgICB2YXIgcXVlcnkgPSBRdWVyeS5hdFBhdGgoa2V5LnBhdGgpO1xyXG4gICAgICAgICAgICB0aGlzLmxpbWJvUmVzb2x1dGlvbnNCeVRhcmdldFtsaW1ib1RhcmdldElkXSA9IG5ldyBMaW1ib1Jlc29sdXRpb24oa2V5KTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdGVTdG9yZS5saXN0ZW4obmV3IFF1ZXJ5RGF0YShxdWVyeSwgbGltYm9UYXJnZXRJZCwgUXVlcnlQdXJwb3NlLkxpbWJvUmVzb2x1dGlvbiwgTGlzdGVuU2VxdWVuY2UuSU5WQUxJRCkpO1xyXG4gICAgICAgICAgICB0aGlzLmxpbWJvVGFyZ2V0c0J5S2V5ID0gdGhpcy5saW1ib1RhcmdldHNCeUtleS5pbnNlcnQoa2V5LCBsaW1ib1RhcmdldElkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuY3VycmVudExpbWJvRG9jcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saW1ib1RhcmdldHNCeUtleTtcclxuICAgIH07XHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS5lbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlID0gZnVuY3Rpb24gKGNoYW5nZXMsIHJlbW90ZUV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBuZXdTbmFwcywgZG9jQ2hhbmdlc0luQWxsVmlld3MsIHF1ZXJpZXNQcm9jZXNzZWQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U25hcHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jQ2hhbmdlc0luQWxsVmlld3MgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcmllc1Byb2Nlc3NlZCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5Vmlld3NCeVF1ZXJ5LmZvckVhY2goZnVuY3Rpb24gKF8sIHF1ZXJ5Vmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcmllc1Byb2Nlc3NlZC5wdXNoKFByb21pc2UucmVzb2x2ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3RG9jQ2hhbmdlcyA9IHF1ZXJ5Vmlldy52aWV3LmNvbXB1dGVEb2NDaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmlld0RvY0NoYW5nZXMubmVlZHNSZWZpbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdEb2NDaGFuZ2VzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcXVlcnkgaGFzIGEgbGltaXQgYW5kIHNvbWUgZG9jcyB3ZXJlIHJlbW92ZWQsIHNvIHdlIG5lZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byByZS1ydW4gdGhlIHF1ZXJ5IGFnYWluc3QgdGhlIGxvY2FsIHN0b3JlIHRvIG1ha2Ugc3VyZSB3ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpZG4ndCBsb3NlIGFueSBnb29kIGRvY3MgdGhhdCBoYWQgYmVlbiBwYXN0IHRoZSBsaW1pdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubG9jYWxTdG9yZS5leGVjdXRlUXVlcnkocXVlcnlWaWV3LnF1ZXJ5KS50aGVuKGZ1bmN0aW9uIChkb2NzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeVZpZXcudmlldy5jb21wdXRlRG9jQ2hhbmdlcyhkb2NzLCB2aWV3RG9jQ2hhbmdlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2aWV3RG9jQ2hhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRDaGFuZ2UgPSByZW1vdGVFdmVudCAmJiByZW1vdGVFdmVudC50YXJnZXRDaGFuZ2VzW3F1ZXJ5Vmlldy50YXJnZXRJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXdDaGFuZ2UgPSBxdWVyeVZpZXcudmlldy5hcHBseUNoYW5nZXModmlld0RvY0NoYW5nZXMsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHVwZGF0ZUxpbWJvRG9jdW1lbnRzPSAqLyBfdGhpcy5pc1ByaW1hcnkgPT09IHRydWUsIHRhcmdldENoYW5nZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZVRyYWNrZWRMaW1ib3MocXVlcnlWaWV3LnRhcmdldElkLCB2aWV3Q2hhbmdlLmxpbWJvQ2hhbmdlcykudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWV3Q2hhbmdlLnNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNQcmltYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2hhcmVkQ2xpZW50U3RhdGUudXBkYXRlUXVlcnlTdGF0ZShxdWVyeVZpZXcudGFyZ2V0SWQsIHZpZXdDaGFuZ2Uuc25hcHNob3QuZnJvbUNhY2hlID8gJ25vdC1jdXJyZW50JyA6ICdjdXJyZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTbmFwcy5wdXNoKHZpZXdDaGFuZ2Uuc25hcHNob3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvY0NoYW5nZXMgPSBMb2NhbFZpZXdDaGFuZ2VzLmZyb21TbmFwc2hvdChxdWVyeVZpZXcudGFyZ2V0SWQsIHZpZXdDaGFuZ2Uuc25hcHNob3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jQ2hhbmdlc0luQWxsVmlld3MucHVzaChkb2NDaGFuZ2VzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwocXVlcmllc1Byb2Nlc3NlZCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bmNFbmdpbmVMaXN0ZW5lci5vbldhdGNoQ2hhbmdlKG5ld1NuYXBzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbFN0b3JlLm5vdGlmeUxvY2FsVmlld0NoYW5nZXMoZG9jQ2hhbmdlc0luQWxsVmlld3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNQcmltYXJ5KSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2NhbFN0b3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbGxlY3RHYXJiYWdlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gX3RoaXMuaWdub3JlSWZQcmltYXJ5TGVhc2VMb3NzKGVycik7IH0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFZlcmlmaWVzIHRoZSBlcnJvciB0aHJvd24gYnkgYW4gTG9jYWxTdG9yZSBvcGVyYXRpb24uIElmIGEgTG9jYWxTdG9yZVxyXG4gICAgICogb3BlcmF0aW9uIGZhaWxzIGJlY2F1c2UgdGhlIHByaW1hcnkgbGVhc2UgaGFzIGJlZW4gdGFrZW4gYnkgYW5vdGhlciBjbGllbnQsXHJcbiAgICAgKiB3ZSBpZ25vcmUgdGhlIGVycm9yICh0aGUgcGVyc2lzdGVuY2UgbGF5ZXIgd2lsbCBpbW1lZGlhdGVseSBjYWxsXHJcbiAgICAgKiBgYXBwbHlQcmltYXJ5TGVhc2VgIHRvIHByb3BhZ2F0ZSB0aGUgcHJpbWFyeSBzdGF0ZSBjaGFuZ2UpLiBBbGwgb3RoZXJcclxuICAgICAqIGVycm9ycyBhcmUgcmUtdGhyb3duLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlcnIgQW4gZXJyb3IgcmV0dXJuZWQgYnkgYSBMb2NhbFN0b3JlIG9wZXJhdGlvbi5cclxuICAgICAqIEByZXR1cm4gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgd2UgcmVjb3ZlcmVkLCBvciB0aGUgb3JpZ2luYWwgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIFN5bmNFbmdpbmUucHJvdG90eXBlLmlnbm9yZUlmUHJpbWFyeUxlYXNlTG9zcyA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmltYXJ5TGVhc2VMb3N0RXJyb3IoZXJyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKExPR19UQUckOSwgJ1VuZXhwZWN0ZWRseSBsb3N0IHByaW1hcnkgbGVhc2UnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuYXNzZXJ0U3Vic2NyaWJlZCA9IGZ1bmN0aW9uIChmbk5hbWUpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5zeW5jRW5naW5lTGlzdGVuZXIgIT09IG51bGwsICdUcnlpbmcgdG8gY2FsbCAnICsgZm5OYW1lICsgJyBiZWZvcmUgY2FsbGluZyBzdWJzY3JpYmUoKS4nKTtcclxuICAgIH07XHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS5oYW5kbGVDcmVkZW50aWFsQ2hhbmdlID0gZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHVzZXJDaGFuZ2VkLCByZXN1bHQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckNoYW5nZWQgPSAhdGhpcy5jdXJyZW50VXNlci5pc0VxdWFsKHVzZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRVc2VyID0gdXNlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyQ2hhbmdlZCkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZS5oYW5kbGVVc2VyQ2hhbmdlKHVzZXIpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhiLzExNDIyNjQxNyk6IENvbnNpZGVyIGNhbGxpbmcgdGhpcyBvbmx5IGluIHRoZSBwcmltYXJ5IHRhYi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5oYW5kbGVVc2VyQ2hhbmdlKHVzZXIsIHJlc3VsdC5yZW1vdmVkQmF0Y2hJZHMsIHJlc3VsdC5hZGRlZEJhdGNoSWRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5lbWl0TmV3U25hcHNBbmROb3RpZnlMb2NhbFN0b3JlKHJlc3VsdC5hZmZlY3RlZERvY3VtZW50cyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlbW90ZVN0b3JlLmhhbmRsZUNyZWRlbnRpYWxDaGFuZ2UoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seVxyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuYXBwbHlQcmltYXJ5U3RhdGUgPSBmdW5jdGlvbiAoaXNQcmltYXJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVUYXJnZXRzLCBhY3RpdmVRdWVyaWVzLCBfaSwgYWN0aXZlUXVlcmllc18xLCBxdWVyeURhdGEsIGFjdGl2ZVRhcmdldHNfMSwgcF8xO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlzUHJpbWFyeSA9PT0gdHJ1ZSAmJiB0aGlzLmlzUHJpbWFyeSAhPT0gdHJ1ZSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUHJpbWFyeSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVtb3RlU3RvcmUuYXBwbHlQcmltYXJ5U3RhdGUodHJ1ZSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUYXJnZXRzID0gdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5nZXRBbGxBY3RpdmVRdWVyeVRhcmdldHMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zeW5jaHJvbml6ZVF1ZXJ5Vmlld3NBbmRSYWlzZVNuYXBzaG90cyhhY3RpdmVUYXJnZXRzLnRvQXJyYXkoKSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlUXVlcmllcyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChfaSA9IDAsIGFjdGl2ZVF1ZXJpZXNfMSA9IGFjdGl2ZVF1ZXJpZXM7IF9pIDwgYWN0aXZlUXVlcmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlEYXRhID0gYWN0aXZlUXVlcmllc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3RlU3RvcmUubGlzdGVuKHF1ZXJ5RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpc1ByaW1hcnkgPT09IGZhbHNlICYmIHRoaXMuaXNQcmltYXJ5ICE9PSBmYWxzZSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUHJpbWFyeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUYXJnZXRzXzEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcF8xID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvckVhY2hOdW1iZXIodGhpcy5xdWVyeVZpZXdzQnlUYXJnZXQsIGZ1bmN0aW9uICh0YXJnZXRJZCwgcXVlcnlWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2hhcmVkQ2xpZW50U3RhdGUuaXNMb2NhbFF1ZXJ5VGFyZ2V0KHRhcmdldElkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRhcmdldHNfMS5wdXNoKHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBfMSA9IHBfMS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVubGlzdGVuKHF1ZXJ5Vmlldy5xdWVyeSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3RlU3RvcmUudW5saXN0ZW4ocXVlcnlWaWV3LnRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHBfMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3luY2hyb25pemVRdWVyeVZpZXdzQW5kUmFpc2VTbmFwc2hvdHMoYWN0aXZlVGFyZ2V0c18xKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRMaW1ib0RvY3VtZW50cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlbW90ZVN0b3JlLmFwcGx5UHJpbWFyeVN0YXRlKGZhbHNlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cclxuICAgIFN5bmNFbmdpbmUucHJvdG90eXBlLnJlc2V0TGltYm9Eb2N1bWVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBmb3JFYWNoTnVtYmVyKHRoaXMubGltYm9SZXNvbHV0aW9uc0J5VGFyZ2V0LCBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgX3RoaXMucmVtb3RlU3RvcmUudW5saXN0ZW4odGFyZ2V0SWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubGltYm9SZXNvbHV0aW9uc0J5VGFyZ2V0ID0gW107XHJcbiAgICAgICAgdGhpcy5saW1ib1RhcmdldHNCeUtleSA9IG5ldyBTb3J0ZWRNYXAoRG9jdW1lbnRLZXkuY29tcGFyYXRvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWNvbmNpbGUgdGhlIHF1ZXJ5IHZpZXdzIG9mIHRoZSBwcm92aWRlZCBxdWVyeSB0YXJnZXRzIHdpdGggdGhlIHN0YXRlIGZyb21cclxuICAgICAqIHBlcnNpc3RlbmNlLiBSYWlzZXMgc25hcHNob3RzIGZvciBhbnkgY2hhbmdlcyB0aGF0IGFmZmVjdCB0aGUgbG9jYWxcclxuICAgICAqIGNsaWVudCBhbmQgcmV0dXJucyB0aGUgdXBkYXRlZCBzdGF0ZSBvZiBhbGwgdGFyZ2V0J3MgcXVlcnkgZGF0YS5cclxuICAgICAqL1xyXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cclxuICAgIFN5bmNFbmdpbmUucHJvdG90eXBlLnN5bmNocm9uaXplUXVlcnlWaWV3c0FuZFJhaXNlU25hcHNob3RzID0gZnVuY3Rpb24gKHRhcmdldHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgdmFyIGFjdGl2ZVF1ZXJpZXMgPSBbXTtcclxuICAgICAgICB2YXIgbmV3Vmlld1NuYXBzaG90cyA9IFtdO1xyXG4gICAgICAgIHZhciBfbG9vcF8yID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgICAgIHAgPSBwLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlEYXRhLCBxdWVyeVZpZXcsIHZpZXdDaGFuZ2UsIHF1ZXJ5O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVZpZXcgPSB0aGlzLnF1ZXJ5Vmlld3NCeVRhcmdldFt0YXJnZXRJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5VmlldykgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgcXVlcmllcyB0aGF0IGhhdmUgYSBsb2NhbCBWaWV3LCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGVpciBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gTG9jYWxTdG9yZSAoYXMgdGhlIHJlc3VtZSB0b2tlbiBhbmQgdGhlIHNuYXBzaG90IHZlcnNpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1pZ2h0IGhhdmUgY2hhbmdlZCkgYW5kIHJlY29uY2lsZSB0aGVpciB2aWV3cyB3aXRoIHRoZSBwZXJzaXN0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXRlICh0aGUgbGlzdCBvZiBzeW5jZWREb2N1bWVudHMgbWF5IGhhdmUgZ290dGVuIG91dCBvZiBzeW5jKS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZS5yZWxlYXNlUXVlcnkocXVlcnlWaWV3LnF1ZXJ5LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmtlZXBQZXJzaXN0ZWRRdWVyeURhdGE9Ki8gdHJ1ZSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgcXVlcmllcyB0aGF0IGhhdmUgYSBsb2NhbCBWaWV3LCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGVpciBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gTG9jYWxTdG9yZSAoYXMgdGhlIHJlc3VtZSB0b2tlbiBhbmQgdGhlIHNuYXBzaG90IHZlcnNpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1pZ2h0IGhhdmUgY2hhbmdlZCkgYW5kIHJlY29uY2lsZSB0aGVpciB2aWV3cyB3aXRoIHRoZSBwZXJzaXN0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXRlICh0aGUgbGlzdCBvZiBzeW5jZWREb2N1bWVudHMgbWF5IGhhdmUgZ290dGVuIG91dCBvZiBzeW5jKS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZS5hbGxvY2F0ZVF1ZXJ5KHF1ZXJ5Vmlldy5xdWVyeSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeURhdGEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN5bmNocm9uaXplVmlld0FuZENvbXB1dGVTbmFwc2hvdChxdWVyeVZpZXcpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0NoYW5nZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWV3Q2hhbmdlLnNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Vmlld1NuYXBzaG90cy5wdXNoKHZpZXdDaGFuZ2Uuc25hcHNob3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCh0aGlzLmlzUHJpbWFyeSA9PT0gdHJ1ZSwgJ0Egc2Vjb25kYXJ5IHRhYiBzaG91bGQgbmV2ZXIgaGF2ZSBhbiBhY3RpdmUgcXVlcnkgd2l0aG91dCBhbiBhY3RpdmUgdmlldy4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZS5nZXRRdWVyeUZvclRhcmdldCh0YXJnZXRJZCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCghIXF1ZXJ5LCBcIlF1ZXJ5IGRhdGEgZm9yIHRhcmdldCBcIiArIHRhcmdldElkICsgXCIgbm90IGZvdW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2NhbFN0b3JlLmFsbG9jYXRlUXVlcnkocXVlcnkpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlEYXRhID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5pbml0aWFsaXplVmlld0FuZENvbXB1dGVTbmFwc2hvdChxdWVyeURhdGEsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qY3VycmVudD0qLyBmYWxzZSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVF1ZXJpZXMucHVzaChxdWVyeURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTsgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHRhcmdldHNfMSA9IHRhcmdldHM7IF9pIDwgdGFyZ2V0c18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0SWQgPSB0YXJnZXRzXzFbX2ldO1xyXG4gICAgICAgICAgICBfbG9vcF8yKHRhcmdldElkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnN5bmNFbmdpbmVMaXN0ZW5lci5vbldhdGNoQ2hhbmdlKG5ld1ZpZXdTbmFwc2hvdHMpO1xyXG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlUXVlcmllcztcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5XHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS5nZXRBY3RpdmVDbGllbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsU3RvcmUuZ2V0QWN0aXZlQ2xpZW50cygpO1xyXG4gICAgfTtcclxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHlcclxuICAgIFN5bmNFbmdpbmUucHJvdG90eXBlLmFwcGx5VGFyZ2V0U3RhdGUgPSBmdW5jdGlvbiAodGFyZ2V0SWQsIHN0YXRlLCBlcnJvciQkMSkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2EsIGNoYW5nZXMsIHN5bnRoZXNpemVkUmVtb3RlRXZlbnQsIHF1ZXJ5VmlldztcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ByaW1hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlY2VpdmUgYSB0YXJnZXQgc3RhdGUgbm90aWZpY2F0aW9uIHZpYSBXZWJTdG9yYWdlLCB3ZSBhcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVpdGhlciBhbHJlYWR5IHNlY29uZGFyeSBvciBhbm90aGVyIHRhYiBoYXMgdGFrZW4gdGhlIHByaW1hcnkgbGVhc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhMT0dfVEFHJDksICdJZ25vcmluZyB1bmV4cGVjdGVkIHF1ZXJ5IHN0YXRlIG5vdGlmaWNhdGlvbi4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucXVlcnlWaWV3c0J5VGFyZ2V0W3RhcmdldElkXSkgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2N1cnJlbnQnOiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vdC1jdXJyZW50JzogcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZWplY3RlZCc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2NhbFN0b3JlLmdldE5ld0RvY3VtZW50Q2hhbmdlcygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXMgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5bnRoZXNpemVkUmVtb3RlRXZlbnQgPSBSZW1vdGVFdmVudC5jcmVhdGVTeW50aGVzaXplZFJlbW90ZUV2ZW50Rm9yQ3VycmVudENoYW5nZSh0YXJnZXRJZCwgc3RhdGUgPT09ICdjdXJyZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLmVtaXROZXdTbmFwc0FuZE5vdGlmeUxvY2FsU3RvcmUoY2hhbmdlcywgc3ludGhlc2l6ZWRSZW1vdGVFdmVudCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlWaWV3ID0gdGhpcy5xdWVyeVZpZXdzQnlUYXJnZXRbdGFyZ2V0SWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlbW92ZUFuZENsZWFudXBRdWVyeShxdWVyeVZpZXcpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2NhbFN0b3JlLnJlbGVhc2VRdWVyeShxdWVyeVZpZXcucXVlcnksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyprZWVwUGVyc2lzdGVkUXVlcnlEYXRhPSovIHRydWUpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW5jRW5naW5lTGlzdGVuZXIub25XYXRjaEVycm9yKHF1ZXJ5Vmlldy5xdWVyeSwgZXJyb3IkJDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwoJ1VuZXhwZWN0ZWQgdGFyZ2V0IHN0YXRlOiAnICsgc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDc7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHlcclxuICAgIFN5bmNFbmdpbmUucHJvdG90eXBlLmFwcGx5QWN0aXZlVGFyZ2V0c0NoYW5nZSA9IGZ1bmN0aW9uIChhZGRlZCwgcmVtb3ZlZCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgX2ksIGFkZGVkXzEsIHRhcmdldElkLCBxdWVyeSwgcXVlcnlEYXRhLCBfbG9vcF8zLCB0aGlzXzIsIF9hLCByZW1vdmVkXzEsIHRhcmdldElkO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1ByaW1hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIGFkZGVkXzEgPSBhZGRlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBhZGRlZF8xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZCA9IGFkZGVkXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQoIXRoaXMucXVlcnlWaWV3c0J5VGFyZ2V0W3RhcmdldElkXSwgJ1RyeWluZyB0byBhZGQgYW4gYWxyZWFkeSBhY3RpdmUgdGFyZ2V0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZS5nZXRRdWVyeUZvclRhcmdldCh0YXJnZXRJZCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCghIXF1ZXJ5LCBcIlF1ZXJ5IGRhdGEgZm9yIGFjdGl2ZSB0YXJnZXQgXCIgKyB0YXJnZXRJZCArIFwiIG5vdCBmb3VuZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2NhbFN0b3JlLmFsbG9jYXRlUXVlcnkocXVlcnkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5RGF0YSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5pbml0aWFsaXplVmlld0FuZENvbXB1dGVTbmFwc2hvdChxdWVyeURhdGEsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypjdXJyZW50PSovIGZhbHNlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3RlU3RvcmUubGlzdGVuKHF1ZXJ5RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMyA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXJ5VmlldztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlWaWV3ID0gdGhpc18yLnF1ZXJ5Vmlld3NCeVRhcmdldFt0YXJnZXRJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5VmlldykgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzXzIubG9jYWxTdG9yZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVsZWFzZVF1ZXJ5KHF1ZXJ5Vmlldy5xdWVyeSwgLyprZWVwUGVyc2lzdGVkUXVlcnlEYXRhPSovIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW90ZVN0b3JlLnVubGlzdGVuKHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbW92ZUFuZENsZWFudXBRdWVyeShxdWVyeVZpZXcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBfdGhpcy5pZ25vcmVJZlByaW1hcnlMZWFzZUxvc3MoZXJyKTsgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzXzIgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IDAsIHJlbW92ZWRfMSA9IHJlbW92ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9hIDwgcmVtb3ZlZF8xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDEwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SWQgPSByZW1vdmVkXzFbX2FdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzUgLyp5aWVsZCoqLywgX2xvb3BfMyh0YXJnZXRJZCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFN5bmNFbmdpbmUucHJvdG90eXBlLmVuYWJsZU5ldHdvcmsgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5sb2NhbFN0b3JlLnNldE5ldHdvcmtFbmFibGVkKHRydWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZVN0b3JlLmVuYWJsZU5ldHdvcmsoKTtcclxuICAgIH07XHJcbiAgICBTeW5jRW5naW5lLnByb3RvdHlwZS5kaXNhYmxlTmV0d29yayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmxvY2FsU3RvcmUuc2V0TmV0d29ya0VuYWJsZWQoZmFsc2UpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZVN0b3JlLmRpc2FibGVOZXR3b3JrKCk7XHJcbiAgICB9O1xyXG4gICAgU3luY0VuZ2luZS5wcm90b3R5cGUuZ2V0UmVtb3RlS2V5c0ZvclRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHZhciBsaW1ib1Jlc29sdXRpb24gPSB0aGlzLmxpbWJvUmVzb2x1dGlvbnNCeVRhcmdldFt0YXJnZXRJZF07XHJcbiAgICAgICAgaWYgKGxpbWJvUmVzb2x1dGlvbiAmJiBsaW1ib1Jlc29sdXRpb24ucmVjZWl2ZWREb2N1bWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnRLZXlTZXQoKS5hZGQobGltYm9SZXNvbHV0aW9uLmtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5xdWVyeVZpZXdzQnlUYXJnZXRbdGFyZ2V0SWRdXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMucXVlcnlWaWV3c0J5VGFyZ2V0W3RhcmdldElkXS52aWV3LnN5bmNlZERvY3VtZW50c1xyXG4gICAgICAgICAgICAgICAgOiBkb2N1bWVudEtleVNldCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gU3luY0VuZ2luZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBTaW1wbGUgd3JhcHBlciBhcm91bmQgYSBudWxsYWJsZSBVSUQuIE1vc3RseSBleGlzdHMgdG8gbWFrZSBjb2RlIG1vcmVcclxuICogcmVhZGFibGUuXHJcbiAqL1xyXG52YXIgVXNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFVzZXIodWlkKSB7XHJcbiAgICAgICAgdGhpcy51aWQgPSB1aWQ7XHJcbiAgICB9XHJcbiAgICBVc2VyLnByb3RvdHlwZS5pc0F1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudWlkICE9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEga2V5IHJlcHJlc2VudGluZyB0aGlzIHVzZXIsIHN1aXRhYmxlIGZvciBpbmNsdXNpb24gaW4gYVxyXG4gICAgICogZGljdGlvbmFyeS5cclxuICAgICAqL1xyXG4gICAgVXNlci5wcm90b3R5cGUudG9LZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBdXRoZW50aWNhdGVkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICd1aWQ6JyArIHRoaXMudWlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICdhbm9ueW1vdXMtdXNlcic7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFVzZXIucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXJVc2VyKSB7XHJcbiAgICAgICAgcmV0dXJuIG90aGVyVXNlci51aWQgPT09IHRoaXMudWlkO1xyXG4gICAgfTtcclxuICAgIC8qKiBBIHVzZXIgd2l0aCBhIG51bGwgVUlELiAqL1xyXG4gICAgVXNlci5VTkFVVEhFTlRJQ0FURUQgPSBuZXcgVXNlcihudWxsKTtcclxuICAgIC8vIFRPRE8obWlrZWxlaGVuKTogTG9vayBpbnRvIGdldHRpbmcgYSBwcm9wZXIgdWlkLWVxdWl2YWxlbnQgZm9yXHJcbiAgICAvLyBub24tRmlyZWJhc2VBdXRoIHByb3ZpZGVycy5cclxuICAgIFVzZXIuR09PR0xFX0NSRURFTlRJQUxTID0gbmV3IFVzZXIoJ2dvb2dsZS1jcmVkZW50aWFscy11aWQnKTtcclxuICAgIFVzZXIuRklSU1RfUEFSVFkgPSBuZXcgVXNlcignZmlyc3QtcGFydHktdWlkJyk7XHJcbiAgICByZXR1cm4gVXNlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBMT0dfVEFHJDEwID0gJ1NoYXJlZENsaWVudFN0YXRlJztcclxuLy8gVGhlIGZvcm1hdCBvZiB0aGUgTG9jYWxTdG9yYWdlIGtleSB0aGF0IHN0b3JlcyB0aGUgY2xpZW50IHN0YXRlIGlzOlxyXG4vLyAgICAgZmlyZXN0b3JlX2NsaWVudHNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPGluc3RhbmNlX2tleT5cclxudmFyIENMSUVOVF9TVEFURV9LRVlfUFJFRklYID0gJ2ZpcmVzdG9yZV9jbGllbnRzJztcclxuLy8gVGhlIGZvcm1hdCBvZiB0aGUgV2ViU3RvcmFnZSBrZXkgdGhhdCBzdG9yZXMgdGhlIG11dGF0aW9uIHN0YXRlIGlzOlxyXG4vLyAgICAgZmlyZXN0b3JlX211dGF0aW9uc188cGVyc2lzdGVuY2VfcHJlZml4Pl88YmF0Y2hfaWQ+XHJcbi8vICAgICAoZm9yIHVuYXV0aGVudGljYXRlZCB1c2VycylcclxuLy8gb3I6IGZpcmVzdG9yZV9tdXRhdGlvbnNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPGJhdGNoX2lkPl88dXNlcl91aWQ+XHJcbi8vXHJcbi8vICd1c2VyX3VpZCcgaXMgbGFzdCB0byBhdm9pZCBuZWVkaW5nIHRvIGVzY2FwZSAnXycgY2hhcmFjdGVycyB0aGF0IGl0IG1pZ2h0XHJcbi8vIGNvbnRhaW4uXHJcbnZhciBNVVRBVElPTl9CQVRDSF9LRVlfUFJFRklYID0gJ2ZpcmVzdG9yZV9tdXRhdGlvbnMnO1xyXG4vLyBUaGUgZm9ybWF0IG9mIHRoZSBXZWJTdG9yYWdlIGtleSB0aGF0IHN0b3JlcyBhIHF1ZXJ5IHRhcmdldCdzIG1ldGFkYXRhIGlzOlxyXG4vLyAgICAgZmlyZXN0b3JlX3RhcmdldHNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPHRhcmdldF9pZD5cclxudmFyIFFVRVJZX1RBUkdFVF9LRVlfUFJFRklYID0gJ2ZpcmVzdG9yZV90YXJnZXRzJztcclxuLy8gVGhlIFdlYlN0b3JhZ2UgcHJlZml4IHRoYXQgc3RvcmVzIHRoZSBwcmltYXJ5IHRhYidzIG9ubGluZSBzdGF0ZS4gVGhlXHJcbi8vIGZvcm1hdCBvZiB0aGUga2V5IGlzOlxyXG4vLyAgICAgZmlyZXN0b3JlX29ubGluZV9zdGF0ZV88cGVyc2lzdGVuY2VfcHJlZml4PlxyXG52YXIgT05MSU5FX1NUQVRFX0tFWV9QUkVGSVggPSAnZmlyZXN0b3JlX29ubGluZV9zdGF0ZSc7XHJcbi8vIFRoZSBXZWJTdG9yYWdlIGtleSBwcmVmaXggZm9yIHRoZSBrZXkgdGhhdCBzdG9yZXMgdGhlIGxhc3Qgc2VxdWVuY2UgbnVtYmVyIGFsbG9jYXRlZC4gVGhlIGtleVxyXG4vLyBsb29rcyBsaWtlICdmaXJlc3RvcmVfc2VxdWVuY2VfbnVtYmVyXzxwZXJzaXN0ZW5jZV9wcmVmaXg+Jy5cclxudmFyIFNFUVVFTkNFX05VTUJFUl9LRVlfUFJFRklYID0gJ2ZpcmVzdG9yZV9zZXF1ZW5jZV9udW1iZXInO1xyXG4vKipcclxuICogSG9sZHMgdGhlIHN0YXRlIG9mIGEgbXV0YXRpb24gYmF0Y2gsIGluY2x1ZGluZyBpdHMgdXNlciBJRCwgYmF0Y2ggSUQgYW5kXHJcbiAqIHdoZXRoZXIgdGhlIGJhdGNoIGlzICdwZW5kaW5nJywgJ2Fja25vd2xlZGdlZCcgb3IgJ3JlamVjdGVkJy5cclxuICovXHJcbi8vIFZpc2libGUgZm9yIHRlc3RpbmdcclxudmFyIE11dGF0aW9uTWV0YWRhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNdXRhdGlvbk1ldGFkYXRhKHVzZXIsIGJhdGNoSWQsIHN0YXRlLCBlcnJvciQkMSkge1xyXG4gICAgICAgIHRoaXMudXNlciA9IHVzZXI7XHJcbiAgICAgICAgdGhpcy5iYXRjaElkID0gYmF0Y2hJZDtcclxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yJCQxO1xyXG4gICAgICAgIGFzc2VydCgoZXJyb3IkJDEgIT09IHVuZGVmaW5lZCkgPT09IChzdGF0ZSA9PT0gJ3JlamVjdGVkJyksIFwiTXV0YXRpb25NZXRhZGF0YSBtdXN0IGNvbnRhaW4gYW4gZXJyb3IgaWZmIHN0YXRlIGlzICdyZWplY3RlZCdcIik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBhIE11dGF0aW9uTWV0YWRhdGEgZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvbiBpbiBXZWJTdG9yYWdlLlxyXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cclxuICAgICAqL1xyXG4gICAgTXV0YXRpb25NZXRhZGF0YS5mcm9tV2ViU3RvcmFnZUVudHJ5ID0gZnVuY3Rpb24gKHVzZXIsIGJhdGNoSWQsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG11dGF0aW9uQmF0Y2ggPSBKU09OLnBhcnNlKHZhbHVlKTtcclxuICAgICAgICB2YXIgdmFsaWREYXRhID0gdHlwZW9mIG11dGF0aW9uQmF0Y2ggPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIFsncGVuZGluZycsICdhY2tub3dsZWRnZWQnLCAncmVqZWN0ZWQnXS5pbmRleE9mKG11dGF0aW9uQmF0Y2guc3RhdGUpICE9PVxyXG4gICAgICAgICAgICAgICAgLTEgJiZcclxuICAgICAgICAgICAgKG11dGF0aW9uQmF0Y2guZXJyb3IgPT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIG11dGF0aW9uQmF0Y2guZXJyb3IgPT09ICdvYmplY3QnKTtcclxuICAgICAgICB2YXIgZmlyZXN0b3JlRXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHZhbGlkRGF0YSAmJiBtdXRhdGlvbkJhdGNoLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHZhbGlkRGF0YSA9XHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgbXV0YXRpb25CYXRjaC5lcnJvci5tZXNzYWdlID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBtdXRhdGlvbkJhdGNoLmVycm9yLmNvZGUgPT09ICdzdHJpbmcnO1xyXG4gICAgICAgICAgICBpZiAodmFsaWREYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBmaXJlc3RvcmVFcnJvciA9IG5ldyBGaXJlc3RvcmVFcnJvcihtdXRhdGlvbkJhdGNoLmVycm9yLmNvZGUsIG11dGF0aW9uQmF0Y2guZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbGlkRGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE11dGF0aW9uTWV0YWRhdGEodXNlciwgYmF0Y2hJZCwgbXV0YXRpb25CYXRjaC5zdGF0ZSwgZmlyZXN0b3JlRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZXJyb3IoTE9HX1RBRyQxMCwgXCJGYWlsZWQgdG8gcGFyc2UgbXV0YXRpb24gc3RhdGUgZm9yIElEICdcIiArIGJhdGNoSWQgKyBcIic6IFwiICsgdmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTXV0YXRpb25NZXRhZGF0YS5wcm90b3R5cGUudG9XZWJTdG9yYWdlSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYmF0Y2hNZXRhZGF0YSA9IHtcclxuICAgICAgICAgICAgc3RhdGU6IHRoaXMuc3RhdGVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0aGlzLmVycm9yKSB7XHJcbiAgICAgICAgICAgIGJhdGNoTWV0YWRhdGEuZXJyb3IgPSB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiB0aGlzLmVycm9yLmNvZGUsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiB0aGlzLmVycm9yLm1lc3NhZ2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGJhdGNoTWV0YWRhdGEpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNdXRhdGlvbk1ldGFkYXRhO1xyXG59KCkpO1xyXG4vKipcclxuICogSG9sZHMgdGhlIHN0YXRlIG9mIGEgcXVlcnkgdGFyZ2V0LCBpbmNsdWRpbmcgaXRzIHRhcmdldCBJRCBhbmQgd2hldGhlciB0aGVcclxuICogdGFyZ2V0IGlzICdub3QtY3VycmVudCcsICdjdXJyZW50JyBvciAncmVqZWN0ZWQnLlxyXG4gKi9cclxuLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xyXG52YXIgUXVlcnlUYXJnZXRNZXRhZGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFF1ZXJ5VGFyZ2V0TWV0YWRhdGEodGFyZ2V0SWQsIHN0YXRlLCBlcnJvciQkMSkge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSB0YXJnZXRJZDtcclxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yJCQxO1xyXG4gICAgICAgIGFzc2VydCgoZXJyb3IkJDEgIT09IHVuZGVmaW5lZCkgPT09IChzdGF0ZSA9PT0gJ3JlamVjdGVkJyksIFwiUXVlcnlUYXJnZXRNZXRhZGF0YSBtdXN0IGNvbnRhaW4gYW4gZXJyb3IgaWZmIHN0YXRlIGlzICdyZWplY3RlZCdcIik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBhIFF1ZXJ5VGFyZ2V0TWV0YWRhdGEgZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvbiBpbiBXZWJTdG9yYWdlLlxyXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cclxuICAgICAqL1xyXG4gICAgUXVlcnlUYXJnZXRNZXRhZGF0YS5mcm9tV2ViU3RvcmFnZUVudHJ5ID0gZnVuY3Rpb24gKHRhcmdldElkLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciB0YXJnZXRTdGF0ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xyXG4gICAgICAgIHZhciB2YWxpZERhdGEgPSB0eXBlb2YgdGFyZ2V0U3RhdGUgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIFsnbm90LWN1cnJlbnQnLCAnY3VycmVudCcsICdyZWplY3RlZCddLmluZGV4T2YodGFyZ2V0U3RhdGUuc3RhdGUpICE9PVxyXG4gICAgICAgICAgICAgICAgLTEgJiZcclxuICAgICAgICAgICAgKHRhcmdldFN0YXRlLmVycm9yID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB0YXJnZXRTdGF0ZS5lcnJvciA9PT0gJ29iamVjdCcpO1xyXG4gICAgICAgIHZhciBmaXJlc3RvcmVFcnJvciA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAodmFsaWREYXRhICYmIHRhcmdldFN0YXRlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHZhbGlkRGF0YSA9XHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGFyZ2V0U3RhdGUuZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGFyZ2V0U3RhdGUuZXJyb3IuY29kZSA9PT0gJ3N0cmluZyc7XHJcbiAgICAgICAgICAgIGlmICh2YWxpZERhdGEpIHtcclxuICAgICAgICAgICAgICAgIGZpcmVzdG9yZUVycm9yID0gbmV3IEZpcmVzdG9yZUVycm9yKHRhcmdldFN0YXRlLmVycm9yLmNvZGUsIHRhcmdldFN0YXRlLmVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWxpZERhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBRdWVyeVRhcmdldE1ldGFkYXRhKHRhcmdldElkLCB0YXJnZXRTdGF0ZS5zdGF0ZSwgZmlyZXN0b3JlRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZXJyb3IoTE9HX1RBRyQxMCwgXCJGYWlsZWQgdG8gcGFyc2UgdGFyZ2V0IHN0YXRlIGZvciBJRCAnXCIgKyB0YXJnZXRJZCArIFwiJzogXCIgKyB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBRdWVyeVRhcmdldE1ldGFkYXRhLnByb3RvdHlwZS50b1dlYlN0b3JhZ2VKU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0YXJnZXRTdGF0ZSA9IHtcclxuICAgICAgICAgICAgc3RhdGU6IHRoaXMuc3RhdGVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0aGlzLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFN0YXRlLmVycm9yID0ge1xyXG4gICAgICAgICAgICAgICAgY29kZTogdGhpcy5lcnJvci5jb2RlLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5lcnJvci5tZXNzYWdlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0YXJnZXRTdGF0ZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFF1ZXJ5VGFyZ2V0TWV0YWRhdGE7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIGltbXV0YWJsZSBDbGllbnRTdGF0ZSBmb3IgYSBjbGllbnQgcmVhZCBmcm9tXHJcbiAqIFdlYlN0b3JhZ2UsIGNvbnRhaW5pbmcgdGhlIGxpc3Qgb2YgYWN0aXZlIHF1ZXJ5IHRhcmdldHMuXHJcbiAqL1xyXG52YXIgUmVtb3RlQ2xpZW50U3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZW1vdGVDbGllbnRTdGF0ZShjbGllbnRJZCwgYWN0aXZlVGFyZ2V0SWRzKSB7XHJcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IGNsaWVudElkO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gYWN0aXZlVGFyZ2V0SWRzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgYSBSZW1vdGVDbGllbnRTdGF0ZSBmcm9tIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXHJcbiAgICAgKiBMb2dzIGEgd2FybmluZyBhbmQgcmV0dXJucyBudWxsIGlmIHRoZSBmb3JtYXQgb2YgdGhlIGRhdGEgaXMgbm90IHZhbGlkLlxyXG4gICAgICovXHJcbiAgICBSZW1vdGVDbGllbnRTdGF0ZS5mcm9tV2ViU3RvcmFnZUVudHJ5ID0gZnVuY3Rpb24gKGNsaWVudElkLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjbGllbnRTdGF0ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xyXG4gICAgICAgIHZhciB2YWxpZERhdGEgPSB0eXBlb2YgY2xpZW50U3RhdGUgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIGNsaWVudFN0YXRlLmFjdGl2ZVRhcmdldElkcyBpbnN0YW5jZW9mIEFycmF5O1xyXG4gICAgICAgIHZhciBhY3RpdmVUYXJnZXRJZHNTZXQgPSB0YXJnZXRJZFNldCgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyB2YWxpZERhdGEgJiYgaSA8IGNsaWVudFN0YXRlLmFjdGl2ZVRhcmdldElkcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YWxpZERhdGEgPSBpc1NhZmVJbnRlZ2VyKGNsaWVudFN0YXRlLmFjdGl2ZVRhcmdldElkc1tpXSk7XHJcbiAgICAgICAgICAgIGFjdGl2ZVRhcmdldElkc1NldCA9IGFjdGl2ZVRhcmdldElkc1NldC5hZGQoY2xpZW50U3RhdGUuYWN0aXZlVGFyZ2V0SWRzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbGlkRGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlbW90ZUNsaWVudFN0YXRlKGNsaWVudElkLCBhY3RpdmVUYXJnZXRJZHNTZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZXJyb3IoTE9HX1RBRyQxMCwgXCJGYWlsZWQgdG8gcGFyc2UgY2xpZW50IGRhdGEgZm9yIGluc3RhbmNlICdcIiArIGNsaWVudElkICsgXCInOiBcIiArIHZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBSZW1vdGVDbGllbnRTdGF0ZTtcclxufSgpKTtcclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyB0aGUgb25saW5lIHN0YXRlIGZvciBhbGwgY2xpZW50cyBwYXJ0aWNpcGF0aW5nIGluXHJcbiAqIG11bHRpLXRhYi4gVGhlIG9ubGluZSBzdGF0ZSBpcyBvbmx5IHdyaXR0ZW4gdG8gYnkgdGhlIHByaW1hcnkgY2xpZW50LCBhbmRcclxuICogdXNlZCBpbiBzZWNvbmRhcnkgY2xpZW50cyB0byB1cGRhdGUgdGhlaXIgcXVlcnkgdmlld3MuXHJcbiAqL1xyXG52YXIgU2hhcmVkT25saW5lU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTaGFyZWRPbmxpbmVTdGF0ZShjbGllbnRJZCwgb25saW5lU3RhdGUpIHtcclxuICAgICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XHJcbiAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZSA9IG9ubGluZVN0YXRlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgYSBTaGFyZWRPbmxpbmVTdGF0ZSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXHJcbiAgICAgKiBMb2dzIGEgd2FybmluZyBhbmQgcmV0dXJucyBudWxsIGlmIHRoZSBmb3JtYXQgb2YgdGhlIGRhdGEgaXMgbm90IHZhbGlkLlxyXG4gICAgICovXHJcbiAgICBTaGFyZWRPbmxpbmVTdGF0ZS5mcm9tV2ViU3RvcmFnZUVudHJ5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG9ubGluZVN0YXRlID0gSlNPTi5wYXJzZSh2YWx1ZSk7XHJcbiAgICAgICAgdmFyIHZhbGlkRGF0YSA9IHR5cGVvZiBvbmxpbmVTdGF0ZSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgT25saW5lU3RhdGVbb25saW5lU3RhdGUub25saW5lU3RhdGVdICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgdHlwZW9mIG9ubGluZVN0YXRlLmNsaWVudElkID09PSAnc3RyaW5nJztcclxuICAgICAgICBpZiAodmFsaWREYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2hhcmVkT25saW5lU3RhdGUob25saW5lU3RhdGUuY2xpZW50SWQsIE9ubGluZVN0YXRlW29ubGluZVN0YXRlLm9ubGluZVN0YXRlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlcnJvcihMT0dfVEFHJDEwLCBcIkZhaWxlZCB0byBwYXJzZSBvbmxpbmUgc3RhdGU6IFwiICsgdmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNoYXJlZE9ubGluZVN0YXRlO1xyXG59KCkpO1xyXG4vKipcclxuICogTWV0YWRhdGEgc3RhdGUgb2YgdGhlIGxvY2FsIGNsaWVudC4gVW5saWtlIGBSZW1vdGVDbGllbnRTdGF0ZWAsIHRoaXMgY2xhc3MgaXNcclxuICogbXV0YWJsZSBhbmQga2VlcHMgdHJhY2sgb2YgYWxsIHBlbmRpbmcgbXV0YXRpb25zLCB3aGljaCBhbGxvd3MgdXMgdG9cclxuICogdXBkYXRlIHRoZSByYW5nZSBvZiBwZW5kaW5nIG11dGF0aW9uIGJhdGNoIElEcyBhcyBuZXcgbXV0YXRpb25zIGFyZSBhZGRlZCBvclxyXG4gKiByZW1vdmVkLlxyXG4gKlxyXG4gKiBUaGUgZGF0YSBpbiBgTG9jYWxDbGllbnRTdGF0ZWAgaXMgbm90IHJlYWQgZnJvbSBXZWJTdG9yYWdlIGFuZCBpbnN0ZWFkXHJcbiAqIHVwZGF0ZWQgdmlhIGl0cyBpbnN0YW5jZSBtZXRob2RzLiBUaGUgdXBkYXRlZCBzdGF0ZSBjYW4gYmUgc2VyaWFsaXplZCB2aWFcclxuICogYHRvV2ViU3RvcmFnZUpTT04oKWAuXHJcbiAqL1xyXG4vLyBWaXNpYmxlIGZvciB0ZXN0aW5nLlxyXG52YXIgTG9jYWxDbGllbnRTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExvY2FsQ2xpZW50U3RhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVUYXJnZXRJZHMgPSB0YXJnZXRJZFNldCgpO1xyXG4gICAgfVxyXG4gICAgTG9jYWxDbGllbnRTdGF0ZS5wcm90b3R5cGUuYWRkUXVlcnlUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICBhc3NlcnQoIXRoaXMuYWN0aXZlVGFyZ2V0SWRzLmhhcyh0YXJnZXRJZCksIFwiVGFyZ2V0IHdpdGggSUQgJ1wiICsgdGFyZ2V0SWQgKyBcIicgYWxyZWFkeSBhY3RpdmUuXCIpO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gdGhpcy5hY3RpdmVUYXJnZXRJZHMuYWRkKHRhcmdldElkKTtcclxuICAgIH07XHJcbiAgICBMb2NhbENsaWVudFN0YXRlLnByb3RvdHlwZS5yZW1vdmVRdWVyeVRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gdGhpcy5hY3RpdmVUYXJnZXRJZHMuZGVsZXRlKHRhcmdldElkKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoaXMgZW50cnkgaW50byBhIEpTT04tZW5jb2RlZCBmb3JtYXQgd2UgY2FuIHVzZSBmb3IgV2ViU3RvcmFnZS5cclxuICAgICAqIERvZXMgbm90IGVuY29kZSBgY2xpZW50SWRgIGFzIGl0IGlzIHBhcnQgb2YgdGhlIGtleSBpbiBXZWJTdG9yYWdlLlxyXG4gICAgICovXHJcbiAgICBMb2NhbENsaWVudFN0YXRlLnByb3RvdHlwZS50b1dlYlN0b3JhZ2VKU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICBhY3RpdmVUYXJnZXRJZHM6IHRoaXMuYWN0aXZlVGFyZ2V0SWRzLnRvQXJyYXkoKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBMb2NhbENsaWVudFN0YXRlO1xyXG59KCkpO1xyXG4vKipcclxuICogYFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZWAgdXNlcyBXZWJTdG9yYWdlICh3aW5kb3cubG9jYWxTdG9yYWdlKSBhcyB0aGVcclxuICogYmFja2luZyBzdG9yZSBmb3IgdGhlIFNoYXJlZENsaWVudFN0YXRlLiBJdCBrZWVwcyB0cmFjayBvZiBhbGwgYWN0aXZlXHJcbiAqIGNsaWVudHMgYW5kIHN1cHBvcnRzIG1vZGlmaWNhdGlvbnMgb2YgdGhlIGxvY2FsIGNsaWVudCdzIGRhdGEuXHJcbiAqL1xyXG52YXIgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlKHF1ZXVlLCBwbGF0Zm9ybSwgcGVyc2lzdGVuY2VLZXksIGxvY2FsQ2xpZW50SWQsIGluaXRpYWxVc2VyKSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IHF1ZXVlO1xyXG4gICAgICAgIHRoaXMucGxhdGZvcm0gPSBwbGF0Zm9ybTtcclxuICAgICAgICB0aGlzLmxvY2FsQ2xpZW50SWQgPSBsb2NhbENsaWVudElkO1xyXG4gICAgICAgIHRoaXMuc3luY0VuZ2luZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZUhhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc2VxdWVuY2VOdW1iZXJIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmFjdGl2ZUNsaWVudHMgPSB7fTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2VMaXN0ZW5lciA9IHRoaXMuaGFuZGxlV2ViU3RvcmFnZUV2ZW50LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FwdHVyZXMgV2ViU3RvcmFnZSBldmVudHMgdGhhdCBvY2N1ciBiZWZvcmUgYHN0YXJ0KClgIGlzIGNhbGxlZC4gVGhlc2VcclxuICAgICAgICAgKiBldmVudHMgYXJlIHJlcGxheWVkIG9uY2UgYFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZWAgaXMgc3RhcnRlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmVhcmx5RXZlbnRzID0gW107XHJcbiAgICAgICAgaWYgKCFXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUuaXNBdmFpbGFibGUodGhpcy5wbGF0Zm9ybSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuVU5JTVBMRU1FTlRFRCwgJ0xvY2FsU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlIG9uIHRoaXMgcGxhdGZvcm0uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEVzY2FwZSB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzIG1lbnRpb25lZCBoZXJlOlxyXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvR3VpZGUvUmVndWxhcl9FeHByZXNzaW9uc1xyXG4gICAgICAgIHRoaXMuZXNjYXBlZFBlcnNpc3RlbmNlS2V5ID0gcGVyc2lzdGVuY2VLZXkucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSB0aGlzLnBsYXRmb3JtLndpbmRvdy5sb2NhbFN0b3JhZ2U7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VXNlciA9IGluaXRpYWxVc2VyO1xyXG4gICAgICAgIHRoaXMubG9jYWxDbGllbnRTdG9yYWdlS2V5ID0gdGhpcy50b1dlYlN0b3JhZ2VDbGllbnRTdGF0ZUtleSh0aGlzLmxvY2FsQ2xpZW50SWQpO1xyXG4gICAgICAgIHRoaXMuc2VxdWVuY2VOdW1iZXJLZXkgPSBTRVFVRU5DRV9OVU1CRVJfS0VZX1BSRUZJWCArIFwiX1wiICsgdGhpcy5lc2NhcGVkUGVyc2lzdGVuY2VLZXk7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVDbGllbnRzW3RoaXMubG9jYWxDbGllbnRJZF0gPSBuZXcgTG9jYWxDbGllbnRTdGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuY2xpZW50U3RhdGVLZXlSZSA9IG5ldyBSZWdFeHAoXCJeXCIgKyBDTElFTlRfU1RBVEVfS0VZX1BSRUZJWCArIFwiX1wiICsgdGhpcy5lc2NhcGVkUGVyc2lzdGVuY2VLZXkgKyBcIl8oW15fXSopJFwiKTtcclxuICAgICAgICB0aGlzLm11dGF0aW9uQmF0Y2hLZXlSZSA9IG5ldyBSZWdFeHAoXCJeXCIgKyBNVVRBVElPTl9CQVRDSF9LRVlfUFJFRklYICsgXCJfXCIgKyB0aGlzLmVzY2FwZWRQZXJzaXN0ZW5jZUtleSArIFwiXyhcXFxcZCspKD86XyguKikpPyRcIik7XHJcbiAgICAgICAgdGhpcy5xdWVyeVRhcmdldEtleVJlID0gbmV3IFJlZ0V4cChcIl5cIiArIFFVRVJZX1RBUkdFVF9LRVlfUFJFRklYICsgXCJfXCIgKyB0aGlzLmVzY2FwZWRQZXJzaXN0ZW5jZUtleSArIFwiXyhcXFxcZCspJFwiKTtcclxuICAgICAgICB0aGlzLm9ubGluZVN0YXRlS2V5ID0gT05MSU5FX1NUQVRFX0tFWV9QUkVGSVggKyBcIl9cIiArIHRoaXMuZXNjYXBlZFBlcnNpc3RlbmNlS2V5O1xyXG4gICAgICAgIC8vIFJhdGhlciB0aGFuIGFkZGluZyB0aGUgc3RvcmFnZSBvYnNlcnZlciBkdXJpbmcgc3RhcnQoKSwgd2UgYWRkIHRoZVxyXG4gICAgICAgIC8vIHN0b3JhZ2Ugb2JzZXJ2ZXIgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBUaGlzIGVuc3VyZXMgdGhhdCB3ZSBjb2xsZWN0XHJcbiAgICAgICAgLy8gZXZlbnRzIGJlZm9yZSBvdGhlciBjb21wb25lbnRzIHBvcHVsYXRlIHRoZWlyIGluaXRpYWwgc3RhdGUgKGR1cmluZyB0aGVpclxyXG4gICAgICAgIC8vIHJlc3BlY3RpdmUgc3RhcnQoKSBjYWxscykuIE90aGVyd2lzZSwgd2UgbWlnaHQgZm9yIGV4YW1wbGUgbWlzcyBhXHJcbiAgICAgICAgLy8gbXV0YXRpb24gdGhhdCBpcyBhZGRlZCBhZnRlciBMb2NhbFN0b3JlJ3Mgc3RhcnQoKSBwcm9jZXNzZWQgdGhlIGV4aXN0aW5nXHJcbiAgICAgICAgLy8gbXV0YXRpb25zIGJ1dCBiZWZvcmUgd2Ugb2JzZXJ2ZSBXZWJTdG9yYWdlIGV2ZW50cy5cclxuICAgICAgICB0aGlzLnBsYXRmb3JtLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgdGhpcy5zdG9yYWdlTGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgLyoqIFJldHVybnMgJ3RydWUnIGlmIFdlYlN0b3JhZ2UgaXMgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LiAqL1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLmlzQXZhaWxhYmxlID0gZnVuY3Rpb24gKHBsYXRmb3JtKSB7XHJcbiAgICAgICAgcmV0dXJuICEhKHBsYXRmb3JtLndpbmRvdyAmJiBwbGF0Zm9ybS53aW5kb3cubG9jYWxTdG9yYWdlICE9IG51bGwpO1xyXG4gICAgfTtcclxuICAgIFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBleGlzdGluZ0NsaWVudHMsIF9pLCBleGlzdGluZ0NsaWVudHNfMSwgY2xpZW50SWQsIHN0b3JhZ2VJdGVtLCBjbGllbnRTdGF0ZSwgb25saW5lU3RhdGVKU09OLCBvbmxpbmVTdGF0ZSwgX2EsIF9iLCBldmVudF8xO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCghdGhpcy5zdGFydGVkLCAnV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlIGFscmVhZHkgc3RhcnRlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQodGhpcy5zeW5jRW5naW5lICE9PSBudWxsLCAnc3luY0VuZ2luZSBwcm9wZXJ0eSBtdXN0IGJlIHNldCBiZWZvcmUgY2FsbGluZyBzdGFydCgpJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCh0aGlzLm9ubGluZVN0YXRlSGFuZGxlciAhPT0gbnVsbCwgJ29ubGluZVN0YXRlSGFuZGxlciBwcm9wZXJ0eSBtdXN0IGJlIHNldCBiZWZvcmUgY2FsbGluZyBzdGFydCgpJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3luY0VuZ2luZS5nZXRBY3RpdmVDbGllbnRzKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdDbGllbnRzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pID0gMCwgZXhpc3RpbmdDbGllbnRzXzEgPSBleGlzdGluZ0NsaWVudHM7IF9pIDwgZXhpc3RpbmdDbGllbnRzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRJZCA9IGV4aXN0aW5nQ2xpZW50c18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGllbnRJZCA9PT0gdGhpcy5sb2NhbENsaWVudElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlSXRlbSA9IHRoaXMuZ2V0SXRlbSh0aGlzLnRvV2ViU3RvcmFnZUNsaWVudFN0YXRlS2V5KGNsaWVudElkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZUl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRTdGF0ZSA9IFJlbW90ZUNsaWVudFN0YXRlLmZyb21XZWJTdG9yYWdlRW50cnkoY2xpZW50SWQsIHN0b3JhZ2VJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpZW50U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVDbGllbnRzW2NsaWVudFN0YXRlLmNsaWVudElkXSA9IGNsaWVudFN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcnNpc3RDbGllbnRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmxpbmVTdGF0ZUpTT04gPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLm9ubGluZVN0YXRlS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9ubGluZVN0YXRlSlNPTikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25saW5lU3RhdGUgPSB0aGlzLmZyb21XZWJTdG9yYWdlT25saW5lU3RhdGUob25saW5lU3RhdGVKU09OKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbmxpbmVTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlT25saW5lU3RhdGVFdmVudChvbmxpbmVTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChfYSA9IDAsIF9iID0gdGhpcy5lYXJseUV2ZW50czsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50XzEgPSBfYltfYV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVdlYlN0b3JhZ2VFdmVudChldmVudF8xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVhcmx5RXZlbnRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZ2lzdGVyIGEgd2luZG93IHVubG9hZCBob29rIHRvIHJlbW92ZSB0aGUgY2xpZW50IG1ldGFkYXRhIGVudHJ5IGZyb21cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2ViU3RvcmFnZSBldmVuIGlmIGBzaHV0ZG93bigpYCB3YXMgbm90IGNhbGxlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybS53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5sb2FkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2h1dGRvd24oKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS53cml0ZVNlcXVlbmNlTnVtYmVyID0gZnVuY3Rpb24gKHNlcXVlbmNlTnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zZXRJdGVtKHRoaXMuc2VxdWVuY2VOdW1iZXJLZXksIEpTT04uc3RyaW5naWZ5KHNlcXVlbmNlTnVtYmVyKSk7XHJcbiAgICB9O1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5nZXRBbGxBY3RpdmVRdWVyeVRhcmdldHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFjdGl2ZVRhcmdldHMgPSB0YXJnZXRJZFNldCgpO1xyXG4gICAgICAgIGZvckVhY2godGhpcy5hY3RpdmVDbGllbnRzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhY3RpdmVUYXJnZXRzID0gYWN0aXZlVGFyZ2V0cy51bmlvbldpdGgodmFsdWUuYWN0aXZlVGFyZ2V0SWRzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYWN0aXZlVGFyZ2V0cztcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLmlzQWN0aXZlUXVlcnlUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICAvLyBUaGlzIGlzIG5vdCB1c2luZyBgb2JqLmZvckVhY2hgIHNpbmNlIGBmb3JFYWNoYCBkb2Vzbid0IHN1cHBvcnQgZWFybHlcclxuICAgICAgICAvLyByZXR1cm4uXHJcbiAgICAgICAgZm9yICh2YXIgY2xpZW50SWQgaW4gdGhpcy5hY3RpdmVDbGllbnRzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUNsaWVudHMuaGFzT3duUHJvcGVydHkoY2xpZW50SWQpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVDbGllbnRzW2NsaWVudElkXS5hY3RpdmVUYXJnZXRJZHMuaGFzKHRhcmdldElkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLmFkZFBlbmRpbmdNdXRhdGlvbiA9IGZ1bmN0aW9uIChiYXRjaElkKSB7XHJcbiAgICAgICAgdGhpcy5wZXJzaXN0TXV0YXRpb25TdGF0ZShiYXRjaElkLCAncGVuZGluZycpO1xyXG4gICAgfTtcclxuICAgIFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUudXBkYXRlTXV0YXRpb25TdGF0ZSA9IGZ1bmN0aW9uIChiYXRjaElkLCBzdGF0ZSwgZXJyb3IkJDEpIHtcclxuICAgICAgICB0aGlzLnBlcnNpc3RNdXRhdGlvblN0YXRlKGJhdGNoSWQsIHN0YXRlLCBlcnJvciQkMSk7XHJcbiAgICAgICAgLy8gT25jZSBhIGZpbmFsIG11dGF0aW9uIHJlc3VsdCBpcyBvYnNlcnZlZCBieSBvdGhlciBjbGllbnRzLCB0aGV5IG5vIGxvbmdlclxyXG4gICAgICAgIC8vIGFjY2VzcyB0aGUgbXV0YXRpb24ncyBtZXRhZGF0YSBlbnRyeS4gU2luY2UgV2ViU3RvcmFnZSByZXBsYXlzIGV2ZW50c1xyXG4gICAgICAgIC8vIGluIG9yZGVyLCBpdCBpcyBzYWZlIHRvIGRlbGV0ZSB0aGUgZW50cnkgcmlnaHQgYWZ0ZXIgdXBkYXRpbmcgaXQuXHJcbiAgICAgICAgdGhpcy5yZW1vdmVNdXRhdGlvblN0YXRlKGJhdGNoSWQpO1xyXG4gICAgfTtcclxuICAgIFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuYWRkTG9jYWxRdWVyeVRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHZhciBxdWVyeVN0YXRlID0gJ25vdC1jdXJyZW50JztcclxuICAgICAgICAvLyBMb29rdXAgYW4gZXhpc3RpbmcgcXVlcnkgc3RhdGUgaWYgdGhlIHRhcmdldCBJRCB3YXMgYWxyZWFkeSByZWdpc3RlcmVkXHJcbiAgICAgICAgLy8gYnkgYW5vdGhlciB0YWJcclxuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZVF1ZXJ5VGFyZ2V0KHRhcmdldElkKSkge1xyXG4gICAgICAgICAgICB2YXIgc3RvcmFnZUl0ZW0gPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnRvV2ViU3RvcmFnZVF1ZXJ5VGFyZ2V0TWV0YWRhdGFLZXkodGFyZ2V0SWQpKTtcclxuICAgICAgICAgICAgaWYgKHN0b3JhZ2VJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWV0YWRhdGEgPSBRdWVyeVRhcmdldE1ldGFkYXRhLmZyb21XZWJTdG9yYWdlRW50cnkodGFyZ2V0SWQsIHN0b3JhZ2VJdGVtKTtcclxuICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5U3RhdGUgPSBtZXRhZGF0YS5zdGF0ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxvY2FsQ2xpZW50U3RhdGUuYWRkUXVlcnlUYXJnZXQodGFyZ2V0SWQpO1xyXG4gICAgICAgIHRoaXMucGVyc2lzdENsaWVudFN0YXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHF1ZXJ5U3RhdGU7XHJcbiAgICB9O1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5yZW1vdmVMb2NhbFF1ZXJ5VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgdGhpcy5sb2NhbENsaWVudFN0YXRlLnJlbW92ZVF1ZXJ5VGFyZ2V0KHRhcmdldElkKTtcclxuICAgICAgICB0aGlzLnBlcnNpc3RDbGllbnRTdGF0ZSgpO1xyXG4gICAgfTtcclxuICAgIFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuaXNMb2NhbFF1ZXJ5VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxDbGllbnRTdGF0ZS5hY3RpdmVUYXJnZXRJZHMuaGFzKHRhcmdldElkKTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLmNsZWFyUXVlcnlTdGF0ZSA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbSh0aGlzLnRvV2ViU3RvcmFnZVF1ZXJ5VGFyZ2V0TWV0YWRhdGFLZXkodGFyZ2V0SWQpKTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnVwZGF0ZVF1ZXJ5U3RhdGUgPSBmdW5jdGlvbiAodGFyZ2V0SWQsIHN0YXRlLCBlcnJvciQkMSkge1xyXG4gICAgICAgIHRoaXMucGVyc2lzdFF1ZXJ5VGFyZ2V0U3RhdGUodGFyZ2V0SWQsIHN0YXRlLCBlcnJvciQkMSk7XHJcbiAgICB9O1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5oYW5kbGVVc2VyQ2hhbmdlID0gZnVuY3Rpb24gKHVzZXIsIHJlbW92ZWRCYXRjaElkcywgYWRkZWRCYXRjaElkcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmVtb3ZlZEJhdGNoSWRzLmZvckVhY2goZnVuY3Rpb24gKGJhdGNoSWQpIHtcclxuICAgICAgICAgICAgX3RoaXMucmVtb3ZlTXV0YXRpb25TdGF0ZShiYXRjaElkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRVc2VyID0gdXNlcjtcclxuICAgICAgICBhZGRlZEJhdGNoSWRzLmZvckVhY2goZnVuY3Rpb24gKGJhdGNoSWQpIHtcclxuICAgICAgICAgICAgX3RoaXMuYWRkUGVuZGluZ011dGF0aW9uKGJhdGNoSWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuc2V0T25saW5lU3RhdGUgPSBmdW5jdGlvbiAob25saW5lU3RhdGUpIHtcclxuICAgICAgICB0aGlzLnBlcnNpc3RPbmxpbmVTdGF0ZShvbmxpbmVTdGF0ZSk7XHJcbiAgICB9O1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5zaHV0ZG93biA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGFydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ud2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCB0aGlzLnN0b3JhZ2VMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlSXRlbSh0aGlzLmxvY2FsQ2xpZW50U3RvcmFnZUtleSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICBkZWJ1ZyhMT0dfVEFHJDEwLCAnUkVBRCcsIGtleSwgdmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnNldEl0ZW0gPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGRlYnVnKExPR19UQUckMTAsICdTRVQnLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgZGVidWcoTE9HX1RBRyQxMCwgJ1JFTU9WRScsIGtleSk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLmhhbmRsZVdlYlN0b3JhZ2VFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGV2ZW50LnN0b3JhZ2VBcmVhID09PSB0aGlzLnN0b3JhZ2UpIHtcclxuICAgICAgICAgICAgZGVidWcoTE9HX1RBRyQxMCwgJ0VWRU5UJywgZXZlbnQua2V5LCBldmVudC5uZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09IHRoaXMubG9jYWxDbGllbnRTdG9yYWdlS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcignUmVjZWl2ZWQgV2ViU3RvcmFnZSBub3RpZmljYXRpb24gZm9yIGxvY2FsIGNoYW5nZS4gQW5vdGhlciBjbGllbnQgbWlnaHQgaGF2ZSAnICtcclxuICAgICAgICAgICAgICAgICAgICAnZ2FyYmFnZS1jb2xsZWN0ZWQgb3VyIHN0YXRlJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5xdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudFN0YXRlLCBjbGllbnRJZCwgbXV0YXRpb25NZXRhZGF0YSwgcXVlcnlUYXJnZXRNZXRhZGF0YSwgb25saW5lU3RhdGUsIHNlcXVlbmNlTnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lYXJseUV2ZW50cy5wdXNoKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xpZW50U3RhdGVLZXlSZS50ZXN0KGV2ZW50LmtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm5ld1ZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFN0YXRlID0gdGhpcy5mcm9tV2ViU3RvcmFnZUNsaWVudFN0YXRlKGV2ZW50LmtleSwgZXZlbnQubmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWVudFN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuaGFuZGxlQ2xpZW50U3RhdGVFdmVudChjbGllbnRTdGF0ZS5jbGllbnRJZCwgY2xpZW50U3RhdGUpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudElkID0gdGhpcy5mcm9tV2ViU3RvcmFnZUNsaWVudFN0YXRlS2V5KGV2ZW50LmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5oYW5kbGVDbGllbnRTdGF0ZUV2ZW50KGNsaWVudElkLCBudWxsKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tdXRhdGlvbkJhdGNoS2V5UmUudGVzdChldmVudC5rZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5uZXdWYWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25NZXRhZGF0YSA9IHRoaXMuZnJvbVdlYlN0b3JhZ2VNdXRhdGlvbk1ldGFkYXRhKGV2ZW50LmtleSwgZXZlbnQubmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uTWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5oYW5kbGVNdXRhdGlvbkJhdGNoRXZlbnQobXV0YXRpb25NZXRhZGF0YSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucXVlcnlUYXJnZXRLZXlSZS50ZXN0KGV2ZW50LmtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm5ld1ZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVRhcmdldE1ldGFkYXRhID0gdGhpcy5mcm9tV2ViU3RvcmFnZVF1ZXJ5VGFyZ2V0TWV0YWRhdGEoZXZlbnQua2V5LCBldmVudC5uZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnlUYXJnZXRNZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLmhhbmRsZVF1ZXJ5VGFyZ2V0RXZlbnQocXVlcnlUYXJnZXRNZXRhZGF0YSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gdGhpcy5vbmxpbmVTdGF0ZUtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQubmV3VmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubGluZVN0YXRlID0gdGhpcy5mcm9tV2ViU3RvcmFnZU9ubGluZVN0YXRlKGV2ZW50Lm5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbmxpbmVTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLmhhbmRsZU9ubGluZVN0YXRlRXZlbnQob25saW5lU3RhdGUpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudC5rZXkgPT09IHRoaXMuc2VxdWVuY2VOdW1iZXJLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KCEhdGhpcy5zZXF1ZW5jZU51bWJlckhhbmRsZXIsICdNaXNzaW5nIHNlcXVlbmNlTnVtYmVySGFuZGxlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZU51bWJlciA9IGZyb21XZWJTdG9yYWdlU2VxdWVuY2VOdW1iZXIoZXZlbnQubmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2VOdW1iZXIgIT09IExpc3RlblNlcXVlbmNlLklOVkFMSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VOdW1iZXJIYW5kbGVyKHNlcXVlbmNlTnVtYmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZSwgXCJsb2NhbENsaWVudFN0YXRlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlQ2xpZW50c1t0aGlzLmxvY2FsQ2xpZW50SWRdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5wZXJzaXN0Q2xpZW50U3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRJdGVtKHRoaXMubG9jYWxDbGllbnRTdG9yYWdlS2V5LCB0aGlzLmxvY2FsQ2xpZW50U3RhdGUudG9XZWJTdG9yYWdlSlNPTigpKTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnBlcnNpc3RNdXRhdGlvblN0YXRlID0gZnVuY3Rpb24gKGJhdGNoSWQsIHN0YXRlLCBlcnJvciQkMSkge1xyXG4gICAgICAgIHZhciBtdXRhdGlvblN0YXRlID0gbmV3IE11dGF0aW9uTWV0YWRhdGEodGhpcy5jdXJyZW50VXNlciwgYmF0Y2hJZCwgc3RhdGUsIGVycm9yJCQxKTtcclxuICAgICAgICB2YXIgbXV0YXRpb25LZXkgPSB0aGlzLnRvV2ViU3RvcmFnZU11dGF0aW9uQmF0Y2hLZXkoYmF0Y2hJZCk7XHJcbiAgICAgICAgdGhpcy5zZXRJdGVtKG11dGF0aW9uS2V5LCBtdXRhdGlvblN0YXRlLnRvV2ViU3RvcmFnZUpTT04oKSk7XHJcbiAgICB9O1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5yZW1vdmVNdXRhdGlvblN0YXRlID0gZnVuY3Rpb24gKGJhdGNoSWQpIHtcclxuICAgICAgICB2YXIgbXV0YXRpb25LZXkgPSB0aGlzLnRvV2ViU3RvcmFnZU11dGF0aW9uQmF0Y2hLZXkoYmF0Y2hJZCk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVJdGVtKG11dGF0aW9uS2V5KTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnBlcnNpc3RPbmxpbmVTdGF0ZSA9IGZ1bmN0aW9uIChvbmxpbmVTdGF0ZSkge1xyXG4gICAgICAgIHZhciBlbnRyeSA9IHtcclxuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMubG9jYWxDbGllbnRJZCxcclxuICAgICAgICAgICAgb25saW5lU3RhdGU6IE9ubGluZVN0YXRlW29ubGluZVN0YXRlXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0odGhpcy5vbmxpbmVTdGF0ZUtleSwgSlNPTi5zdHJpbmdpZnkoZW50cnkpKTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnBlcnNpc3RRdWVyeVRhcmdldFN0YXRlID0gZnVuY3Rpb24gKHRhcmdldElkLCBzdGF0ZSwgZXJyb3IkJDEpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0S2V5ID0gdGhpcy50b1dlYlN0b3JhZ2VRdWVyeVRhcmdldE1ldGFkYXRhS2V5KHRhcmdldElkKTtcclxuICAgICAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgUXVlcnlUYXJnZXRNZXRhZGF0YSh0YXJnZXRJZCwgc3RhdGUsIGVycm9yJCQxKTtcclxuICAgICAgICB0aGlzLnNldEl0ZW0odGFyZ2V0S2V5LCB0YXJnZXRNZXRhZGF0YS50b1dlYlN0b3JhZ2VKU09OKCkpO1xyXG4gICAgfTtcclxuICAgIC8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgYSBjbGllbnQgc3RhdGUgaW4gV2ViU3RvcmFnZSAqL1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS50b1dlYlN0b3JhZ2VDbGllbnRTdGF0ZUtleSA9IGZ1bmN0aW9uIChjbGllbnRJZCkge1xyXG4gICAgICAgIGFzc2VydChjbGllbnRJZC5pbmRleE9mKCdfJykgPT09IC0xLCBcIkNsaWVudCBrZXkgY2Fubm90IGNvbnRhaW4gJ18nLCBidXQgd2FzICdcIiArIGNsaWVudElkICsgXCInXCIpO1xyXG4gICAgICAgIHJldHVybiBDTElFTlRfU1RBVEVfS0VZX1BSRUZJWCArIFwiX1wiICsgdGhpcy5lc2NhcGVkUGVyc2lzdGVuY2VLZXkgKyBcIl9cIiArIGNsaWVudElkO1xyXG4gICAgfTtcclxuICAgIC8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgYSBxdWVyeSBzdGF0ZSBpbiBXZWJTdG9yYWdlICovXHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnRvV2ViU3RvcmFnZVF1ZXJ5VGFyZ2V0TWV0YWRhdGFLZXkgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICByZXR1cm4gUVVFUllfVEFSR0VUX0tFWV9QUkVGSVggKyBcIl9cIiArIHRoaXMuZXNjYXBlZFBlcnNpc3RlbmNlS2V5ICsgXCJfXCIgKyB0YXJnZXRJZDtcclxuICAgIH07XHJcbiAgICAvKiogQXNzZW1ibGVzIHRoZSBrZXkgZm9yIGEgbXV0YXRpb24gYmF0Y2ggaW4gV2ViU3RvcmFnZSAqL1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS50b1dlYlN0b3JhZ2VNdXRhdGlvbkJhdGNoS2V5ID0gZnVuY3Rpb24gKGJhdGNoSWQpIHtcclxuICAgICAgICB2YXIgbXV0YXRpb25LZXkgPSBNVVRBVElPTl9CQVRDSF9LRVlfUFJFRklYICsgXCJfXCIgKyB0aGlzLmVzY2FwZWRQZXJzaXN0ZW5jZUtleSArIFwiX1wiICsgYmF0Y2hJZDtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50VXNlci5pc0F1dGhlbnRpY2F0ZWQoKSkge1xyXG4gICAgICAgICAgICBtdXRhdGlvbktleSArPSBcIl9cIiArIHRoaXMuY3VycmVudFVzZXIudWlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbXV0YXRpb25LZXk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgYSBjbGllbnQgc3RhdGUga2V5IGluIFdlYlN0b3JhZ2UuIFJldHVybnMgbnVsbCBpZiB0aGUga2V5IGRvZXMgbm90XHJcbiAgICAgKiBtYXRjaCB0aGUgZXhwZWN0ZWQga2V5IGZvcm1hdC5cclxuICAgICAqL1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5mcm9tV2ViU3RvcmFnZUNsaWVudFN0YXRlS2V5ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBtYXRjaCA9IHRoaXMuY2xpZW50U3RhdGVLZXlSZS5leGVjKGtleSk7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIGEgY2xpZW50IHN0YXRlIGluIFdlYlN0b3JhZ2UuIFJldHVybnMgJ251bGwnIGlmIHRoZSB2YWx1ZSBjb3VsZCBub3RcclxuICAgICAqIGJlIHBhcnNlZC5cclxuICAgICAqL1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5mcm9tV2ViU3RvcmFnZUNsaWVudFN0YXRlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgY2xpZW50SWQgPSB0aGlzLmZyb21XZWJTdG9yYWdlQ2xpZW50U3RhdGVLZXkoa2V5KTtcclxuICAgICAgICBhc3NlcnQoY2xpZW50SWQgIT09IG51bGwsIFwiQ2Fubm90IHBhcnNlIGNsaWVudCBzdGF0ZSBrZXkgJ1wiICsga2V5ICsgXCInXCIpO1xyXG4gICAgICAgIHJldHVybiBSZW1vdGVDbGllbnRTdGF0ZS5mcm9tV2ViU3RvcmFnZUVudHJ5KGNsaWVudElkLCB2YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgYSBtdXRhdGlvbiBiYXRjaCBzdGF0ZSBpbiBXZWJTdG9yYWdlLiBSZXR1cm5zICdudWxsJyBpZiB0aGUgdmFsdWVcclxuICAgICAqIGNvdWxkIG5vdCBiZSBwYXJzZWQuXHJcbiAgICAgKi9cclxuICAgIFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuZnJvbVdlYlN0b3JhZ2VNdXRhdGlvbk1ldGFkYXRhID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLm11dGF0aW9uQmF0Y2hLZXlSZS5leGVjKGtleSk7XHJcbiAgICAgICAgYXNzZXJ0KG1hdGNoICE9PSBudWxsLCBcIkNhbm5vdCBwYXJzZSBtdXRhdGlvbiBiYXRjaCBrZXkgJ1wiICsga2V5ICsgXCInXCIpO1xyXG4gICAgICAgIHZhciBiYXRjaElkID0gTnVtYmVyKG1hdGNoWzFdKTtcclxuICAgICAgICB2YXIgdXNlcklkID0gbWF0Y2hbMl0gIT09IHVuZGVmaW5lZCA/IG1hdGNoWzJdIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gTXV0YXRpb25NZXRhZGF0YS5mcm9tV2ViU3RvcmFnZUVudHJ5KG5ldyBVc2VyKHVzZXJJZCksIGJhdGNoSWQsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBhIHF1ZXJ5IHRhcmdldCBzdGF0ZSBmcm9tIFdlYlN0b3JhZ2UuIFJldHVybnMgJ251bGwnIGlmIHRoZSB2YWx1ZVxyXG4gICAgICogY291bGQgbm90IGJlIHBhcnNlZC5cclxuICAgICAqL1xyXG4gICAgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5mcm9tV2ViU3RvcmFnZVF1ZXJ5VGFyZ2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBtYXRjaCA9IHRoaXMucXVlcnlUYXJnZXRLZXlSZS5leGVjKGtleSk7XHJcbiAgICAgICAgYXNzZXJ0KG1hdGNoICE9PSBudWxsLCBcIkNhbm5vdCBwYXJzZSBxdWVyeSB0YXJnZXQga2V5ICdcIiArIGtleSArIFwiJ1wiKTtcclxuICAgICAgICB2YXIgdGFyZ2V0SWQgPSBOdW1iZXIobWF0Y2hbMV0pO1xyXG4gICAgICAgIHJldHVybiBRdWVyeVRhcmdldE1ldGFkYXRhLmZyb21XZWJTdG9yYWdlRW50cnkodGFyZ2V0SWQsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBhbiBvbmxpbmUgc3RhdGUgZnJvbSBXZWJTdG9yYWdlLiBSZXR1cm5zICdudWxsJyBpZiB0aGUgdmFsdWVcclxuICAgICAqIGNvdWxkIG5vdCBiZSBwYXJzZWQuXHJcbiAgICAgKi9cclxuICAgIFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuZnJvbVdlYlN0b3JhZ2VPbmxpbmVTdGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBTaGFyZWRPbmxpbmVTdGF0ZS5mcm9tV2ViU3RvcmFnZUVudHJ5KHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLmhhbmRsZU11dGF0aW9uQmF0Y2hFdmVudCA9IGZ1bmN0aW9uIChtdXRhdGlvbkJhdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uQmF0Y2gudXNlci51aWQgIT09IHRoaXMuY3VycmVudFVzZXIudWlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoTE9HX1RBRyQxMCwgXCJJZ25vcmluZyBtdXRhdGlvbiBmb3Igbm9uLWFjdGl2ZSB1c2VyIFwiICsgbXV0YXRpb25CYXRjaC51c2VyLnVpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuc3luY0VuZ2luZS5hcHBseUJhdGNoU3RhdGUobXV0YXRpb25CYXRjaC5iYXRjaElkLCBtdXRhdGlvbkJhdGNoLnN0YXRlLCBtdXRhdGlvbkJhdGNoLmVycm9yKV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuaGFuZGxlUXVlcnlUYXJnZXRFdmVudCA9IGZ1bmN0aW9uICh0YXJnZXRNZXRhZGF0YSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNFbmdpbmUuYXBwbHlUYXJnZXRTdGF0ZSh0YXJnZXRNZXRhZGF0YS50YXJnZXRJZCwgdGFyZ2V0TWV0YWRhdGEuc3RhdGUsIHRhcmdldE1ldGFkYXRhLmVycm9yKTtcclxuICAgIH07XHJcbiAgICBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLmhhbmRsZUNsaWVudFN0YXRlRXZlbnQgPSBmdW5jdGlvbiAoY2xpZW50SWQsIGNsaWVudFN0YXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZXhpc3RpbmdUYXJnZXRzID0gdGhpcy5nZXRBbGxBY3RpdmVRdWVyeVRhcmdldHMoKTtcclxuICAgICAgICBpZiAoY2xpZW50U3RhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVDbGllbnRzW2NsaWVudElkXSA9IGNsaWVudFN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWN0aXZlQ2xpZW50c1tjbGllbnRJZF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuZXdUYXJnZXRzID0gdGhpcy5nZXRBbGxBY3RpdmVRdWVyeVRhcmdldHMoKTtcclxuICAgICAgICB2YXIgYWRkZWRUYXJnZXRzID0gW107XHJcbiAgICAgICAgdmFyIHJlbW92ZWRUYXJnZXRzID0gW107XHJcbiAgICAgICAgbmV3VGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXRJZCkgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZ1RhcmdldHMuaGFzKHRhcmdldElkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZGVkVGFyZ2V0cy5wdXNoKHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIGV4aXN0aW5nVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXRJZCkgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFuZXdUYXJnZXRzLmhhcyh0YXJnZXRJZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVkVGFyZ2V0cy5wdXNoKHRhcmdldElkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNFbmdpbmUuYXBwbHlBY3RpdmVUYXJnZXRzQ2hhbmdlKGFkZGVkVGFyZ2V0cywgcmVtb3ZlZFRhcmdldHMpO1xyXG4gICAgfTtcclxuICAgIFdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuaGFuZGxlT25saW5lU3RhdGVFdmVudCA9IGZ1bmN0aW9uIChvbmxpbmVTdGF0ZSkge1xyXG4gICAgICAgIC8vIFdlIGNoZWNrIHdoZXRoZXIgdGhlIGNsaWVudCB0aGF0IHdyb3RlIHRoaXMgb25saW5lIHN0YXRlIGlzIHN0aWxsIGFjdGl2ZVxyXG4gICAgICAgIC8vIGJ5IGNvbXBhcmluZyBpdHMgY2xpZW50IElEIHRvIHRoZSBsaXN0IG9mIGNsaWVudHMga2VwdCBhY3RpdmUgaW5cclxuICAgICAgICAvLyBJbmRleGVkRGIuIElmIGEgY2xpZW50IGRvZXMgbm90IHVwZGF0ZSB0aGVpciBJbmRleGVkRGIgY2xpZW50IHN0YXRlXHJcbiAgICAgICAgLy8gd2l0aGluIDUgc2Vjb25kcywgaXQgaXMgY29uc2lkZXJlZCBpbmFjdGl2ZSBhbmQgd2UgZG9uJ3QgZW1pdCBhbiBvbmxpbmVcclxuICAgICAgICAvLyBzdGF0ZSBldmVudC5cclxuICAgICAgICBpZiAodGhpcy5hY3RpdmVDbGllbnRzW29ubGluZVN0YXRlLmNsaWVudElkXSkge1xyXG4gICAgICAgICAgICB0aGlzLm9ubGluZVN0YXRlSGFuZGxlcihvbmxpbmVTdGF0ZS5vbmxpbmVTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBXZWJTdG9yYWdlU2hhcmVkQ2xpZW50U3RhdGU7XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIGZyb21XZWJTdG9yYWdlU2VxdWVuY2VOdW1iZXIoc2VxU3RyaW5nKSB7XHJcbiAgICB2YXIgc2VxdWVuY2VOdW1iZXIgPSBMaXN0ZW5TZXF1ZW5jZS5JTlZBTElEO1xyXG4gICAgaWYgKHNlcVN0cmluZyAhPSBudWxsKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIHBhcnNlZCA9IEpTT04ucGFyc2Uoc2VxU3RyaW5nKTtcclxuICAgICAgICAgICAgYXNzZXJ0KHR5cGVvZiBwYXJzZWQgPT09ICdudW1iZXInLCAnRm91bmQgbm9uLW51bWVyaWMgc2VxdWVuY2UgbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIHNlcXVlbmNlTnVtYmVyID0gcGFyc2VkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBlcnJvcihMT0dfVEFHJDEwLCAnRmFpbGVkIHRvIHJlYWQgc2VxdWVuY2UgbnVtYmVyIGZyb20gV2ViU3RvcmFnZScsIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzZXF1ZW5jZU51bWJlcjtcclxufVxyXG4vKipcclxuICogYE1lbW9yeVNoYXJlZENsaWVudFN0YXRlYCBpcyBhIHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiBTaGFyZWRDbGllbnRTdGF0ZSBmb3JcclxuICogY2xpZW50cyB1c2luZyBtZW1vcnkgcGVyc2lzdGVuY2UuIFRoZSBzdGF0ZSBpbiB0aGlzIGNsYXNzIHJlbWFpbnMgZnVsbHlcclxuICogaXNvbGF0ZWQgYW5kIG5vIHN5bmNocm9uaXphdGlvbiBpcyBwZXJmb3JtZWQuXHJcbiAqL1xyXG52YXIgTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZW1vcnlTaGFyZWRDbGllbnRTdGF0ZSgpIHtcclxuICAgICAgICB0aGlzLmxvY2FsU3RhdGUgPSBuZXcgTG9jYWxDbGllbnRTdGF0ZSgpO1xyXG4gICAgICAgIHRoaXMucXVlcnlTdGF0ZSA9IHt9O1xyXG4gICAgICAgIHRoaXMuc3luY0VuZ2luZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZUhhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc2VxdWVuY2VOdW1iZXJIYW5kbGVyID0gbnVsbDtcclxuICAgIH1cclxuICAgIE1lbW9yeVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5hZGRQZW5kaW5nTXV0YXRpb24gPSBmdW5jdGlvbiAoYmF0Y2hJZCkge1xyXG4gICAgICAgIC8vIE5vIG9wLlxyXG4gICAgfTtcclxuICAgIE1lbW9yeVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS51cGRhdGVNdXRhdGlvblN0YXRlID0gZnVuY3Rpb24gKGJhdGNoSWQsIHN0YXRlLCBlcnJvciQkMSkge1xyXG4gICAgICAgIC8vIE5vIG9wLlxyXG4gICAgfTtcclxuICAgIE1lbW9yeVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5hZGRMb2NhbFF1ZXJ5VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgdGhpcy5sb2NhbFN0YXRlLmFkZFF1ZXJ5VGFyZ2V0KHRhcmdldElkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeVN0YXRlW3RhcmdldElkXSB8fCAnbm90LWN1cnJlbnQnO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS51cGRhdGVRdWVyeVN0YXRlID0gZnVuY3Rpb24gKHRhcmdldElkLCBzdGF0ZSwgZXJyb3IkJDEpIHtcclxuICAgICAgICB0aGlzLnF1ZXJ5U3RhdGVbdGFyZ2V0SWRdID0gc3RhdGU7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnJlbW92ZUxvY2FsUXVlcnlUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICB0aGlzLmxvY2FsU3RhdGUucmVtb3ZlUXVlcnlUYXJnZXQodGFyZ2V0SWQpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5pc0xvY2FsUXVlcnlUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFN0YXRlLmFjdGl2ZVRhcmdldElkcy5oYXModGFyZ2V0SWQpO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5jbGVhclF1ZXJ5U3RhdGUgPSBmdW5jdGlvbiAodGFyZ2V0SWQpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5xdWVyeVN0YXRlW3RhcmdldElkXTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuZ2V0QWxsQWN0aXZlUXVlcnlUYXJnZXRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsU3RhdGUuYWN0aXZlVGFyZ2V0SWRzO1xyXG4gICAgfTtcclxuICAgIE1lbW9yeVNoYXJlZENsaWVudFN0YXRlLnByb3RvdHlwZS5pc0FjdGl2ZVF1ZXJ5VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxTdGF0ZS5hY3RpdmVUYXJnZXRJZHMuaGFzKHRhcmdldElkKTtcclxuICAgIH07XHJcbiAgICBNZW1vcnlTaGFyZWRDbGllbnRTdGF0ZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5sb2NhbFN0YXRlID0gbmV3IExvY2FsQ2xpZW50U3RhdGUoKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLmhhbmRsZVVzZXJDaGFuZ2UgPSBmdW5jdGlvbiAodXNlciwgcmVtb3ZlZEJhdGNoSWRzLCBhZGRlZEJhdGNoSWRzKSB7XHJcbiAgICAgICAgLy8gTm8gb3AuXHJcbiAgICB9O1xyXG4gICAgTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnNldE9ubGluZVN0YXRlID0gZnVuY3Rpb24gKG9ubGluZVN0YXRlKSB7XHJcbiAgICAgICAgLy8gTm8gb3AuXHJcbiAgICB9O1xyXG4gICAgTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLnNodXRkb3duID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGUucHJvdG90eXBlLndyaXRlU2VxdWVuY2VOdW1iZXIgPSBmdW5jdGlvbiAoc2VxdWVuY2VOdW1iZXIpIHsgfTtcclxuICAgIHJldHVybiBNZW1vcnlTaGFyZWRDbGllbnRTdGF0ZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBMT0dfVEFHJDExID0gJ0ZpcmVzdG9yZUNsaWVudCc7XHJcbi8qKiBUaGUgRE9NRXhjZXB0aW9uIGNvZGUgZm9yIGFuIGFib3J0ZWQgb3BlcmF0aW9uLiAqL1xyXG52YXIgRE9NX0VYQ0VQVElPTl9BQk9SVEVEID0gMjA7XHJcbi8qKiBUaGUgRE9NRXhjZXB0aW9uIGNvZGUgZm9yIHF1b3RhIGV4Y2VlZGVkLiAqL1xyXG52YXIgRE9NX0VYQ0VQVElPTl9RVU9UQV9FWENFRURFRCA9IDIyO1xyXG4vKipcclxuICogRmlyZXN0b3JlQ2xpZW50IGlzIGEgdG9wLWxldmVsIGNsYXNzIHRoYXQgY29uc3RydWN0cyBhbmQgb3ducyBhbGwgb2YgdGhlXHJcbiAqIHBpZWNlcyBvZiB0aGUgY2xpZW50IFNESyBhcmNoaXRlY3R1cmUuIEl0IGlzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGVcclxuICogYXN5bmMgcXVldWUgdGhhdCBpcyBzaGFyZWQgYnkgYWxsIG9mIHRoZSBvdGhlciBjb21wb25lbnRzIGluIHRoZSBzeXN0ZW0uXHJcbiAqL1xyXG52YXIgRmlyZXN0b3JlQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlyZXN0b3JlQ2xpZW50KHBsYXRmb3JtLCBkYXRhYmFzZUluZm8sIGNyZWRlbnRpYWxzLCBcclxuICAgIC8qKlxyXG4gICAgICogQXN5bmNocm9ub3VzIHF1ZXVlIHJlc3BvbnNpYmxlIGZvciBhbGwgb2Ygb3VyIGludGVybmFsIHByb2Nlc3NpbmcuIFdoZW5cclxuICAgICAqIHdlIGdldCBpbmNvbWluZyB3b3JrIGZyb20gdGhlIHVzZXIgKHZpYSBwdWJsaWMgQVBJKSBvciB0aGUgbmV0d29ya1xyXG4gICAgICogKGluY29taW5nIEdSUEMgbWVzc2FnZXMpLCB3ZSBzaG91bGQgYWx3YXlzIHNjaGVkdWxlIG9udG8gdGhpcyBxdWV1ZS5cclxuICAgICAqIFRoaXMgZW5zdXJlcyBhbGwgb2Ygb3VyIHdvcmsgaXMgcHJvcGVybHkgc2VyaWFsaXplZCAoZS5nLiB3ZSBkb24ndFxyXG4gICAgICogc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBvcGVyYXRpb24gd2hpbGUgdGhlIHByZXZpb3VzIG9uZSBpcyB3YWl0aW5nIGZvclxyXG4gICAgICogYW4gYXN5bmMgSS9PIHRvIGNvbXBsZXRlKS5cclxuICAgICAqL1xyXG4gICAgYXN5bmNRdWV1ZSkge1xyXG4gICAgICAgIHRoaXMucGxhdGZvcm0gPSBwbGF0Zm9ybTtcclxuICAgICAgICB0aGlzLmRhdGFiYXNlSW5mbyA9IGRhdGFiYXNlSW5mbztcclxuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzID0gY3JlZGVudGlhbHM7XHJcbiAgICAgICAgdGhpcy5hc3luY1F1ZXVlID0gYXN5bmNRdWV1ZTtcclxuICAgICAgICB0aGlzLmNsaWVudElkID0gQXV0b0lkLm5ld0lkKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0cyB1cCB0aGUgRmlyZXN0b3JlQ2xpZW50LCByZXR1cm5pbmcgb25seSB3aGV0aGVyIG9yIG5vdCBlbmFibGluZ1xyXG4gICAgICogcGVyc2lzdGVuY2Ugc3VjY2VlZGVkLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBpbnRlbnQgaGVyZSBpcyB0byBcImRvIHRoZSByaWdodCB0aGluZ1wiIGFzIGZhciBhcyB1c2VycyBhcmUgY29uY2VybmVkLlxyXG4gICAgICogTmFtZWx5LCBpbiBjYXNlcyB3aGVyZSBvZmZsaW5lIHBlcnNpc3RlbmNlIGlzIHJlcXVlc3RlZCBhbmQgcG9zc2libGUsXHJcbiAgICAgKiBlbmFibGUgaXQsIGJ1dCBvdGhlcndpc2UgZmFsbCBiYWNrIHRvIHBlcnNpc3RlbmNlIGRpc2FibGVkLiBGb3IgdGhlIG1vc3RcclxuICAgICAqIHBhcnQgd2UgZXhwZWN0IHRoaXMgdG8gc3VjY2VlZCBvbmUgd2F5IG9yIHRoZSBvdGhlciBzbyB3ZSBkb24ndCBleHBlY3Qgb3VyXHJcbiAgICAgKiB1c2VycyB0byBhY3R1YWxseSB3YWl0IG9uIHRoZSBmaXJlc3RvcmUuZW5hYmxlUGVyc2lzdGVuY2UgUHJvbWlzZSBzaW5jZVxyXG4gICAgICogdGhleSBnZW5lcmFsbHkgd29uJ3QgY2FyZS5cclxuICAgICAqXHJcbiAgICAgKiBPZiBjb3Vyc2Ugc29tZSB1c2VycyBhY3R1YWxseSBkbyBjYXJlIGFib3V0IHdoZXRoZXIgb3Igbm90IHBlcnNpc3RlbmNlXHJcbiAgICAgKiB3YXMgc3VjY2Vzc2Z1bGx5IGVuYWJsZWQsIHNvIHRoZSBQcm9taXNlIHJldHVybmVkIGZyb20gdGhpcyBtZXRob2RcclxuICAgICAqIGluZGljYXRlcyB0aGlzIG91dGNvbWUuXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBwcmVzZW50cyBhIHByb2JsZW0gdGhvdWdoOiBldmVuIGJlZm9yZSBlbmFibGVQZXJzaXN0ZW5jZSByZXNvbHZlcyBvclxyXG4gICAgICogcmVqZWN0cywgdXNlcnMgbWF5IGhhdmUgbWFkZSBjYWxscyB0byBlLmcuIGZpcmVzdG9yZS5jb2xsZWN0aW9uKCkgd2hpY2hcclxuICAgICAqIG1lYW5zIHRoYXQgdGhlIEZpcmVzdG9yZUNsaWVudCBpbiB0aGVyZSB3aWxsIGJlIGF2YWlsYWJsZSBhbmQgd2lsbCBiZVxyXG4gICAgICogZW5xdWV1aW5nIGFjdGlvbnMgb24gdGhlIGFzeW5jIHF1ZXVlLlxyXG4gICAgICpcclxuICAgICAqIE1lYW53aGlsZSBhbnkgZmFpbHVyZSBvZiBhbiBvcGVyYXRpb24gb24gdGhlIGFzeW5jIHF1ZXVlIGNhdXNlcyBpdCB0b1xyXG4gICAgICogcGFuaWMgYW5kIHJlamVjdCBhbnkgZnVydGhlciB3b3JrLCBvbiB0aGUgcHJlbWlzZSB0aGF0IHVuaGFuZGxlZCBlcnJvcnNcclxuICAgICAqIGFyZSBmYXRhbC5cclxuICAgICAqXHJcbiAgICAgKiBDb25zZXF1ZW50bHkgdGhlIGZhbGxiYWNrIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBoZXJlIGluIHN0YXJ0LCBhbmQgaWYgdGhlXHJcbiAgICAgKiBmYWxsYmFjayBzdWNjZWVkcyB3ZSBzaWduYWwgc3VjY2VzcyB0byB0aGUgYXN5bmMgcXVldWUgZXZlbiB0aG91Z2ggdGhlXHJcbiAgICAgKiBzdGFydCgpIGl0c2VsZiBzaWduYWxzIGZhaWx1cmUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBlcnNpc3RlbmNlU2V0dGluZ3MgU2V0dGluZ3Mgb2JqZWN0IHRvIGNvbmZpZ3VyZSBvZmZsaW5lXHJcbiAgICAgKiAgICAgcGVyc2lzdGVuY2UuXHJcbiAgICAgKiBAcmV0dXJucyBBIGRlZmVycmVkIHJlc3VsdCBpbmRpY2F0aW5nIHRoZSB1c2VyLXZpc2libGUgcmVzdWx0IG9mIGVuYWJsaW5nXHJcbiAgICAgKiAgICAgb2ZmbGluZSBwZXJzaXN0ZW5jZS4gVGhpcyBtZXRob2Qgd2lsbCByZWplY3QgdGhpcyBpZiBJbmRleGVkREIgZmFpbHMgdG9cclxuICAgICAqICAgICBzdGFydCBmb3IgYW55IHJlYXNvbi4gSWYgdXNlUGVyc2lzdGVuY2UgaXMgZmFsc2UgdGhpcyBpc1xyXG4gICAgICogICAgIHVuY29uZGl0aW9uYWxseSByZXNvbHZlZC5cclxuICAgICAqL1xyXG4gICAgRmlyZXN0b3JlQ2xpZW50LnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIChwZXJzaXN0ZW5jZVNldHRpbmdzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBXZSBkZWZlciBvdXIgaW5pdGlhbGl6YXRpb24gdW50aWwgd2UgZ2V0IHRoZSBjdXJyZW50IHVzZXIgZnJvbVxyXG4gICAgICAgIC8vIHNldENoYW5nZUxpc3RlbmVyKCkuIFdlIGJsb2NrIHRoZSBhc3luYyBxdWV1ZSB1bnRpbCB3ZSBnb3QgdGhlIGluaXRpYWxcclxuICAgICAgICAvLyB1c2VyIGFuZCB0aGUgaW5pdGlhbGl6YXRpb24gaXMgY29tcGxldGVkLiBUaGlzIHdpbGwgcHJldmVudCBhbnkgc2NoZWR1bGVkXHJcbiAgICAgICAgLy8gd29yayBmcm9tIGhhcHBlbmluZyBiZWZvcmUgaW5pdGlhbGl6YXRpb24gaXMgY29tcGxldGVkLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gSWYgaW5pdGlhbGl6YXRpb25Eb25lIHJlc29sdmVkIHRoZW4gdGhlIEZpcmVzdG9yZUNsaWVudCBpcyBpbiBhIHVzYWJsZVxyXG4gICAgICAgIC8vIHN0YXRlLlxyXG4gICAgICAgIHZhciBpbml0aWFsaXphdGlvbkRvbmUgPSBuZXcgRGVmZXJyZWQkMSgpO1xyXG4gICAgICAgIC8vIElmIHVzZVBlcnNpc3RlbmNlIGlzIHRydWUsIGNlcnRhaW4gY2xhc3NlcyBvZiBlcnJvcnMgd2hpbGUgc3RhcnRpbmcgYXJlXHJcbiAgICAgICAgLy8gcmVjb3ZlcmFibGUgYnV0IG9ubHkgYnkgZmFsbGluZyBiYWNrIHRvIHBlcnNpc3RlbmNlIGRpc2FibGVkLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gSWYgdGhlcmUncyBhbiBlcnJvciBpbiB0aGUgZmlyc3QgY2FzZSBidXQgbm90IGluIHJlY292ZXJ5IHdlIGNhbm5vdFxyXG4gICAgICAgIC8vIHJlamVjdCB0aGUgcHJvbWlzZSBibG9ja2luZyB0aGUgYXN5bmMgcXVldWUgYmVjYXVzZSB0aGlzIHdpbGwgY2F1c2UgdGhlXHJcbiAgICAgICAgLy8gYXN5bmMgcXVldWUgdG8gcGFuaWMuXHJcbiAgICAgICAgdmFyIHBlcnNpc3RlbmNlUmVzdWx0ID0gbmV3IERlZmVycmVkJDEoKTtcclxuICAgICAgICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzLnNldENoYW5nZUxpc3RlbmVyKGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgIGlmICghaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmluaXRpYWxpemVQZXJzaXN0ZW5jZShwZXJzaXN0ZW5jZVNldHRpbmdzLCBwZXJzaXN0ZW5jZVJlc3VsdCwgdXNlcilcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5pbml0aWFsaXplUmVzdCh1c2VyKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihpbml0aWFsaXphdGlvbkRvbmUucmVzb2x2ZSwgaW5pdGlhbGl6YXRpb25Eb25lLnJlamVjdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5hc3luY1F1ZXVlLmVucXVldWVBbmRGb3JnZXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVDcmVkZW50aWFsQ2hhbmdlKHVzZXIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBCbG9jayB0aGUgYXN5bmMgcXVldWUgdW50aWwgaW5pdGlhbGl6YXRpb24gaXMgZG9uZVxyXG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxpemF0aW9uRG9uZS5wcm9taXNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFJldHVybiBvbmx5IHRoZSByZXN1bHQgb2YgZW5hYmxpbmcgcGVyc2lzdGVuY2UuIE5vdGUgdGhhdCB0aGlzIGRvZXMgbm90XHJcbiAgICAgICAgLy8gbmVlZCB0byBhd2FpdCB0aGUgY29tcGxldGlvbiBvZiBpbml0aWFsaXphdGlvbkRvbmUgYmVjYXVzZSB0aGUgcmVzdWx0IG9mXHJcbiAgICAgICAgLy8gdGhpcyBtZXRob2Qgc2hvdWxkIG5vdCByZWZsZWN0IGFueSBvdGhlciBraW5kIG9mIGZhaWx1cmUgdG8gc3RhcnQuXHJcbiAgICAgICAgcmV0dXJuIHBlcnNpc3RlbmNlUmVzdWx0LnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqIEVuYWJsZXMgdGhlIG5ldHdvcmsgY29ubmVjdGlvbiBhbmQgcmVxdWV1ZXMgYWxsIHBlbmRpbmcgb3BlcmF0aW9ucy4gKi9cclxuICAgIEZpcmVzdG9yZUNsaWVudC5wcm90b3R5cGUuZW5hYmxlTmV0d29yayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFzeW5jUXVldWUuZW5xdWV1ZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zeW5jRW5naW5lLmVuYWJsZU5ldHdvcmsoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIHBlcnNpc3RlbnQgc3RvcmFnZSwgYXR0ZW1wdGluZyB0byB1c2UgSW5kZXhlZERCIGlmXHJcbiAgICAgKiB1c2VQZXJzaXN0ZW5jZSBpcyB0cnVlIG9yIG1lbW9yeS1vbmx5IGlmIGZhbHNlLlxyXG4gICAgICpcclxuICAgICAqIElmIEluZGV4ZWREQiBmYWlscyBiZWNhdXNlIGl0J3MgYWxyZWFkeSBvcGVuIGluIGFub3RoZXIgdGFiIG9yIGJlY2F1c2UgdGhlXHJcbiAgICAgKiBwbGF0Zm9ybSBjYW4ndCBwb3NzaWJseSBzdXBwb3J0IG91ciBpbXBsZW1lbnRhdGlvbiB0aGVuIHRoaXMgbWV0aG9kIHJlamVjdHNcclxuICAgICAqIHRoZSBwZXJzaXN0ZW5jZVJlc3VsdCBhbmQgZmFsbHMgYmFjayBvbiBtZW1vcnktb25seSBwZXJzaXN0ZW5jZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGVyc2lzdGVuY2VTZXR0aW5ncyBTZXR0aW5ncyBvYmplY3QgdG8gY29uZmlndXJlIG9mZmxpbmUgcGVyc2lzdGVuY2VcclxuICAgICAqIEBwYXJhbSBwZXJzaXN0ZW5jZVJlc3VsdCBBIGRlZmVycmVkIHJlc3VsdCBpbmRpY2F0aW5nIHRoZSB1c2VyLXZpc2libGVcclxuICAgICAqICAgICByZXN1bHQgb2YgZW5hYmxpbmcgb2ZmbGluZSBwZXJzaXN0ZW5jZS4gVGhpcyBtZXRob2Qgd2lsbCByZWplY3QgdGhpcyBpZlxyXG4gICAgICogICAgIEluZGV4ZWREQiBmYWlscyB0byBzdGFydCBmb3IgYW55IHJlYXNvbi4gSWYgdXNlUGVyc2lzdGVuY2UgaXMgZmFsc2VcclxuICAgICAqICAgICB0aGlzIGlzIHVuY29uZGl0aW9uYWxseSByZXNvbHZlZC5cclxuICAgICAqIEByZXR1cm5zIGEgUHJvbWlzZSBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90IGluaXRpYWxpemF0aW9uIHNob3VsZFxyXG4gICAgICogICAgIGNvbnRpbnVlLCBpLmUuIHRoYXQgb25lIG9mIHRoZSBwZXJzaXN0ZW5jZSBpbXBsZW1lbnRhdGlvbnMgYWN0dWFsbHlcclxuICAgICAqICAgICBzdWNjZWVkZWQuXHJcbiAgICAgKi9cclxuICAgIEZpcmVzdG9yZUNsaWVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZVBlcnNpc3RlbmNlID0gZnVuY3Rpb24gKHBlcnNpc3RlbmNlU2V0dGluZ3MsIHBlcnNpc3RlbmNlUmVzdWx0LCB1c2VyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAocGVyc2lzdGVuY2VTZXR0aW5ncy5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0SW5kZXhlZERiUGVyc2lzdGVuY2UodXNlciwgcGVyc2lzdGVuY2VTZXR0aW5ncylcclxuICAgICAgICAgICAgICAgIC50aGVuKHBlcnNpc3RlbmNlUmVzdWx0LnJlc29sdmUpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yJCQxKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgb3Igbm90IHRoZSByZXRyeSBzdWNjZWVkcywgZnJvbSBhbiB1c2VyXHJcbiAgICAgICAgICAgICAgICAvLyBwZXJzcGVjdGl2ZSwgb2ZmbGluZSBwZXJzaXN0ZW5jZSBoYXMgZmFpbGVkLlxyXG4gICAgICAgICAgICAgICAgcGVyc2lzdGVuY2VSZXN1bHQucmVqZWN0KGVycm9yJCQxKTtcclxuICAgICAgICAgICAgICAgIC8vIEFuIHVua25vd24gZmFpbHVyZSBvbiB0aGUgZmlyc3Qgc3RhZ2Ugc2h1dHMgZXZlcnl0aGluZyBkb3duLlxyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5jYW5GYWxsYmFjayhlcnJvciQkMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IkJDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBlbmFibGluZyBvZmZsaW5lIHN0b3JhZ2UuIEZhbGxpbmcgYmFjayB0bycgK1xyXG4gICAgICAgICAgICAgICAgICAgICcgc3RvcmFnZSBkaXNhYmxlZDogJyArXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IkJDEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0YXJ0TWVtb3J5UGVyc2lzdGVuY2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBXaGVuIHVzZVBlcnNpc3RlbmNlID09IGZhbHNlLCBlbmFibGluZyBvZmZsaW5lIHBlcnNpc3RlbmNlIGlzIGRlZmluZWRcclxuICAgICAgICAgICAgLy8gdG8gdW5jb25kaXRpb25hbGx5IHN1Y2NlZWQuIFRoaXMgYWxsb3dzIHN0YXJ0KCkgdG8gaGF2ZSB0aGUgc2FtZVxyXG4gICAgICAgICAgICAvLyBzaWduYXR1cmUgZm9yIGJvdGggY2FzZXMsIGRlc3BpdGUgdGhlIGZhY3QgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZVxyXG4gICAgICAgICAgICAvLyBpcyBvbmx5IHVzZWQgaW4gdGhlIGVuYWJsZVBlcnNpc3RlbmNlIGNhbGwuXHJcbiAgICAgICAgICAgIHBlcnNpc3RlbmNlUmVzdWx0LnJlc29sdmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRNZW1vcnlQZXJzaXN0ZW5jZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERlY2lkZXMgd2hldGhlciB0aGUgcHJvdmlkZWQgZXJyb3IgYWxsb3dzIHVzIHRvIGdyYWNlZnVsbHkgZGlzYWJsZVxyXG4gICAgICogcGVyc2lzdGVuY2UgKGFzIG9wcG9zZWQgdG8gY3Jhc2hpbmcgdGhlIGNsaWVudCkuXHJcbiAgICAgKi9cclxuICAgIEZpcmVzdG9yZUNsaWVudC5wcm90b3R5cGUuY2FuRmFsbGJhY2sgPSBmdW5jdGlvbiAoZXJyb3IkJDEpIHtcclxuICAgICAgICBpZiAoZXJyb3IkJDEgaW5zdGFuY2VvZiBGaXJlc3RvcmVFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gKGVycm9yJCQxLmNvZGUgPT09IENvZGUuRkFJTEVEX1BSRUNPTkRJVElPTiB8fFxyXG4gICAgICAgICAgICAgICAgZXJyb3IkJDEuY29kZSA9PT0gQ29kZS5VTklNUExFTUVOVEVEKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIERPTUV4Y2VwdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgICAgZXJyb3IkJDEgaW5zdGFuY2VvZiBET01FeGNlcHRpb24pIHtcclxuICAgICAgICAgICAgLy8gV2UgZmFsbCBiYWNrIHRvIG1lbW9yeSBwZXJzaXN0ZW5jZSBpZiB3ZSBjYW5ub3Qgd3JpdGUgdGhlIHByaW1hcnlcclxuICAgICAgICAgICAgLy8gbGVhc2UuIFRoaXMgY2FuIGhhcHBlbiBjYW4gZHVyaW5nIGEgc2NoZW1hIG1pZ3JhdGlvbiwgb3IgaWYgd2UgcnVuIG91dFxyXG4gICAgICAgICAgICAvLyBvZiBxdW90YSB3aGVuIHdlIHRyeSB0byB3cml0ZSB0aGUgcHJpbWFyeSBsZWFzZS5cclxuICAgICAgICAgICAgLy8gRm9yIGJvdGggdGhlIGBRdW90YUV4Y2VlZGVkRXJyb3JgIGFuZCB0aGUgIGBBYm9ydEVycm9yYCwgaXQgaXMgc2FmZSB0b1xyXG4gICAgICAgICAgICAvLyBmYWxsIGJhY2sgdG8gbWVtb3J5IHBlcnNpc3RlbmNlIHNpbmNlIGFsbCBtb2RpZmljYXRpb25zIHRvIEluZGV4ZWREYlxyXG4gICAgICAgICAgICAvLyBmYWlsZWQgdG8gY29tbWl0LlxyXG4gICAgICAgICAgICByZXR1cm4gKGVycm9yJCQxLmNvZGUgPT09IERPTV9FWENFUFRJT05fUVVPVEFfRVhDRUVERUQgfHxcclxuICAgICAgICAgICAgICAgIGVycm9yJCQxLmNvZGUgPT09IERPTV9FWENFUFRJT05fQUJPUlRFRCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIEluZGV4ZWREQi1iYXNlZCBwZXJzaXN0ZW5jZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgaW5kaWNhdGluZyBzdWNjZXNzIG9yIGZhaWx1cmUuXHJcbiAgICAgKi9cclxuICAgIEZpcmVzdG9yZUNsaWVudC5wcm90b3R5cGUuc3RhcnRJbmRleGVkRGJQZXJzaXN0ZW5jZSA9IGZ1bmN0aW9uICh1c2VyLCBzZXR0aW5ncykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgYXNzZXJ0KHNldHRpbmdzLmVuYWJsZWQsICdTaG91bGQgb25seSBzdGFydCBJbmRleGVkRGIgcGVyc2l0ZW5jZSB3aXRoIG9mZmxpbmUgcGVyc2lzdGVuY2UgZW5hYmxlZC4nKTtcclxuICAgICAgICAvLyBUT0RPKGh0dHA6Ly9iLzMzMzg0NTIzKTogRm9yIG5vdyB3ZSBqdXN0IGRpc2FibGUgZ2FyYmFnZSBjb2xsZWN0aW9uXHJcbiAgICAgICAgLy8gd2hlbiBwZXJzaXN0ZW5jZSBpcyBlbmFibGVkLlxyXG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IG5ldyBOb09wR2FyYmFnZUNvbGxlY3RvcigpO1xyXG4gICAgICAgIHZhciBzdG9yYWdlUHJlZml4ID0gSW5kZXhlZERiUGVyc2lzdGVuY2UuYnVpbGRTdG9yYWdlUHJlZml4KHRoaXMuZGF0YWJhc2VJbmZvKTtcclxuICAgICAgICAvLyBPcHQgdG8gdXNlIHByb3RvMyBKU09OIGluIGNhc2UgdGhlIHBsYXRmb3JtIGRvZXNuJ3Qgc3VwcG9ydCBVaW50OEFycmF5LlxyXG4gICAgICAgIHZhciBzZXJpYWxpemVyID0gbmV3IEpzb25Qcm90b1NlcmlhbGl6ZXIodGhpcy5kYXRhYmFzZUluZm8uZGF0YWJhc2VJZCwge1xyXG4gICAgICAgICAgICB1c2VQcm90bzNKc29uOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmV4cGVyaW1lbnRhbFRhYlN5bmNocm9uaXphdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIVdlYlN0b3JhZ2VTaGFyZWRDbGllbnRTdGF0ZS5pc0F2YWlsYWJsZSh0aGlzLnBsYXRmb3JtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuVU5JTVBMRU1FTlRFRCwgJ0luZGV4ZWREQiBwZXJzaXN0ZW5jZSBpcyBvbmx5IGF2YWlsYWJsZSBvbiBwbGF0Zm9ybXMgdGhhdCBzdXBwb3J0IExvY2FsU3RvcmFnZS4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNldHRpbmdzLmV4cGVyaW1lbnRhbFRhYlN5bmNocm9uaXphdGlvbikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUgPSBuZXcgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlKHRoaXMuYXN5bmNRdWV1ZSwgdGhpcy5wbGF0Zm9ybSwgc3RvcmFnZVByZWZpeCwgdGhpcy5jbGllbnRJZCwgdXNlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgSW5kZXhlZERiUGVyc2lzdGVuY2UuY3JlYXRlTXVsdGlDbGllbnRJbmRleGVkRGJQZXJzaXN0ZW5jZShzdG9yYWdlUHJlZml4LCB0aGlzLmNsaWVudElkLCB0aGlzLnBsYXRmb3JtLCB0aGlzLmFzeW5jUXVldWUsIHNlcmlhbGl6ZXIsIHsgc2VxdWVuY2VOdW1iZXJTeW5jZXI6IHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EucGVyc2lzdGVuY2UgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZSA9IG5ldyBNZW1vcnlTaGFyZWRDbGllbnRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIEluZGV4ZWREYlBlcnNpc3RlbmNlLmNyZWF0ZUluZGV4ZWREYlBlcnNpc3RlbmNlKHN0b3JhZ2VQcmVmaXgsIHRoaXMuY2xpZW50SWQsIHRoaXMucGxhdGZvcm0sIHRoaXMuYXN5bmNRdWV1ZSwgc2VyaWFsaXplcildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IucGVyc2lzdGVuY2UgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIE1lbW9yeS1iYWNrZWQgcGVyc2lzdGVuY2UuIEluIHByYWN0aWNlIHRoaXMgY2Fubm90IGZhaWwuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgd2lsbCBzdWNjZXNzZnVsbHkgcmVzb2x2ZS5cclxuICAgICAqL1xyXG4gICAgRmlyZXN0b3JlQ2xpZW50LnByb3RvdHlwZS5zdGFydE1lbW9yeVBlcnNpc3RlbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3RvciA9IG5ldyBFYWdlckdhcmJhZ2VDb2xsZWN0b3IoKTtcclxuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gbmV3IE1lbW9yeVBlcnNpc3RlbmNlKHRoaXMuY2xpZW50SWQpO1xyXG4gICAgICAgIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUgPSBuZXcgTWVtb3J5U2hhcmVkQ2xpZW50U3RhdGUoKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgcmVzdCBvZiB0aGUgRmlyZXN0b3JlQ2xpZW50LCBhc3N1bWluZyB0aGUgaW5pdGlhbCB1c2VyXHJcbiAgICAgKiBoYXMgYmVlbiBvYnRhaW5lZCBmcm9tIHRoZSBjcmVkZW50aWFsIHByb3ZpZGVyIGFuZCBzb21lIHBlcnNpc3RlbmNlXHJcbiAgICAgKiBpbXBsZW1lbnRhdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhpcy5wZXJzaXN0ZW5jZS5cclxuICAgICAqL1xyXG4gICAgRmlyZXN0b3JlQ2xpZW50LnByb3RvdHlwZS5pbml0aWFsaXplUmVzdCA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBkZWJ1ZyhMT0dfVEFHJDExLCAnSW5pdGlhbGl6aW5nLiB1c2VyPScsIHVzZXIudWlkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wbGF0Zm9ybVxyXG4gICAgICAgICAgICAubG9hZENvbm5lY3Rpb24odGhpcy5kYXRhYmFzZUluZm8pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHNlcmlhbGl6ZXIsIGRhdGFzdG9yZSwgcmVtb3RlU3RvcmVPbmxpbmVTdGF0ZUNoYW5nZWRIYW5kbGVyLCBzaGFyZWRDbGllbnRTdGF0ZU9ubGluZVN0YXRlQ2hhbmdlZEhhbmRsZXI7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbFN0b3JlID0gbmV3IExvY2FsU3RvcmUodGhpcy5wZXJzaXN0ZW5jZSwgdXNlciwgdGhpcy5nYXJiYWdlQ29sbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplciA9IHRoaXMucGxhdGZvcm0ubmV3U2VyaWFsaXplcih0aGlzLmRhdGFiYXNlSW5mby5kYXRhYmFzZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXN0b3JlID0gbmV3IERhdGFzdG9yZSh0aGlzLmFzeW5jUXVldWUsIGNvbm5lY3Rpb24sIHRoaXMuY3JlZGVudGlhbHMsIHNlcmlhbGl6ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVTdG9yZU9ubGluZVN0YXRlQ2hhbmdlZEhhbmRsZXIgPSBmdW5jdGlvbiAob25saW5lU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zeW5jRW5naW5lLmFwcGx5T25saW5lU3RhdGVDaGFuZ2Uob25saW5lU3RhdGUsIE9ubGluZVN0YXRlU291cmNlLlJlbW90ZVN0b3JlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkQ2xpZW50U3RhdGVPbmxpbmVTdGF0ZUNoYW5nZWRIYW5kbGVyID0gZnVuY3Rpb24gKG9ubGluZVN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc3luY0VuZ2luZS5hcHBseU9ubGluZVN0YXRlQ2hhbmdlKG9ubGluZVN0YXRlLCBPbmxpbmVTdGF0ZVNvdXJjZS5TaGFyZWRDbGllbnRTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3RlU3RvcmUgPSBuZXcgUmVtb3RlU3RvcmUodGhpcy5sb2NhbFN0b3JlLCBkYXRhc3RvcmUsIHRoaXMuYXN5bmNRdWV1ZSwgcmVtb3RlU3RvcmVPbmxpbmVTdGF0ZUNoYW5nZWRIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW5jRW5naW5lID0gbmV3IFN5bmNFbmdpbmUodGhpcy5sb2NhbFN0b3JlLCB0aGlzLnJlbW90ZVN0b3JlLCB0aGlzLnNoYXJlZENsaWVudFN0YXRlLCB1c2VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFyZWRDbGllbnRTdGF0ZS5vbmxpbmVTdGF0ZUhhbmRsZXIgPSBzaGFyZWRDbGllbnRTdGF0ZU9ubGluZVN0YXRlQ2hhbmdlZEhhbmRsZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB1cCB3aXJpbmcgYmV0d2VlbiBzeW5jIGVuZ2luZSBhbmQgb3RoZXIgY29tcG9uZW50c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW90ZVN0b3JlLnN5bmNFbmdpbmUgPSB0aGlzLnN5bmNFbmdpbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUuc3luY0VuZ2luZSA9IHRoaXMuc3luY0VuZ2luZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudE1nciA9IG5ldyBFdmVudE1hbmFnZXIodGhpcy5zeW5jRW5naW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogU3luY0VuZ2luZSBkZXBlbmRzIG9uIGJvdGggTG9jYWxTdG9yZSBhbmQgU2hhcmVkQ2xpZW50U3RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKGZvciBwZXJzaXN0aW5nIHN0cmVhbSB0b2tlbnMsIHJlZmlsbGluZyBtdXRhdGlvbiBxdWV1ZSwgcmV0cmlldmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbGlzdCBvZiBhY3RpdmUgdGFyZ2V0cywgZXRjLikgc28gaXQgbXVzdCBiZSBzdGFydGVkIGxhc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9jYWxTdG9yZS5zdGFydCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFN5bmNFbmdpbmUgZGVwZW5kcyBvbiBib3RoIExvY2FsU3RvcmUgYW5kIFNoYXJlZENsaWVudFN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIChmb3IgcGVyc2lzdGluZyBzdHJlYW0gdG9rZW5zLCByZWZpbGxpbmcgbXV0YXRpb24gcXVldWUsIHJldHJpZXZpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGxpc3Qgb2YgYWN0aXZlIHRhcmdldHMsIGV0Yy4pIHNvIGl0IG11c3QgYmUgc3RhcnRlZCBsYXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc2hhcmVkQ2xpZW50U3RhdGUuc3RhcnQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVtb3RlU3RvcmUuc3RhcnQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgd2lsbCBpbW1lZGlhdGVseSBjYWxsIHRoZSBsaXN0ZW5lciwgc28gd2UgbWFrZSBzdXJlIHRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBpdCBhZnRlciBsb2NhbFN0b3JlIC8gcmVtb3RlU3RvcmUgYXJlIHN0YXJ0ZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGVyc2lzdGVuY2Uuc2V0UHJpbWFyeVN0YXRlTGlzdGVuZXIoZnVuY3Rpb24gKGlzUHJpbWFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zeW5jRW5naW5lLmFwcGx5UHJpbWFyeVN0YXRlKGlzUHJpbWFyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBUaGlzIHdpbGwgaW1tZWRpYXRlbHkgY2FsbCB0aGUgbGlzdGVuZXIsIHNvIHdlIG1ha2Ugc3VyZSB0b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgaXQgYWZ0ZXIgbG9jYWxTdG9yZSAvIHJlbW90ZVN0b3JlIGFyZSBzdGFydGVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIEZpcmVzdG9yZUNsaWVudC5wcm90b3R5cGUuaGFuZGxlQ3JlZGVudGlhbENoYW5nZSA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgdGhpcy5hc3luY1F1ZXVlLnZlcmlmeU9wZXJhdGlvbkluUHJvZ3Jlc3MoKTtcclxuICAgICAgICBkZWJ1ZyhMT0dfVEFHJDExLCAnQ3JlZGVudGlhbCBDaGFuZ2VkLiBDdXJyZW50IHVzZXI6ICcgKyB1c2VyLnVpZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY0VuZ2luZS5oYW5kbGVDcmVkZW50aWFsQ2hhbmdlKHVzZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKiBEaXNhYmxlcyB0aGUgbmV0d29yayBjb25uZWN0aW9uLiBQZW5kaW5nIG9wZXJhdGlvbnMgd2lsbCBub3QgY29tcGxldGUuICovXHJcbiAgICBGaXJlc3RvcmVDbGllbnQucHJvdG90eXBlLmRpc2FibGVOZXR3b3JrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN5bmNFbmdpbmUuZGlzYWJsZU5ldHdvcmsoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGaXJlc3RvcmVDbGllbnQucHJvdG90eXBlLnNodXRkb3duID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFzeW5jUXVldWUuZW5xdWV1ZShmdW5jdGlvbiAoKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiBcclxuICAgICAgICAgICAgICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IExvY2FsU3RvcmUgZG9lcyBub3QgbmVlZCBhbiBleHBsaWNpdCBzaHV0ZG93biBvbiB3ZWIuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZW1vdGVTdG9yZS5zaHV0ZG93bigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBPUlRJTkcgTk9URTogTG9jYWxTdG9yZSBkb2VzIG5vdCBuZWVkIGFuIGV4cGxpY2l0IHNodXRkb3duIG9uIHdlYi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNoYXJlZENsaWVudFN0YXRlLnNodXRkb3duKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBlcnNpc3RlbmNlLnNodXRkb3duKG9wdGlvbnMgJiYgb3B0aW9ucy5wdXJnZVBlcnNpc3RlbmNlV2l0aERhdGFMb3NzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGByZW1vdmVDaGFuZ2VMaXN0ZW5lcmAgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgc2h1dHRpbmcgZG93biB0aGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3RlU3RvcmUgYXMgaXQgd2lsbCBwcmV2ZW50IHRoZSBSZW1vdGVTdG9yZSBmcm9tIHJldHJpZXZpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXV0aCB0b2tlbnMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlZGVudGlhbHMucmVtb3ZlQ2hhbmdlTGlzdGVuZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICB9O1xyXG4gICAgRmlyZXN0b3JlQ2xpZW50LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAocXVlcnksIG9ic2VydmVyLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbGlzdGVuZXIgPSBuZXcgUXVlcnlMaXN0ZW5lcihxdWVyeSwgb2JzZXJ2ZXIsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmV2ZW50TWdyLmxpc3RlbihsaXN0ZW5lcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xyXG4gICAgfTtcclxuICAgIEZpcmVzdG9yZUNsaWVudC5wcm90b3R5cGUudW5saXN0ZW4gPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmV2ZW50TWdyLnVubGlzdGVuKGxpc3RlbmVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGaXJlc3RvcmVDbGllbnQucHJvdG90eXBlLmdldERvY3VtZW50RnJvbUxvY2FsQ2FjaGUgPSBmdW5jdGlvbiAoZG9jS2V5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5hc3luY1F1ZXVlXHJcbiAgICAgICAgICAgIC5lbnF1ZXVlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxvY2FsU3RvcmUucmVhZERvY3VtZW50KGRvY0tleSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG1heWJlRG9jKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXliZURvYyBpbnN0YW5jZW9mIERvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF5YmVEb2M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobWF5YmVEb2MgaW5zdGFuY2VvZiBOb0RvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLlVOQVZBSUxBQkxFLCAnRmFpbGVkIHRvIGdldCBkb2N1bWVudCBmcm9tIGNhY2hlLiAoSG93ZXZlciwgdGhpcyBkb2N1bWVudCBtYXkgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJleGlzdCBvbiB0aGUgc2VydmVyLiBSdW4gYWdhaW4gd2l0aG91dCBzZXR0aW5nICdzb3VyY2UnIGluIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAndGhlIEdldE9wdGlvbnMgdG8gYXR0ZW1wdCB0byByZXRyaWV2ZSB0aGUgZG9jdW1lbnQgZnJvbSB0aGUgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ3NlcnZlci4pJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGaXJlc3RvcmVDbGllbnQucHJvdG90eXBlLmdldERvY3VtZW50c0Zyb21Mb2NhbENhY2hlID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5hc3luY1F1ZXVlXHJcbiAgICAgICAgICAgIC5lbnF1ZXVlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxvY2FsU3RvcmUuZXhlY3V0ZVF1ZXJ5KHF1ZXJ5KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZG9jcykge1xyXG4gICAgICAgICAgICB2YXIgcmVtb3RlS2V5cyA9IGRvY3VtZW50S2V5U2V0KCk7XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IFZpZXcocXVlcnksIHJlbW90ZUtleXMpO1xyXG4gICAgICAgICAgICB2YXIgdmlld0RvY0NoYW5nZXMgPSB2aWV3LmNvbXB1dGVEb2NDaGFuZ2VzKGRvY3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gdmlldy5hcHBseUNoYW5nZXModmlld0RvY0NoYW5nZXMsIFxyXG4gICAgICAgICAgICAvKiB1cGRhdGVMaW1ib0RvY3VtZW50cz0gKi8gZmFsc2UpLnNuYXBzaG90O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZpcmVzdG9yZUNsaWVudC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQkMSgpO1xyXG4gICAgICAgIHRoaXMuYXN5bmNRdWV1ZS5lbnF1ZXVlQW5kRm9yZ2V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN5bmNFbmdpbmUud3JpdGUobXV0YXRpb25zLCBkZWZlcnJlZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgRmlyZXN0b3JlQ2xpZW50LnByb3RvdHlwZS5kYXRhYmFzZUlkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFiYXNlSW5mby5kYXRhYmFzZUlkO1xyXG4gICAgfTtcclxuICAgIEZpcmVzdG9yZUNsaWVudC5wcm90b3R5cGUudHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAodXBkYXRlRnVuY3Rpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIFdlIGhhdmUgdG8gd2FpdCBmb3IgdGhlIGFzeW5jIHF1ZXVlIHRvIGJlIHN1cmUgc3luY0VuZ2luZSBpcyBpbml0aWFsaXplZC5cclxuICAgICAgICByZXR1cm4gdGhpcy5hc3luY1F1ZXVlXHJcbiAgICAgICAgICAgIC5lbnF1ZXVlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH0pOyB9KTsgfSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc3luY0VuZ2luZS5ydW5UcmFuc2FjdGlvbih1cGRhdGVGdW5jdGlvbik7IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGaXJlc3RvcmVDbGllbnQ7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKlxyXG4gKiBBIHdyYXBwZXIgaW1wbGVtZW50YXRpb24gb2YgT2JzZXJ2ZXI8VD4gdGhhdCB3aWxsIGRpc3BhdGNoIGV2ZW50c1xyXG4gKiBhc3luY2hyb25vdXNseS4gVG8gYWxsb3cgaW1tZWRpYXRlIHNpbGVuY2luZywgYSBtdXRlIGNhbGwgaXMgYWRkZWQgd2hpY2hcclxuICogY2F1c2VzIGV2ZW50cyBzY2hlZHVsZWQgdG8gbm8gbG9uZ2VyIGJlIHJhaXNlZC5cclxuICovXHJcbnZhciBBc3luY09ic2VydmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXN5bmNPYnNlcnZlcihvYnNlcnZlcikge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGVuIHNldCB0byB0cnVlLCB3aWxsIG5vdCByYWlzZSBmdXR1cmUgZXZlbnRzLiBOZWNlc3NhcnkgdG8gZGVhbCB3aXRoXHJcbiAgICAgICAgICogYXN5bmMgZGV0YWNobWVudCBvZiBsaXN0ZW5lci5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm11dGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBBc3luY09ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZUV2ZW50KHRoaXMub2JzZXJ2ZXIubmV4dCwgdmFsdWUpO1xyXG4gICAgfTtcclxuICAgIEFzeW5jT2JzZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZUV2ZW50KHRoaXMub2JzZXJ2ZXIuZXJyb3IsIGVycm9yKTtcclxuICAgIH07XHJcbiAgICBBc3luY09ic2VydmVyLnByb3RvdHlwZS5tdXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubXV0ZWQgPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIEFzeW5jT2JzZXJ2ZXIucHJvdG90eXBlLnNjaGVkdWxlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnRIYW5kbGVyLCBldmVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLm11dGVkKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5tdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlcihldmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQXN5bmNPYnNlcnZlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIFRoZSBvYmplY3RzIHRoYXQgYXJlIGEgcGFydCBvZiB0aGlzIEFQSSBhcmUgZXhwb3NlZCB0byB0aGlyZC1wYXJ0aWVzIGFzXHJcbi8vIGNvbXBpbGVkIGphdmFzY3JpcHQgc28gd2Ugd2FudCB0byBmbGFnIG91ciBwcml2YXRlIG1lbWJlcnMgd2l0aCBhIGxlYWRpbmdcclxuLy8gdW5kZXJzY29yZSB0byBkaXNjb3VyYWdlIHRoZWlyIHVzZS5cclxuLy8gdHNsaW50OmRpc2FibGU6c3RyaXAtcHJpdmF0ZS1wcm9wZXJ0eS11bmRlcnNjb3JlXHJcbi8qKlxyXG4gKiBBIEZpZWxkUGF0aCByZWZlcnMgdG8gYSBmaWVsZCBpbiBhIGRvY3VtZW50LiBUaGUgcGF0aCBtYXkgY29uc2lzdCBvZiBhIHNpbmdsZVxyXG4gKiBmaWVsZCBuYW1lIChyZWZlcnJpbmcgdG8gYSB0b3AtbGV2ZWwgZmllbGQgaW4gdGhlIGRvY3VtZW50KSwgb3IgYSBsaXN0IG9mXHJcbiAqIGZpZWxkIG5hbWVzIChyZWZlcnJpbmcgdG8gYSBuZXN0ZWQgZmllbGQgaW4gdGhlIGRvY3VtZW50KS5cclxuICovXHJcbnZhciBGaWVsZFBhdGgkMSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIEZpZWxkUGF0aCBmcm9tIHRoZSBwcm92aWRlZCBmaWVsZCBuYW1lcy4gSWYgbW9yZSB0aGFuIG9uZSBmaWVsZFxyXG4gICAgICogbmFtZSBpcyBwcm92aWRlZCwgdGhlIHBhdGggd2lsbCBwb2ludCB0byBhIG5lc3RlZCBmaWVsZCBpbiBhIGRvY3VtZW50LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmaWVsZE5hbWVzIEEgbGlzdCBvZiBmaWVsZCBuYW1lcy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRmllbGRQYXRoJCQxKCkge1xyXG4gICAgICAgIHZhciBmaWVsZE5hbWVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgZmllbGROYW1lc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWxpZGF0ZU5hbWVkQXJyYXlBdExlYXN0TnVtYmVyT2ZFbGVtZW50cygnRmllbGRQYXRoJywgZmllbGROYW1lcywgJ2ZpZWxkTmFtZXMnLCAxKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkTmFtZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVBcmdUeXBlKCdGaWVsZFBhdGgnLCAnc3RyaW5nJywgaSwgZmllbGROYW1lc1tpXSk7XHJcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWVzW2ldLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIGZpZWxkIG5hbWUgYXQgYXJndW1lbnQgJChpICsgMSkuIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAnRmllbGQgbmFtZXMgbXVzdCBub3QgYmUgZW1wdHkuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faW50ZXJuYWxQYXRoID0gbmV3IEZpZWxkUGF0aChmaWVsZE5hbWVzKTtcclxuICAgIH1cclxuICAgIEZpZWxkUGF0aCQkMS5kb2N1bWVudElkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBGaWVsZFBhdGgkJDEuX0RPQ1VNRU5UX0lEO1xyXG4gICAgfTtcclxuICAgIEZpZWxkUGF0aCQkMS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgRmllbGRQYXRoJCQxKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2xhc3NFcnJvcignaXNFcXVhbCcsICdGaWVsZFBhdGgnLCAxLCBvdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbFBhdGguaXNFcXVhbChvdGhlci5faW50ZXJuYWxQYXRoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludGVybmFsIE5vdGU6IFRoZSBiYWNrZW5kIGRvZXNuJ3QgdGVjaG5pY2FsbHkgc3VwcG9ydCBxdWVyeWluZyBieVxyXG4gICAgICogZG9jdW1lbnQgSUQuIEluc3RlYWQgaXQgcXVlcmllcyBieSB0aGUgZW50aXJlIGRvY3VtZW50IG5hbWUgKGZ1bGwgcGF0aFxyXG4gICAgICogaW5jbHVkZWQpLCBidXQgaW4gdGhlIGNhc2VzIHdlIGN1cnJlbnRseSBzdXBwb3J0IGRvY3VtZW50SWQoKSwgdGhlIG5ldFxyXG4gICAgICogZWZmZWN0IGlzIHRoZSBzYW1lLlxyXG4gICAgICovXHJcbiAgICBGaWVsZFBhdGgkJDEuX0RPQ1VNRU5UX0lEID0gbmV3IEZpZWxkUGF0aCQkMShGaWVsZFBhdGgua2V5RmllbGQoKS5jYW5vbmljYWxTdHJpbmcoKSk7XHJcbiAgICByZXR1cm4gRmllbGRQYXRoJCQxO1xyXG59KCkpO1xyXG4vKipcclxuICogTWF0Y2hlcyBhbnkgY2hhcmFjdGVycyBpbiBhIGZpZWxkIHBhdGggc3RyaW5nIHRoYXQgYXJlIHJlc2VydmVkLlxyXG4gKi9cclxudmFyIFJFU0VSVkVEID0gbmV3IFJlZ0V4cCgnW35cXFxcKi9cXFxcW1xcXFxdXScpO1xyXG4vKipcclxuICogUGFyc2VzIGEgZmllbGQgcGF0aCBzdHJpbmcgaW50byBhIEZpZWxkUGF0aCwgdHJlYXRpbmcgZG90cyBhcyBzZXBhcmF0b3JzLlxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbURvdFNlcGFyYXRlZFN0cmluZyhwYXRoKSB7XHJcbiAgICB2YXIgZm91bmQgPSBwYXRoLnNlYXJjaChSRVNFUlZFRCk7XHJcbiAgICBpZiAoZm91bmQgPj0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBmaWVsZCBwYXRoIChcIiArIHBhdGggKyBcIikuIFBhdGhzIG11c3Qgbm90IGNvbnRhaW4gXCIgK1xyXG4gICAgICAgICAgICBcIid+JywgJyonLCAnLycsICdbJywgb3IgJ10nXCIpO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gbmV3IChGaWVsZFBhdGgkMS5iaW5kLmFwcGx5KEZpZWxkUGF0aCQxLCBbdm9pZCAwXS5jb25jYXQocGF0aC5zcGxpdCgnLicpKSkpKCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBmaWVsZCBwYXRoIChcIiArIHBhdGggKyBcIikuIFBhdGhzIG11c3Qgbm90IGJlIGVtcHR5LCBcIiArXHJcbiAgICAgICAgICAgIFwiYmVnaW4gd2l0aCAnLicsIGVuZCB3aXRoICcuJywgb3IgY29udGFpbiAnLi4nXCIpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgT0F1dGhUb2tlbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9BdXRoVG9rZW4odmFsdWUsIHVzZXIpIHtcclxuICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xyXG4gICAgICAgIHRoaXMudHlwZSA9ICdPQXV0aCc7XHJcbiAgICAgICAgdGhpcy5hdXRoSGVhZGVycyA9IHsgQXV0aG9yaXphdGlvbjogXCJCZWFyZXIgXCIgKyB2YWx1ZSB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9BdXRoVG9rZW47XHJcbn0oKSk7XHJcbi8qKiBBIENyZWRlbnRpYWxzUHJvdmlkZXIgdGhhdCBhbHdheXMgeWllbGRzIGFuIGVtcHR5IHRva2VuLiAqL1xyXG52YXIgRW1wdHlDcmVkZW50aWFsc1Byb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRW1wdHlDcmVkZW50aWFsc1Byb3ZpZGVyKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFN0b3JlcyB0aGUgbGlzdGVuZXIgcmVnaXN0ZXJlZCB3aXRoIHNldENoYW5nZUxpc3RlbmVyKClcclxuICAgICAgICAgKiBUaGlzIGlzbid0IGFjdHVhbGx5IG5lY2Vzc2FyeSBzaW5jZSB0aGUgVUlEIG5ldmVyIGNoYW5nZXMsIGJ1dCB3ZSB1c2UgdGhpc1xyXG4gICAgICAgICAqIHRvIHZlcmlmeSB0aGUgbGlzdGVuIGNvbnRyYWN0IGlzIGFkaGVyZWQgdG8gaW4gdGVzdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW5lciA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBFbXB0eUNyZWRlbnRpYWxzUHJvdmlkZXIucHJvdG90eXBlLmdldFRva2VuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICB9O1xyXG4gICAgRW1wdHlDcmVkZW50aWFsc1Byb3ZpZGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlVG9rZW4gPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICBFbXB0eUNyZWRlbnRpYWxzUHJvdmlkZXIucHJvdG90eXBlLnNldENoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKGNoYW5nZUxpc3RlbmVyKSB7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLmNoYW5nZUxpc3RlbmVyLCAnQ2FuIG9ubHkgY2FsbCBzZXRDaGFuZ2VMaXN0ZW5lcigpIG9uY2UuJyk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW5lciA9IGNoYW5nZUxpc3RlbmVyO1xyXG4gICAgICAgIC8vIEZpcmUgd2l0aCBpbml0aWFsIHVzZXIuXHJcbiAgICAgICAgY2hhbmdlTGlzdGVuZXIoVXNlci5VTkFVVEhFTlRJQ0FURUQpO1xyXG4gICAgfTtcclxuICAgIEVtcHR5Q3JlZGVudGlhbHNQcm92aWRlci5wcm90b3R5cGUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuY2hhbmdlTGlzdGVuZXIgIT09IG51bGwsICdyZW1vdmVDaGFuZ2VMaXN0ZW5lcigpIHdoZW4gbm8gbGlzdGVuZXIgcmVnaXN0ZXJlZCcpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXIgPSBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFbXB0eUNyZWRlbnRpYWxzUHJvdmlkZXI7XHJcbn0oKSk7XHJcbnZhciBGaXJlYmFzZUNyZWRlbnRpYWxzUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaXJlYmFzZUNyZWRlbnRpYWxzUHJvdmlkZXIoYXBwKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYXV0aCB0b2tlbiBsaXN0ZW5lciByZWdpc3RlcmVkIHdpdGggRmlyZWJhc2VBcHAsIHJldGFpbmVkIGhlcmUgc28gd2VcclxuICAgICAgICAgKiBjYW4gdW5yZWdpc3RlciBpdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnRva2VuTGlzdGVuZXIgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvdW50ZXIgdXNlZCB0byBkZXRlY3QgaWYgdGhlIHRva2VuIGNoYW5nZWQgd2hpbGUgYSBnZXRUb2tlbiByZXF1ZXN0IHdhc1xyXG4gICAgICAgICAqIG91dHN0YW5kaW5nLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudG9rZW5Db3VudGVyID0gMDtcclxuICAgICAgICAvKiogVGhlIGxpc3RlbmVyIHJlZ2lzdGVyZWQgd2l0aCBzZXRDaGFuZ2VMaXN0ZW5lcigpLiAqL1xyXG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZm9yY2VSZWZyZXNoID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50b2tlbkxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy50b2tlbkNvdW50ZXIrKztcclxuICAgICAgICAgICAgX3RoaXMuY3VycmVudFVzZXIgPSBfdGhpcy5nZXRVc2VyKCk7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5jaGFuZ2VMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlTGlzdGVuZXIoX3RoaXMuY3VycmVudFVzZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnRva2VuQ291bnRlciA9IDA7XHJcbiAgICAgICAgLy8gV2lsbCBmaXJlIGF0IGxlYXN0IG9uY2Ugd2hlcmUgd2Ugc2V0IHRoaXMuY3VycmVudFVzZXJcclxuICAgICAgICB0aGlzLmFwcC5JTlRFUk5BTC5hZGRBdXRoVG9rZW5MaXN0ZW5lcih0aGlzLnRva2VuTGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgRmlyZWJhc2VDcmVkZW50aWFsc1Byb3ZpZGVyLnByb3RvdHlwZS5nZXRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnRva2VuTGlzdGVuZXIgIT0gbnVsbCwgJ2dldFRva2VuIGNhbm5vdCBiZSBjYWxsZWQgYWZ0ZXIgbGlzdGVuZXIgcmVtb3ZlZC4nKTtcclxuICAgICAgICAvLyBUYWtlIG5vdGUgb2YgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHRva2VuQ291bnRlciBzbyB0aGF0IHRoaXMgbWV0aG9kXHJcbiAgICAgICAgLy8gY2FuIGZhaWwgKHdpdGggYW4gQUJPUlRFRCBlcnJvcikgaWYgdGhlcmUgaXMgYSB0b2tlbiBjaGFuZ2Ugd2hpbGUgdGhlXHJcbiAgICAgICAgLy8gcmVxdWVzdCBpcyBvdXRzdGFuZGluZy5cclxuICAgICAgICB2YXIgaW5pdGlhbFRva2VuQ291bnRlciA9IHRoaXMudG9rZW5Db3VudGVyO1xyXG4gICAgICAgIHZhciBmb3JjZVJlZnJlc2ggPSB0aGlzLmZvcmNlUmVmcmVzaDtcclxuICAgICAgICB0aGlzLmZvcmNlUmVmcmVzaCA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC5JTlRFUk5BTC5nZXRUb2tlbihmb3JjZVJlZnJlc2gpLnRoZW4oZnVuY3Rpb24gKHRva2VuRGF0YSkge1xyXG4gICAgICAgICAgICAvLyBDYW5jZWwgdGhlIHJlcXVlc3Qgc2luY2UgdGhlIHRva2VuIGNoYW5nZWQgd2hpbGUgdGhlIHJlcXVlc3Qgd2FzXHJcbiAgICAgICAgICAgIC8vIG91dHN0YW5kaW5nIHNvIHRoZSByZXNwb25zZSBpcyBwb3RlbnRpYWxseSBmb3IgYSBwcmV2aW91cyB1c2VyICh3aGljaFxyXG4gICAgICAgICAgICAvLyB1c2VyLCB3ZSBjYW4ndCBiZSBzdXJlKS5cclxuICAgICAgICAgICAgaWYgKF90aGlzLnRva2VuQ291bnRlciAhPT0gaW5pdGlhbFRva2VuQ291bnRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuQUJPUlRFRCwgJ2dldFRva2VuIGFib3J0ZWQgZHVlIHRvIHRva2VuIGNoYW5nZS4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbkRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQodHlwZW9mIHRva2VuRGF0YS5hY2Nlc3NUb2tlbiA9PT0gJ3N0cmluZycsICdJbnZhbGlkIHRva2VuRGF0YSByZXR1cm5lZCBmcm9tIGdldFRva2VuKCk6JyArIHRva2VuRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPQXV0aFRva2VuKHRva2VuRGF0YS5hY2Nlc3NUb2tlbiwgX3RoaXMuY3VycmVudFVzZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGaXJlYmFzZUNyZWRlbnRpYWxzUHJvdmlkZXIucHJvdG90eXBlLmludmFsaWRhdGVUb2tlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmZvcmNlUmVmcmVzaCA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgRmlyZWJhc2VDcmVkZW50aWFsc1Byb3ZpZGVyLnByb3RvdHlwZS5zZXRDaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uIChjaGFuZ2VMaXN0ZW5lcikge1xyXG4gICAgICAgIGFzc2VydCghdGhpcy5jaGFuZ2VMaXN0ZW5lciwgJ0NhbiBvbmx5IGNhbGwgc2V0Q2hhbmdlTGlzdGVuZXIoKSBvbmNlLicpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXIgPSBjaGFuZ2VMaXN0ZW5lcjtcclxuICAgICAgICAvLyBGaXJlIHRoZSBpbml0aWFsIGV2ZW50LCBidXQgb25seSBpZiB3ZSByZWNlaXZlZCB0aGUgaW5pdGlhbCB1c2VyXHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFVzZXIpIHtcclxuICAgICAgICAgICAgY2hhbmdlTGlzdGVuZXIodGhpcy5jdXJyZW50VXNlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZpcmViYXNlQ3JlZGVudGlhbHNQcm92aWRlci5wcm90b3R5cGUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMudG9rZW5MaXN0ZW5lciAhPSBudWxsLCAncmVtb3ZlQ2hhbmdlTGlzdGVuZXIoKSBjYWxsZWQgdHdpY2UnKTtcclxuICAgICAgICBhc3NlcnQodGhpcy5jaGFuZ2VMaXN0ZW5lciAhPT0gbnVsbCwgJ3JlbW92ZUNoYW5nZUxpc3RlbmVyKCkgY2FsbGVkIHdoZW4gbm8gbGlzdGVuZXIgcmVnaXN0ZXJlZCcpO1xyXG4gICAgICAgIHRoaXMuYXBwLklOVEVSTkFMLnJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyKHRoaXMudG9rZW5MaXN0ZW5lcik7XHJcbiAgICAgICAgdGhpcy50b2tlbkxpc3RlbmVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNoYW5nZUxpc3RlbmVyID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBGaXJlYmFzZUNyZWRlbnRpYWxzUHJvdmlkZXIucHJvdG90eXBlLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRVaWQgPSB0aGlzLmFwcC5JTlRFUk5BTC5nZXRVaWQoKTtcclxuICAgICAgICBhc3NlcnQoY3VycmVudFVpZCA9PT0gbnVsbCB8fCB0eXBlb2YgY3VycmVudFVpZCA9PT0gJ3N0cmluZycsICdSZWNlaXZlZCBpbnZhbGlkIFVJRDogJyArIGN1cnJlbnRVaWQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVXNlcihjdXJyZW50VWlkKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlyZWJhc2VDcmVkZW50aWFsc1Byb3ZpZGVyO1xyXG59KCkpO1xyXG4vKlxyXG4gKiBGaXJzdFBhcnR5VG9rZW4gcHJvdmlkZXMgYSBmcmVzaCB0b2tlbiBlYWNoIHRpbWUgaXRzIHZhbHVlXHJcbiAqIGlzIHJlcXVlc3RlZCwgYmVjYXVzZSBpZiB0aGUgdG9rZW4gaXMgdG9vIG9sZCwgcmVxdWVzdHMgd2lsbCBiZSByZWplY3RlZC5cclxuICogVE9ETyhiLzMzMTQ3ODE4KSB0aGlzIGltcGxlbWVudGF0aW9uIHZpb2xhdGVzIHRoZSBjdXJyZW50IGFzc3VtcHRpb24gdGhhdFxyXG4gKiB0b2tlbnMgYXJlIGltbXV0YWJsZS4gIFdlIG5lZWQgdG8gZWl0aGVyIHJldmlzaXQgdGhpcyBhc3N1bXB0aW9uIG9yIGNvbWVcclxuICogdXAgd2l0aCBzb21lIHdheSBmb3IgRlBBIHRvIHVzZSB0aGUgbGlzdGVuL3VubGlzdGVuIGludGVyZmFjZS5cclxuICovXHJcbnZhciBGaXJzdFBhcnR5VG9rZW4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaXJzdFBhcnR5VG9rZW4oZ2FwaSwgc2Vzc2lvbkluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5nYXBpID0gZ2FwaTtcclxuICAgICAgICB0aGlzLnNlc3Npb25JbmRleCA9IHNlc3Npb25JbmRleDtcclxuICAgICAgICB0aGlzLnR5cGUgPSAnRmlyc3RQYXJ0eSc7XHJcbiAgICAgICAgdGhpcy51c2VyID0gVXNlci5GSVJTVF9QQVJUWTtcclxuICAgICAgICBhc3NlcnQodGhpcy5nYXBpICYmXHJcbiAgICAgICAgICAgIHRoaXMuZ2FwaVsnYXV0aCddICYmXHJcbiAgICAgICAgICAgIHRoaXMuZ2FwaVsnYXV0aCddWydnZXRBdXRoSGVhZGVyVmFsdWVGb3JGaXJzdFBhcnR5J10sICd1bmV4cGVjdGVkIGdhcGkgaW50ZXJmYWNlJyk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyc3RQYXJ0eVRva2VuLnByb3RvdHlwZSwgXCJhdXRoSGVhZGVyc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiB0aGlzLmdhcGlbJ2F1dGgnXVsnZ2V0QXV0aEhlYWRlclZhbHVlRm9yRmlyc3RQYXJ0eSddKFtdKSxcclxuICAgICAgICAgICAgICAgICdYLUdvb2ctQXV0aFVzZXInOiB0aGlzLnNlc3Npb25JbmRleFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEZpcnN0UGFydHlUb2tlbjtcclxufSgpKTtcclxuLypcclxuICogUHJvdmlkZXMgdXNlciBjcmVkZW50aWFscyByZXF1aXJlZCBmb3IgdGhlIEZpcmVzdG9yZSBKYXZhU2NyaXB0IFNES1xyXG4gKiB0byBhdXRoZW50aWNhdGUgdGhlIHVzZXIsIHVzaW5nIHRlY2huaXF1ZSB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlXHJcbiAqIHRvIGFwcGxpY2F0aW9ucyBob3N0ZWQgYnkgR29vZ2xlLlxyXG4gKi9cclxudmFyIEZpcnN0UGFydHlDcmVkZW50aWFsc1Byb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlyc3RQYXJ0eUNyZWRlbnRpYWxzUHJvdmlkZXIoZ2FwaSwgc2Vzc2lvbkluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5nYXBpID0gZ2FwaTtcclxuICAgICAgICB0aGlzLnNlc3Npb25JbmRleCA9IHNlc3Npb25JbmRleDtcclxuICAgICAgICBhc3NlcnQodGhpcy5nYXBpICYmXHJcbiAgICAgICAgICAgIHRoaXMuZ2FwaVsnYXV0aCddICYmXHJcbiAgICAgICAgICAgIHRoaXMuZ2FwaVsnYXV0aCddWydnZXRBdXRoSGVhZGVyVmFsdWVGb3JGaXJzdFBhcnR5J10sICd1bmV4cGVjdGVkIGdhcGkgaW50ZXJmYWNlJyk7XHJcbiAgICB9XHJcbiAgICBGaXJzdFBhcnR5Q3JlZGVudGlhbHNQcm92aWRlci5wcm90b3R5cGUuZ2V0VG9rZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgRmlyc3RQYXJ0eVRva2VuKHRoaXMuZ2FwaSwgdGhpcy5zZXNzaW9uSW5kZXgpKTtcclxuICAgIH07XHJcbiAgICAvLyBUT0RPKDMzMTA4OTI1KTogY2FuIHNvbWVvbmUgc3dpdGNoIHVzZXJzIHcvbyBhIHBhZ2UgcmVmcmVzaD9cclxuICAgIC8vIFRPRE8oMzMxMTA2MjEpOiBuZWVkIHRvIHVuZGVyc3RhbmQgdG9rZW4vc2Vzc2lvbiBsaWZlY3ljbGVcclxuICAgIEZpcnN0UGFydHlDcmVkZW50aWFsc1Byb3ZpZGVyLnByb3RvdHlwZS5zZXRDaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uIChjaGFuZ2VMaXN0ZW5lcikge1xyXG4gICAgICAgIC8vIEZpcmUgd2l0aCBpbml0aWFsIHVpZC5cclxuICAgICAgICBjaGFuZ2VMaXN0ZW5lcihVc2VyLkZJUlNUX1BBUlRZKTtcclxuICAgIH07XHJcbiAgICBGaXJzdFBhcnR5Q3JlZGVudGlhbHNQcm92aWRlci5wcm90b3R5cGUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICBGaXJzdFBhcnR5Q3JlZGVudGlhbHNQcm92aWRlci5wcm90b3R5cGUuaW52YWxpZGF0ZVRva2VuID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgcmV0dXJuIEZpcnN0UGFydHlDcmVkZW50aWFsc1Byb3ZpZGVyO1xyXG59KCkpO1xyXG4vKipcclxuICogQnVpbGRzIGEgQ3JlZGVudGlhbHNQcm92aWRlciBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2ZcclxuICogdGhlIGNyZWRlbnRpYWxzIHBhc3NlZCBpbi5cclxuICovXHJcbmZ1bmN0aW9uIG1ha2VDcmVkZW50aWFsc1Byb3ZpZGVyKGNyZWRlbnRpYWxzKSB7XHJcbiAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFbXB0eUNyZWRlbnRpYWxzUHJvdmlkZXIoKTtcclxuICAgIH1cclxuICAgIHN3aXRjaCAoY3JlZGVudGlhbHMudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ2dhcGknOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZpcnN0UGFydHlDcmVkZW50aWFsc1Byb3ZpZGVyKGNyZWRlbnRpYWxzLmNsaWVudCwgY3JlZGVudGlhbHMuc2Vzc2lvbkluZGV4IHx8ICcwJyk7XHJcbiAgICAgICAgY2FzZSAncHJvdmlkZXInOlxyXG4gICAgICAgICAgICByZXR1cm4gY3JlZGVudGlhbHMuY2xpZW50O1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdtYWtlQ3JlZGVudGlhbHNQcm92aWRlciBmYWlsZWQgZHVlIHRvIGludmFsaWQgY3JlZGVudGlhbCB0eXBlJyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGlzUGFydGlhbE9ic2VydmVyKG9iaikge1xyXG4gICAgcmV0dXJuIGltcGxlbWVudHNBbnlNZXRob2RzJDEob2JqLCBbJ25leHQnLCAnZXJyb3InLCAnY29tcGxldGUnXSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYW4gb2JqZWN0IGFuZCBjb250YWlucyBhdCBsZWFzdCBvbmUgb2YgdGhlIHNwZWNpZmllZFxyXG4gKiBtZXRob2RzLlxyXG4gKi9cclxuZnVuY3Rpb24gaW1wbGVtZW50c0FueU1ldGhvZHMkMShvYmosIG1ldGhvZHMpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB2YXIgb2JqZWN0ID0gb2JqO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBtZXRob2RzXzEgPSBtZXRob2RzOyBfaSA8IG1ldGhvZHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgbWV0aG9kID0gbWV0aG9kc18xW19pXTtcclxuICAgICAgICBpZiAobWV0aG9kIGluIG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0W21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQW4gb3BhcXVlIGJhc2UgY2xhc3MgZm9yIEZpZWxkVmFsdWUgc2VudGluZWwgb2JqZWN0cyBpbiBvdXIgcHVibGljIEFQSSxcclxuICogd2l0aCBwdWJsaWMgc3RhdGljIG1ldGhvZHMgZm9yIGNyZWF0aW5nIHNhaWQgc2VudGluZWwgb2JqZWN0cy5cclxuICovXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjbGFzcy1hcy1uYW1lc3BhY2UgIFdlIHVzZSB0aGlzIGFzIGEgYmFzZSBjbGFzcy5cclxudmFyIEZpZWxkVmFsdWVJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmllbGRWYWx1ZUltcGwoX21ldGhvZE5hbWUpIHtcclxuICAgICAgICB0aGlzLl9tZXRob2ROYW1lID0gX21ldGhvZE5hbWU7XHJcbiAgICB9XHJcbiAgICBGaWVsZFZhbHVlSW1wbC5kZWxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIERlbGV0ZUZpZWxkVmFsdWVJbXBsLmluc3RhbmNlO1xyXG4gICAgfTtcclxuICAgIEZpZWxkVmFsdWVJbXBsLnNlcnZlclRpbWVzdGFtcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gU2VydmVyVGltZXN0YW1wRmllbGRWYWx1ZUltcGwuaW5zdGFuY2U7XHJcbiAgICB9O1xyXG4gICAgRmllbGRWYWx1ZUltcGwuYXJyYXlVbmlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBlbGVtZW50c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWxpZGF0ZUF0TGVhc3ROdW1iZXJPZkFyZ3MoJ0ZpZWxkVmFsdWUuYXJyYXlVbmlvbicsIGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgLy8gTk9URTogV2UgZG9uJ3QgYWN0dWFsbHkgcGFyc2UgdGhlIGRhdGEgdW50aWwgaXQncyB1c2VkIGluIHNldCgpIG9yXHJcbiAgICAgICAgLy8gdXBkYXRlKCkgc2luY2Ugd2UgbmVlZCBhY2Nlc3MgdG8gdGhlIEZpcmVzdG9yZSBpbnN0YW5jZS5cclxuICAgICAgICByZXR1cm4gbmV3IEFycmF5VW5pb25GaWVsZFZhbHVlSW1wbChlbGVtZW50cyk7XHJcbiAgICB9O1xyXG4gICAgRmllbGRWYWx1ZUltcGwuYXJyYXlSZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgZWxlbWVudHNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVBdExlYXN0TnVtYmVyT2ZBcmdzKCdGaWVsZFZhbHVlLmFycmF5UmVtb3ZlJywgYXJndW1lbnRzLCAxKTtcclxuICAgICAgICAvLyBOT1RFOiBXZSBkb24ndCBhY3R1YWxseSBwYXJzZSB0aGUgZGF0YSB1bnRpbCBpdCdzIHVzZWQgaW4gc2V0KCkgb3JcclxuICAgICAgICAvLyB1cGRhdGUoKSBzaW5jZSB3ZSBuZWVkIGFjY2VzcyB0byB0aGUgRmlyZXN0b3JlIGluc3RhbmNlLlxyXG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlSZW1vdmVGaWVsZFZhbHVlSW1wbChlbGVtZW50cyk7XHJcbiAgICB9O1xyXG4gICAgRmllbGRWYWx1ZUltcGwucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcyA9PT0gb3RoZXI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpZWxkVmFsdWVJbXBsO1xyXG59KCkpO1xyXG52YXIgRGVsZXRlRmllbGRWYWx1ZUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEZWxldGVGaWVsZFZhbHVlSW1wbCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERlbGV0ZUZpZWxkVmFsdWVJbXBsKCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCAnRmllbGRWYWx1ZS5kZWxldGUnKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqIFNpbmdsZXRvbiBpbnN0YW5jZS4gKi9cclxuICAgIERlbGV0ZUZpZWxkVmFsdWVJbXBsLmluc3RhbmNlID0gbmV3IERlbGV0ZUZpZWxkVmFsdWVJbXBsKCk7XHJcbiAgICByZXR1cm4gRGVsZXRlRmllbGRWYWx1ZUltcGw7XHJcbn0oRmllbGRWYWx1ZUltcGwpKTtcclxudmFyIFNlcnZlclRpbWVzdGFtcEZpZWxkVmFsdWVJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2VydmVyVGltZXN0YW1wRmllbGRWYWx1ZUltcGwsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBTZXJ2ZXJUaW1lc3RhbXBGaWVsZFZhbHVlSW1wbCgpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgJ0ZpZWxkVmFsdWUuc2VydmVyVGltZXN0YW1wJykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIC8qKiBTaW5nbGV0b24gaW5zdGFuY2UuICovXHJcbiAgICBTZXJ2ZXJUaW1lc3RhbXBGaWVsZFZhbHVlSW1wbC5pbnN0YW5jZSA9IG5ldyBTZXJ2ZXJUaW1lc3RhbXBGaWVsZFZhbHVlSW1wbCgpO1xyXG4gICAgcmV0dXJuIFNlcnZlclRpbWVzdGFtcEZpZWxkVmFsdWVJbXBsO1xyXG59KEZpZWxkVmFsdWVJbXBsKSk7XHJcbnZhciBBcnJheVVuaW9uRmllbGRWYWx1ZUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBcnJheVVuaW9uRmllbGRWYWx1ZUltcGwsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBcnJheVVuaW9uRmllbGRWYWx1ZUltcGwoX2VsZW1lbnRzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgJ0ZpZWxkVmFsdWUuYXJyYXlVbmlvbicpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuX2VsZW1lbnRzID0gX2VsZW1lbnRzO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBBcnJheVVuaW9uRmllbGRWYWx1ZUltcGw7XHJcbn0oRmllbGRWYWx1ZUltcGwpKTtcclxudmFyIEFycmF5UmVtb3ZlRmllbGRWYWx1ZUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBcnJheVJlbW92ZUZpZWxkVmFsdWVJbXBsLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQXJyYXlSZW1vdmVGaWVsZFZhbHVlSW1wbChfZWxlbWVudHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCAnRmllbGRWYWx1ZS5hcnJheVJlbW92ZScpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuX2VsZW1lbnRzID0gX2VsZW1lbnRzO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBBcnJheVJlbW92ZUZpZWxkVmFsdWVJbXBsO1xyXG59KEZpZWxkVmFsdWVJbXBsKSk7XHJcbi8vIFB1YmxpYyBpbnN0YW5jZSB0aGF0IGRpc2FsbG93cyBjb25zdHJ1Y3Rpb24gYXQgcnVudGltZS4gVGhpcyBjb25zdHJ1Y3RvciBpc1xyXG4vLyB1c2VkIHdoZW4gZXhwb3J0aW5nIEZpZWxkVmFsdWVJbXBsIG9uIGZpcmViYXNlLmZpcmVzdG9yZS5GaWVsZFZhbHVlIGFuZCB3aWxsXHJcbi8vIGJlIGNhbGxlZCBGaWVsZFZhbHVlIHB1YmxpY2x5LiBJbnRlcm5hbGx5IHdlIHN0aWxsIHVzZSBGaWVsZFZhbHVlSW1wbCB3aGljaFxyXG4vLyBoYXMgYSB0eXBlLWNoZWNrZWQgcHJpdmF0ZSBjb25zdHJ1Y3Rvci4gTm90ZSB0aGF0IEZpZWxkVmFsdWVJbXBsIGFuZFxyXG4vLyBQdWJsaWNGaWVsZFZhbHVlIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSBpbiBpbnN0YW5jZW9mIGNoZWNrcy5cclxuLy8gRm9yIG91ciBpbnRlcm5hbCBUeXBlU2NyaXB0IGNvZGUgUHVibGljRmllbGRWYWx1ZSBkb2Vzbid0IGV4aXN0IGFzIGEgdHlwZSxcclxuLy8gYW5kIHNvIHdlIG5lZWQgdG8gdXNlIEZpZWxkVmFsdWVJbXBsIGFzIHR5cGUgYW5kIGV4cG9ydCBpdCB0b28uXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lICBXZSB0cmVhdCB0aGlzIGFzIGEgY2xhc3MgbmFtZS5cclxudmFyIFB1YmxpY0ZpZWxkVmFsdWUgPSBtYWtlQ29uc3RydWN0b3JQcml2YXRlKEZpZWxkVmFsdWVJbXBsLCAnVXNlIEZpZWxkVmFsdWUuPGZpZWxkPigpIGluc3RlYWQuJyk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgUkVTRVJWRURfRklFTERfUkVHRVggPSAvXl9fLipfXyQvO1xyXG4vKiogVGhlIHJlc3VsdCBvZiBwYXJzaW5nIGRvY3VtZW50IGRhdGEgKGUuZy4gZm9yIGEgc2V0RGF0YSBjYWxsKS4gKi9cclxudmFyIFBhcnNlZFNldERhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQYXJzZWRTZXREYXRhKGRhdGEsIGZpZWxkTWFzaywgZmllbGRUcmFuc2Zvcm1zKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmZpZWxkTWFzayA9IGZpZWxkTWFzaztcclxuICAgICAgICB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IGZpZWxkVHJhbnNmb3JtcztcclxuICAgIH1cclxuICAgIFBhcnNlZFNldERhdGEucHJvdG90eXBlLnRvTXV0YXRpb25zID0gZnVuY3Rpb24gKGtleSwgcHJlY29uZGl0aW9uKSB7XHJcbiAgICAgICAgdmFyIG11dGF0aW9ucyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLmZpZWxkTWFzayAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBtdXRhdGlvbnMucHVzaChuZXcgUGF0Y2hNdXRhdGlvbihrZXksIHRoaXMuZGF0YSwgdGhpcy5maWVsZE1hc2ssIHByZWNvbmRpdGlvbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbXV0YXRpb25zLnB1c2gobmV3IFNldE11dGF0aW9uKGtleSwgdGhpcy5kYXRhLCBwcmVjb25kaXRpb24pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZmllbGRUcmFuc2Zvcm1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbXV0YXRpb25zLnB1c2gobmV3IFRyYW5zZm9ybU11dGF0aW9uKGtleSwgdGhpcy5maWVsZFRyYW5zZm9ybXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG11dGF0aW9ucztcclxuICAgIH07XHJcbiAgICByZXR1cm4gUGFyc2VkU2V0RGF0YTtcclxufSgpKTtcclxuLyoqIFRoZSByZXN1bHQgb2YgcGFyc2luZyBcInVwZGF0ZVwiIGRhdGEgKGkuZS4gZm9yIGFuIHVwZGF0ZURhdGEgY2FsbCkuICovXHJcbnZhciBQYXJzZWRVcGRhdGVEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGFyc2VkVXBkYXRlRGF0YShkYXRhLCBmaWVsZE1hc2ssIGZpZWxkVHJhbnNmb3Jtcykge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5maWVsZE1hc2sgPSBmaWVsZE1hc2s7XHJcbiAgICAgICAgdGhpcy5maWVsZFRyYW5zZm9ybXMgPSBmaWVsZFRyYW5zZm9ybXM7XHJcbiAgICB9XHJcbiAgICBQYXJzZWRVcGRhdGVEYXRhLnByb3RvdHlwZS50b011dGF0aW9ucyA9IGZ1bmN0aW9uIChrZXksIHByZWNvbmRpdGlvbikge1xyXG4gICAgICAgIHZhciBtdXRhdGlvbnMgPSBbXHJcbiAgICAgICAgICAgIG5ldyBQYXRjaE11dGF0aW9uKGtleSwgdGhpcy5kYXRhLCB0aGlzLmZpZWxkTWFzaywgcHJlY29uZGl0aW9uKVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgaWYgKHRoaXMuZmllbGRUcmFuc2Zvcm1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbXV0YXRpb25zLnB1c2gobmV3IFRyYW5zZm9ybU11dGF0aW9uKGtleSwgdGhpcy5maWVsZFRyYW5zZm9ybXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG11dGF0aW9ucztcclxuICAgIH07XHJcbiAgICByZXR1cm4gUGFyc2VkVXBkYXRlRGF0YTtcclxufSgpKTtcclxuLypcclxuICogUmVwcmVzZW50cyB3aGF0IHR5cGUgb2YgQVBJIG1ldGhvZCBwcm92aWRlZCB0aGUgZGF0YSBiZWluZyBwYXJzZWQ7IHVzZWZ1bFxyXG4gKiBmb3IgZGV0ZXJtaW5pbmcgd2hpY2ggZXJyb3IgY29uZGl0aW9ucyBhcHBseSBkdXJpbmcgcGFyc2luZyBhbmQgcHJvdmlkaW5nXHJcbiAqIGJldHRlciBlcnJvciBtZXNzYWdlcy5cclxuICovXHJcbnZhciBVc2VyRGF0YVNvdXJjZTtcclxuKGZ1bmN0aW9uIChVc2VyRGF0YVNvdXJjZSkge1xyXG4gICAgVXNlckRhdGFTb3VyY2VbVXNlckRhdGFTb3VyY2VbXCJTZXRcIl0gPSAwXSA9IFwiU2V0XCI7XHJcbiAgICBVc2VyRGF0YVNvdXJjZVtVc2VyRGF0YVNvdXJjZVtcIlVwZGF0ZVwiXSA9IDFdID0gXCJVcGRhdGVcIjtcclxuICAgIFVzZXJEYXRhU291cmNlW1VzZXJEYXRhU291cmNlW1wiTWVyZ2VTZXRcIl0gPSAyXSA9IFwiTWVyZ2VTZXRcIjtcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIHRoZSBzb3VyY2UgaXMgYSB3aGVyZSBjbGF1c2UsIGN1cnNvciBib3VuZCwgYXJyYXlVbmlvbigpXHJcbiAgICAgKiBlbGVtZW50LCBldGMuIE9mIG5vdGUsIGlzV3JpdGUoc291cmNlKSB3aWxsIHJldHVybiBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgVXNlckRhdGFTb3VyY2VbVXNlckRhdGFTb3VyY2VbXCJBcmd1bWVudFwiXSA9IDNdID0gXCJBcmd1bWVudFwiO1xyXG59KShVc2VyRGF0YVNvdXJjZSB8fCAoVXNlckRhdGFTb3VyY2UgPSB7fSkpO1xyXG5mdW5jdGlvbiBpc1dyaXRlKGRhdGFTb3VyY2UpIHtcclxuICAgIHN3aXRjaCAoZGF0YVNvdXJjZSkge1xyXG4gICAgICAgIGNhc2UgVXNlckRhdGFTb3VyY2UuU2V0OiAvLyBmYWxsIHRocm91Z2hcclxuICAgICAgICBjYXNlIFVzZXJEYXRhU291cmNlLk1lcmdlU2V0OiAvLyBmYWxsIHRocm91Z2hcclxuICAgICAgICBjYXNlIFVzZXJEYXRhU291cmNlLlVwZGF0ZTpcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgY2FzZSBVc2VyRGF0YVNvdXJjZS5Bcmd1bWVudDpcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IGZhaWwoXCJVbmV4cGVjdGVkIGNhc2UgZm9yIFVzZXJEYXRhU291cmNlOiBcIiArIGRhdGFTb3VyY2UpO1xyXG4gICAgfVxyXG59XHJcbi8qKiBBIFwiY29udGV4dFwiIG9iamVjdCBwYXNzZWQgYXJvdW5kIHdoaWxlIHBhcnNpbmcgdXNlciBkYXRhLiAqL1xyXG52YXIgUGFyc2VDb250ZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyBhIFBhcnNlQ29udGV4dCB3aXRoIHRoZSBnaXZlbiBzb3VyY2UgYW5kIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGRhdGFTb3VyY2UgSW5kaWNhdGVzIHdoYXQga2luZCBvZiBBUEkgbWV0aG9kIHRoaXMgZGF0YSBjYW1lIGZyb20uXHJcbiAgICAgKiBAcGFyYW0gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIHRoZSB1c2VyIGNhbGxlZCB0byBjcmVhdGUgdGhpc1xyXG4gICAgICogICAgIFBhcnNlQ29udGV4dC5cclxuICAgICAqIEBwYXJhbSBwYXRoIEEgcGF0aCB3aXRoaW4gdGhlIG9iamVjdCBiZWluZyBwYXJzZWQuIFRoaXMgY291bGQgYmUgYW4gZW1wdHlcclxuICAgICAqICAgICBwYXRoIChpbiB3aGljaCBjYXNlIHRoZSBjb250ZXh0IHJlcHJlc2VudHMgdGhlIHJvb3Qgb2YgdGhlIGRhdGEgYmVpbmdcclxuICAgICAqICAgICBwYXJzZWQpLCBvciBhIG5vbmVtcHR5IHBhdGggKGluZGljYXRpbmcgdGhlIGNvbnRleHQgcmVwcmVzZW50cyBhIG5lc3RlZFxyXG4gICAgICogICAgIGxvY2F0aW9uIHdpdGhpbiB0aGUgZGF0YSkuXHJcbiAgICAgKiBAcGFyYW0gYXJyYXlFbGVtZW50IFdoZXRoZXIgb3Igbm90IHRoaXMgY29udGV4dCBjb3JyZXNwb25kcyB0byBhbiBlbGVtZW50XHJcbiAgICAgKiAgICAgb2YgYW4gYXJyYXkuXHJcbiAgICAgKiBAcGFyYW0gZmllbGRUcmFuc2Zvcm1zIEEgbXV0YWJsZSBsaXN0IG9mIGZpZWxkIHRyYW5zZm9ybXMgZW5jb3VudGVyZWQgd2hpbGVcclxuICAgICAqICAgICBwYXJzaW5nIHRoZSBkYXRhLlxyXG4gICAgICogQHBhcmFtIGZpZWxkTWFzayBBIG11dGFibGUgbGlzdCBvZiBmaWVsZCBwYXRocyBlbmNvdW50ZXJlZCB3aGlsZSBwYXJzaW5nXHJcbiAgICAgKiAgICAgdGhlIGRhdGEuXHJcbiAgICAgKlxyXG4gICAgICogVE9ETyhiLzM0ODcxMTMxKTogV2UgZG9uJ3Qgc3VwcG9ydCBhcnJheSBwYXRocyByaWdodCBub3csIHNvIHBhdGggY2FuIGJlXHJcbiAgICAgKiBudWxsIHRvIGluZGljYXRlIHRoZSBjb250ZXh0IHJlcHJlc2VudHMgYW55IGxvY2F0aW9uIHdpdGhpbiBhbiBhcnJheSAoaW5cclxuICAgICAqIHdoaWNoIGNhc2UgY2VydGFpbiBmZWF0dXJlcyB3aWxsIG5vdCB3b3JrIGFuZCBlcnJvcnMgd2lsbCBiZSBzb21ld2hhdFxyXG4gICAgICogY29tcHJvbWlzZWQpLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBQYXJzZUNvbnRleHQoZGF0YVNvdXJjZSwgbWV0aG9kTmFtZSwgcGF0aCwgYXJyYXlFbGVtZW50LCBmaWVsZFRyYW5zZm9ybXMsIGZpZWxkTWFzaykge1xyXG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZSA9IGRhdGFTb3VyY2U7XHJcbiAgICAgICAgdGhpcy5tZXRob2ROYW1lID0gbWV0aG9kTmFtZTtcclxuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xyXG4gICAgICAgIHRoaXMuYXJyYXlFbGVtZW50ID0gYXJyYXlFbGVtZW50O1xyXG4gICAgICAgIC8vIE1pbm9yIGhhY2s6IElmIGZpZWxkVHJhbnNmb3JtcyBpcyB1bmRlZmluZWQsIHdlIGFzc3VtZSB0aGlzIGlzIGFuXHJcbiAgICAgICAgLy8gZXh0ZXJuYWwgY2FsbCBhbmQgd2UgbmVlZCB0byB2YWxpZGF0ZSB0aGUgZW50aXJlIHBhdGguXHJcbiAgICAgICAgaWYgKGZpZWxkVHJhbnNmb3JtcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVQYXRoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXJyYXlFbGVtZW50ID0gYXJyYXlFbGVtZW50ICE9PSB1bmRlZmluZWQgPyBhcnJheUVsZW1lbnQgOiBmYWxzZTtcclxuICAgICAgICB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IGZpZWxkVHJhbnNmb3JtcyB8fCBbXTtcclxuICAgICAgICB0aGlzLmZpZWxkTWFzayA9IGZpZWxkTWFzayB8fCBbXTtcclxuICAgIH1cclxuICAgIFBhcnNlQ29udGV4dC5wcm90b3R5cGUuY2hpbGRDb250ZXh0Rm9yRmllbGQgPSBmdW5jdGlvbiAoZmllbGQpIHtcclxuICAgICAgICB2YXIgY2hpbGRQYXRoID0gdGhpcy5wYXRoID09IG51bGwgPyBudWxsIDogdGhpcy5wYXRoLmNoaWxkKGZpZWxkKTtcclxuICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBQYXJzZUNvbnRleHQodGhpcy5kYXRhU291cmNlLCB0aGlzLm1ldGhvZE5hbWUsIGNoaWxkUGF0aCwgXHJcbiAgICAgICAgLyphcnJheUVsZW1lbnQ9Ki8gZmFsc2UsIHRoaXMuZmllbGRUcmFuc2Zvcm1zLCB0aGlzLmZpZWxkTWFzayk7XHJcbiAgICAgICAgY29udGV4dC52YWxpZGF0ZVBhdGhTZWdtZW50KGZpZWxkKTtcclxuICAgICAgICByZXR1cm4gY29udGV4dDtcclxuICAgIH07XHJcbiAgICBQYXJzZUNvbnRleHQucHJvdG90eXBlLmNoaWxkQ29udGV4dEZvckZpZWxkUGF0aCA9IGZ1bmN0aW9uIChmaWVsZCkge1xyXG4gICAgICAgIHZhciBjaGlsZFBhdGggPSB0aGlzLnBhdGggPT0gbnVsbCA/IG51bGwgOiB0aGlzLnBhdGguY2hpbGQoZmllbGQpO1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gbmV3IFBhcnNlQ29udGV4dCh0aGlzLmRhdGFTb3VyY2UsIHRoaXMubWV0aG9kTmFtZSwgY2hpbGRQYXRoLCBcclxuICAgICAgICAvKmFycmF5RWxlbWVudD0qLyBmYWxzZSwgdGhpcy5maWVsZFRyYW5zZm9ybXMsIHRoaXMuZmllbGRNYXNrKTtcclxuICAgICAgICBjb250ZXh0LnZhbGlkYXRlUGF0aCgpO1xyXG4gICAgICAgIHJldHVybiBjb250ZXh0O1xyXG4gICAgfTtcclxuICAgIFBhcnNlQ29udGV4dC5wcm90b3R5cGUuY2hpbGRDb250ZXh0Rm9yQXJyYXkgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAvLyBUT0RPKGIvMzQ4NzExMzEpOiBXZSBkb24ndCBzdXBwb3J0IGFycmF5IHBhdGhzIHJpZ2h0IG5vdzsgc28gbWFrZSBwYXRoXHJcbiAgICAgICAgLy8gbnVsbC5cclxuICAgICAgICByZXR1cm4gbmV3IFBhcnNlQ29udGV4dCh0aGlzLmRhdGFTb3VyY2UsIHRoaXMubWV0aG9kTmFtZSwgXHJcbiAgICAgICAgLypwYXRoPSovIG51bGwsIFxyXG4gICAgICAgIC8qYXJyYXlFbGVtZW50PSovIHRydWUsIHRoaXMuZmllbGRUcmFuc2Zvcm1zLCB0aGlzLmZpZWxkTWFzayk7XHJcbiAgICB9O1xyXG4gICAgUGFyc2VDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVFcnJvciA9IGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICB2YXIgZmllbGREZXNjcmlwdGlvbiA9IHRoaXMucGF0aCA9PT0gbnVsbCB8fCB0aGlzLnBhdGguaXNFbXB0eSgpXHJcbiAgICAgICAgICAgID8gJydcclxuICAgICAgICAgICAgOiBcIiAoZm91bmQgaW4gZmllbGQgXCIgKyB0aGlzLnBhdGgudG9TdHJpbmcoKSArIFwiKVwiO1xyXG4gICAgICAgIHJldHVybiBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgdGhpcy5tZXRob2ROYW1lICsgXCIoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGRhdGEuIFwiICtcclxuICAgICAgICAgICAgcmVhc29uICtcclxuICAgICAgICAgICAgZmllbGREZXNjcmlwdGlvbik7XHJcbiAgICB9O1xyXG4gICAgLyoqIFJldHVybnMgJ3RydWUnIGlmICdmaWVsZFBhdGgnIHdhcyB0cmF2ZXJzZWQgd2hlbiBjcmVhdGluZyB0aGlzIGNvbnRleHQuICovXHJcbiAgICBQYXJzZUNvbnRleHQucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKGZpZWxkUGF0aCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5maWVsZE1hc2suZmluZChmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIGZpZWxkUGF0aC5pc1ByZWZpeE9mKGZpZWxkKTsgfSkgIT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICB0aGlzLmZpZWxkVHJhbnNmb3Jtcy5maW5kKGZ1bmN0aW9uICh0cmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZFBhdGguaXNQcmVmaXhPZih0cmFuc2Zvcm0uZmllbGQpO1xyXG4gICAgICAgICAgICB9KSAhPT0gdW5kZWZpbmVkKTtcclxuICAgIH07XHJcbiAgICBQYXJzZUNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlUGF0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBUT0RPKGIvMzQ4NzExMzEpOiBSZW1vdmUgbnVsbCBjaGVjayBvbmNlIHdlIGhhdmUgcHJvcGVyIHBhdGhzIGZvciBmaWVsZHNcclxuICAgICAgICAvLyB3aXRoaW4gYXJyYXlzLlxyXG4gICAgICAgIGlmICh0aGlzLnBhdGggPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlUGF0aFNlZ21lbnQodGhpcy5wYXRoLmdldChpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBhcnNlQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVQYXRoU2VnbWVudCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XHJcbiAgICAgICAgaWYgKGlzV3JpdGUodGhpcy5kYXRhU291cmNlKSAmJiBSRVNFUlZFRF9GSUVMRF9SRUdFWC50ZXN0KHNlZ21lbnQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IHRoaXMuY3JlYXRlRXJyb3IoJ0RvY3VtZW50IGZpZWxkcyBjYW5ub3QgYmVnaW4gYW5kIGVuZCB3aXRoIF9fJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBQYXJzZUNvbnRleHQ7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBIHBsYWNlaG9sZGVyIG9iamVjdCBmb3IgRG9jdW1lbnRSZWZlcmVuY2VzIGluIHRoaXMgZmlsZSwgaW4gb3JkZXIgdG9cclxuICogYXZvaWQgYSBjaXJjdWxhciBkZXBlbmRlbmN5LiBTZWUgdGhlIGNvbW1lbnRzIGZvciBgRGF0YVByZUNvbnZlcnRlcmAgZm9yXHJcbiAqIHRoZSBmdWxsIGNvbnRleHQuXHJcbiAqL1xyXG52YXIgRG9jdW1lbnRLZXlSZWZlcmVuY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEb2N1bWVudEtleVJlZmVyZW5jZShkYXRhYmFzZUlkLCBrZXkpIHtcclxuICAgICAgICB0aGlzLmRhdGFiYXNlSWQgPSBkYXRhYmFzZUlkO1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERvY3VtZW50S2V5UmVmZXJlbmNlO1xyXG59KCkpO1xyXG4vKipcclxuICogSGVscGVyIGZvciBwYXJzaW5nIHJhdyB1c2VyIGlucHV0IChwcm92aWRlZCB2aWEgdGhlIEFQSSkgaW50byBpbnRlcm5hbCBtb2RlbFxyXG4gKiBjbGFzc2VzLlxyXG4gKi9cclxudmFyIFVzZXJEYXRhQ29udmVydGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVXNlckRhdGFDb252ZXJ0ZXIocHJlQ29udmVydGVyKSB7XHJcbiAgICAgICAgdGhpcy5wcmVDb252ZXJ0ZXIgPSBwcmVDb252ZXJ0ZXI7XHJcbiAgICB9XHJcbiAgICAvKiogUGFyc2UgZG9jdW1lbnQgZGF0YSBmcm9tIGEgbm9uLW1lcmdlIHNldCgpIGNhbGwuICovXHJcbiAgICBVc2VyRGF0YUNvbnZlcnRlci5wcm90b3R5cGUucGFyc2VTZXREYXRhID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGlucHV0KSB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgUGFyc2VDb250ZXh0KFVzZXJEYXRhU291cmNlLlNldCwgbWV0aG9kTmFtZSwgRmllbGRQYXRoLkVNUFRZX1BBVEgpO1xyXG4gICAgICAgIHZhbGlkYXRlUGxhaW5PYmplY3QoJ0RhdGEgbXVzdCBiZSBhbiBvYmplY3QsIGJ1dCBpdCB3YXM6JywgY29udGV4dCwgaW5wdXQpO1xyXG4gICAgICAgIHZhciB1cGRhdGVEYXRhID0gdGhpcy5wYXJzZURhdGEoaW5wdXQsIGNvbnRleHQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUGFyc2VkU2V0RGF0YSh1cGRhdGVEYXRhLCBcclxuICAgICAgICAvKiBmaWVsZE1hc2s9ICovIG51bGwsIGNvbnRleHQuZmllbGRUcmFuc2Zvcm1zKTtcclxuICAgIH07XHJcbiAgICAvKiogUGFyc2UgZG9jdW1lbnQgZGF0YSBmcm9tIGEgc2V0KCkgY2FsbCB3aXRoICd7bWVyZ2U6dHJ1ZX0nLiAqL1xyXG4gICAgVXNlckRhdGFDb252ZXJ0ZXIucHJvdG90eXBlLnBhcnNlTWVyZ2VEYXRhID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGlucHV0LCBmaWVsZFBhdGhzKSB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgUGFyc2VDb250ZXh0KFVzZXJEYXRhU291cmNlLk1lcmdlU2V0LCBtZXRob2ROYW1lLCBGaWVsZFBhdGguRU1QVFlfUEFUSCk7XHJcbiAgICAgICAgdmFsaWRhdGVQbGFpbk9iamVjdCgnRGF0YSBtdXN0IGJlIGFuIG9iamVjdCwgYnV0IGl0IHdhczonLCBjb250ZXh0LCBpbnB1dCk7XHJcbiAgICAgICAgdmFyIHVwZGF0ZURhdGEgPSB0aGlzLnBhcnNlRGF0YShpbnB1dCwgY29udGV4dCk7XHJcbiAgICAgICAgdmFyIGZpZWxkTWFzaztcclxuICAgICAgICB2YXIgZmllbGRUcmFuc2Zvcm1zO1xyXG4gICAgICAgIGlmICghZmllbGRQYXRocykge1xyXG4gICAgICAgICAgICBmaWVsZE1hc2sgPSBuZXcgRmllbGRNYXNrKGNvbnRleHQuZmllbGRNYXNrKTtcclxuICAgICAgICAgICAgZmllbGRUcmFuc2Zvcm1zID0gY29udGV4dC5maWVsZFRyYW5zZm9ybXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdmFsaWRhdGVkRmllbGRQYXRocyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGZpZWxkUGF0aHNfMSA9IGZpZWxkUGF0aHM7IF9pIDwgZmllbGRQYXRoc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZ09yRmllbGRQYXRoID0gZmllbGRQYXRoc18xW19pXTtcclxuICAgICAgICAgICAgICAgIHZhciBmaWVsZFBhdGggPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RyaW5nT3JGaWVsZFBhdGggaW5zdGFuY2VvZiBGaWVsZFBhdGgkMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aCA9IHN0cmluZ09yRmllbGRQYXRoLl9pbnRlcm5hbFBhdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc3RyaW5nT3JGaWVsZFBhdGggPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRQYXRoID0gZmllbGRQYXRoRnJvbURvdFNlcGFyYXRlZFN0cmluZyhtZXRob2ROYW1lLCBzdHJpbmdPckZpZWxkUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBmYWlsKCdFeHBlY3RlZCBzdHJpbmdPckZpZWxkUGF0aCB0byBiZSBhIHN0cmluZyBvciBhIEZpZWxkUGF0aCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0LmNvbnRhaW5zKGZpZWxkUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZpZWxkICdcIiArIGZpZWxkUGF0aCArIFwiJyBpcyBzcGVjaWZpZWQgaW4geW91ciBmaWVsZCBtYXNrIGJ1dCBtaXNzaW5nIGZyb20geW91ciBpbnB1dCBkYXRhLlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlZEZpZWxkUGF0aHMucHVzaChmaWVsZFBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpZWxkTWFzayA9IG5ldyBGaWVsZE1hc2sodmFsaWRhdGVkRmllbGRQYXRocyk7XHJcbiAgICAgICAgICAgIGZpZWxkVHJhbnNmb3JtcyA9IGNvbnRleHQuZmllbGRUcmFuc2Zvcm1zLmZpbHRlcihmdW5jdGlvbiAodHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmllbGRNYXNrLmNvdmVycyh0cmFuc2Zvcm0uZmllbGQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZWRTZXREYXRhKHVwZGF0ZURhdGEsIGZpZWxkTWFzaywgZmllbGRUcmFuc2Zvcm1zKTtcclxuICAgIH07XHJcbiAgICAvKiogUGFyc2UgdXBkYXRlIGRhdGEgZnJvbSBhbiB1cGRhdGUoKSBjYWxsLiAqL1xyXG4gICAgVXNlckRhdGFDb252ZXJ0ZXIucHJvdG90eXBlLnBhcnNlVXBkYXRlRGF0YSA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBpbnB1dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgUGFyc2VDb250ZXh0KFVzZXJEYXRhU291cmNlLlVwZGF0ZSwgbWV0aG9kTmFtZSwgRmllbGRQYXRoLkVNUFRZX1BBVEgpO1xyXG4gICAgICAgIHZhbGlkYXRlUGxhaW5PYmplY3QoJ0RhdGEgbXVzdCBiZSBhbiBvYmplY3QsIGJ1dCBpdCB3YXM6JywgY29udGV4dCwgaW5wdXQpO1xyXG4gICAgICAgIHZhciBmaWVsZE1hc2tQYXRocyA9IFtdO1xyXG4gICAgICAgIHZhciB1cGRhdGVEYXRhID0gT2JqZWN0VmFsdWUuRU1QVFk7XHJcbiAgICAgICAgZm9yRWFjaChpbnB1dCwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIHBhdGggPSBmaWVsZFBhdGhGcm9tRG90U2VwYXJhdGVkU3RyaW5nKG1ldGhvZE5hbWUsIGtleSk7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZENvbnRleHQgPSBjb250ZXh0LmNoaWxkQ29udGV4dEZvckZpZWxkUGF0aChwYXRoKTtcclxuICAgICAgICAgICAgdmFsdWUgPSBfdGhpcy5ydW5QcmVDb252ZXJ0ZXIodmFsdWUsIGNoaWxkQ29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERlbGV0ZUZpZWxkVmFsdWVJbXBsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgaXQgdG8gdGhlIGZpZWxkIG1hc2ssIGJ1dCBkb24ndCBhZGQgYW55dGhpbmcgdG8gdXBkYXRlRGF0YS5cclxuICAgICAgICAgICAgICAgIGZpZWxkTWFza1BhdGhzLnB1c2gocGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkVmFsdWUgPSBfdGhpcy5wYXJzZURhdGEodmFsdWUsIGNoaWxkQ29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkVmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkTWFza1BhdGhzLnB1c2gocGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YSA9IHVwZGF0ZURhdGEuc2V0KHBhdGgsIHBhcnNlZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBtYXNrID0gbmV3IEZpZWxkTWFzayhmaWVsZE1hc2tQYXRocyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZWRVcGRhdGVEYXRhKHVwZGF0ZURhdGEsIG1hc2ssIGNvbnRleHQuZmllbGRUcmFuc2Zvcm1zKTtcclxuICAgIH07XHJcbiAgICAvKiogUGFyc2UgdXBkYXRlIGRhdGEgZnJvbSBhIGxpc3Qgb2YgZmllbGQvdmFsdWUgYXJndW1lbnRzLiAqL1xyXG4gICAgVXNlckRhdGFDb252ZXJ0ZXIucHJvdG90eXBlLnBhcnNlVXBkYXRlVmFyYXJncyA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBmaWVsZCwgdmFsdWUsIG1vcmVGaWVsZHNBbmRWYWx1ZXMpIHtcclxuICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBQYXJzZUNvbnRleHQoVXNlckRhdGFTb3VyY2UuVXBkYXRlLCBtZXRob2ROYW1lLCBGaWVsZFBhdGguRU1QVFlfUEFUSCk7XHJcbiAgICAgICAgdmFyIGtleXMgPSBbZmllbGRQYXRoRnJvbUFyZ3VtZW50KG1ldGhvZE5hbWUsIGZpZWxkKV07XHJcbiAgICAgICAgdmFyIHZhbHVlcyA9IFt2YWx1ZV07XHJcbiAgICAgICAgaWYgKG1vcmVGaWVsZHNBbmRWYWx1ZXMubGVuZ3RoICUgMiAhPT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgbWV0aG9kTmFtZSArIFwiKCkgbmVlZHMgdG8gYmUgY2FsbGVkIHdpdGggYW4gZXZlbiBudW1iZXIgXCIgK1xyXG4gICAgICAgICAgICAgICAgJ29mIGFyZ3VtZW50cyB0aGF0IGFsdGVybmF0ZSBiZXR3ZWVuIGZpZWxkIG5hbWVzIGFuZCB2YWx1ZXMuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW9yZUZpZWxkc0FuZFZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgICAgICBrZXlzLnB1c2goZmllbGRQYXRoRnJvbUFyZ3VtZW50KG1ldGhvZE5hbWUsIG1vcmVGaWVsZHNBbmRWYWx1ZXNbaV0pKTtcclxuICAgICAgICAgICAgdmFsdWVzLnB1c2gobW9yZUZpZWxkc0FuZFZhbHVlc1tpICsgMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZmllbGRNYXNrUGF0aHMgPSBbXTtcclxuICAgICAgICB2YXIgdXBkYXRlRGF0YSA9IE9iamVjdFZhbHVlLkVNUFRZO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgcGF0aCA9IGtleXNbaV07XHJcbiAgICAgICAgICAgIHZhciBjaGlsZENvbnRleHQgPSBjb250ZXh0LmNoaWxkQ29udGV4dEZvckZpZWxkUGF0aChwYXRoKTtcclxuICAgICAgICAgICAgdmFyIHZhbHVlXzEgPSB0aGlzLnJ1blByZUNvbnZlcnRlcih2YWx1ZXNbaV0sIGNoaWxkQ29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZV8xIGluc3RhbmNlb2YgRGVsZXRlRmllbGRWYWx1ZUltcGwpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFkZCBpdCB0byB0aGUgZmllbGQgbWFzaywgYnV0IGRvbid0IGFkZCBhbnl0aGluZyB0byB1cGRhdGVEYXRhLlxyXG4gICAgICAgICAgICAgICAgZmllbGRNYXNrUGF0aHMucHVzaChwYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJzZWRWYWx1ZSA9IHRoaXMucGFyc2VEYXRhKHZhbHVlXzEsIGNoaWxkQ29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkVmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkTWFza1BhdGhzLnB1c2gocGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YSA9IHVwZGF0ZURhdGEuc2V0KHBhdGgsIHBhcnNlZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWFzayA9IG5ldyBGaWVsZE1hc2soZmllbGRNYXNrUGF0aHMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUGFyc2VkVXBkYXRlRGF0YSh1cGRhdGVEYXRhLCBtYXNrLCBjb250ZXh0LmZpZWxkVHJhbnNmb3Jtcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSBhIFwicXVlcnkgdmFsdWVcIiAoZS5nLiB2YWx1ZSBpbiBhIHdoZXJlIGZpbHRlciBvciBhIHZhbHVlIGluIGEgY3Vyc29yXHJcbiAgICAgKiBib3VuZCkuXHJcbiAgICAgKi9cclxuICAgIFVzZXJEYXRhQ29udmVydGVyLnByb3RvdHlwZS5wYXJzZVF1ZXJ5VmFsdWUgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgaW5wdXQpIHtcclxuICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBQYXJzZUNvbnRleHQoVXNlckRhdGFTb3VyY2UuQXJndW1lbnQsIG1ldGhvZE5hbWUsIEZpZWxkUGF0aC5FTVBUWV9QQVRIKTtcclxuICAgICAgICB2YXIgcGFyc2VkID0gdGhpcy5wYXJzZURhdGEoaW5wdXQsIGNvbnRleHQpO1xyXG4gICAgICAgIGFzc2VydChwYXJzZWQgIT0gbnVsbCwgJ1BhcnNlZCBkYXRhIHNob3VsZCBub3QgYmUgbnVsbC4nKTtcclxuICAgICAgICBhc3NlcnQoY29udGV4dC5maWVsZFRyYW5zZm9ybXMubGVuZ3RoID09PSAwLCAnRmllbGQgdHJhbnNmb3JtcyBzaG91bGQgaGF2ZSBiZWVuIGRpc2FsbG93ZWQuJyk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcclxuICAgIH07XHJcbiAgICAvKiogU2VuZHMgZGF0YSB0aHJvdWdoIHRoaXMucHJlQ29udmVydGVyLCBoYW5kbGluZyBhbnkgdGhyb3duIGVycm9ycy4gKi9cclxuICAgIFVzZXJEYXRhQ29udmVydGVyLnByb3RvdHlwZS5ydW5QcmVDb252ZXJ0ZXIgPSBmdW5jdGlvbiAoaW5wdXQsIGNvbnRleHQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmVDb252ZXJ0ZXIoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGVycm9yTWVzc2FnZShlKTtcclxuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5jcmVhdGVFcnJvcihtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnRlcm5hbCBoZWxwZXIgZm9yIHBhcnNpbmcgdXNlciBkYXRhLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBEYXRhIHRvIGJlIHBhcnNlZC5cclxuICAgICAqIEBwYXJhbSBjb250ZXh0IEEgY29udGV4dCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHBhdGggYmVpbmcgcGFyc2VkLFxyXG4gICAgICogdGhlIHNvdXJjZSBvZiB0aGUgZGF0YSBiZWluZyBwYXJzZWQsIGV0Yy5cclxuICAgICAqIEByZXR1cm4gVGhlIHBhcnNlZCB2YWx1ZSwgb3IgbnVsbCBpZiB0aGUgdmFsdWUgd2FzIGEgRmllbGRWYWx1ZSBzZW50aW5lbFxyXG4gICAgICogdGhhdCBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgcGFyc2VkIGRhdGEuXHJcbiAgICAgKi9cclxuICAgIFVzZXJEYXRhQ29udmVydGVyLnByb3RvdHlwZS5wYXJzZURhdGEgPSBmdW5jdGlvbiAoaW5wdXQsIGNvbnRleHQpIHtcclxuICAgICAgICBpbnB1dCA9IHRoaXMucnVuUHJlQ29udmVydGVyKGlucHV0LCBjb250ZXh0KTtcclxuICAgICAgICBpZiAobG9va3NMaWtlSnNvbk9iamVjdChpbnB1dCkpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVQbGFpbk9iamVjdCgnVW5zdXBwb3J0ZWQgZmllbGQgdmFsdWU6JywgY29udGV4dCwgaW5wdXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9iamVjdChpbnB1dCwgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlucHV0IGluc3RhbmNlb2YgRmllbGRWYWx1ZUltcGwpIHtcclxuICAgICAgICAgICAgLy8gRmllbGRWYWx1ZXMgdXN1YWxseSBwYXJzZSBpbnRvIHRyYW5zZm9ybXMgKGV4Y2VwdCBGaWVsZFZhbHVlLmRlbGV0ZSgpKVxyXG4gICAgICAgICAgICAvLyBpbiB3aGljaCBjYXNlIHdlIGRvIG5vdCB3YW50IHRvIGluY2x1ZGUgdGhpcyBmaWVsZCBpbiBvdXIgcGFyc2VkIGRhdGFcclxuICAgICAgICAgICAgLy8gKGFzIGRvaW5nIHNvIHdpbGwgb3ZlcndyaXRlIHRoZSBmaWVsZCBkaXJlY3RseSBwcmlvciB0byB0aGUgdHJhbnNmb3JtXHJcbiAgICAgICAgICAgIC8vIHRyeWluZyB0byB0cmFuc2Zvcm0gaXQpLiBTbyB3ZSBkb24ndCBhZGQgdGhpcyBsb2NhdGlvbiB0b1xyXG4gICAgICAgICAgICAvLyBjb250ZXh0LmZpZWxkTWFzayBhbmQgd2UgcmV0dXJuIG51bGwgYXMgb3VyIHBhcnNpbmcgcmVzdWx0LlxyXG4gICAgICAgICAgICB0aGlzLnBhcnNlU2VudGluZWxGaWVsZFZhbHVlKGlucHV0LCBjb250ZXh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBJZiBjb250ZXh0LnBhdGggaXMgbnVsbCB3ZSBhcmUgaW5zaWRlIGFuIGFycmF5IGFuZCB3ZSBkb24ndCBzdXBwb3J0XHJcbiAgICAgICAgICAgIC8vIGZpZWxkIG1hc2sgcGF0aHMgbW9yZSBncmFudWxhciB0aGFuIHRoZSB0b3AtbGV2ZWwgYXJyYXkuXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LnBhdGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmllbGRNYXNrLnB1c2goY29udGV4dC5wYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhiLzM0ODcxMTMxKTogSW5jbHVkZSB0aGUgcGF0aCBjb250YWluaW5nIHRoZSBhcnJheSBpbiB0aGUgZXJyb3JcclxuICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2UuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5hcnJheUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBjb250ZXh0LmNyZWF0ZUVycm9yKCdOZXN0ZWQgYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUFycmF5KGlucHV0LCBjb250ZXh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlU2NhbGFyVmFsdWUoaW5wdXQsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFVzZXJEYXRhQ29udmVydGVyLnByb3RvdHlwZS5wYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChvYmosIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgU29ydGVkTWFwKHByaW1pdGl2ZUNvbXBhcmF0b3IpO1xyXG4gICAgICAgIGlmIChpc0VtcHR5KG9iaikpIHtcclxuICAgICAgICAgICAgLy8gSWYgd2UgZW5jb3VudGVyIGFuIGVtcHR5IG9iamVjdCwgd2UgZXhwbGljaXRseSBhZGQgaXQgdG8gdGhlIHVwZGF0ZVxyXG4gICAgICAgICAgICAvLyBtYXNrIHRvIGVuc3VyZSB0aGF0IHRoZSBzZXJ2ZXIgY3JlYXRlcyBhIG1hcCBlbnRyeS5cclxuICAgICAgICAgICAgaWYgKGNvbnRleHQucGF0aCAmJiBjb250ZXh0LnBhdGgubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5maWVsZE1hc2sucHVzaChjb250ZXh0LnBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24gKGtleSwgdmFsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkVmFsdWUgPSBfdGhpcy5wYXJzZURhdGEodmFsLCBjb250ZXh0LmNoaWxkQ29udGV4dEZvckZpZWxkKGtleSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZFZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuaW5zZXJ0KGtleSwgcGFyc2VkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RWYWx1ZShyZXN1bHQpO1xyXG4gICAgfTtcclxuICAgIFVzZXJEYXRhQ29udmVydGVyLnByb3RvdHlwZS5wYXJzZUFycmF5ID0gZnVuY3Rpb24gKGFycmF5LCBjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIHZhciBlbnRyeUluZGV4ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFycmF5XzEgPSBhcnJheTsgX2kgPCBhcnJheV8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSBhcnJheV8xW19pXTtcclxuICAgICAgICAgICAgdmFyIHBhcnNlZEVudHJ5ID0gdGhpcy5wYXJzZURhdGEoZW50cnksIGNvbnRleHQuY2hpbGRDb250ZXh0Rm9yQXJyYXkoZW50cnlJbmRleCkpO1xyXG4gICAgICAgICAgICBpZiAocGFyc2VkRW50cnkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSnVzdCBpbmNsdWRlIG51bGxzIGluIHRoZSBhcnJheSBmb3IgZmllbGRzIGJlaW5nIHJlcGxhY2VkIHdpdGggYVxyXG4gICAgICAgICAgICAgICAgLy8gc2VudGluZWwuXHJcbiAgICAgICAgICAgICAgICBwYXJzZWRFbnRyeSA9IE51bGxWYWx1ZS5JTlNUQU5DRTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZWRFbnRyeSk7XHJcbiAgICAgICAgICAgIGVudHJ5SW5kZXgrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheVZhbHVlKHJlc3VsdCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBcIlBhcnNlc1wiIHRoZSBwcm92aWRlZCBGaWVsZFZhbHVlSW1wbCwgYWRkaW5nIGFueSBuZWNlc3NhcnkgdHJhbnNmb3JtcyB0b1xyXG4gICAgICogY29udGV4dC5maWVsZFRyYW5zZm9ybXMuXHJcbiAgICAgKi9cclxuICAgIFVzZXJEYXRhQ29udmVydGVyLnByb3RvdHlwZS5wYXJzZVNlbnRpbmVsRmllbGRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgY29udGV4dCkge1xyXG4gICAgICAgIC8vIFNlbnRpbmVscyBhcmUgb25seSBzdXBwb3J0ZWQgd2l0aCB3cml0ZXMsIGFuZCBub3Qgd2l0aGluIGFycmF5cy5cclxuICAgICAgICBpZiAoIWlzV3JpdGUoY29udGV4dC5kYXRhU291cmNlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmNyZWF0ZUVycm9yKHZhbHVlLl9tZXRob2ROYW1lICsgXCIoKSBjYW4gb25seSBiZSB1c2VkIHdpdGggdXBkYXRlKCkgYW5kIHNldCgpXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29udGV4dC5wYXRoID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuY3JlYXRlRXJyb3IodmFsdWUuX21ldGhvZE5hbWUgKyBcIigpIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluc2lkZSBhcnJheXNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERlbGV0ZUZpZWxkVmFsdWVJbXBsKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmRhdGFTb3VyY2UgPT09IFVzZXJEYXRhU291cmNlLk1lcmdlU2V0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBObyB0cmFuc2Zvcm0gdG8gYWRkIGZvciBhIGRlbGV0ZSwgYnV0IHdlIG5lZWQgdG8gYWRkIGl0IHRvIG91clxyXG4gICAgICAgICAgICAgICAgLy8gZmllbGRNYXNrIHNvIGl0IGdldHMgZGVsZXRlZC5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmllbGRNYXNrLnB1c2goY29udGV4dC5wYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb250ZXh0LmRhdGFTb3VyY2UgPT09IFVzZXJEYXRhU291cmNlLlVwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGNvbnRleHQucGF0aC5sZW5ndGggPiAwLCAnRmllbGRWYWx1ZS5kZWxldGUoKSBhdCB0aGUgdG9wIGxldmVsIHNob3VsZCBoYXZlIGFscmVhZHknICtcclxuICAgICAgICAgICAgICAgICAgICAnIGJlZW4gaGFuZGxlZC4nKTtcclxuICAgICAgICAgICAgICAgIHRocm93IGNvbnRleHQuY3JlYXRlRXJyb3IoJ0ZpZWxkVmFsdWUuZGVsZXRlKCkgY2FuIG9ubHkgYXBwZWFyIGF0IHRoZSB0b3AgbGV2ZWwgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ29mIHlvdXIgdXBkYXRlIGRhdGEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZG4ndCBlbmNvdW50ZXIgZGVsZXRlIHNlbnRpbmVscyBmb3IgcXVlcmllcyBvciBub24tbWVyZ2Ugc2V0KCkgY2FsbHMuXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBjb250ZXh0LmNyZWF0ZUVycm9yKCdGaWVsZFZhbHVlLmRlbGV0ZSgpIGNhbm5vdCBiZSB1c2VkIHdpdGggc2V0KCkgdW5sZXNzIHlvdSBwYXNzICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICd7bWVyZ2U6dHJ1ZX0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNlcnZlclRpbWVzdGFtcEZpZWxkVmFsdWVJbXBsKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmllbGRUcmFuc2Zvcm1zLnB1c2gobmV3IEZpZWxkVHJhbnNmb3JtKGNvbnRleHQucGF0aCwgU2VydmVyVGltZXN0YW1wVHJhbnNmb3JtLmluc3RhbmNlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlVbmlvbkZpZWxkVmFsdWVJbXBsKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJzZWRFbGVtZW50cyA9IHRoaXMucGFyc2VBcnJheVRyYW5zZm9ybUVsZW1lbnRzKHZhbHVlLl9tZXRob2ROYW1lLCB2YWx1ZS5fZWxlbWVudHMpO1xyXG4gICAgICAgICAgICB2YXIgYXJyYXlVbmlvbiA9IG5ldyBBcnJheVVuaW9uVHJhbnNmb3JtT3BlcmF0aW9uKHBhcnNlZEVsZW1lbnRzKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWVsZFRyYW5zZm9ybXMucHVzaChuZXcgRmllbGRUcmFuc2Zvcm0oY29udGV4dC5wYXRoLCBhcnJheVVuaW9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlSZW1vdmVGaWVsZFZhbHVlSW1wbCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyc2VkRWxlbWVudHMgPSB0aGlzLnBhcnNlQXJyYXlUcmFuc2Zvcm1FbGVtZW50cyh2YWx1ZS5fbWV0aG9kTmFtZSwgdmFsdWUuX2VsZW1lbnRzKTtcclxuICAgICAgICAgICAgdmFyIGFycmF5UmVtb3ZlID0gbmV3IEFycmF5UmVtb3ZlVHJhbnNmb3JtT3BlcmF0aW9uKHBhcnNlZEVsZW1lbnRzKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWVsZFRyYW5zZm9ybXMucHVzaChuZXcgRmllbGRUcmFuc2Zvcm0oY29udGV4dC5wYXRoLCBhcnJheVJlbW92ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZmFpbCgnVW5rbm93biBGaWVsZFZhbHVlIHR5cGU6ICcgKyB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIHRvIHBhcnNlIGEgc2NhbGFyIHZhbHVlIChpLmUuIG5vdCBhbiBPYmplY3QsIEFycmF5LCBvciBGaWVsZFZhbHVlKVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gVGhlIHBhcnNlZCB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBVc2VyRGF0YUNvbnZlcnRlci5wcm90b3R5cGUucGFyc2VTY2FsYXJWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgY29udGV4dCkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVsbFZhbHVlLklOU1RBTkNFO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1NhZmVJbnRlZ2VyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRlZ2VyVmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEb3VibGVWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW5WYWx1ZS5vZih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmdWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcFZhbHVlKFRpbWVzdGFtcC5mcm9tRGF0ZSh2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICAvLyBGaXJlc3RvcmUgYmFja2VuZCB0cnVuY2F0ZXMgcHJlY2lzaW9uIGRvd24gdG8gbWljcm9zZWNvbmRzLiBUbyBlbnN1cmVcclxuICAgICAgICAgICAgLy8gb2ZmbGluZSBtb2RlIHdvcmtzIHRoZSBzYW1lIHdpdGggcmVnYXJkcyB0byB0cnVuY2F0aW9uLCBwZXJmb3JtIHRoZVxyXG4gICAgICAgICAgICAvLyB0cnVuY2F0aW9uIGltbWVkaWF0ZWx5IHdpdGhvdXQgd2FpdGluZyBmb3IgdGhlIGJhY2tlbmQgdG8gZG8gdGhhdC5cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUaW1lc3RhbXBWYWx1ZShuZXcgVGltZXN0YW1wKHZhbHVlLnNlY29uZHMsIE1hdGguZmxvb3IodmFsdWUubmFub3NlY29uZHMgLyAxMDAwKSAqIDEwMDApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBHZW9Qb2ludCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdlb1BvaW50VmFsdWUodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEJsb2IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCbG9iVmFsdWUodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERvY3VtZW50S2V5UmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVmVmFsdWUodmFsdWUuZGF0YWJhc2VJZCwgdmFsdWUua2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuY3JlYXRlRXJyb3IoXCJVbnN1cHBvcnRlZCBmaWVsZCB2YWx1ZTogXCIgKyB2YWx1ZURlc2NyaXB0aW9uKHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFVzZXJEYXRhQ29udmVydGVyLnByb3RvdHlwZS5wYXJzZUFycmF5VHJhbnNmb3JtRWxlbWVudHMgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgZWxlbWVudHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQsIGkpIHtcclxuICAgICAgICAgICAgLy8gQWx0aG91Z2ggYXJyYXkgdHJhbnNmb3JtcyBhcmUgdXNlZCB3aXRoIHdyaXRlcywgdGhlIGFjdHVhbCBlbGVtZW50c1xyXG4gICAgICAgICAgICAvLyBiZWluZyB1bmlvbmVkIG9yIHJlbW92ZWQgYXJlIG5vdCBjb25zaWRlcmVkIHdyaXRlcyBzaW5jZSB0aGV5IGNhbm5vdFxyXG4gICAgICAgICAgICAvLyBjb250YWluIGFueSBGaWVsZFZhbHVlIHNlbnRpbmVscywgZXRjLlxyXG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBQYXJzZUNvbnRleHQoVXNlckRhdGFTb3VyY2UuQXJndW1lbnQsIG1ldGhvZE5hbWUsIEZpZWxkUGF0aC5FTVBUWV9QQVRIKTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnBhcnNlRGF0YShlbGVtZW50LCBjb250ZXh0LmNoaWxkQ29udGV4dEZvckFycmF5KGkpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVXNlckRhdGFDb252ZXJ0ZXI7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBhbiBvYmplY3QgbG9va3MgbGlrZSBhIEpTT04gb2JqZWN0IHRoYXQgc2hvdWxkIGJlIGNvbnZlcnRlZFxyXG4gKiBpbnRvIGEgc3RydWN0LiBOb3JtYWwgY2xhc3MvcHJvdG90eXBlIGluc3RhbmNlcyBhcmUgY29uc2lkZXJlZCB0byBsb29rIGxpa2VcclxuICogSlNPTiBvYmplY3RzIHNpbmNlIHRoZXkgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBhIHN0cnVjdCB2YWx1ZS4gQXJyYXlzLCBEYXRlcyxcclxuICogR2VvUG9pbnRzLCBldGMuIGFyZSBub3QgY29uc2lkZXJlZCB0byBsb29rIGxpa2UgSlNPTiBvYmplY3RzIHNpbmNlIHRoZXkgbWFwXHJcbiAqIHRvIHNwZWNpZmljIEZpZWxkVmFsdWUgdHlwZXMgb3RoZXIgdGhhbiBPYmplY3RWYWx1ZS5cclxuICovXHJcbmZ1bmN0aW9uIGxvb2tzTGlrZUpzb25PYmplY3QoaW5wdXQpIHtcclxuICAgIHJldHVybiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgIGlucHV0ICE9PSBudWxsICYmXHJcbiAgICAgICAgIShpbnB1dCBpbnN0YW5jZW9mIEFycmF5KSAmJlxyXG4gICAgICAgICEoaW5wdXQgaW5zdGFuY2VvZiBEYXRlKSAmJlxyXG4gICAgICAgICEoaW5wdXQgaW5zdGFuY2VvZiBUaW1lc3RhbXApICYmXHJcbiAgICAgICAgIShpbnB1dCBpbnN0YW5jZW9mIEdlb1BvaW50KSAmJlxyXG4gICAgICAgICEoaW5wdXQgaW5zdGFuY2VvZiBCbG9iKSAmJlxyXG4gICAgICAgICEoaW5wdXQgaW5zdGFuY2VvZiBEb2N1bWVudEtleVJlZmVyZW5jZSkgJiZcclxuICAgICAgICAhKGlucHV0IGluc3RhbmNlb2YgRmllbGRWYWx1ZUltcGwpKTtcclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZVBsYWluT2JqZWN0KG1lc3NhZ2UsIGNvbnRleHQsIGlucHV0KSB7XHJcbiAgICBpZiAoIWxvb2tzTGlrZUpzb25PYmplY3QoaW5wdXQpIHx8ICFpc1BsYWluT2JqZWN0KGlucHV0KSkge1xyXG4gICAgICAgIHZhciBkZXNjcmlwdGlvbiA9IHZhbHVlRGVzY3JpcHRpb24oaW5wdXQpO1xyXG4gICAgICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJ2FuIG9iamVjdCcpIHtcclxuICAgICAgICAgICAgLy8gTWFzc2FnZSB0aGUgZXJyb3IgaWYgaXQgd2FzIGFuIG9iamVjdC5cclxuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5jcmVhdGVFcnJvcihtZXNzYWdlICsgJyBhIGN1c3RvbSBvYmplY3QnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuY3JlYXRlRXJyb3IobWVzc2FnZSArICcgJyArIGRlc2NyaXB0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEhlbHBlciB0aGF0IGNhbGxzIGZyb21Eb3RTZXBhcmF0ZWRTdHJpbmcoKSBidXQgd3JhcHMgYW55IGVycm9yIHRocm93bi5cclxuICovXHJcbmZ1bmN0aW9uIGZpZWxkUGF0aEZyb21Bcmd1bWVudChtZXRob2ROYW1lLCBwYXRoKSB7XHJcbiAgICBpZiAocGF0aCBpbnN0YW5jZW9mIEZpZWxkUGF0aCQxKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGguX2ludGVybmFsUGF0aDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBmaWVsZFBhdGhGcm9tRG90U2VwYXJhdGVkU3RyaW5nKG1ldGhvZE5hbWUsIHBhdGgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSAnRmllbGQgcGF0aCBhcmd1bWVudHMgbXVzdCBiZSBvZiB0eXBlIHN0cmluZyBvciBGaWVsZFBhdGguJztcclxuICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgbWV0aG9kTmFtZSArIFwiKCkgY2FsbGVkIHdpdGggaW52YWxpZCBkYXRhLiBcIiArIG1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBXcmFwcyBmcm9tRG90U2VwYXJhdGVkU3RyaW5nIHdpdGggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCB0aGUgbWV0aG9kIHRoYXRcclxuICogd2FzIHRocm93bi5cclxuICogQHBhcmFtIG1ldGhvZE5hbWUgVGhlIHB1YmxpY2x5IHZpc2libGUgbWV0aG9kIG5hbWVcclxuICogQHBhcmFtIHBhdGggVGhlIGRvdC1zZXBhcmF0ZWQgc3RyaW5nIGZvcm0gb2YgYSBmaWVsZCBwYXRoIHdoaWNoIHdpbGwgYmUgc3BsaXRcclxuICogb24gZG90cy5cclxuICovXHJcbmZ1bmN0aW9uIGZpZWxkUGF0aEZyb21Eb3RTZXBhcmF0ZWRTdHJpbmcobWV0aG9kTmFtZSwgcGF0aCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gZnJvbURvdFNlcGFyYXRlZFN0cmluZyhwYXRoKS5faW50ZXJuYWxQYXRoO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICB2YXIgbWVzc2FnZSA9IGVycm9yTWVzc2FnZShlKTtcclxuICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFwiICsgbWV0aG9kTmFtZSArIFwiKCkgY2FsbGVkIHdpdGggaW52YWxpZCBkYXRhLiBcIiArIG1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBFeHRyYWN0cyB0aGUgbWVzc2FnZSBmcm9tIGEgY2F1Z2h0IGV4Y2VwdGlvbiwgd2hpY2ggc2hvdWxkIGJlIGFuIEVycm9yIG9iamVjdFxyXG4gKiB0aG91Z2ggSlMgZG9lc24ndCBndWFyYW50ZWUgdGhhdC5cclxuICovXHJcbmZ1bmN0aW9uIGVycm9yTWVzc2FnZShlcnJvcikge1xyXG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3IudG9TdHJpbmcoKTtcclxufVxuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gVGhlIG9iamVjdHMgdGhhdCBhcmUgYSBwYXJ0IG9mIHRoaXMgQVBJIGFyZSBleHBvc2VkIHRvIHRoaXJkLXBhcnRpZXMgYXNcclxuLy8gY29tcGlsZWQgamF2YXNjcmlwdCBzbyB3ZSB3YW50IHRvIGZsYWcgb3VyIHByaXZhdGUgbWVtYmVycyB3aXRoIGEgbGVhZGluZ1xyXG4vLyB1bmRlcnNjb3JlIHRvIGRpc2NvdXJhZ2UgdGhlaXIgdXNlLlxyXG4vLyB0c2xpbnQ6ZGlzYWJsZTpzdHJpcC1wcml2YXRlLXByb3BlcnR5LXVuZGVyc2NvcmVcclxuLy8gc2V0dGluZ3MoKSBkZWZhdWx0czpcclxudmFyIERFRkFVTFRfSE9TVCA9ICdmaXJlc3RvcmUuZ29vZ2xlYXBpcy5jb20nO1xyXG52YXIgREVGQVVMVF9TU0wgPSB0cnVlO1xyXG52YXIgREVGQVVMVF9USU1FU1RBTVBTX0lOX1NOQVBTSE9UUyA9IGZhbHNlO1xyXG4vLyBlbmFibGVQZXJzaXN0ZW5jZSgpIGRlZmF1bHRzOlxyXG52YXIgREVGQVVMVF9TWU5DSFJPTklaRV9UQUJTID0gZmFsc2U7XHJcbi8qKlxyXG4gKiBBIGNvbmNyZXRlIHR5cGUgZGVzY3JpYmluZyBhbGwgdGhlIHZhbHVlcyB0aGF0IGNhbiBiZSBhcHBsaWVkIHZpYSBhXHJcbiAqIHVzZXItc3VwcGxpZWQgZmlyZXN0b3JlLlNldHRpbmdzIG9iamVjdC4gVGhpcyBpcyBhIHNlcGFyYXRlIHR5cGUgc28gdGhhdFxyXG4gKiBkZWZhdWx0cyBjYW4gYmUgc3VwcGxpZWQgYW5kIHRoZSB2YWx1ZSBjYW4gYmUgY2hlY2tlZCBmb3IgZXF1YWxpdHkuXHJcbiAqL1xyXG52YXIgRmlyZXN0b3JlU2V0dGluZ3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaXJlc3RvcmVTZXR0aW5ncyhzZXR0aW5ncykge1xyXG4gICAgICAgIGlmIChzZXR0aW5ncy5ob3N0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLnNzbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkNhbid0IHByb3ZpZGUgc3NsIG9wdGlvbiBpZiBob3N0IG9wdGlvbiBpcyBub3Qgc2V0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdCA9IERFRkFVTFRfSE9TVDtcclxuICAgICAgICAgICAgdGhpcy5zc2wgPSBERUZBVUxUX1NTTDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlTmFtZWRUeXBlKCdzZXR0aW5ncycsICdub24tZW1wdHkgc3RyaW5nJywgJ2hvc3QnLCBzZXR0aW5ncy5ob3N0KTtcclxuICAgICAgICAgICAgdGhpcy5ob3N0ID0gc2V0dGluZ3MuaG9zdDtcclxuICAgICAgICAgICAgdmFsaWRhdGVOYW1lZE9wdGlvbmFsVHlwZSgnc2V0dGluZ3MnLCAnYm9vbGVhbicsICdzc2wnLCBzZXR0aW5ncy5zc2wpO1xyXG4gICAgICAgICAgICB0aGlzLnNzbCA9IGRlZmF1bHRlZChzZXR0aW5ncy5zc2wsIERFRkFVTFRfU1NMKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVPcHRpb25OYW1lcygnc2V0dGluZ3MnLCBzZXR0aW5ncywgW1xyXG4gICAgICAgICAgICAnaG9zdCcsXHJcbiAgICAgICAgICAgICdzc2wnLFxyXG4gICAgICAgICAgICAnY3JlZGVudGlhbHMnLFxyXG4gICAgICAgICAgICAndGltZXN0YW1wc0luU25hcHNob3RzJ1xyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIHZhbGlkYXRlTmFtZWRPcHRpb25hbFR5cGUoJ3NldHRpbmdzJywgJ29iamVjdCcsICdjcmVkZW50aWFscycsIHNldHRpbmdzLmNyZWRlbnRpYWxzKTtcclxuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzID0gc2V0dGluZ3MuY3JlZGVudGlhbHM7XHJcbiAgICAgICAgdmFsaWRhdGVOYW1lZE9wdGlvbmFsVHlwZSgnc2V0dGluZ3MnLCAnYm9vbGVhbicsICd0aW1lc3RhbXBzSW5TbmFwc2hvdHMnLCBzZXR0aW5ncy50aW1lc3RhbXBzSW5TbmFwc2hvdHMpO1xyXG4gICAgICAgIHRoaXMudGltZXN0YW1wc0luU25hcHNob3RzID0gZGVmYXVsdGVkKHNldHRpbmdzLnRpbWVzdGFtcHNJblNuYXBzaG90cywgREVGQVVMVF9USU1FU1RBTVBTX0lOX1NOQVBTSE9UUyk7XHJcbiAgICB9XHJcbiAgICBGaXJlc3RvcmVTZXR0aW5ncy5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5ob3N0ID09PSBvdGhlci5ob3N0ICYmXHJcbiAgICAgICAgICAgIHRoaXMuc3NsID09PSBvdGhlci5zc2wgJiZcclxuICAgICAgICAgICAgdGhpcy50aW1lc3RhbXBzSW5TbmFwc2hvdHMgPT09IG90aGVyLnRpbWVzdGFtcHNJblNuYXBzaG90cyAmJlxyXG4gICAgICAgICAgICB0aGlzLmNyZWRlbnRpYWxzID09PSBvdGhlci5jcmVkZW50aWFscyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpcmVzdG9yZVNldHRpbmdzO1xyXG59KCkpO1xyXG52YXIgRmlyZXN0b3JlQ29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlyZXN0b3JlQ29uZmlnKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEZpcmVzdG9yZUNvbmZpZztcclxufSgpKTtcclxuLyoqXHJcbiAqIEVuY2Fwc3VsYXRlcyB0aGUgc2V0dGluZ3MgdGhhdCBjYW4gYmUgdXNlZCB0byBjb25maWd1cmUgRmlyZXN0b3JlXHJcbiAqIHBlcnNpc3RlbmNlLlxyXG4gKi9cclxudmFyIFBlcnNpc3RlbmNlU2V0dGluZ3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQZXJzaXN0ZW5jZVNldHRpbmdzKGVuYWJsZWQsIHNldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZW5hYmxlZDtcclxuICAgICAgICBhc3NlcnQoZW5hYmxlZCB8fCAhc2V0dGluZ3MsICdDYW4gb25seSBwcm92aWRlIFBlcnNpc3RlbmNlU2V0dGluZ3Mgd2l0aCBwZXJzaXN0ZW5jZSBlbmFibGVkJyk7XHJcbiAgICAgICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB7fTtcclxuICAgICAgICB0aGlzLmV4cGVyaW1lbnRhbFRhYlN5bmNocm9uaXphdGlvbiA9IGRlZmF1bHRlZChzZXR0aW5ncy5leHBlcmltZW50YWxUYWJTeW5jaHJvbml6YXRpb24sIERFRkFVTFRfU1lOQ0hST05JWkVfVEFCUyk7XHJcbiAgICB9XHJcbiAgICBQZXJzaXN0ZW5jZVNldHRpbmdzLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmVuYWJsZWQgPT09IG90aGVyLmVuYWJsZWQgJiZcclxuICAgICAgICAgICAgdGhpcy5leHBlcmltZW50YWxUYWJTeW5jaHJvbml6YXRpb24gPT09XHJcbiAgICAgICAgICAgICAgICBvdGhlci5leHBlcmltZW50YWxUYWJTeW5jaHJvbml6YXRpb24pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQZXJzaXN0ZW5jZVNldHRpbmdzO1xyXG59KCkpO1xyXG4vKipcclxuICogVGhlIHJvb3QgcmVmZXJlbmNlIHRvIHRoZSBkYXRhYmFzZS5cclxuICovXHJcbnZhciBGaXJlc3RvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaXJlc3RvcmUoZGF0YWJhc2VJZE9yQXBwKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBQdWJsaWMgZm9yIHVzZSBpbiB0ZXN0cy5cclxuICAgICAgICAvLyBUT0RPKG1pa2VsZWhlbik6IFVzZSBtb2R1bGFyaXplZCBpbml0aWFsaXphdGlvbiBpbnN0ZWFkLlxyXG4gICAgICAgIHRoaXMuX3F1ZXVlID0gbmV3IEFzeW5jUXVldWUoKTtcclxuICAgICAgICB0aGlzLklOVEVSTkFMID0ge1xyXG4gICAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9maXJlc3RvcmVDbGllbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuX2ZpcmVzdG9yZUNsaWVudC5zaHV0ZG93bihvcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTsgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IG5ldyBGaXJlc3RvcmVDb25maWcoKTtcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWRPckFwcC5vcHRpb25zID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHZlcnkgbGlrZWx5IGEgRmlyZWJhc2UgYXBwIG9iamVjdFxyXG4gICAgICAgICAgICAvLyBUT0RPKGIvMzQxNzc2MDUpOiBDYW4gd2Ugc29tZWhvdyB1c2UgaW5zdGFuY2VvZj9cclxuICAgICAgICAgICAgdmFyIGFwcCA9IGRhdGFiYXNlSWRPckFwcDtcclxuICAgICAgICAgICAgY29uZmlnLmZpcmViYXNlQXBwID0gYXBwO1xyXG4gICAgICAgICAgICBjb25maWcuZGF0YWJhc2VJZCA9IEZpcmVzdG9yZS5kYXRhYmFzZUlkRnJvbUFwcChhcHApO1xyXG4gICAgICAgICAgICBjb25maWcucGVyc2lzdGVuY2VLZXkgPSBjb25maWcuZmlyZWJhc2VBcHAubmFtZTtcclxuICAgICAgICAgICAgY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEZpcmViYXNlQ3JlZGVudGlhbHNQcm92aWRlcihhcHApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGV4dGVybmFsXzEgPSBkYXRhYmFzZUlkT3JBcHA7XHJcbiAgICAgICAgICAgIGlmICghZXh0ZXJuYWxfMS5wcm9qZWN0SWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdNdXN0IHByb3ZpZGUgcHJvamVjdElkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uZmlnLmRhdGFiYXNlSWQgPSBuZXcgRGF0YWJhc2VJZChleHRlcm5hbF8xLnByb2plY3RJZCwgZXh0ZXJuYWxfMS5kYXRhYmFzZSk7XHJcbiAgICAgICAgICAgIC8vIFVzZSBhIGRlZmF1bHQgcGVyc2lzdGVuY2VLZXkgdGhhdCBsaW5lcyB1cCB3aXRoIEZpcmViYXNlQXBwLlxyXG4gICAgICAgICAgICBjb25maWcucGVyc2lzdGVuY2VLZXkgPSAnW0RFRkFVTFRdJztcclxuICAgICAgICAgICAgY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEVtcHR5Q3JlZGVudGlhbHNQcm92aWRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25maWcuc2V0dGluZ3MgPSBuZXcgRmlyZXN0b3JlU2V0dGluZ3Moe30pO1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLl9kYXRhYmFzZUlkID0gY29uZmlnLmRhdGFiYXNlSWQ7XHJcbiAgICB9XHJcbiAgICBGaXJlc3RvcmUucHJvdG90eXBlLnNldHRpbmdzID0gZnVuY3Rpb24gKHNldHRpbmdzTGl0ZXJhbCkge1xyXG4gICAgICAgIHZhbGlkYXRlRXhhY3ROdW1iZXJPZkFyZ3MoJ0ZpcmVzdG9yZS5zZXR0aW5ncycsIGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdUeXBlKCdGaXJlc3RvcmUuc2V0dGluZ3MnLCAnb2JqZWN0JywgMSwgc2V0dGluZ3NMaXRlcmFsKTtcclxuICAgICAgICBpZiAoY29udGFpbnMoc2V0dGluZ3NMaXRlcmFsLCAncGVyc2lzdGVuY2UnKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnXCJwZXJzaXN0ZW5jZVwiIGlzIG5vdyBzcGVjaWZpZWQgd2l0aCBhIHNlcGFyYXRlIGNhbGwgdG8gJyArXHJcbiAgICAgICAgICAgICAgICAnZmlyZXN0b3JlLmVuYWJsZVBlcnNpc3RlbmNlKCkuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuZXdTZXR0aW5ncyA9IG5ldyBGaXJlc3RvcmVTZXR0aW5ncyhzZXR0aW5nc0xpdGVyYWwpO1xyXG4gICAgICAgIGlmICh0aGlzLl9maXJlc3RvcmVDbGllbnQgJiYgIXRoaXMuX2NvbmZpZy5zZXR0aW5ncy5pc0VxdWFsKG5ld1NldHRpbmdzKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5GQUlMRURfUFJFQ09ORElUSU9OLCAnRmlyZXN0b3JlIGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCBhbmQgaXRzIHNldHRpbmdzIGNhbiBubyBsb25nZXIgJyArXHJcbiAgICAgICAgICAgICAgICAnYmUgY2hhbmdlZC4gWW91IGNhbiBvbmx5IGNhbGwgc2V0dGluZ3MoKSBiZWZvcmUgY2FsbGluZyBhbnkgb3RoZXIgJyArXHJcbiAgICAgICAgICAgICAgICAnbWV0aG9kcyBvbiBhIEZpcmVzdG9yZSBvYmplY3QuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2NvbmZpZy5zZXR0aW5ncyA9IG5ld1NldHRpbmdzO1xyXG4gICAgICAgIGlmIChuZXdTZXR0aW5ncy5jcmVkZW50aWFscyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5jcmVkZW50aWFscyA9IG1ha2VDcmVkZW50aWFsc1Byb3ZpZGVyKG5ld1NldHRpbmdzLmNyZWRlbnRpYWxzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmlyZXN0b3JlLnByb3RvdHlwZS5lbmFibGVOZXR3b3JrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZW5zdXJlQ2xpZW50Q29uZmlndXJlZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9maXJlc3RvcmVDbGllbnQuZW5hYmxlTmV0d29yaygpO1xyXG4gICAgfTtcclxuICAgIEZpcmVzdG9yZS5wcm90b3R5cGUuZGlzYWJsZU5ldHdvcmsgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVDbGllbnRDb25maWd1cmVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcmVzdG9yZUNsaWVudC5kaXNhYmxlTmV0d29yaygpO1xyXG4gICAgfTtcclxuICAgIEZpcmVzdG9yZS5wcm90b3R5cGUuZW5hYmxlUGVyc2lzdGVuY2UgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcclxuICAgICAgICBpZiAodGhpcy5fZmlyZXN0b3JlQ2xpZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLkZBSUxFRF9QUkVDT05ESVRJT04sICdGaXJlc3RvcmUgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkIGFuZCBwZXJzaXN0ZW5jZSBjYW4gbm8gbG9uZ2VyICcgK1xyXG4gICAgICAgICAgICAgICAgJ2JlIGVuYWJsZWQuIFlvdSBjYW4gb25seSBjYWxsIGVuYWJsZVBlcnNpc3RlbmNlKCkgYmVmb3JlIGNhbGxpbmcgJyArXHJcbiAgICAgICAgICAgICAgICAnYW55IG90aGVyIG1ldGhvZHMgb24gYSBGaXJlc3RvcmUgb2JqZWN0LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb25maWd1cmVDbGllbnQobmV3IFBlcnNpc3RlbmNlU2V0dGluZ3MoLyogZW5hYmxlZD0gKi8gdHJ1ZSwgc2V0dGluZ3MpKTtcclxuICAgIH07XHJcbiAgICBGaXJlc3RvcmUucHJvdG90eXBlLmVuc3VyZUNsaWVudENvbmZpZ3VyZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9maXJlc3RvcmVDbGllbnQpIHtcclxuICAgICAgICAgICAgLy8gS2ljayBvZmYgc3RhcnRpbmcgdGhlIGNsaWVudCBidXQgZG9uJ3QgYWN0dWFsbHkgd2FpdCBmb3IgaXQuXHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyZUNsaWVudChuZXcgUGVyc2lzdGVuY2VTZXR0aW5ncygvKiBlbmFibGVkPSAqLyBmYWxzZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZmlyZXN0b3JlQ2xpZW50O1xyXG4gICAgfTtcclxuICAgIEZpcmVzdG9yZS5wcm90b3R5cGUuY29uZmlndXJlQ2xpZW50ID0gZnVuY3Rpb24gKHBlcnNpc3RlbmNlU2V0dGluZ3MpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGFzc2VydCghIXRoaXMuX2NvbmZpZy5zZXR0aW5ncy5ob3N0LCAnRmlyZXN0b3JlU2V0dGluZ3MuaG9zdCBjYW5ub3QgYmUgZmFsc2V5Jyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcuc2V0dGluZ3MudGltZXN0YW1wc0luU25hcHNob3RzKSB7XHJcbiAgICAgICAgICAgIGVycm9yKFwiXFxuVGhlIGJlaGF2aW9yIGZvciBEYXRlIG9iamVjdHMgc3RvcmVkIGluIEZpcmVzdG9yZSBpcyBnb2luZyB0byBjaGFuZ2VcXG5BTkQgWU9VUiBBUFAgTUFZIEJSRUFLLlxcblRvIGhpZGUgdGhpcyB3YXJuaW5nIGFuZCBlbnN1cmUgeW91ciBhcHAgZG9lcyBub3QgYnJlYWssIHlvdSBuZWVkIHRvIGFkZCB0aGVcXG5mb2xsb3dpbmcgY29kZSB0byB5b3VyIGFwcCBiZWZvcmUgY2FsbGluZyBhbnkgb3RoZXIgQ2xvdWQgRmlyZXN0b3JlIG1ldGhvZHM6XFxuXFxuICBjb25zdCBmaXJlc3RvcmUgPSBmaXJlYmFzZS5maXJlc3RvcmUoKTtcXG4gIGNvbnN0IHNldHRpbmdzID0gey8qIHlvdXIgc2V0dGluZ3MuLi4gKi8gdGltZXN0YW1wc0luU25hcHNob3RzOiB0cnVlfTtcXG4gIGZpcmVzdG9yZS5zZXR0aW5ncyhzZXR0aW5ncyk7XFxuXFxuV2l0aCB0aGlzIGNoYW5nZSwgdGltZXN0YW1wcyBzdG9yZWQgaW4gQ2xvdWQgRmlyZXN0b3JlIHdpbGwgYmUgcmVhZCBiYWNrIGFzXFxuRmlyZWJhc2UgVGltZXN0YW1wIG9iamVjdHMgaW5zdGVhZCBvZiBhcyBzeXN0ZW0gRGF0ZSBvYmplY3RzLiBTbyB5b3Ugd2lsbCBhbHNvXFxubmVlZCB0byB1cGRhdGUgY29kZSBleHBlY3RpbmcgYSBEYXRlIHRvIGluc3RlYWQgZXhwZWN0IGEgVGltZXN0YW1wLiBGb3IgZXhhbXBsZTpcXG5cXG4gIC8vIE9sZDpcXG4gIGNvbnN0IGRhdGUgPSBzbmFwc2hvdC5nZXQoJ2NyZWF0ZWRfYXQnKTtcXG4gIC8vIE5ldzpcXG4gIGNvbnN0IHRpbWVzdGFtcCA9IHNuYXBzaG90LmdldCgnY3JlYXRlZF9hdCcpO1xcbiAgY29uc3QgZGF0ZSA9IHRpbWVzdGFtcC50b0RhdGUoKTtcXG5cXG5QbGVhc2UgYXVkaXQgYWxsIGV4aXN0aW5nIHVzYWdlcyBvZiBEYXRlIHdoZW4geW91IGVuYWJsZSB0aGUgbmV3IGJlaGF2aW9yLiBJbiBhXFxuZnV0dXJlIHJlbGVhc2UsIHRoZSBiZWhhdmlvciB3aWxsIGNoYW5nZSB0byB0aGUgbmV3IGJlaGF2aW9yLCBzbyBpZiB5b3UgZG8gbm90XFxuZm9sbG93IHRoZXNlIHN0ZXBzLCBZT1VSIEFQUCBNQVkgQlJFQUsuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhc3NlcnQoIXRoaXMuX2ZpcmVzdG9yZUNsaWVudCwgJ2NvbmZpZ3VyZUNsaWVudCgpIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpO1xyXG4gICAgICAgIHZhciBkYXRhYmFzZUluZm8gPSBuZXcgRGF0YWJhc2VJbmZvKHRoaXMuX2NvbmZpZy5kYXRhYmFzZUlkLCB0aGlzLl9jb25maWcucGVyc2lzdGVuY2VLZXksIHRoaXMuX2NvbmZpZy5zZXR0aW5ncy5ob3N0LCB0aGlzLl9jb25maWcuc2V0dGluZ3Muc3NsKTtcclxuICAgICAgICB2YXIgcHJlQ29udmVydGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERvY3VtZW50UmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0RiID0gX3RoaXMuX2NvbmZpZy5kYXRhYmFzZUlkO1xyXG4gICAgICAgICAgICAgICAgdmFyIG90aGVyRGIgPSB2YWx1ZS5maXJlc3RvcmUuX2NvbmZpZy5kYXRhYmFzZUlkO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvdGhlckRiLmlzRXF1YWwodGhpc0RiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdEb2N1bWVudCByZWZlcmVuY2UgaXMgZm9yIGRhdGFiYXNlICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAob3RoZXJEYi5wcm9qZWN0SWQgKyBcIi9cIiArIG90aGVyRGIuZGF0YWJhc2UgKyBcIiBidXQgc2hvdWxkIGJlIFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChcImZvciBkYXRhYmFzZSBcIiArIHRoaXNEYi5wcm9qZWN0SWQgKyBcIi9cIiArIHRoaXNEYi5kYXRhYmFzZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEtleVJlZmVyZW5jZShfdGhpcy5fY29uZmlnLmRhdGFiYXNlSWQsIHZhbHVlLl9rZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLl9kYXRhQ29udmVydGVyID0gbmV3IFVzZXJEYXRhQ29udmVydGVyKHByZUNvbnZlcnRlcik7XHJcbiAgICAgICAgdGhpcy5fZmlyZXN0b3JlQ2xpZW50ID0gbmV3IEZpcmVzdG9yZUNsaWVudChQbGF0Zm9ybVN1cHBvcnQuZ2V0UGxhdGZvcm0oKSwgZGF0YWJhc2VJbmZvLCB0aGlzLl9jb25maWcuY3JlZGVudGlhbHMsIHRoaXMuX3F1ZXVlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZmlyZXN0b3JlQ2xpZW50LnN0YXJ0KHBlcnNpc3RlbmNlU2V0dGluZ3MpO1xyXG4gICAgfTtcclxuICAgIEZpcmVzdG9yZS5kYXRhYmFzZUlkRnJvbUFwcCA9IGZ1bmN0aW9uIChhcHApIHtcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IGFwcC5vcHRpb25zO1xyXG4gICAgICAgIGlmICghY29udGFpbnMob3B0aW9ucywgJ3Byb2plY3RJZCcpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdcInByb2plY3RJZFwiIG5vdCBwcm92aWRlZCBpbiBmaXJlYmFzZS5pbml0aWFsaXplQXBwLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcHJvamVjdElkID0gb3B0aW9uc1sncHJvamVjdElkJ107XHJcbiAgICAgICAgaWYgKCFwcm9qZWN0SWQgfHwgdHlwZW9mIHByb2plY3RJZCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ3Byb2plY3RJZCBtdXN0IGJlIGEgc3RyaW5nIGluIEZpcmViYXNlQXBwLm9wdGlvbnMnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhYmFzZUlkKHByb2plY3RJZCk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmVzdG9yZS5wcm90b3R5cGUsIFwiYXBwXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jb25maWcuZmlyZWJhc2VBcHApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiRmlyZXN0b3JlIHdhcyBub3QgaW5pdGlhbGl6ZWQgdXNpbmcgdGhlIEZpcmViYXNlIFNESy4gJ2FwcCcgaXMgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICdub3QgYXZhaWxhYmxlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5maXJlYmFzZUFwcDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEZpcmVzdG9yZS5wcm90b3R5cGUuY29sbGVjdGlvbiA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nKSB7XHJcbiAgICAgICAgdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncygnRmlyZXN0b3JlLmNvbGxlY3Rpb24nLCBhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIHZhbGlkYXRlQXJnVHlwZSgnRmlyZXN0b3JlLmNvbGxlY3Rpb24nLCAnbm9uLWVtcHR5IHN0cmluZycsIDEsIHBhdGhTdHJpbmcpO1xyXG4gICAgICAgIGlmICghcGF0aFN0cmluZykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnTXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IGNvbGxlY3Rpb24gcGF0aCB0byBjb2xsZWN0aW9uKCknKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbnN1cmVDbGllbnRDb25maWd1cmVkKCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uUmVmZXJlbmNlKFJlc291cmNlUGF0aC5mcm9tU3RyaW5nKHBhdGhTdHJpbmcpLCB0aGlzKTtcclxuICAgIH07XHJcbiAgICBGaXJlc3RvcmUucHJvdG90eXBlLmRvYyA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nKSB7XHJcbiAgICAgICAgdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncygnRmlyZXN0b3JlLmRvYycsIGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdUeXBlKCdGaXJlc3RvcmUuZG9jJywgJ25vbi1lbXB0eSBzdHJpbmcnLCAxLCBwYXRoU3RyaW5nKTtcclxuICAgICAgICBpZiAoIXBhdGhTdHJpbmcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ011c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSBkb2N1bWVudCBwYXRoIHRvIGRvYygpJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZW5zdXJlQ2xpZW50Q29uZmlndXJlZCgpO1xyXG4gICAgICAgIHJldHVybiBEb2N1bWVudFJlZmVyZW5jZS5mb3JQYXRoKFJlc291cmNlUGF0aC5mcm9tU3RyaW5nKHBhdGhTdHJpbmcpLCB0aGlzKTtcclxuICAgIH07XHJcbiAgICBGaXJlc3RvcmUucHJvdG90eXBlLnJ1blRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKHVwZGF0ZUZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YWxpZGF0ZUV4YWN0TnVtYmVyT2ZBcmdzKCdGaXJlc3RvcmUucnVuVHJhbnNhY3Rpb24nLCBhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIHZhbGlkYXRlQXJnVHlwZSgnRmlyZXN0b3JlLnJ1blRyYW5zYWN0aW9uJywgJ2Z1bmN0aW9uJywgMSwgdXBkYXRlRnVuY3Rpb24pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuc3VyZUNsaWVudENvbmZpZ3VyZWQoKS50cmFuc2FjdGlvbihmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uKG5ldyBUcmFuc2FjdGlvbiQxKF90aGlzLCB0cmFuc2FjdGlvbikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZpcmVzdG9yZS5wcm90b3R5cGUuYmF0Y2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVDbGllbnRDb25maWd1cmVkKCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBXcml0ZUJhdGNoKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaXJlc3RvcmUsIFwibG9nTGV2ZWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGdldExvZ0xldmVsKCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgTG9nTGV2ZWwuREVCVUc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkZWJ1Zyc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZXJyb3InO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5TSUxFTlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdzaWxlbnQnO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFpbCgnVW5rbm93biBsb2cgbGV2ZWw6ICcgKyBnZXRMb2dMZXZlbCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmlyZXN0b3JlLnNldExvZ0xldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XHJcbiAgICAgICAgdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncygnRmlyZXN0b3JlLnNldExvZ0xldmVsJywgYXJndW1lbnRzLCAxKTtcclxuICAgICAgICB2YWxpZGF0ZUFyZ1R5cGUoJ0ZpcmVzdG9yZS5zZXRMb2dMZXZlbCcsICdub24tZW1wdHkgc3RyaW5nJywgMSwgbGV2ZWwpO1xyXG4gICAgICAgIHN3aXRjaCAobGV2ZWwpIHtcclxuICAgICAgICAgICAgY2FzZSAnZGVidWcnOlxyXG4gICAgICAgICAgICAgICAgc2V0TG9nTGV2ZWwoTG9nTGV2ZWwuREVCVUcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcclxuICAgICAgICAgICAgICAgIHNldExvZ0xldmVsKExvZ0xldmVsLkVSUk9SKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdzaWxlbnQnOlxyXG4gICAgICAgICAgICAgICAgc2V0TG9nTGV2ZWwoTG9nTGV2ZWwuU0lMRU5UKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ0ludmFsaWQgbG9nIGxldmVsOiAnICsgbGV2ZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBOb3RlOiB0aGlzIGlzIG5vdCBhIHByb3BlcnR5IGJlY2F1c2UgdGhlIG1pbmlmaWVyIGNhbid0IHdvcmsgY29ycmVjdGx5IHdpdGhcclxuICAgIC8vIHRoZSB3YXkgVHlwZVNjcmlwdCBjb21waWxlciBvdXRwdXRzIHByb3BlcnRpZXMuXHJcbiAgICBGaXJlc3RvcmUucHJvdG90eXBlLl9hcmVUaW1lc3RhbXBzSW5TbmFwc2hvdHNFbmFibGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcuc2V0dGluZ3MudGltZXN0YW1wc0luU25hcHNob3RzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGaXJlc3RvcmU7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBIHJlZmVyZW5jZSB0byBhIHRyYW5zYWN0aW9uLlxyXG4gKi9cclxudmFyIFRyYW5zYWN0aW9uJDEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUcmFuc2FjdGlvbihfZmlyZXN0b3JlLCBfdHJhbnNhY3Rpb24pIHtcclxuICAgICAgICB0aGlzLl9maXJlc3RvcmUgPSBfZmlyZXN0b3JlO1xyXG4gICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uID0gX3RyYW5zYWN0aW9uO1xyXG4gICAgfVxyXG4gICAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChkb2N1bWVudFJlZikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncygnVHJhbnNhY3Rpb24uZ2V0JywgYXJndW1lbnRzLCAxKTtcclxuICAgICAgICB2YXIgcmVmID0gdmFsaWRhdGVSZWZlcmVuY2UoJ1RyYW5zYWN0aW9uLmdldCcsIGRvY3VtZW50UmVmLCB0aGlzLl9maXJlc3RvcmUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvblxyXG4gICAgICAgICAgICAubG9va3VwKFtyZWYuX2tleV0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkb2NzKSB7XHJcbiAgICAgICAgICAgIGlmICghZG9jcyB8fCBkb2NzLmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwoJ01pc21hdGNoIGluIGRvY3MgcmV0dXJuZWQgZnJvbSBkb2N1bWVudCBsb29rdXAuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGRvYyA9IGRvY3NbMF07XHJcbiAgICAgICAgICAgIGlmIChkb2MgaW5zdGFuY2VvZiBOb0RvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50U25hcHNob3QoX3RoaXMuX2ZpcmVzdG9yZSwgcmVmLl9rZXksIG51bGwsIFxyXG4gICAgICAgICAgICAgICAgLyogZnJvbUNhY2hlPSAqLyBmYWxzZSwgXHJcbiAgICAgICAgICAgICAgICAvKiBoYXNQZW5kaW5nV3JpdGVzPSAqLyBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZG9jIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRTbmFwc2hvdChfdGhpcy5fZmlyZXN0b3JlLCByZWYuX2tleSwgZG9jLCBcclxuICAgICAgICAgICAgICAgIC8qIGZyb21DYWNoZT0gKi8gZmFsc2UsIFxyXG4gICAgICAgICAgICAgICAgLyogaGFzUGVuZGluZ1dyaXRlcz0gKi8gZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZmFpbChcIkJhdGNoR2V0RG9jdW1lbnRzUmVxdWVzdCByZXR1cm5lZCB1bmV4cGVjdGVkIGRvY3VtZW50IHR5cGU6IFwiICsgZG9jLmNvbnN0cnVjdG9yLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChkb2N1bWVudFJlZiwgdmFsdWUsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YWxpZGF0ZUJldHdlZW5OdW1iZXJPZkFyZ3MoJ1RyYW5zYWN0aW9uLnNldCcsIGFyZ3VtZW50cywgMiwgMyk7XHJcbiAgICAgICAgdmFyIHJlZiA9IHZhbGlkYXRlUmVmZXJlbmNlKCdUcmFuc2FjdGlvbi5zZXQnLCBkb2N1bWVudFJlZiwgdGhpcy5fZmlyZXN0b3JlKTtcclxuICAgICAgICBvcHRpb25zID0gdmFsaWRhdGVTZXRPcHRpb25zKCdUcmFuc2FjdGlvbi5zZXQnLCBvcHRpb25zKTtcclxuICAgICAgICB2YXIgcGFyc2VkID0gb3B0aW9ucy5tZXJnZSB8fCBvcHRpb25zLm1lcmdlRmllbGRzXHJcbiAgICAgICAgICAgID8gdGhpcy5fZmlyZXN0b3JlLl9kYXRhQ29udmVydGVyLnBhcnNlTWVyZ2VEYXRhKCdUcmFuc2FjdGlvbi5zZXQnLCB2YWx1ZSwgb3B0aW9ucy5tZXJnZUZpZWxkcylcclxuICAgICAgICAgICAgOiB0aGlzLl9maXJlc3RvcmUuX2RhdGFDb252ZXJ0ZXIucGFyc2VTZXREYXRhKCdUcmFuc2FjdGlvbi5zZXQnLCB2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNhY3Rpb24uc2V0KHJlZi5fa2V5LCBwYXJzZWQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIFRyYW5zYWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZG9jdW1lbnRSZWYsIGZpZWxkT3JVcGRhdGVEYXRhLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBtb3JlRmllbGRzQW5kVmFsdWVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAzOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgbW9yZUZpZWxkc0FuZFZhbHVlc1tfaSAtIDNdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlZjtcclxuICAgICAgICB2YXIgcGFyc2VkO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRPclVwZGF0ZURhdGEgPT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgIGZpZWxkT3JVcGRhdGVEYXRhIGluc3RhbmNlb2YgRmllbGRQYXRoJDEpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVBdExlYXN0TnVtYmVyT2ZBcmdzKCdUcmFuc2FjdGlvbi51cGRhdGUnLCBhcmd1bWVudHMsIDMpO1xyXG4gICAgICAgICAgICByZWYgPSB2YWxpZGF0ZVJlZmVyZW5jZSgnVHJhbnNhY3Rpb24udXBkYXRlJywgZG9jdW1lbnRSZWYsIHRoaXMuX2ZpcmVzdG9yZSk7XHJcbiAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMuX2ZpcmVzdG9yZS5fZGF0YUNvbnZlcnRlci5wYXJzZVVwZGF0ZVZhcmFyZ3MoJ1RyYW5zYWN0aW9uLnVwZGF0ZScsIGZpZWxkT3JVcGRhdGVEYXRhLCB2YWx1ZSwgbW9yZUZpZWxkc0FuZFZhbHVlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUV4YWN0TnVtYmVyT2ZBcmdzKCdUcmFuc2FjdGlvbi51cGRhdGUnLCBhcmd1bWVudHMsIDIpO1xyXG4gICAgICAgICAgICByZWYgPSB2YWxpZGF0ZVJlZmVyZW5jZSgnVHJhbnNhY3Rpb24udXBkYXRlJywgZG9jdW1lbnRSZWYsIHRoaXMuX2ZpcmVzdG9yZSk7XHJcbiAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMuX2ZpcmVzdG9yZS5fZGF0YUNvbnZlcnRlci5wYXJzZVVwZGF0ZURhdGEoJ1RyYW5zYWN0aW9uLnVwZGF0ZScsIGZpZWxkT3JVcGRhdGVEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdHJhbnNhY3Rpb24udXBkYXRlKHJlZi5fa2V5LCBwYXJzZWQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoZG9jdW1lbnRSZWYpIHtcclxuICAgICAgICB2YWxpZGF0ZUV4YWN0TnVtYmVyT2ZBcmdzKCdUcmFuc2FjdGlvbi5kZWxldGUnLCBhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIHZhciByZWYgPSB2YWxpZGF0ZVJlZmVyZW5jZSgnVHJhbnNhY3Rpb24uZGVsZXRlJywgZG9jdW1lbnRSZWYsIHRoaXMuX2ZpcmVzdG9yZSk7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNhY3Rpb24uZGVsZXRlKHJlZi5fa2V5KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICByZXR1cm4gVHJhbnNhY3Rpb247XHJcbn0oKSk7XHJcbnZhciBXcml0ZUJhdGNoID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gV3JpdGVCYXRjaChfZmlyZXN0b3JlKSB7XHJcbiAgICAgICAgdGhpcy5fZmlyZXN0b3JlID0gX2ZpcmVzdG9yZTtcclxuICAgICAgICB0aGlzLl9tdXRhdGlvbnMgPSBbXTtcclxuICAgICAgICB0aGlzLl9jb21taXR0ZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIFdyaXRlQmF0Y2gucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChkb2N1bWVudFJlZiwgdmFsdWUsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YWxpZGF0ZUJldHdlZW5OdW1iZXJPZkFyZ3MoJ1dyaXRlQmF0Y2guc2V0JywgYXJndW1lbnRzLCAyLCAzKTtcclxuICAgICAgICB0aGlzLnZlcmlmeU5vdENvbW1pdHRlZCgpO1xyXG4gICAgICAgIHZhciByZWYgPSB2YWxpZGF0ZVJlZmVyZW5jZSgnV3JpdGVCYXRjaC5zZXQnLCBkb2N1bWVudFJlZiwgdGhpcy5fZmlyZXN0b3JlKTtcclxuICAgICAgICBvcHRpb25zID0gdmFsaWRhdGVTZXRPcHRpb25zKCdXcml0ZUJhdGNoLnNldCcsIG9wdGlvbnMpO1xyXG4gICAgICAgIHZhciBwYXJzZWQgPSBvcHRpb25zLm1lcmdlIHx8IG9wdGlvbnMubWVyZ2VGaWVsZHNcclxuICAgICAgICAgICAgPyB0aGlzLl9maXJlc3RvcmUuX2RhdGFDb252ZXJ0ZXIucGFyc2VNZXJnZURhdGEoJ1dyaXRlQmF0Y2guc2V0JywgdmFsdWUsIG9wdGlvbnMubWVyZ2VGaWVsZHMpXHJcbiAgICAgICAgICAgIDogdGhpcy5fZmlyZXN0b3JlLl9kYXRhQ29udmVydGVyLnBhcnNlU2V0RGF0YSgnV3JpdGVCYXRjaC5zZXQnLCB2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5fbXV0YXRpb25zID0gdGhpcy5fbXV0YXRpb25zLmNvbmNhdChwYXJzZWQudG9NdXRhdGlvbnMocmVmLl9rZXksIFByZWNvbmRpdGlvbi5OT05FKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgV3JpdGVCYXRjaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRvY3VtZW50UmVmLCBmaWVsZE9yVXBkYXRlRGF0YSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgbW9yZUZpZWxkc0FuZFZhbHVlcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMzsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIG1vcmVGaWVsZHNBbmRWYWx1ZXNbX2kgLSAzXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmVyaWZ5Tm90Q29tbWl0dGVkKCk7XHJcbiAgICAgICAgdmFyIHJlZjtcclxuICAgICAgICB2YXIgcGFyc2VkO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRPclVwZGF0ZURhdGEgPT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgIGZpZWxkT3JVcGRhdGVEYXRhIGluc3RhbmNlb2YgRmllbGRQYXRoJDEpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVBdExlYXN0TnVtYmVyT2ZBcmdzKCdXcml0ZUJhdGNoLnVwZGF0ZScsIGFyZ3VtZW50cywgMyk7XHJcbiAgICAgICAgICAgIHJlZiA9IHZhbGlkYXRlUmVmZXJlbmNlKCdXcml0ZUJhdGNoLnVwZGF0ZScsIGRvY3VtZW50UmVmLCB0aGlzLl9maXJlc3RvcmUpO1xyXG4gICAgICAgICAgICBwYXJzZWQgPSB0aGlzLl9maXJlc3RvcmUuX2RhdGFDb252ZXJ0ZXIucGFyc2VVcGRhdGVWYXJhcmdzKCdXcml0ZUJhdGNoLnVwZGF0ZScsIGZpZWxkT3JVcGRhdGVEYXRhLCB2YWx1ZSwgbW9yZUZpZWxkc0FuZFZhbHVlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUV4YWN0TnVtYmVyT2ZBcmdzKCdXcml0ZUJhdGNoLnVwZGF0ZScsIGFyZ3VtZW50cywgMik7XHJcbiAgICAgICAgICAgIHJlZiA9IHZhbGlkYXRlUmVmZXJlbmNlKCdXcml0ZUJhdGNoLnVwZGF0ZScsIGRvY3VtZW50UmVmLCB0aGlzLl9maXJlc3RvcmUpO1xyXG4gICAgICAgICAgICBwYXJzZWQgPSB0aGlzLl9maXJlc3RvcmUuX2RhdGFDb252ZXJ0ZXIucGFyc2VVcGRhdGVEYXRhKCdXcml0ZUJhdGNoLnVwZGF0ZScsIGZpZWxkT3JVcGRhdGVEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbXV0YXRpb25zID0gdGhpcy5fbXV0YXRpb25zLmNvbmNhdChwYXJzZWQudG9NdXRhdGlvbnMocmVmLl9rZXksIFByZWNvbmRpdGlvbi5leGlzdHModHJ1ZSkpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBXcml0ZUJhdGNoLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoZG9jdW1lbnRSZWYpIHtcclxuICAgICAgICB2YWxpZGF0ZUV4YWN0TnVtYmVyT2ZBcmdzKCdXcml0ZUJhdGNoLmRlbGV0ZScsIGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlOb3RDb21taXR0ZWQoKTtcclxuICAgICAgICB2YXIgcmVmID0gdmFsaWRhdGVSZWZlcmVuY2UoJ1dyaXRlQmF0Y2guZGVsZXRlJywgZG9jdW1lbnRSZWYsIHRoaXMuX2ZpcmVzdG9yZSk7XHJcbiAgICAgICAgdGhpcy5fbXV0YXRpb25zID0gdGhpcy5fbXV0YXRpb25zLmNvbmNhdChuZXcgRGVsZXRlTXV0YXRpb24ocmVmLl9rZXksIFByZWNvbmRpdGlvbi5OT05FKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgV3JpdGVCYXRjaC5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVyaWZ5Tm90Q29tbWl0dGVkKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb21taXR0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX211dGF0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuX2ZpcmVzdG9yZS5lbnN1cmVDbGllbnRDb25maWd1cmVkKCkud3JpdGUodGhpcy5fbXV0YXRpb25zKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFdyaXRlQmF0Y2gucHJvdG90eXBlLnZlcmlmeU5vdENvbW1pdHRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY29tbWl0dGVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLkZBSUxFRF9QUkVDT05ESVRJT04sICdBIHdyaXRlIGJhdGNoIGNhbiBubyBsb25nZXIgYmUgdXNlZCBhZnRlciBjb21taXQoKSAnICtcclxuICAgICAgICAgICAgICAgICdoYXMgYmVlbiBjYWxsZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBXcml0ZUJhdGNoO1xyXG59KCkpO1xyXG4vKipcclxuICogQSByZWZlcmVuY2UgdG8gYSBwYXJ0aWN1bGFyIGRvY3VtZW50IGluIGEgY29sbGVjdGlvbiBpbiB0aGUgZGF0YWJhc2UuXHJcbiAqL1xyXG52YXIgRG9jdW1lbnRSZWZlcmVuY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEb2N1bWVudFJlZmVyZW5jZShfa2V5LCBmaXJlc3RvcmUpIHtcclxuICAgICAgICB0aGlzLl9rZXkgPSBfa2V5O1xyXG4gICAgICAgIHRoaXMuZmlyZXN0b3JlID0gZmlyZXN0b3JlO1xyXG4gICAgICAgIHRoaXMuX2ZpcmVzdG9yZUNsaWVudCA9IHRoaXMuZmlyZXN0b3JlLmVuc3VyZUNsaWVudENvbmZpZ3VyZWQoKTtcclxuICAgIH1cclxuICAgIERvY3VtZW50UmVmZXJlbmNlLmZvclBhdGggPSBmdW5jdGlvbiAocGF0aCwgZmlyZXN0b3JlKSB7XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoICUgMiAhPT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnSW52YWxpZCBkb2N1bWVudCByZWZlcmVuY2UuIERvY3VtZW50ICcgK1xyXG4gICAgICAgICAgICAgICAgJ3JlZmVyZW5jZXMgbXVzdCBoYXZlIGFuIGV2ZW4gbnVtYmVyIG9mIHNlZ21lbnRzLCBidXQgJyArXHJcbiAgICAgICAgICAgICAgICAocGF0aC5jYW5vbmljYWxTdHJpbmcoKSArIFwiIGhhcyBcIiArIHBhdGgubGVuZ3RoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRSZWZlcmVuY2UobmV3IERvY3VtZW50S2V5KHBhdGgpLCBmaXJlc3RvcmUpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEb2N1bWVudFJlZmVyZW5jZS5wcm90b3R5cGUsIFwiaWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fa2V5LnBhdGgubGFzdFNlZ21lbnQoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEb2N1bWVudFJlZmVyZW5jZS5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uUmVmZXJlbmNlKHRoaXMuX2tleS5wYXRoLnBvcExhc3QoKSwgdGhpcy5maXJlc3RvcmUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERvY3VtZW50UmVmZXJlbmNlLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2tleS5wYXRoLmNhbm9uaWNhbFN0cmluZygpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRG9jdW1lbnRSZWZlcmVuY2UucHJvdG90eXBlLmNvbGxlY3Rpb24gPSBmdW5jdGlvbiAocGF0aFN0cmluZykge1xyXG4gICAgICAgIHZhbGlkYXRlRXhhY3ROdW1iZXJPZkFyZ3MoJ0RvY3VtZW50UmVmZXJlbmNlLmNvbGxlY3Rpb24nLCBhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIHZhbGlkYXRlQXJnVHlwZSgnRG9jdW1lbnRSZWZlcmVuY2UuY29sbGVjdGlvbicsICdub24tZW1wdHkgc3RyaW5nJywgMSwgcGF0aFN0cmluZyk7XHJcbiAgICAgICAgaWYgKCFwYXRoU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdNdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgY29sbGVjdGlvbiBuYW1lIHRvIGNvbGxlY3Rpb24oKScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGF0aCA9IFJlc291cmNlUGF0aC5mcm9tU3RyaW5nKHBhdGhTdHJpbmcpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29sbGVjdGlvblJlZmVyZW5jZSh0aGlzLl9rZXkucGF0aC5jaGlsZChwYXRoKSwgdGhpcy5maXJlc3RvcmUpO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50UmVmZXJlbmNlLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBEb2N1bWVudFJlZmVyZW5jZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgaW52YWxpZENsYXNzRXJyb3IoJ2lzRXF1YWwnLCAnRG9jdW1lbnRSZWZlcmVuY2UnLCAxLCBvdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmZpcmVzdG9yZSA9PT0gb3RoZXIuZmlyZXN0b3JlICYmIHRoaXMuX2tleS5pc0VxdWFsKG90aGVyLl9rZXkpO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50UmVmZXJlbmNlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YWxpZGF0ZUJldHdlZW5OdW1iZXJPZkFyZ3MoJ0RvY3VtZW50UmVmZXJlbmNlLnNldCcsIGFyZ3VtZW50cywgMSwgMik7XHJcbiAgICAgICAgb3B0aW9ucyA9IHZhbGlkYXRlU2V0T3B0aW9ucygnRG9jdW1lbnRSZWZlcmVuY2Uuc2V0Jywgb3B0aW9ucyk7XHJcbiAgICAgICAgdmFyIHBhcnNlZCA9IG9wdGlvbnMubWVyZ2UgfHwgb3B0aW9ucy5tZXJnZUZpZWxkc1xyXG4gICAgICAgICAgICA/IHRoaXMuZmlyZXN0b3JlLl9kYXRhQ29udmVydGVyLnBhcnNlTWVyZ2VEYXRhKCdEb2N1bWVudFJlZmVyZW5jZS5zZXQnLCB2YWx1ZSwgb3B0aW9ucy5tZXJnZUZpZWxkcylcclxuICAgICAgICAgICAgOiB0aGlzLmZpcmVzdG9yZS5fZGF0YUNvbnZlcnRlci5wYXJzZVNldERhdGEoJ0RvY3VtZW50UmVmZXJlbmNlLnNldCcsIHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZmlyZXN0b3JlQ2xpZW50LndyaXRlKHBhcnNlZC50b011dGF0aW9ucyh0aGlzLl9rZXksIFByZWNvbmRpdGlvbi5OT05FKSk7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRSZWZlcmVuY2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChmaWVsZE9yVXBkYXRlRGF0YSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgbW9yZUZpZWxkc0FuZFZhbHVlcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIG1vcmVGaWVsZHNBbmRWYWx1ZXNbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwYXJzZWQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZE9yVXBkYXRlRGF0YSA9PT0gJ3N0cmluZycgfHxcclxuICAgICAgICAgICAgZmllbGRPclVwZGF0ZURhdGEgaW5zdGFuY2VvZiBGaWVsZFBhdGgkMSkge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUF0TGVhc3ROdW1iZXJPZkFyZ3MoJ0RvY3VtZW50UmVmZXJlbmNlLnVwZGF0ZScsIGFyZ3VtZW50cywgMik7XHJcbiAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMuZmlyZXN0b3JlLl9kYXRhQ29udmVydGVyLnBhcnNlVXBkYXRlVmFyYXJncygnRG9jdW1lbnRSZWZlcmVuY2UudXBkYXRlJywgZmllbGRPclVwZGF0ZURhdGEsIHZhbHVlLCBtb3JlRmllbGRzQW5kVmFsdWVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlRXhhY3ROdW1iZXJPZkFyZ3MoJ0RvY3VtZW50UmVmZXJlbmNlLnVwZGF0ZScsIGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMuZmlyZXN0b3JlLl9kYXRhQ29udmVydGVyLnBhcnNlVXBkYXRlRGF0YSgnRG9jdW1lbnRSZWZlcmVuY2UudXBkYXRlJywgZmllbGRPclVwZGF0ZURhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZmlyZXN0b3JlQ2xpZW50LndyaXRlKHBhcnNlZC50b011dGF0aW9ucyh0aGlzLl9rZXksIFByZWNvbmRpdGlvbi5leGlzdHModHJ1ZSkpKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudFJlZmVyZW5jZS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlRXhhY3ROdW1iZXJPZkFyZ3MoJ0RvY3VtZW50UmVmZXJlbmNlLmRlbGV0ZScsIGFyZ3VtZW50cywgMCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcmVzdG9yZUNsaWVudC53cml0ZShbXHJcbiAgICAgICAgICAgIG5ldyBEZWxldGVNdXRhdGlvbih0aGlzLl9rZXksIFByZWNvbmRpdGlvbi5OT05FKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50UmVmZXJlbmNlLnByb3RvdHlwZS5vblNuYXBzaG90ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWxpZGF0ZUJldHdlZW5OdW1iZXJPZkFyZ3MoJ0RvY3VtZW50UmVmZXJlbmNlLm9uU25hcHNob3QnLCBhcmd1bWVudHMsIDEsIDQpO1xyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIG9ic2VydmVyO1xyXG4gICAgICAgIHZhciBjdXJyQXJnID0gMDtcclxuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbY3VyckFyZ10gPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgICFpc1BhcnRpYWxPYnNlcnZlcihhcmdzW2N1cnJBcmddKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zID0gYXJnc1tjdXJyQXJnXTtcclxuICAgICAgICAgICAgdmFsaWRhdGVPcHRpb25OYW1lcygnRG9jdW1lbnRSZWZlcmVuY2Uub25TbmFwc2hvdCcsIG9wdGlvbnMsIFtcclxuICAgICAgICAgICAgICAgICdpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzJ1xyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgdmFsaWRhdGVOYW1lZE9wdGlvbmFsVHlwZSgnRG9jdW1lbnRSZWZlcmVuY2Uub25TbmFwc2hvdCcsICdib29sZWFuJywgJ2luY2x1ZGVNZXRhZGF0YUNoYW5nZXMnLCBvcHRpb25zLmluY2x1ZGVNZXRhZGF0YUNoYW5nZXMpO1xyXG4gICAgICAgICAgICBjdXJyQXJnKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbnRlcm5hbE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6IG9wdGlvbnMuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlc1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGlzUGFydGlhbE9ic2VydmVyKGFyZ3NbY3VyckFyZ10pKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0gYXJnc1tjdXJyQXJnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQXJnVHlwZSgnRG9jdW1lbnRSZWZlcmVuY2Uub25TbmFwc2hvdCcsICdmdW5jdGlvbicsIGN1cnJBcmcsIGFyZ3NbY3VyckFyZ10pO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZU9wdGlvbmFsQXJnVHlwZSgnRG9jdW1lbnRSZWZlcmVuY2Uub25TbmFwc2hvdCcsICdmdW5jdGlvbicsIGN1cnJBcmcgKyAxLCBhcmdzW2N1cnJBcmcgKyAxXSk7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlT3B0aW9uYWxBcmdUeXBlKCdEb2N1bWVudFJlZmVyZW5jZS5vblNuYXBzaG90JywgJ2Z1bmN0aW9uJywgY3VyckFyZyArIDIsIGFyZ3NbY3VyckFyZyArIDJdKTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiBhcmdzW2N1cnJBcmddLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGFyZ3NbY3VyckFyZyArIDFdLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGFyZ3NbY3VyckFyZyArIDJdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLm9uU25hcHNob3RJbnRlcm5hbChpbnRlcm5hbE9wdGlvbnMsIG9ic2VydmVyKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudFJlZmVyZW5jZS5wcm90b3R5cGUub25TbmFwc2hvdEludGVybmFsID0gZnVuY3Rpb24gKG9wdGlvbnMsIG9ic2VydmVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZXJySGFuZGxlciA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5jYXVnaHQgRXJyb3IgaW4gb25TbmFwc2hvdDonLCBlcnIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmVycm9yKSB7XHJcbiAgICAgICAgICAgIGVyckhhbmRsZXIgPSBvYnNlcnZlci5lcnJvci5iaW5kKG9ic2VydmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFzeW5jT2JzZXJ2ZXIgPSBuZXcgQXN5bmNPYnNlcnZlcih7XHJcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChzbmFwc2hvdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoc25hcHNob3QuZG9jcy5zaXplIDw9IDEsICdUb28gbWFueSBkb2N1bWVudHMgcmV0dXJuZWQgb24gYSBkb2N1bWVudCBxdWVyeScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSBzbmFwc2hvdC5kb2NzLmdldChfdGhpcy5fa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KG5ldyBEb2N1bWVudFNuYXBzaG90KF90aGlzLmZpcmVzdG9yZSwgX3RoaXMuX2tleSwgZG9jLCBzbmFwc2hvdC5mcm9tQ2FjaGUsIHNuYXBzaG90Lmhhc1BlbmRpbmdXcml0ZXMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGVyckhhbmRsZXJcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgaW50ZXJuYWxMaXN0ZW5lciA9IHRoaXMuX2ZpcmVzdG9yZUNsaWVudC5saXN0ZW4oUXVlcnkuYXRQYXRoKHRoaXMuX2tleS5wYXRoKSwgYXN5bmNPYnNlcnZlciwgb3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYXN5bmNPYnNlcnZlci5tdXRlKCk7XHJcbiAgICAgICAgICAgIF90aGlzLl9maXJlc3RvcmVDbGllbnQudW5saXN0ZW4oaW50ZXJuYWxMaXN0ZW5lcik7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudFJlZmVyZW5jZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhbGlkYXRlQmV0d2Vlbk51bWJlck9mQXJncygnRG9jdW1lbnRSZWZlcmVuY2UuZ2V0JywgYXJndW1lbnRzLCAwLCAxKTtcclxuICAgICAgICB2YWxpZGF0ZUdldE9wdGlvbnMoJ0RvY3VtZW50UmVmZXJlbmNlLmdldCcsIG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc291cmNlID09PSAnY2FjaGUnKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5maXJlc3RvcmVcclxuICAgICAgICAgICAgICAgICAgICAuZW5zdXJlQ2xpZW50Q29uZmlndXJlZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldERvY3VtZW50RnJvbUxvY2FsQ2FjaGUoX3RoaXMuX2tleSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgRG9jdW1lbnRTbmFwc2hvdChfdGhpcy5maXJlc3RvcmUsIF90aGlzLl9rZXksIGRvYywgXHJcbiAgICAgICAgICAgICAgICAgICAgLypmcm9tQ2FjaGU9Ki8gdHJ1ZSwgZG9jIGluc3RhbmNlb2YgRG9jdW1lbnQgPyBkb2MuaGFzTG9jYWxNdXRhdGlvbnMgOiBmYWxzZSkpO1xyXG4gICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmdldFZpYVNuYXBzaG90TGlzdGVuZXIocmVzb2x2ZSwgcmVqZWN0LCBvcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50UmVmZXJlbmNlLnByb3RvdHlwZS5nZXRWaWFTbmFwc2hvdExpc3RlbmVyID0gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciB1bmxpc3RlbiA9IHRoaXMub25TbmFwc2hvdEludGVybmFsKHtcclxuICAgICAgICAgICAgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlczogdHJ1ZSxcclxuICAgICAgICAgICAgd2FpdEZvclN5bmNXaGVuT25saW5lOiB0cnVlXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoc25hcCkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHF1ZXJ5IGZpcnN0IGJlZm9yZSBwYXNzaW5nIGV2ZW50IHRvIHVzZXIgdG8gYXZvaWRcclxuICAgICAgICAgICAgICAgIC8vIHVzZXIgYWN0aW9ucyBhZmZlY3RpbmcgdGhlIG5vdyBzdGFsZSBxdWVyeS5cclxuICAgICAgICAgICAgICAgIHVubGlzdGVuKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNuYXAuZXhpc3RzICYmIHNuYXAubWV0YWRhdGEuZnJvbUNhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiBJZiB3ZSdyZSBvbmxpbmUgYW5kIHRoZSBkb2N1bWVudCBkb2Vzbid0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXhpc3QgdGhlbiB3ZSByZXNvbHZlIHdpdGggYSBkb2MuZXhpc3RzIHNldCB0byBmYWxzZS4gSWZcclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBvZmZsaW5lIGhvd2V2ZXIsIHdlIHJlamVjdCB0aGUgUHJvbWlzZSBpbiB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZS4gVHdvIG9wdGlvbnM6IDEpIENhY2hlIHRoZSBuZWdhdGl2ZSByZXNwb25zZSBmcm9tXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNlcnZlciBzbyB3ZSBjYW4gZGVsaXZlciB0aGF0IGV2ZW4gd2hlbiB5b3UncmVcclxuICAgICAgICAgICAgICAgICAgICAvLyBvZmZsaW5lIDIpIEFjdHVhbGx5IHJlamVjdCB0aGUgUHJvbWlzZSBpbiB0aGUgb25saW5lIGNhc2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEZpcmVzdG9yZUVycm9yKENvZGUuVU5BVkFJTEFCTEUsICdGYWlsZWQgdG8gZ2V0IGRvY3VtZW50IGJlY2F1c2UgdGhlIGNsaWVudCBpcyAnICsgJ29mZmxpbmUuJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc25hcC5leGlzdHMgJiZcclxuICAgICAgICAgICAgICAgICAgICBzbmFwLm1ldGFkYXRhLmZyb21DYWNoZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgJiZcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNvdXJjZSA9PT0gJ3NlcnZlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEZpcmVzdG9yZUVycm9yKENvZGUuVU5BVkFJTEFCTEUsICdGYWlsZWQgdG8gZ2V0IGRvY3VtZW50IGZyb20gc2VydmVyLiAoSG93ZXZlciwgdGhpcyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RvY3VtZW50IGRvZXMgZXhpc3QgaW4gdGhlIGxvY2FsIGNhY2hlLiBSdW4gYWdhaW4gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd3aXRob3V0IHNldHRpbmcgc291cmNlIHRvIFwic2VydmVyXCIgdG8gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZXRyaWV2ZSB0aGUgY2FjaGVkIGRvY3VtZW50LiknKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNuYXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogcmVqZWN0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERvY3VtZW50UmVmZXJlbmNlO1xyXG59KCkpO1xyXG52YXIgU25hcHNob3RNZXRhZGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNuYXBzaG90TWV0YWRhdGEoaGFzUGVuZGluZ1dyaXRlcywgZnJvbUNhY2hlKSB7XHJcbiAgICAgICAgdGhpcy5oYXNQZW5kaW5nV3JpdGVzID0gaGFzUGVuZGluZ1dyaXRlcztcclxuICAgICAgICB0aGlzLmZyb21DYWNoZSA9IGZyb21DYWNoZTtcclxuICAgIH1cclxuICAgIFNuYXBzaG90TWV0YWRhdGEucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuaGFzUGVuZGluZ1dyaXRlcyA9PT0gb3RoZXIuaGFzUGVuZGluZ1dyaXRlcyAmJlxyXG4gICAgICAgICAgICB0aGlzLmZyb21DYWNoZSA9PT0gb3RoZXIuZnJvbUNhY2hlKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU25hcHNob3RNZXRhZGF0YTtcclxufSgpKTtcclxudmFyIERvY3VtZW50U25hcHNob3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEb2N1bWVudFNuYXBzaG90KF9maXJlc3RvcmUsIF9rZXksIF9kb2N1bWVudCwgX2Zyb21DYWNoZSwgX2hhc1BlbmRpbmdXcml0ZXMpIHtcclxuICAgICAgICB0aGlzLl9maXJlc3RvcmUgPSBfZmlyZXN0b3JlO1xyXG4gICAgICAgIHRoaXMuX2tleSA9IF9rZXk7XHJcbiAgICAgICAgdGhpcy5fZG9jdW1lbnQgPSBfZG9jdW1lbnQ7XHJcbiAgICAgICAgdGhpcy5fZnJvbUNhY2hlID0gX2Zyb21DYWNoZTtcclxuICAgICAgICB0aGlzLl9oYXNQZW5kaW5nV3JpdGVzID0gX2hhc1BlbmRpbmdXcml0ZXM7XHJcbiAgICB9XHJcbiAgICBEb2N1bWVudFNuYXBzaG90LnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YWxpZGF0ZUJldHdlZW5OdW1iZXJPZkFyZ3MoJ0RvY3VtZW50U25hcHNob3QuZGF0YScsIGFyZ3VtZW50cywgMCwgMSk7XHJcbiAgICAgICAgb3B0aW9ucyA9IHZhbGlkYXRlU25hcHNob3RPcHRpb25zKCdEb2N1bWVudFNuYXBzaG90LmRhdGEnLCBvcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gIXRoaXMuX2RvY3VtZW50XHJcbiAgICAgICAgICAgID8gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIDogdGhpcy5jb252ZXJ0T2JqZWN0KHRoaXMuX2RvY3VtZW50LmRhdGEsIEZpZWxkVmFsdWVPcHRpb25zLmZyb21TbmFwc2hvdE9wdGlvbnMob3B0aW9ucywgdGhpcy5fZmlyZXN0b3JlLl9hcmVUaW1lc3RhbXBzSW5TbmFwc2hvdHNFbmFibGVkKCkpKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudFNuYXBzaG90LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoZmllbGRQYXRoLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFsaWRhdGVCZXR3ZWVuTnVtYmVyT2ZBcmdzKCdEb2N1bWVudFNuYXBzaG90LmdldCcsIGFyZ3VtZW50cywgMSwgMik7XHJcbiAgICAgICAgb3B0aW9ucyA9IHZhbGlkYXRlU25hcHNob3RPcHRpb25zKCdEb2N1bWVudFNuYXBzaG90LmdldCcsIG9wdGlvbnMpO1xyXG4gICAgICAgIGlmICh0aGlzLl9kb2N1bWVudCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9kb2N1bWVudC5kYXRhLmZpZWxkKGZpZWxkUGF0aEZyb21Bcmd1bWVudCgnRG9jdW1lbnRTbmFwc2hvdC5nZXQnLCBmaWVsZFBhdGgpKTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRWYWx1ZSh2YWx1ZSwgRmllbGRWYWx1ZU9wdGlvbnMuZnJvbVNuYXBzaG90T3B0aW9ucyhvcHRpb25zLCB0aGlzLl9maXJlc3RvcmUuX2FyZVRpbWVzdGFtcHNJblNuYXBzaG90c0VuYWJsZWQoKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERvY3VtZW50U25hcHNob3QucHJvdG90eXBlLCBcImlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2tleS5wYXRoLmxhc3RTZWdtZW50KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRG9jdW1lbnRTbmFwc2hvdC5wcm90b3R5cGUsIFwicmVmXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudFJlZmVyZW5jZSh0aGlzLl9rZXksIHRoaXMuX2ZpcmVzdG9yZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRG9jdW1lbnRTbmFwc2hvdC5wcm90b3R5cGUsIFwiZXhpc3RzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RvY3VtZW50ICE9PSBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERvY3VtZW50U25hcHNob3QucHJvdG90eXBlLCBcIm1ldGFkYXRhXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTbmFwc2hvdE1ldGFkYXRhKHRoaXMuX2hhc1BlbmRpbmdXcml0ZXMsIHRoaXMuX2Zyb21DYWNoZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBEb2N1bWVudFNuYXBzaG90LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBEb2N1bWVudFNuYXBzaG90KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2xhc3NFcnJvcignaXNFcXVhbCcsICdEb2N1bWVudFNuYXBzaG90JywgMSwgb3RoZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHRoaXMuX2ZpcmVzdG9yZSA9PT0gb3RoZXIuX2ZpcmVzdG9yZSAmJlxyXG4gICAgICAgICAgICB0aGlzLl9mcm9tQ2FjaGUgPT09IG90aGVyLl9mcm9tQ2FjaGUgJiZcclxuICAgICAgICAgICAgdGhpcy5fa2V5LmlzRXF1YWwob3RoZXIuX2tleSkgJiZcclxuICAgICAgICAgICAgKHRoaXMuX2RvY3VtZW50ID09PSBudWxsXHJcbiAgICAgICAgICAgICAgICA/IG90aGVyLl9kb2N1bWVudCA9PT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9kb2N1bWVudC5pc0VxdWFsKG90aGVyLl9kb2N1bWVudCkpKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudFNuYXBzaG90LnByb3RvdHlwZS5jb252ZXJ0T2JqZWN0ID0gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBfdGhpcy5jb252ZXJ0VmFsdWUodmFsdWUsIG9wdGlvbnMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRTbmFwc2hvdC5wcm90b3R5cGUuY29udmVydFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0VmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydE9iamVjdCh2YWx1ZSwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0QXJyYXkodmFsdWUsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJlZlZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSB2YWx1ZS52YWx1ZShvcHRpb25zKTtcclxuICAgICAgICAgICAgdmFyIGRhdGFiYXNlID0gdGhpcy5fZmlyZXN0b3JlLmVuc3VyZUNsaWVudENvbmZpZ3VyZWQoKS5kYXRhYmFzZUlkKCk7XHJcbiAgICAgICAgICAgIGlmICghdmFsdWUuZGF0YWJhc2VJZC5pc0VxdWFsKGRhdGFiYXNlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhiLzY0MTMwMjAyKTogU29tZWhvdyBzdXBwb3J0IGZvcmVpZ24gcmVmZXJlbmNlcy5cclxuICAgICAgICAgICAgICAgIGVycm9yKFwiRG9jdW1lbnQgXCIgKyB0aGlzLl9rZXkucGF0aCArIFwiIGNvbnRhaW5zIGEgZG9jdW1lbnQgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwicmVmZXJlbmNlIHdpdGhpbiBhIGRpZmZlcmVudCBkYXRhYmFzZSAoXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICh2YWx1ZS5kYXRhYmFzZUlkLnByb2plY3RJZCArIFwiL1wiICsgdmFsdWUuZGF0YWJhc2VJZC5kYXRhYmFzZSArIFwiKSB3aGljaCBpcyBub3QgXCIpICtcclxuICAgICAgICAgICAgICAgICAgICBcInN1cHBvcnRlZC4gSXQgd2lsbCBiZSB0cmVhdGVkIGFzIGEgcmVmZXJlbmNlIGluIHRoZSBjdXJyZW50IFwiICtcclxuICAgICAgICAgICAgICAgICAgICAoXCJkYXRhYmFzZSAoXCIgKyBkYXRhYmFzZS5wcm9qZWN0SWQgKyBcIi9cIiArIGRhdGFiYXNlLmRhdGFiYXNlICsgXCIpIFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbnN0ZWFkLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50UmVmZXJlbmNlKGtleSwgdGhpcy5fZmlyZXN0b3JlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS52YWx1ZShvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRTbmFwc2hvdC5wcm90b3R5cGUuY29udmVydEFycmF5ID0gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBkYXRhLmludGVybmFsVmFsdWUubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY29udmVydFZhbHVlKHZhbHVlLCBvcHRpb25zKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRG9jdW1lbnRTbmFwc2hvdDtcclxufSgpKTtcclxudmFyIFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdChmaXJlc3RvcmUsIGtleSwgZG9jdW1lbnQsIGZyb21DYWNoZSwgaGFzUGVuZGluZ1dyaXRlcykge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBmaXJlc3RvcmUsIGtleSwgZG9jdW1lbnQsIGZyb21DYWNoZSwgaGFzUGVuZGluZ1dyaXRlcykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdC5wcm90b3R5cGUuZGF0YSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBfc3VwZXIucHJvdG90eXBlLmRhdGEuY2FsbCh0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICBhc3NlcnQodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnLCAnRG9jdW1lbnQgaW4gYSBRdWVyeURvY3VtZW50U25hcHNob3Qgc2hvdWxkIGV4aXN0Jyk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdDtcclxufShEb2N1bWVudFNuYXBzaG90KSk7XHJcbnZhciBRdWVyeSQxID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUXVlcnkkJDEoX3F1ZXJ5LCBmaXJlc3RvcmUpIHtcclxuICAgICAgICB0aGlzLl9xdWVyeSA9IF9xdWVyeTtcclxuICAgICAgICB0aGlzLmZpcmVzdG9yZSA9IGZpcmVzdG9yZTtcclxuICAgIH1cclxuICAgIFF1ZXJ5JCQxLnByb3RvdHlwZS53aGVyZSA9IGZ1bmN0aW9uIChmaWVsZCwgb3BTdHIsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncygnUXVlcnkud2hlcmUnLCBhcmd1bWVudHMsIDMpO1xyXG4gICAgICAgIHZhbGlkYXRlQXJnVHlwZSgnUXVlcnkud2hlcmUnLCAnbm9uLWVtcHR5IHN0cmluZycsIDIsIG9wU3RyKTtcclxuICAgICAgICB2YWxpZGF0ZURlZmluZWQoJ1F1ZXJ5LndoZXJlJywgMywgdmFsdWUpO1xyXG4gICAgICAgIHZhciBmaWVsZFZhbHVlO1xyXG4gICAgICAgIHZhciBmaWVsZFBhdGggPSBmaWVsZFBhdGhGcm9tQXJndW1lbnQoJ1F1ZXJ5LndoZXJlJywgZmllbGQpO1xyXG4gICAgICAgIHZhciByZWxhdGlvbk9wID0gUmVsYXRpb25PcC5mcm9tU3RyaW5nKG9wU3RyKTtcclxuICAgICAgICBpZiAoZmllbGRQYXRoLmlzS2V5RmllbGQoKSkge1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpb25PcCA9PT0gUmVsYXRpb25PcC5BUlJBWV9DT05UQUlOUykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIFF1ZXJ5LiBZb3UgY2FuJ3QgcGVyZm9ybSBhcnJheS1jb250YWlucyBxdWVyaWVzIG9uIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAnRmllbGRQYXRoLmRvY3VtZW50SWQoKSBzaW5jZSBkb2N1bWVudCBJRHMgYXJlIG5vdCBhcnJheXMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKCcvJykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiBBbGxvdyBzbGFzaGVzIG9uY2UgYW5jZXN0b3IgcXVlcmllcyBhcmUgc3VwcG9ydGVkXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ0Z1bmN0aW9uIFF1ZXJ5LndoZXJlKCkgcmVxdWlyZXMgaXRzIHRoaXJkIHBhcmFtZXRlciB0byBiZSBhICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAndmFsaWQgZG9jdW1lbnQgSUQgaWYgdGhlIGZpcnN0IHBhcmFtZXRlciBpcyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0ZpZWxkUGF0aC5kb2N1bWVudElkKCksIGJ1dCBpdCBjb250YWlucyBhIHNsYXNoLicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdGdW5jdGlvbiBRdWVyeS53aGVyZSgpIHJlcXVpcmVzIGl0cyB0aGlyZCBwYXJhbWV0ZXIgdG8gYmUgYSAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbGlkIGRvY3VtZW50IElEIGlmIHRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdGaWVsZFBhdGguZG9jdW1lbnRJZCgpLCBidXQgaXQgd2FzIGFuIGVtcHR5IHN0cmluZy4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBwYXRoID0gdGhpcy5fcXVlcnkucGF0aC5jaGlsZChuZXcgUmVzb3VyY2VQYXRoKFt2YWx1ZV0pKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydChwYXRoLmxlbmd0aCAlIDIgPT09IDAsICdQYXRoIHNob3VsZCBiZSBhIGRvY3VtZW50IGtleScpO1xyXG4gICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IG5ldyBSZWZWYWx1ZSh0aGlzLmZpcmVzdG9yZS5fZGF0YWJhc2VJZCwgbmV3IERvY3VtZW50S2V5KHBhdGgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERvY3VtZW50UmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gbmV3IFJlZlZhbHVlKHRoaXMuZmlyZXN0b3JlLl9kYXRhYmFzZUlkLCByZWYuX2tleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkZ1bmN0aW9uIFF1ZXJ5LndoZXJlKCkgcmVxdWlyZXMgaXRzIHRoaXJkIHBhcmFtZXRlciB0byBiZSBhIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcInN0cmluZyBvciBhIERvY3VtZW50UmVmZXJlbmNlIGlmIHRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiRmllbGRQYXRoLmRvY3VtZW50SWQoKSwgYnV0IGl0IHdhczogXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICh2YWx1ZURlc2NyaXB0aW9uKHZhbHVlKSArIFwiLlwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZpZWxkVmFsdWUgPSB0aGlzLmZpcmVzdG9yZS5fZGF0YUNvbnZlcnRlci5wYXJzZVF1ZXJ5VmFsdWUoJ1F1ZXJ5LndoZXJlJywgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZmlsdGVyID0gRmlsdGVyLmNyZWF0ZShmaWVsZFBhdGgsIHJlbGF0aW9uT3AsIGZpZWxkVmFsdWUpO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVOZXdGaWx0ZXIoZmlsdGVyKTtcclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5JCQxKHRoaXMuX3F1ZXJ5LmFkZEZpbHRlcihmaWx0ZXIpLCB0aGlzLmZpcmVzdG9yZSk7XHJcbiAgICB9O1xyXG4gICAgUXVlcnkkJDEucHJvdG90eXBlLm9yZGVyQnkgPSBmdW5jdGlvbiAoZmllbGQsIGRpcmVjdGlvblN0cikge1xyXG4gICAgICAgIHZhbGlkYXRlQmV0d2Vlbk51bWJlck9mQXJncygnUXVlcnkub3JkZXJCeScsIGFyZ3VtZW50cywgMSwgMik7XHJcbiAgICAgICAgdmFsaWRhdGVPcHRpb25hbEFyZ1R5cGUoJ1F1ZXJ5Lm9yZGVyQnknLCAnbm9uLWVtcHR5IHN0cmluZycsIDIsIGRpcmVjdGlvblN0cik7XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvbjtcclxuICAgICAgICBpZiAoZGlyZWN0aW9uU3RyID09PSB1bmRlZmluZWQgfHwgZGlyZWN0aW9uU3RyID09PSAnYXNjJykge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBEaXJlY3Rpb24uQVNDRU5ESU5HO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkaXJlY3Rpb25TdHIgPT09ICdkZXNjJykge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBEaXJlY3Rpb24uREVTQ0VORElORztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gUXVlcnkub3JkZXJCeSgpIGhhcyB1bmtub3duIGRpcmVjdGlvbiAnXCIgKyBkaXJlY3Rpb25TdHIgKyBcIicsIFwiICtcclxuICAgICAgICAgICAgICAgIFwiZXhwZWN0ZWQgJ2FzYycgb3IgJ2Rlc2MnLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3F1ZXJ5LnN0YXJ0QXQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ0ludmFsaWQgcXVlcnkuIFlvdSBtdXN0IG5vdCBjYWxsIFF1ZXJ5LnN0YXJ0QXQoKSBvciAnICtcclxuICAgICAgICAgICAgICAgICdRdWVyeS5zdGFydEFmdGVyKCkgYmVmb3JlIGNhbGxpbmcgUXVlcnkub3JkZXJCeSgpLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fcXVlcnkuZW5kQXQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ0ludmFsaWQgcXVlcnkuIFlvdSBtdXN0IG5vdCBjYWxsIFF1ZXJ5LmVuZEF0KCkgb3IgJyArXHJcbiAgICAgICAgICAgICAgICAnUXVlcnkuZW5kQmVmb3JlKCkgYmVmb3JlIGNhbGxpbmcgUXVlcnkub3JkZXJCeSgpLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZmllbGRQYXRoID0gZmllbGRQYXRoRnJvbUFyZ3VtZW50KCdRdWVyeS5vcmRlckJ5JywgZmllbGQpO1xyXG4gICAgICAgIHZhciBvcmRlckJ5ID0gbmV3IE9yZGVyQnkoZmllbGRQYXRoLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVOZXdPcmRlckJ5KG9yZGVyQnkpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkkJDEodGhpcy5fcXVlcnkuYWRkT3JkZXJCeShvcmRlckJ5KSwgdGhpcy5maXJlc3RvcmUpO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5JCQxLnByb3RvdHlwZS5saW1pdCA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgdmFsaWRhdGVFeGFjdE51bWJlck9mQXJncygnUXVlcnkubGltaXQnLCBhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIHZhbGlkYXRlQXJnVHlwZSgnUXVlcnkubGltaXQnLCAnbnVtYmVyJywgMSwgbik7XHJcbiAgICAgICAgaWYgKG4gPD0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgUXVlcnkuIFF1ZXJ5IGxpbWl0IChcIiArIG4gKyBcIikgaXMgaW52YWxpZC4gTGltaXQgbXVzdCBiZSBcIiArXHJcbiAgICAgICAgICAgICAgICAncG9zaXRpdmUuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkkJDEodGhpcy5fcXVlcnkud2l0aExpbWl0KG4pLCB0aGlzLmZpcmVzdG9yZSk7XHJcbiAgICB9O1xyXG4gICAgUXVlcnkkJDEucHJvdG90eXBlLnN0YXJ0QXQgPSBmdW5jdGlvbiAoZG9jT3JGaWVsZCkge1xyXG4gICAgICAgIHZhciBmaWVsZHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBmaWVsZHNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbGlkYXRlQXRMZWFzdE51bWJlck9mQXJncygnUXVlcnkuc3RhcnRBdCcsIGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgdmFyIGJvdW5kID0gdGhpcy5ib3VuZEZyb21Eb2NPckZpZWxkcygnUXVlcnkuc3RhcnRBdCcsIGRvY09yRmllbGQsIGZpZWxkcywgXHJcbiAgICAgICAgLypiZWZvcmU9Ki8gdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSQkMSh0aGlzLl9xdWVyeS53aXRoU3RhcnRBdChib3VuZCksIHRoaXMuZmlyZXN0b3JlKTtcclxuICAgIH07XHJcbiAgICBRdWVyeSQkMS5wcm90b3R5cGUuc3RhcnRBZnRlciA9IGZ1bmN0aW9uIChkb2NPckZpZWxkKSB7XHJcbiAgICAgICAgdmFyIGZpZWxkcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGZpZWxkc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVBdExlYXN0TnVtYmVyT2ZBcmdzKCdRdWVyeS5zdGFydEFmdGVyJywgYXJndW1lbnRzLCAxKTtcclxuICAgICAgICB2YXIgYm91bmQgPSB0aGlzLmJvdW5kRnJvbURvY09yRmllbGRzKCdRdWVyeS5zdGFydEFmdGVyJywgZG9jT3JGaWVsZCwgZmllbGRzLCBcclxuICAgICAgICAvKmJlZm9yZT0qLyBmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSQkMSh0aGlzLl9xdWVyeS53aXRoU3RhcnRBdChib3VuZCksIHRoaXMuZmlyZXN0b3JlKTtcclxuICAgIH07XHJcbiAgICBRdWVyeSQkMS5wcm90b3R5cGUuZW5kQmVmb3JlID0gZnVuY3Rpb24gKGRvY09yRmllbGQpIHtcclxuICAgICAgICB2YXIgZmllbGRzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgZmllbGRzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWxpZGF0ZUF0TGVhc3ROdW1iZXJPZkFyZ3MoJ1F1ZXJ5LmVuZEJlZm9yZScsIGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgdmFyIGJvdW5kID0gdGhpcy5ib3VuZEZyb21Eb2NPckZpZWxkcygnUXVlcnkuZW5kQmVmb3JlJywgZG9jT3JGaWVsZCwgZmllbGRzLCBcclxuICAgICAgICAvKmJlZm9yZT0qLyB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5JCQxKHRoaXMuX3F1ZXJ5LndpdGhFbmRBdChib3VuZCksIHRoaXMuZmlyZXN0b3JlKTtcclxuICAgIH07XHJcbiAgICBRdWVyeSQkMS5wcm90b3R5cGUuZW5kQXQgPSBmdW5jdGlvbiAoZG9jT3JGaWVsZCkge1xyXG4gICAgICAgIHZhciBmaWVsZHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBmaWVsZHNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbGlkYXRlQXRMZWFzdE51bWJlck9mQXJncygnUXVlcnkuZW5kQXQnLCBhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIHZhciBib3VuZCA9IHRoaXMuYm91bmRGcm9tRG9jT3JGaWVsZHMoJ1F1ZXJ5LmVuZEF0JywgZG9jT3JGaWVsZCwgZmllbGRzLCBcclxuICAgICAgICAvKmJlZm9yZT0qLyBmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSQkMSh0aGlzLl9xdWVyeS53aXRoRW5kQXQoYm91bmQpLCB0aGlzLmZpcmVzdG9yZSk7XHJcbiAgICB9O1xyXG4gICAgUXVlcnkkJDEucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFF1ZXJ5JCQxKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2xhc3NFcnJvcignaXNFcXVhbCcsICdRdWVyeScsIDEsIG90aGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmZpcmVzdG9yZSA9PT0gb3RoZXIuZmlyZXN0b3JlICYmIHRoaXMuX3F1ZXJ5LmlzRXF1YWwob3RoZXIuX3F1ZXJ5KSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYSBib3VuZCBmcm9tIGEgZG9jdW1lbnQgb3IgZmllbGRzICovXHJcbiAgICBRdWVyeSQkMS5wcm90b3R5cGUuYm91bmRGcm9tRG9jT3JGaWVsZHMgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgZG9jT3JGaWVsZCwgZmllbGRzLCBiZWZvcmUpIHtcclxuICAgICAgICB2YWxpZGF0ZURlZmluZWQobWV0aG9kTmFtZSwgMSwgZG9jT3JGaWVsZCk7XHJcbiAgICAgICAgaWYgKGRvY09yRmllbGQgaW5zdGFuY2VvZiBEb2N1bWVudFNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgIGlmIChmaWVsZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgXCJUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQgdG8gXCIgKyBtZXRob2ROYW1lICsgXCIoKS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHNuYXAgPSBkb2NPckZpZWxkO1xyXG4gICAgICAgICAgICBpZiAoIXNuYXAuZXhpc3RzKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5OT1RfRk9VTkQsIFwiQ2FuJ3QgdXNlIGEgRG9jdW1lbnRTbmFwc2hvdCB0aGF0IGRvZXNuJ3QgZXhpc3QgZm9yIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAobWV0aG9kTmFtZSArIFwiKCkuXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ib3VuZEZyb21Eb2N1bWVudChtZXRob2ROYW1lLCBzbmFwLl9kb2N1bWVudCwgYmVmb3JlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBhbGxGaWVsZHMgPSBbZG9jT3JGaWVsZF0uY29uY2F0KGZpZWxkcyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJvdW5kRnJvbUZpZWxkcyhtZXRob2ROYW1lLCBhbGxGaWVsZHMsIGJlZm9yZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgQm91bmQgZnJvbSBhIHF1ZXJ5IGFuZCBhIGRvY3VtZW50LlxyXG4gICAgICpcclxuICAgICAqIE5vdGUgdGhhdCB0aGUgQm91bmQgd2lsbCBhbHdheXMgaW5jbHVkZSB0aGUga2V5IG9mIHRoZSBkb2N1bWVudFxyXG4gICAgICogYW5kIHNvIG9ubHkgdGhlIHByb3ZpZGVkIGRvY3VtZW50IHdpbGwgY29tcGFyZSBlcXVhbCB0byB0aGUgcmV0dXJuZWRcclxuICAgICAqIHBvc2l0aW9uLlxyXG4gICAgICpcclxuICAgICAqIFdpbGwgdGhyb3cgaWYgdGhlIGRvY3VtZW50IGRvZXMgbm90IGNvbnRhaW4gYWxsIGZpZWxkcyBvZiB0aGUgb3JkZXIgYnlcclxuICAgICAqIG9mIHRoZSBxdWVyeS5cclxuICAgICAqL1xyXG4gICAgUXVlcnkkJDEucHJvdG90eXBlLmJvdW5kRnJvbURvY3VtZW50ID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGRvYywgYmVmb3JlKSB7XHJcbiAgICAgICAgdmFyIGNvbXBvbmVudHMgPSBbXTtcclxuICAgICAgICAvLyBCZWNhdXNlIHBlb3BsZSBleHBlY3QgdG8gY29udGludWUvZW5kIGEgcXVlcnkgYXQgdGhlIGV4YWN0IGRvY3VtZW50XHJcbiAgICAgICAgLy8gcHJvdmlkZWQsIHdlIG5lZWQgdG8gdXNlIHRoZSBpbXBsaWNpdCBzb3J0IG9yZGVyIHJhdGhlciB0aGFuIHRoZSBleHBsaWNpdFxyXG4gICAgICAgIC8vIHNvcnQgb3JkZXIsIGJlY2F1c2UgaXQncyBndWFyYW50ZWVkIHRvIGNvbnRhaW4gdGhlIGRvY3VtZW50IGtleS4gVGhhdCB3YXlcclxuICAgICAgICAvLyB0aGUgcG9zaXRpb24gYmVjb21lcyB1bmFtYmlndW91cyBhbmQgdGhlIHF1ZXJ5IGNvbnRpbnVlcy9lbmRzIGV4YWN0bHkgYXRcclxuICAgICAgICAvLyB0aGUgcHJvdmlkZWQgZG9jdW1lbnQuIFdpdGhvdXQgdGhlIGtleSAoYnkgdXNpbmcgdGhlIGV4cGxpY2l0IHNvcnRcclxuICAgICAgICAvLyBvcmRlcnMpLCBtdWx0aXBsZSBkb2N1bWVudHMgY291bGQgbWF0Y2ggdGhlIHBvc2l0aW9uLCB5aWVsZGluZyBkdXBsaWNhdGVcclxuICAgICAgICAvLyByZXN1bHRzLlxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9xdWVyeS5vcmRlckJ5OyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb3JkZXJCeSA9IF9hW19pXTtcclxuICAgICAgICAgICAgaWYgKG9yZGVyQnkuZmllbGQuaXNLZXlGaWVsZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzLnB1c2gobmV3IFJlZlZhbHVlKHRoaXMuZmlyZXN0b3JlLl9kYXRhYmFzZUlkLCBkb2Mua2V5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBkb2MuZmllbGQob3JkZXJCeS5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSBvcmRlckJ5LmZpZWxkLmNhbm9uaWNhbFN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gWW91IGFyZSB0cnlpbmcgdG8gc3RhcnQgb3IgZW5kIGEgcXVlcnkgdXNpbmcgYSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChcImRvY3VtZW50IGZvciB3aGljaCB0aGUgZmllbGQgJ1wiICsgZmllbGQgKyBcIicgKHVzZWQgYXMgdGhlIFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib3JkZXJCeSkgZG9lcyBub3QgZXhpc3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgQm91bmQoY29tcG9uZW50cywgYmVmb3JlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIGEgbGlzdCBvZiBmaWVsZCB2YWx1ZXMgdG8gYSBCb3VuZCBmb3IgdGhlIGdpdmVuIHF1ZXJ5LlxyXG4gICAgICovXHJcbiAgICBRdWVyeSQkMS5wcm90b3R5cGUuYm91bmRGcm9tRmllbGRzID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIHZhbHVlcywgYmVmb3JlKSB7XHJcbiAgICAgICAgLy8gVXNlIGV4cGxpY2l0IG9yZGVyIGJ5J3MgYmVjYXVzZSBpdCBoYXMgdG8gbWF0Y2ggdGhlIHF1ZXJ5IHRoZSB1c2VyIG1hZGVcclxuICAgICAgICB2YXIgb3JkZXJCeSA9IHRoaXMuX3F1ZXJ5LmV4cGxpY2l0T3JkZXJCeTtcclxuICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA+IG9yZGVyQnkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsIFwiVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkIHRvIFwiICsgbWV0aG9kTmFtZSArIFwiKCkuIFwiICtcclxuICAgICAgICAgICAgICAgIFwiVGhlIG51bWJlciBvZiBhcmd1bWVudHMgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIFwiICtcclxuICAgICAgICAgICAgICAgIFwibnVtYmVyIG9mIFF1ZXJ5Lm9yZGVyQnkoKSBjbGF1c2VzXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29tcG9uZW50cyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciByYXdWYWx1ZSA9IHZhbHVlc1tpXTtcclxuICAgICAgICAgICAgdmFyIG9yZGVyQnlDb21wb25lbnQgPSBvcmRlckJ5W2ldO1xyXG4gICAgICAgICAgICBpZiAob3JkZXJCeUNvbXBvbmVudC5maWVsZC5pc0tleUZpZWxkKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmF3VmFsdWUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBFeHBlY3RlZCBhIHN0cmluZyBmb3IgZG9jdW1lbnQgSUQgaW4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAobWV0aG9kTmFtZSArIFwiKCksIGJ1dCBnb3QgYSBcIiArIHR5cGVvZiByYXdWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJhd1ZhbHVlLmluZGV4T2YoJy8nKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIERvY3VtZW50IElEICdcIiArIHJhd1ZhbHVlICsgXCInIGNvbnRhaW5zIGEgc2xhc2ggaW4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAobWV0aG9kTmFtZSArIFwiKClcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IG5ldyBEb2N1bWVudEtleSh0aGlzLl9xdWVyeS5wYXRoLmNoaWxkKHJhd1ZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzLnB1c2gobmV3IFJlZlZhbHVlKHRoaXMuZmlyZXN0b3JlLl9kYXRhYmFzZUlkLCBrZXkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkID0gdGhpcy5maXJlc3RvcmUuX2RhdGFDb252ZXJ0ZXIucGFyc2VRdWVyeVZhbHVlKG1ldGhvZE5hbWUsIHJhd1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMucHVzaCh3cmFwcGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEJvdW5kKGNvbXBvbmVudHMsIGJlZm9yZSk7XHJcbiAgICB9O1xyXG4gICAgUXVlcnkkJDEucHJvdG90eXBlLm9uU25hcHNob3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbGlkYXRlQmV0d2Vlbk51bWJlck9mQXJncygnUXVlcnkub25TbmFwc2hvdCcsIGFyZ3VtZW50cywgMSwgNCk7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICB2YXIgb2JzZXJ2ZXI7XHJcbiAgICAgICAgdmFyIGN1cnJBcmcgPSAwO1xyXG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1tjdXJyQXJnXSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgIWlzUGFydGlhbE9ic2VydmVyKGFyZ3NbY3VyckFyZ10pKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmdzW2N1cnJBcmddO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZU9wdGlvbk5hbWVzKCdRdWVyeS5vblNuYXBzaG90Jywgb3B0aW9ucywgW1xyXG4gICAgICAgICAgICAgICAgJ2luY2x1ZGVNZXRhZGF0YUNoYW5nZXMnXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZU5hbWVkT3B0aW9uYWxUeXBlKCdRdWVyeS5vblNuYXBzaG90JywgJ2Jvb2xlYW4nLCAnaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcycsIG9wdGlvbnMuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcyk7XHJcbiAgICAgICAgICAgIGN1cnJBcmcrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUGFydGlhbE9ic2VydmVyKGFyZ3NbY3VyckFyZ10pKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0gYXJnc1tjdXJyQXJnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQXJnVHlwZSgnUXVlcnkub25TbmFwc2hvdCcsICdmdW5jdGlvbicsIGN1cnJBcmcsIGFyZ3NbY3VyckFyZ10pO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZU9wdGlvbmFsQXJnVHlwZSgnUXVlcnkub25TbmFwc2hvdCcsICdmdW5jdGlvbicsIGN1cnJBcmcgKyAxLCBhcmdzW2N1cnJBcmcgKyAxXSk7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlT3B0aW9uYWxBcmdUeXBlKCdRdWVyeS5vblNuYXBzaG90JywgJ2Z1bmN0aW9uJywgY3VyckFyZyArIDIsIGFyZ3NbY3VyckFyZyArIDJdKTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiBhcmdzW2N1cnJBcmddLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGFyZ3NbY3VyckFyZyArIDFdLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGFyZ3NbY3VyckFyZyArIDJdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLm9uU25hcHNob3RJbnRlcm5hbChvcHRpb25zLCBvYnNlcnZlcik7XHJcbiAgICB9O1xyXG4gICAgUXVlcnkkJDEucHJvdG90eXBlLm9uU25hcHNob3RJbnRlcm5hbCA9IGZ1bmN0aW9uIChvcHRpb25zLCBvYnNlcnZlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGVyckhhbmRsZXIgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuY2F1Z2h0IEVycm9yIGluIG9uU25hcHNob3Q6JywgZXJyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChvYnNlcnZlci5lcnJvcikge1xyXG4gICAgICAgICAgICBlcnJIYW5kbGVyID0gb2JzZXJ2ZXIuZXJyb3IuYmluZChvYnNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhc3luY09ic2VydmVyID0gbmV3IEFzeW5jT2JzZXJ2ZXIoe1xyXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQobmV3IFF1ZXJ5U25hcHNob3QoX3RoaXMuZmlyZXN0b3JlLCBfdGhpcy5fcXVlcnksIHJlc3VsdCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZXJySGFuZGxlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBmaXJlc3RvcmVDbGllbnQgPSB0aGlzLmZpcmVzdG9yZS5lbnN1cmVDbGllbnRDb25maWd1cmVkKCk7XHJcbiAgICAgICAgdmFyIGludGVybmFsTGlzdGVuZXIgPSBmaXJlc3RvcmVDbGllbnQubGlzdGVuKHRoaXMuX3F1ZXJ5LCBhc3luY09ic2VydmVyLCBvcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBhc3luY09ic2VydmVyLm11dGUoKTtcclxuICAgICAgICAgICAgZmlyZXN0b3JlQ2xpZW50LnVubGlzdGVuKGludGVybmFsTGlzdGVuZXIpO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgUXVlcnkkJDEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YWxpZGF0ZUJldHdlZW5OdW1iZXJPZkFyZ3MoJ1F1ZXJ5LmdldCcsIGFyZ3VtZW50cywgMCwgMSk7XHJcbiAgICAgICAgdmFsaWRhdGVHZXRPcHRpb25zKCdRdWVyeS5nZXQnLCBvcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNvdXJjZSA9PT0gJ2NhY2hlJykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZmlyZXN0b3JlXHJcbiAgICAgICAgICAgICAgICAgICAgLmVuc3VyZUNsaWVudENvbmZpZ3VyZWQoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXREb2N1bWVudHNGcm9tTG9jYWxDYWNoZShfdGhpcy5fcXVlcnkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZpZXdTbmFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgUXVlcnlTbmFwc2hvdChfdGhpcy5maXJlc3RvcmUsIF90aGlzLl9xdWVyeSwgdmlld1NuYXApKTtcclxuICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5nZXRWaWFTbmFwc2hvdExpc3RlbmVyKHJlc29sdmUsIHJlamVjdCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBRdWVyeSQkMS5wcm90b3R5cGUuZ2V0VmlhU25hcHNob3RMaXN0ZW5lciA9IGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgdW5saXN0ZW4gPSB0aGlzLm9uU25hcHNob3RJbnRlcm5hbCh7XHJcbiAgICAgICAgICAgIGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6IHRydWUsXHJcbiAgICAgICAgICAgIHdhaXRGb3JTeW5jV2hlbk9ubGluZTogdHJ1ZVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHF1ZXJ5IGZpcnN0IGJlZm9yZSBwYXNzaW5nIGV2ZW50IHRvIHVzZXIgdG8gYXZvaWRcclxuICAgICAgICAgICAgICAgIC8vIHVzZXIgYWN0aW9ucyBhZmZlY3RpbmcgdGhlIG5vdyBzdGFsZSBxdWVyeS5cclxuICAgICAgICAgICAgICAgIHVubGlzdGVuKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lm1ldGFkYXRhLmZyb21DYWNoZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgJiZcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNvdXJjZSA9PT0gJ3NlcnZlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEZpcmVzdG9yZUVycm9yKENvZGUuVU5BVkFJTEFCTEUsICdGYWlsZWQgdG8gZ2V0IGRvY3VtZW50cyBmcm9tIHNlcnZlci4gKEhvd2V2ZXIsIHRoZXNlICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZG9jdW1lbnRzIG1heSBleGlzdCBpbiB0aGUgbG9jYWwgY2FjaGUuIFJ1biBhZ2FpbiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpdGhvdXQgc2V0dGluZyBzb3VyY2UgdG8gXCJzZXJ2ZXJcIiB0byAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3JldHJpZXZlIHRoZSBjYWNoZWQgZG9jdW1lbnRzLiknKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiByZWplY3RcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBRdWVyeSQkMS5wcm90b3R5cGUudmFsaWRhdGVOZXdGaWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgaWYgKGZpbHRlciBpbnN0YW5jZW9mIFJlbGF0aW9uRmlsdGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXIuaXNJbmVxdWFsaXR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ0ZpZWxkID0gdGhpcy5fcXVlcnkuZ2V0SW5lcXVhbGl0eUZpbHRlckZpZWxkKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdGaWVsZCAhPT0gbnVsbCAmJiAhZXhpc3RpbmdGaWVsZC5pc0VxdWFsKGZpbHRlci5maWVsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnSW52YWxpZCBxdWVyeS4gQWxsIHdoZXJlIGZpbHRlcnMgd2l0aCBhbiBpbmVxdWFsaXR5JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcgKDwsIDw9LCA+LCBvciA+PSkgbXVzdCBiZSBvbiB0aGUgc2FtZSBmaWVsZC4gQnV0IHlvdSBoYXZlJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChcIiBpbmVxdWFsaXR5IGZpbHRlcnMgb24gJ1wiICsgZXhpc3RpbmdGaWVsZC50b1N0cmluZygpICsgXCInXCIpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKFwiIGFuZCAnXCIgKyBmaWx0ZXIuZmllbGQudG9TdHJpbmcoKSArIFwiJ1wiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RPcmRlckJ5RmllbGQgPSB0aGlzLl9xdWVyeS5nZXRGaXJzdE9yZGVyQnlGaWVsZCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0T3JkZXJCeUZpZWxkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZU9yZGVyQnlBbmRJbmVxdWFsaXR5TWF0Y2goZmlsdGVyLmZpZWxkLCBmaXJzdE9yZGVyQnlGaWVsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZmlsdGVyLm9wID09PSBSZWxhdGlvbk9wLkFSUkFZX0NPTlRBSU5TKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcXVlcnkuaGFzQXJyYXlDb250YWluc0ZpbHRlcigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ0ludmFsaWQgcXVlcnkuIFF1ZXJpZXMgb25seSBzdXBwb3J0IGEgc2luZ2xlIGFycmF5LWNvbnRhaW5zICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZmlsdGVyLicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFF1ZXJ5JCQxLnByb3RvdHlwZS52YWxpZGF0ZU5ld09yZGVyQnkgPSBmdW5jdGlvbiAob3JkZXJCeSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9xdWVyeS5nZXRGaXJzdE9yZGVyQnlGaWVsZCgpID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IG9yZGVyIGJ5LiBJdCBtdXN0IG1hdGNoIGFueSBpbmVxdWFsaXR5LlxyXG4gICAgICAgICAgICB2YXIgaW5lcXVhbGl0eUZpZWxkID0gdGhpcy5fcXVlcnkuZ2V0SW5lcXVhbGl0eUZpbHRlckZpZWxkKCk7XHJcbiAgICAgICAgICAgIGlmIChpbmVxdWFsaXR5RmllbGQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVPcmRlckJ5QW5kSW5lcXVhbGl0eU1hdGNoKGluZXF1YWxpdHlGaWVsZCwgb3JkZXJCeS5maWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUXVlcnkkJDEucHJvdG90eXBlLnZhbGlkYXRlT3JkZXJCeUFuZEluZXF1YWxpdHlNYXRjaCA9IGZ1bmN0aW9uIChpbmVxdWFsaXR5LCBvcmRlckJ5KSB7XHJcbiAgICAgICAgaWYgKCFvcmRlckJ5LmlzRXF1YWwoaW5lcXVhbGl0eSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBZb3UgaGF2ZSBhIHdoZXJlIGZpbHRlciB3aXRoIGFuIGluZXF1YWxpdHkgXCIgK1xyXG4gICAgICAgICAgICAgICAgKFwiKDwsIDw9LCA+LCBvciA+PSkgb24gZmllbGQgJ1wiICsgaW5lcXVhbGl0eS50b1N0cmluZygpICsgXCInIFwiKSArXHJcbiAgICAgICAgICAgICAgICAoXCJhbmQgc28geW91IG11c3QgYWxzbyB1c2UgJ1wiICsgaW5lcXVhbGl0eS50b1N0cmluZygpICsgXCInIFwiKSArXHJcbiAgICAgICAgICAgICAgICBcImFzIHlvdXIgZmlyc3QgUXVlcnkub3JkZXJCeSgpLCBidXQgeW91ciBmaXJzdCBRdWVyeS5vcmRlckJ5KCkgXCIgK1xyXG4gICAgICAgICAgICAgICAgKFwiaXMgb24gZmllbGQgJ1wiICsgb3JkZXJCeS50b1N0cmluZygpICsgXCInIGluc3RlYWQuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFF1ZXJ5JCQxO1xyXG59KCkpO1xyXG52YXIgUXVlcnlTbmFwc2hvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFF1ZXJ5U25hcHNob3QoX2ZpcmVzdG9yZSwgX29yaWdpbmFsUXVlcnksIF9zbmFwc2hvdCkge1xyXG4gICAgICAgIHRoaXMuX2ZpcmVzdG9yZSA9IF9maXJlc3RvcmU7XHJcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxRdWVyeSA9IF9vcmlnaW5hbFF1ZXJ5O1xyXG4gICAgICAgIHRoaXMuX3NuYXBzaG90ID0gX3NuYXBzaG90O1xyXG4gICAgICAgIHRoaXMuX2NhY2hlZENoYW5nZXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2NhY2hlZENoYW5nZXNJbmNsdWRlTWV0YWRhdGFDaGFuZ2VzID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbmV3IFNuYXBzaG90TWV0YWRhdGEoX3NuYXBzaG90Lmhhc1BlbmRpbmdXcml0ZXMsIF9zbmFwc2hvdC5mcm9tQ2FjaGUpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5U25hcHNob3QucHJvdG90eXBlLCBcImRvY3NcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZG9jKSB7IHJldHVybiByZXN1bHQucHVzaChkb2MpOyB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeVNuYXBzaG90LnByb3RvdHlwZSwgXCJlbXB0eVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbmFwc2hvdC5kb2NzLmlzRW1wdHkoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeVNuYXBzaG90LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NuYXBzaG90LmRvY3Muc2l6ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFF1ZXJ5U25hcHNob3QucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHRoaXNBcmcpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhbGlkYXRlQmV0d2Vlbk51bWJlck9mQXJncygnUXVlcnlTbmFwc2hvdC5mb3JFYWNoJywgYXJndW1lbnRzLCAxLCAyKTtcclxuICAgICAgICB2YWxpZGF0ZUFyZ1R5cGUoJ1F1ZXJ5U25hcHNob3QuZm9yRWFjaCcsICdmdW5jdGlvbicsIDEsIGNhbGxiYWNrKTtcclxuICAgICAgICB0aGlzLl9zbmFwc2hvdC5kb2NzLmZvckVhY2goZnVuY3Rpb24gKGRvYykge1xyXG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIF90aGlzLmNvbnZlcnRUb0RvY3VtZW50SW1wbChkb2MpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUXVlcnlTbmFwc2hvdC5wcm90b3R5cGUsIFwicXVlcnlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5JDEodGhpcy5fb3JpZ2luYWxRdWVyeSwgdGhpcy5fZmlyZXN0b3JlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFF1ZXJ5U25hcHNob3QucHJvdG90eXBlLmRvY0NoYW5nZXMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlT3B0aW9uTmFtZXMoJ1F1ZXJ5U25hcHNob3QuZG9jQ2hhbmdlcycsIG9wdGlvbnMsIFtcclxuICAgICAgICAgICAgICAgICdpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzJ1xyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgdmFsaWRhdGVOYW1lZE9wdGlvbmFsVHlwZSgnUXVlcnlTbmFwc2hvdC5kb2NDaGFuZ2VzJywgJ2Jvb2xlYW4nLCAnaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcycsIG9wdGlvbnMuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzID0gISEob3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGVNZXRhZGF0YUNoYW5nZXMpO1xyXG4gICAgICAgIGlmIChpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzICYmIHRoaXMuX3NuYXBzaG90LmV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdUbyBpbmNsdWRlIG1ldGFkYXRhIGNoYW5nZXMgd2l0aCB5b3VyIGRvY3VtZW50IGNoYW5nZXMsIHlvdSBtdXN0ICcgK1xyXG4gICAgICAgICAgICAgICAgJ2Fsc28gcGFzcyB7IGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6dHJ1ZSB9IHRvIG9uU25hcHNob3QoKS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZWRDaGFuZ2VzIHx8XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZENoYW5nZXNJbmNsdWRlTWV0YWRhdGFDaGFuZ2VzICE9PSBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZENoYW5nZXMgPSBjaGFuZ2VzRnJvbVNuYXBzaG90KHRoaXMuX2ZpcmVzdG9yZSwgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcywgdGhpcy5fc25hcHNob3QpO1xyXG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRDaGFuZ2VzSW5jbHVkZU1ldGFkYXRhQ2hhbmdlcyA9IGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRDaGFuZ2VzO1xyXG4gICAgfTtcclxuICAgIC8qKiBDaGVjayB0aGUgZXF1YWxpdHkuIFRoZSBjYWxsIGNhbiBiZSB2ZXJ5IGV4cGVuc2l2ZS4gKi9cclxuICAgIFF1ZXJ5U25hcHNob3QucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFF1ZXJ5U25hcHNob3QpKSB7XHJcbiAgICAgICAgICAgIHRocm93IGludmFsaWRDbGFzc0Vycm9yKCdpc0VxdWFsJywgJ1F1ZXJ5U25hcHNob3QnLCAxLCBvdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAodGhpcy5fZmlyZXN0b3JlID09PSBvdGhlci5fZmlyZXN0b3JlICYmXHJcbiAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsUXVlcnkuaXNFcXVhbChvdGhlci5fb3JpZ2luYWxRdWVyeSkgJiZcclxuICAgICAgICAgICAgdGhpcy5fc25hcHNob3QuaXNFcXVhbChvdGhlci5fc25hcHNob3QpKTtcclxuICAgIH07XHJcbiAgICBRdWVyeVNuYXBzaG90LnByb3RvdHlwZS5jb252ZXJ0VG9Eb2N1bWVudEltcGwgPSBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeURvY3VtZW50U25hcHNob3QodGhpcy5fZmlyZXN0b3JlLCBkb2Mua2V5LCBkb2MsIHRoaXMubWV0YWRhdGEuZnJvbUNhY2hlLCB0aGlzLl9zbmFwc2hvdC5tdXRhdGVkS2V5cy5oYXMoZG9jLmtleSkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBRdWVyeVNuYXBzaG90O1xyXG59KCkpO1xyXG4vLyBUT0RPKDIwMTgvMTEvMDEpOiBBcyBvZiAyMDE4LzA0LzE3IHdlJ3JlIGNoYW5naW5nIGRvY0NoYW5nZXMgZnJvbSBhbiBhcnJheVxyXG4vLyBpbnRvIGEgbWV0aG9kLiBCZWNhdXNlIHRoaXMgaXMgYSBydW50aW1lIGJyZWFraW5nIGNoYW5nZSBhbmQgc29tZXdoYXQgc3VidGxlXHJcbi8vIChib3RoIEFycmF5IGFuZCBGdW5jdGlvbiBoYXZlIGEgLmxlbmd0aCwgZXRjLiksIHdlJ2xsIHJlcGxhY2UgY29tbW9ubHktdXNlZFxyXG4vLyBwcm9wZXJ0aWVzIChpbmNsdWRpbmcgU3ltYm9sLml0ZXJhdG9yKSB0byB0aHJvdyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlLiBJblxyXG4vLyB+NiBtb250aHMgd2UgY2FuIGRlbGV0ZSB0aGUgY3VzdG9tIGVycm9yIGFzIG1vc3QgZm9sa3Mgd2lsbCBoYXZlIGhvcGVmdWxseVxyXG4vLyBtaWdyYXRlZC5cclxuZnVuY3Rpb24gdGhyb3dEb2NDaGFuZ2VzTWV0aG9kRXJyb3IoKSB7XHJcbiAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnUXVlcnlTbmFwc2hvdC5kb2NDaGFuZ2VzIGhhcyBiZWVuIGNoYW5nZWQgZnJvbSBhIHByb3BlcnR5IGludG8gYSAnICtcclxuICAgICAgICAnbWV0aG9kLCBzbyB1c2FnZXMgbGlrZSBcInF1ZXJ5U25hcHNob3QuZG9jQ2hhbmdlc1wiIHNob3VsZCBiZWNvbWUgJyArXHJcbiAgICAgICAgJ1wicXVlcnlTbmFwc2hvdC5kb2NDaGFuZ2VzKClcIicpO1xyXG59XHJcbnZhciBkb2NDaGFuZ2VzUHJvcGVydGllc1RvT3ZlcnJpZGUgPSBbXHJcbiAgICAnbGVuZ3RoJyxcclxuICAgICdmb3JFYWNoJyxcclxuICAgICdtYXAnXHJcbl0uY29uY2F0KCh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFtTeW1ib2wuaXRlcmF0b3JdIDogW10pKTtcclxuZG9jQ2hhbmdlc1Byb3BlcnRpZXNUb092ZXJyaWRlLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XHJcbiAgICAvKipcclxuICAgICAqIFdlIGFyZSAocmUtKWRlZmluaW5nIHByb3BlcnRpZXMgb24gUXVlcnlTbmFwc2hvdC5wcm90b3R5cGUuZG9jQ2hhbmdlcyB3aGljaFxyXG4gICAgICogaXMgYSBGdW5jdGlvbi4gVGhpcyBjb3VsZCBmYWlsLCBpbiBwYXJ0aWN1bGFyIGluIHRoZSBjYXNlIG9mICdsZW5ndGgnIHdoaWNoXHJcbiAgICAgKiBhbHJlYWR5IGV4aXN0cyBvbiBGdW5jdGlvbi5wcm90b3R5cGUgYW5kIG9uIElFMTEgaXMgaW1wcm9wZXJseSBkZWZpbmVkIHdpdGhcclxuICAgICAqIGB7IGNvbmZpZ3VyYWJsZTogZmFsc2UgfWAuIFNvIHdlIHdyYXAgdGhpcyBpbiBhIHRyeS9jYXRjaCB0byBlbnN1cmUgdGhhdCB3ZVxyXG4gICAgICogc3RpbGwgaGF2ZSBhIGZ1bmN0aW9uYWwgU0RLLlxyXG4gICAgICovXHJcbiAgICB0cnkge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeVNuYXBzaG90LnByb3RvdHlwZS5kb2NDaGFuZ2VzLCBwcm9wZXJ0eSwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRocm93RG9jQ2hhbmdlc01ldGhvZEVycm9yKCk7IH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHsgfSAvLyBJZ25vcmUgdGhpcyBmYWlsdXJlIGludGVudGlvbmFsbHlcclxufSk7XHJcbnZhciBDb2xsZWN0aW9uUmVmZXJlbmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQ29sbGVjdGlvblJlZmVyZW5jZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIENvbGxlY3Rpb25SZWZlcmVuY2UocGF0aCwgZmlyZXN0b3JlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgUXVlcnkuYXRQYXRoKHBhdGgpLCBmaXJlc3RvcmUpIHx8IHRoaXM7XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoICUgMiAhPT0gMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCAnSW52YWxpZCBjb2xsZWN0aW9uIHJlZmVyZW5jZS4gQ29sbGVjdGlvbiAnICtcclxuICAgICAgICAgICAgICAgICdyZWZlcmVuY2VzIG11c3QgaGF2ZSBhbiBvZGQgbnVtYmVyIG9mIHNlZ21lbnRzLCBidXQgJyArXHJcbiAgICAgICAgICAgICAgICAocGF0aC5jYW5vbmljYWxTdHJpbmcoKSArIFwiIGhhcyBcIiArIHBhdGgubGVuZ3RoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xsZWN0aW9uUmVmZXJlbmNlLnByb3RvdHlwZSwgXCJpZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9xdWVyeS5wYXRoLmxhc3RTZWdtZW50KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sbGVjdGlvblJlZmVyZW5jZS5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFBhdGggPSB0aGlzLl9xdWVyeS5wYXRoLnBvcExhc3QoKTtcclxuICAgICAgICAgICAgaWYgKHBhcmVudFBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRSZWZlcmVuY2UobmV3IERvY3VtZW50S2V5KHBhcmVudFBhdGgpLCB0aGlzLmZpcmVzdG9yZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xsZWN0aW9uUmVmZXJlbmNlLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5LnBhdGguY2Fub25pY2FsU3RyaW5nKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBDb2xsZWN0aW9uUmVmZXJlbmNlLnByb3RvdHlwZS5kb2MgPSBmdW5jdGlvbiAocGF0aFN0cmluZykge1xyXG4gICAgICAgIHZhbGlkYXRlQmV0d2Vlbk51bWJlck9mQXJncygnQ29sbGVjdGlvblJlZmVyZW5jZS5kb2MnLCBhcmd1bWVudHMsIDAsIDEpO1xyXG4gICAgICAgIC8vIFdlIGFsbG93IG9taXNzaW9uIG9mICdwYXRoU3RyaW5nJyBidXQgZXhwbGljaXRseSBwcm9oaWJpdCBwYXNzaW5nIGluIGJvdGhcclxuICAgICAgICAvLyAndW5kZWZpbmVkJyBhbmQgJ251bGwnLlxyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHBhdGhTdHJpbmcgPSBBdXRvSWQubmV3SWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVBcmdUeXBlKCdDb2xsZWN0aW9uUmVmZXJlbmNlLmRvYycsICdub24tZW1wdHkgc3RyaW5nJywgMSwgcGF0aFN0cmluZyk7XHJcbiAgICAgICAgaWYgKHBhdGhTdHJpbmcgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBGaXJlc3RvcmVFcnJvcihDb2RlLklOVkFMSURfQVJHVU1FTlQsICdEb2N1bWVudCBwYXRoIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwYXRoID0gUmVzb3VyY2VQYXRoLmZyb21TdHJpbmcocGF0aFN0cmluZyk7XHJcbiAgICAgICAgcmV0dXJuIERvY3VtZW50UmVmZXJlbmNlLmZvclBhdGgodGhpcy5fcXVlcnkucGF0aC5jaGlsZChwYXRoKSwgdGhpcy5maXJlc3RvcmUpO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb25SZWZlcmVuY2UucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhbGlkYXRlRXhhY3ROdW1iZXJPZkFyZ3MoJ0NvbGxlY3Rpb25SZWZlcmVuY2UuYWRkJywgYXJndW1lbnRzLCAxKTtcclxuICAgICAgICB2YWxpZGF0ZUFyZ1R5cGUoJ0NvbGxlY3Rpb25SZWZlcmVuY2UuYWRkJywgJ29iamVjdCcsIDEsIHZhbHVlKTtcclxuICAgICAgICB2YXIgZG9jUmVmID0gdGhpcy5kb2MoKTtcclxuICAgICAgICByZXR1cm4gZG9jUmVmLnNldCh2YWx1ZSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBkb2NSZWY7IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb2xsZWN0aW9uUmVmZXJlbmNlO1xyXG59KFF1ZXJ5JDEpKTtcclxuZnVuY3Rpb24gdmFsaWRhdGVTZXRPcHRpb25zKG1ldGhvZE5hbWUsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXJnZTogZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgdmFsaWRhdGVPcHRpb25OYW1lcyhtZXRob2ROYW1lLCBvcHRpb25zLCBbJ21lcmdlJywgJ21lcmdlRmllbGRzJ10pO1xyXG4gICAgdmFsaWRhdGVOYW1lZE9wdGlvbmFsVHlwZShtZXRob2ROYW1lLCAnYm9vbGVhbicsICdtZXJnZScsIG9wdGlvbnMubWVyZ2UpO1xyXG4gICAgdmFsaWRhdGVPcHRpb25hbEFycmF5RWxlbWVudHMobWV0aG9kTmFtZSwgJ21lcmdlRmllbGRzJywgJ2Egc3RyaW5nIG9yIGEgRmllbGRQYXRoJywgb3B0aW9ucy5tZXJnZUZpZWxkcywgZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnIHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBGaWVsZFBhdGgkMTtcclxuICAgIH0pO1xyXG4gICAgaWYgKG9wdGlvbnMubWVyZ2VGaWVsZHMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLm1lcmdlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRmlyZXN0b3JlRXJyb3IoQ29kZS5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgb3B0aW9ucyBwYXNzZWQgdG8gZnVuY3Rpb24gXCIgKyBtZXRob2ROYW1lICsgXCIoKTogWW91IGNhbm5vdCBzcGVjaWZ5IGJvdGggXFxcIm1lcmdlXFxcIiBcIiArXHJcbiAgICAgICAgICAgIFwiYW5kIFxcXCJtZXJnZUZpZWxkc1xcXCIuXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVTbmFwc2hvdE9wdGlvbnMobWV0aG9kTmFtZSwgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuICAgIHZhbGlkYXRlT3B0aW9uTmFtZXMobWV0aG9kTmFtZSwgb3B0aW9ucywgWydzZXJ2ZXJUaW1lc3RhbXBzJ10pO1xyXG4gICAgdmFsaWRhdGVOYW1lZE9wdGlvbmFsUHJvcGVydHlFcXVhbHMobWV0aG9kTmFtZSwgJ29wdGlvbnMnLCAnc2VydmVyVGltZXN0YW1wcycsIG9wdGlvbnMuc2VydmVyVGltZXN0YW1wcywgWydlc3RpbWF0ZScsICdwcmV2aW91cycsICdub25lJ10pO1xyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVHZXRPcHRpb25zKG1ldGhvZE5hbWUsIG9wdGlvbnMpIHtcclxuICAgIHZhbGlkYXRlT3B0aW9uYWxBcmdUeXBlKG1ldGhvZE5hbWUsICdvYmplY3QnLCAxLCBvcHRpb25zKTtcclxuICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFsaWRhdGVPcHRpb25OYW1lcyhtZXRob2ROYW1lLCBvcHRpb25zLCBbJ3NvdXJjZSddKTtcclxuICAgICAgICB2YWxpZGF0ZU5hbWVkT3B0aW9uYWxQcm9wZXJ0eUVxdWFscyhtZXRob2ROYW1lLCAnb3B0aW9ucycsICdzb3VyY2UnLCBvcHRpb25zLnNvdXJjZSwgWydkZWZhdWx0JywgJ3NlcnZlcicsICdjYWNoZSddKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZVJlZmVyZW5jZShtZXRob2ROYW1lLCBkb2N1bWVudFJlZiwgZmlyZXN0b3JlKSB7XHJcbiAgICBpZiAoIShkb2N1bWVudFJlZiBpbnN0YW5jZW9mIERvY3VtZW50UmVmZXJlbmNlKSkge1xyXG4gICAgICAgIHRocm93IGludmFsaWRDbGFzc0Vycm9yKG1ldGhvZE5hbWUsICdEb2N1bWVudFJlZmVyZW5jZScsIDEsIGRvY3VtZW50UmVmKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGRvY3VtZW50UmVmLmZpcmVzdG9yZSAhPT0gZmlyZXN0b3JlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEZpcmVzdG9yZUVycm9yKENvZGUuSU5WQUxJRF9BUkdVTUVOVCwgJ1Byb3ZpZGVkIGRvY3VtZW50IHJlZmVyZW5jZSBpcyBmcm9tIGEgZGlmZmVyZW50IEZpcmVzdG9yZSBpbnN0YW5jZS4nKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudFJlZjtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgYXJyYXkgb2YgZmlyZXN0b3JlLkRvY3VtZW50Q2hhbmdlJ3MgZm9yIGEgZ2l2ZW4gVmlld1NuYXBzaG90LlxyXG4gKlxyXG4gKiBFeHBvcnRlZCBmb3IgdGVzdGluZy5cclxuICovXHJcbmZ1bmN0aW9uIGNoYW5nZXNGcm9tU25hcHNob3QoZmlyZXN0b3JlLCBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzLCBzbmFwc2hvdCkge1xyXG4gICAgaWYgKHNuYXBzaG90Lm9sZERvY3MuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHRoZSBmaXJzdCBzbmFwc2hvdCBiZWNhdXNlIGluZGV4IGNhbGN1bGF0aW9uIGlzIGVhc3kgYW5kXHJcbiAgICAgICAgLy8gZmFzdFxyXG4gICAgICAgIHZhciBsYXN0RG9jXzE7XHJcbiAgICAgICAgdmFyIGluZGV4XzEgPSAwO1xyXG4gICAgICAgIHJldHVybiBzbmFwc2hvdC5kb2NDaGFuZ2VzLm1hcChmdW5jdGlvbiAoY2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHZhciBkb2MgPSBuZXcgUXVlcnlEb2N1bWVudFNuYXBzaG90KGZpcmVzdG9yZSwgY2hhbmdlLmRvYy5rZXksIGNoYW5nZS5kb2MsIHNuYXBzaG90LmZyb21DYWNoZSwgc25hcHNob3QubXV0YXRlZEtleXMuaGFzKGNoYW5nZS5kb2Mua2V5KSk7XHJcbiAgICAgICAgICAgIGFzc2VydChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5BZGRlZCwgJ0ludmFsaWQgZXZlbnQgdHlwZSBmb3IgZmlyc3Qgc25hcHNob3QnKTtcclxuICAgICAgICAgICAgYXNzZXJ0KCFsYXN0RG9jXzEgfHwgc25hcHNob3QucXVlcnkuZG9jQ29tcGFyYXRvcihsYXN0RG9jXzEsIGNoYW5nZS5kb2MpIDwgMCwgJ0dvdCBhZGRlZCBldmVudHMgaW4gd3Jvbmcgb3JkZXInKTtcclxuICAgICAgICAgICAgbGFzdERvY18xID0gY2hhbmdlLmRvYztcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdhZGRlZCcsXHJcbiAgICAgICAgICAgICAgICBkb2M6IGRvYyxcclxuICAgICAgICAgICAgICAgIG9sZEluZGV4OiAtMSxcclxuICAgICAgICAgICAgICAgIG5ld0luZGV4OiBpbmRleF8xKytcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIEEgRG9jdW1lbnRTZXQgdGhhdCBpcyB1cGRhdGVkIGluY3JlbWVudGFsbHkgYXMgY2hhbmdlcyBhcmUgYXBwbGllZCB0byB1c2VcclxuICAgICAgICAvLyB0byBsb29rdXAgdGhlIGluZGV4IG9mIGEgZG9jdW1lbnQuXHJcbiAgICAgICAgdmFyIGluZGV4VHJhY2tlcl8xID0gc25hcHNob3Qub2xkRG9jcztcclxuICAgICAgICByZXR1cm4gc25hcHNob3QuZG9jQ2hhbmdlc1xyXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChjaGFuZ2UpIHsgcmV0dXJuIGluY2x1ZGVNZXRhZGF0YUNoYW5nZXMgfHwgY2hhbmdlLnR5cGUgIT09IENoYW5nZVR5cGUuTWV0YWRhdGE7IH0pXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGNoYW5nZSkge1xyXG4gICAgICAgICAgICB2YXIgZG9jID0gbmV3IFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdChmaXJlc3RvcmUsIGNoYW5nZS5kb2Mua2V5LCBjaGFuZ2UuZG9jLCBzbmFwc2hvdC5mcm9tQ2FjaGUsIHNuYXBzaG90Lm11dGF0ZWRLZXlzLmhhcyhjaGFuZ2UuZG9jLmtleSkpO1xyXG4gICAgICAgICAgICB2YXIgb2xkSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgdmFyIG5ld0luZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2UudHlwZSAhPT0gQ2hhbmdlVHlwZS5BZGRlZCkge1xyXG4gICAgICAgICAgICAgICAgb2xkSW5kZXggPSBpbmRleFRyYWNrZXJfMS5pbmRleE9mKGNoYW5nZS5kb2Mua2V5KTtcclxuICAgICAgICAgICAgICAgIGFzc2VydChvbGRJbmRleCA+PSAwLCAnSW5kZXggZm9yIGRvY3VtZW50IG5vdCBmb3VuZCcpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXhUcmFja2VyXzEgPSBpbmRleFRyYWNrZXJfMS5kZWxldGUoY2hhbmdlLmRvYy5rZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2UudHlwZSAhPT0gQ2hhbmdlVHlwZS5SZW1vdmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleFRyYWNrZXJfMSA9IGluZGV4VHJhY2tlcl8xLmFkZChjaGFuZ2UuZG9jKTtcclxuICAgICAgICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXhUcmFja2VyXzEuaW5kZXhPZihjaGFuZ2UuZG9jLmtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogcmVzdWx0Q2hhbmdlVHlwZShjaGFuZ2UudHlwZSksIGRvYzogZG9jLCBvbGRJbmRleDogb2xkSW5kZXgsIG5ld0luZGV4OiBuZXdJbmRleCB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlc3VsdENoYW5nZVR5cGUodHlwZSkge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSBDaGFuZ2VUeXBlLkFkZGVkOlxyXG4gICAgICAgICAgICByZXR1cm4gJ2FkZGVkJztcclxuICAgICAgICBjYXNlIENoYW5nZVR5cGUuTW9kaWZpZWQ6XHJcbiAgICAgICAgY2FzZSBDaGFuZ2VUeXBlLk1ldGFkYXRhOlxyXG4gICAgICAgICAgICByZXR1cm4gJ21vZGlmaWVkJztcclxuICAgICAgICBjYXNlIENoYW5nZVR5cGUuUmVtb3ZlZDpcclxuICAgICAgICAgICAgcmV0dXJuICdyZW1vdmVkJztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gZmFpbCgnVW5rbm93biBjaGFuZ2UgdHlwZTogJyArIHR5cGUpO1xyXG4gICAgfVxyXG59XHJcbi8vIEV4cG9ydCB0aGUgY2xhc3NlcyB3aXRoIGEgcHJpdmF0ZSBjb25zdHJ1Y3RvciAoaXQgd2lsbCBmYWlsIGlmIGludm9rZWRcclxuLy8gYXQgcnVudGltZSkuIE5vdGUgdGhhdCB0aGlzIHN0aWxsIGFsbG93cyBpbnN0YW5jZW9mIGNoZWNrcy5cclxuLy8gV2UncmUgdHJlYXRpbmcgdGhlIHZhcmlhYmxlcyBhcyBjbGFzcyBuYW1lcywgc28gZGlzYWJsZSBjaGVja2luZyBmb3IgbG93ZXJcclxuLy8gY2FzZSB2YXJpYWJsZSBuYW1lcy5cclxuLy8gdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZVxyXG52YXIgUHVibGljRmlyZXN0b3JlID0gbWFrZUNvbnN0cnVjdG9yUHJpdmF0ZShGaXJlc3RvcmUsICdVc2UgZmlyZWJhc2UuZmlyZXN0b3JlKCkgaW5zdGVhZC4nKTtcclxudmFyIFB1YmxpY1RyYW5zYWN0aW9uID0gbWFrZUNvbnN0cnVjdG9yUHJpdmF0ZShUcmFuc2FjdGlvbiQxLCAnVXNlIGZpcmViYXNlLmZpcmVzdG9yZSgpLnJ1blRyYW5zYWN0aW9uKCkgaW5zdGVhZC4nKTtcclxudmFyIFB1YmxpY1dyaXRlQmF0Y2ggPSBtYWtlQ29uc3RydWN0b3JQcml2YXRlKFdyaXRlQmF0Y2gsICdVc2UgZmlyZWJhc2UuZmlyZXN0b3JlKCkuYmF0Y2goKSBpbnN0ZWFkLicpO1xyXG52YXIgUHVibGljRG9jdW1lbnRSZWZlcmVuY2UgPSBtYWtlQ29uc3RydWN0b3JQcml2YXRlKERvY3VtZW50UmVmZXJlbmNlLCAnVXNlIGZpcmViYXNlLmZpcmVzdG9yZSgpLmRvYygpIGluc3RlYWQuJyk7XHJcbnZhciBQdWJsaWNEb2N1bWVudFNuYXBzaG90ID0gbWFrZUNvbnN0cnVjdG9yUHJpdmF0ZShEb2N1bWVudFNuYXBzaG90KTtcclxudmFyIFB1YmxpY1F1ZXJ5RG9jdW1lbnRTbmFwc2hvdCA9IG1ha2VDb25zdHJ1Y3RvclByaXZhdGUoUXVlcnlEb2N1bWVudFNuYXBzaG90KTtcclxudmFyIFB1YmxpY1F1ZXJ5ID0gbWFrZUNvbnN0cnVjdG9yUHJpdmF0ZShRdWVyeSQxKTtcclxudmFyIFB1YmxpY1F1ZXJ5U25hcHNob3QgPSBtYWtlQ29uc3RydWN0b3JQcml2YXRlKFF1ZXJ5U25hcHNob3QpO1xyXG52YXIgUHVibGljQ29sbGVjdGlvblJlZmVyZW5jZSA9IG1ha2VDb25zdHJ1Y3RvclByaXZhdGUoQ29sbGVjdGlvblJlZmVyZW5jZSwgJ1VzZSBmaXJlYmFzZS5maXJlc3RvcmUoKS5jb2xsZWN0aW9uKCkgaW5zdGVhZC4nKTtcclxuLy8gdHNsaW50OmVuYWJsZTp2YXJpYWJsZS1uYW1lXG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgZmlyZXN0b3JlTmFtZXNwYWNlID0ge1xyXG4gICAgRmlyZXN0b3JlOiBQdWJsaWNGaXJlc3RvcmUsXHJcbiAgICBHZW9Qb2ludDogR2VvUG9pbnQsXHJcbiAgICBUaW1lc3RhbXA6IFRpbWVzdGFtcCxcclxuICAgIEJsb2I6IFB1YmxpY0Jsb2IsXHJcbiAgICBUcmFuc2FjdGlvbjogUHVibGljVHJhbnNhY3Rpb24sXHJcbiAgICBXcml0ZUJhdGNoOiBQdWJsaWNXcml0ZUJhdGNoLFxyXG4gICAgRG9jdW1lbnRSZWZlcmVuY2U6IFB1YmxpY0RvY3VtZW50UmVmZXJlbmNlLFxyXG4gICAgRG9jdW1lbnRTbmFwc2hvdDogUHVibGljRG9jdW1lbnRTbmFwc2hvdCxcclxuICAgIFF1ZXJ5OiBQdWJsaWNRdWVyeSxcclxuICAgIFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdDogUHVibGljUXVlcnlEb2N1bWVudFNuYXBzaG90LFxyXG4gICAgUXVlcnlTbmFwc2hvdDogUHVibGljUXVlcnlTbmFwc2hvdCxcclxuICAgIENvbGxlY3Rpb25SZWZlcmVuY2U6IFB1YmxpY0NvbGxlY3Rpb25SZWZlcmVuY2UsXHJcbiAgICBGaWVsZFBhdGg6IEZpZWxkUGF0aCQxLFxyXG4gICAgRmllbGRWYWx1ZTogUHVibGljRmllbGRWYWx1ZSxcclxuICAgIHNldExvZ0xldmVsOiBGaXJlc3RvcmUuc2V0TG9nTGV2ZWxcclxufTtcclxuLyoqXHJcbiAqIENvbmZpZ3VyZXMgRmlyZXN0b3JlIGFzIHBhcnQgb2YgdGhlIEZpcmViYXNlIFNESyBieSBjYWxsaW5nIHJlZ2lzdGVyU2VydmljZS5cclxuICovXHJcbmZ1bmN0aW9uIGNvbmZpZ3VyZUZvckZpcmViYXNlKGZpcmViYXNlJCQxKSB7XHJcbiAgICBmaXJlYmFzZSQkMS5JTlRFUk5BTC5yZWdpc3RlclNlcnZpY2UoJ2ZpcmVzdG9yZScsIGZ1bmN0aW9uIChhcHApIHsgcmV0dXJuIG5ldyBGaXJlc3RvcmUoYXBwKTsgfSwgc2hhbGxvd0NvcHkoZmlyZXN0b3JlTmFtZXNwYWNlKSk7XHJcbn1cblxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyRmlyZXN0b3JlKGluc3RhbmNlKSB7XHJcbiAgICBjb25maWd1cmVGb3JGaXJlYmFzZShpbnN0YW5jZSk7XHJcbn1cclxucmVnaXN0ZXJGaXJlc3RvcmUoZmlyZWJhc2UpO1xuXG5leHBvcnRzLnJlZ2lzdGVyRmlyZXN0b3JlID0gcmVnaXN0ZXJGaXJlc3RvcmU7XG4iLCIvKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgY29udGFpbmVyIGZvciBhbGwgb2YgdGhlIExvZ2dlciBpbnN0YW5jZXNcclxuICovXHJcbnZhciBpbnN0YW5jZXMgPSBbXTtcclxuLyoqXHJcbiAqIFRoZSBKUyBTREsgc3VwcG9ydHMgNSBsb2cgbGV2ZWxzIGFuZCBhbHNvIGFsbG93cyBhIHVzZXIgdGhlIGFiaWxpdHkgdG9cclxuICogc2lsZW5jZSB0aGUgbG9ncyBhbHRvZ2V0aGVyLlxyXG4gKlxyXG4gKiBUaGUgb3JkZXIgaXMgYSBmb2xsb3dzOlxyXG4gKiBERUJVRyA8IFZFUkJPU0UgPCBJTkZPIDwgV0FSTiA8IEVSUk9SXHJcbiAqXHJcbiAqIEFsbCBvZiB0aGUgbG9nIHR5cGVzIGFib3ZlIHRoZSBjdXJyZW50IGxvZyBsZXZlbCB3aWxsIGJlIGNhcHR1cmVkIChpLmUuIGlmXHJcbiAqIHlvdSBzZXQgdGhlIGxvZyBsZXZlbCB0byBgSU5GT2AsIGVycm9ycyB3aWxsIHN0aWxsIGJlIGxvZ2dlZCwgYnV0IGBERUJVR2AgYW5kXHJcbiAqIGBWRVJCT1NFYCBsb2dzIHdpbGwgbm90KVxyXG4gKi9cclxudmFyIExvZ0xldmVsO1xyXG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkRFQlVHXCJdID0gMF0gPSBcIkRFQlVHXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlZFUkJPU0VcIl0gPSAxXSA9IFwiVkVSQk9TRVwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJJTkZPXCJdID0gMl0gPSBcIklORk9cIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiV0FSTlwiXSA9IDNdID0gXCJXQVJOXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkVSUk9SXCJdID0gNF0gPSBcIkVSUk9SXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlNJTEVOVFwiXSA9IDVdID0gXCJTSUxFTlRcIjtcclxufSkoTG9nTGV2ZWwgfHwgKExvZ0xldmVsID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGxvZyBsZXZlbFxyXG4gKi9cclxudmFyIGRlZmF1bHRMb2dMZXZlbCA9IExvZ0xldmVsLklORk87XHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBsb2cgaGFuZGxlciB3aWxsIGZvcndhcmQgREVCVUcsIFZFUkJPU0UsIElORk8sIFdBUk4sIGFuZCBFUlJPUlxyXG4gKiBtZXNzYWdlcyBvbiB0byB0aGVpciBjb3JyZXNwb25kaW5nIGNvbnNvbGUgY291bnRlcnBhcnRzIChpZiB0aGUgbG9nIG1ldGhvZFxyXG4gKiBpcyBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgbG9nIGxldmVsKVxyXG4gKi9cclxudmFyIGRlZmF1bHRMb2dIYW5kbGVyID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsb2dUeXBlKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ1R5cGUgPCBpbnN0YW5jZS5sb2dMZXZlbClcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgc3dpdGNoIChsb2dUeXBlKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQnkgZGVmYXVsdCwgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBkaXNwbGF5ZWQgaW4gdGhlIGRldmVsb3BlciBjb25zb2xlIChpblxyXG4gICAgICAgICAqIGNocm9tZSkuIFRvIGF2b2lkIGZvcmNpbmcgdXNlcnMgdG8gaGF2ZSB0byBvcHQtaW4gdG8gdGhlc2UgbG9ncyB0d2ljZVxyXG4gICAgICAgICAqIChpLmUuIG9uY2UgZm9yIGZpcmViYXNlLCBhbmQgb25jZSBpbiB0aGUgY29uc29sZSksIHdlIGFyZSBzZW5kaW5nIGBERUJVR2BcclxuICAgICAgICAgKiBsb2dzIHRvIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhc2UgTG9nTGV2ZWwuREVCVUc6XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIFtcIltcIiArIG5vdyArIFwiXSAgXCIgKyBpbnN0YW5jZS5uYW1lICsgXCI6XCJdLmNvbmNhdChhcmdzKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgTG9nTGV2ZWwuVkVSQk9TRTpcclxuICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgW1wiW1wiICsgbm93ICsgXCJdICBcIiArIGluc3RhbmNlLm5hbWUgKyBcIjpcIl0uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5JTkZPOlxyXG4gICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgW1wiW1wiICsgbm93ICsgXCJdICBcIiArIGluc3RhbmNlLm5hbWUgKyBcIjpcIl0uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5XQVJOOlxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgW1wiW1wiICsgbm93ICsgXCJdICBcIiArIGluc3RhbmNlLm5hbWUgKyBcIjpcIl0uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5FUlJPUjpcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBbXCJbXCIgKyBub3cgKyBcIl0gIFwiICsgaW5zdGFuY2UubmFtZSArIFwiOlwiXS5jb25jYXQoYXJncykpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gbG9nIGEgbWVzc2FnZSB3aXRoIGFuIGludmFsaWQgbG9nVHlwZSAodmFsdWU6IFwiICsgbG9nVHlwZSArIFwiKVwiKTtcclxuICAgIH1cclxufTtcclxudmFyIExvZ2dlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZXMgeW91IGFuIGluc3RhbmNlIG9mIGEgTG9nZ2VyIHRvIGNhcHR1cmUgbWVzc2FnZXMgYWNjb3JkaW5nIHRvXHJcbiAgICAgKiBGaXJlYmFzZSdzIGxvZ2dpbmcgc2NoZW1lLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHRoYXQgdGhlIGxvZ3Mgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGhcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gTG9nZ2VyKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb2cgbGV2ZWwgb2YgdGhlIGdpdmVuIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IGRlZmF1bHRMb2dMZXZlbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlciA9IGRlZmF1bHRMb2dIYW5kbGVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhcHR1cmUgdGhlIGN1cnJlbnQgaW5zdGFuY2UgZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluc3RhbmNlcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvZ2dlci5wcm90b3R5cGUsIFwibG9nTGV2ZWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9nTGV2ZWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgaWYgKCEodmFsIGluIExvZ0xldmVsKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB2YWx1ZSBhc3NpZ25lZCB0byBgbG9nTGV2ZWxgJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTG9nZ2VyLnByb3RvdHlwZSwgXCJsb2dIYW5kbGVyXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ0hhbmRsZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIGFzc2lnbmVkIHRvIGBsb2dIYW5kbGVyYCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9sb2dIYW5kbGVyID0gdmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZnVuY3Rpb25zIGJlbG93IGFyZSBhbGwgYmFzZWQgb24gdGhlIGBjb25zb2xlYCBpbnRlcmZhY2VcclxuICAgICAqL1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCBbdGhpcywgTG9nTGV2ZWwuREVCVUddLmNvbmNhdChhcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgW3RoaXMsIExvZ0xldmVsLlZFUkJPU0VdLmNvbmNhdChhcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIFt0aGlzLCBMb2dMZXZlbC5JTkZPXS5jb25jYXQoYXJncykpO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCBbdGhpcywgTG9nTGV2ZWwuV0FSTl0uY29uY2F0KGFyZ3MpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIFt0aGlzLCBMb2dMZXZlbC5FUlJPUl0uY29uY2F0KGFyZ3MpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTG9nZ2VyO1xyXG59KCkpO1xuXG4vKipcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcclxuICAgIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0KSB7XHJcbiAgICAgICAgaW5zdC5sb2dMZXZlbCA9IGxldmVsO1xyXG4gICAgfSk7XHJcbn1cblxuZXhwb3J0IHsgc2V0TG9nTGV2ZWwsIExvZ2dlciwgTG9nTGV2ZWwgfTtcbiIsInZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbnZhciBlLGdvb2c9Z29vZ3x8e30saD1jb21tb25qc0dsb2JhbDtmdW5jdGlvbiBsKGEpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBhfWZ1bmN0aW9uIG0oYSxiKXthPWEuc3BsaXQoXCIuXCIpO2I9Ynx8aDtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKylpZihiPWJbYVtjXV0sIG51bGw9PWIpcmV0dXJuIG51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gYWEoKXt9XG5mdW5jdGlvbiBiYShhKXt2YXIgYj10eXBlb2YgYTtpZihcIm9iamVjdFwiPT1iKWlmKGEpe2lmKGEgaW5zdGFuY2VvZiBBcnJheSlyZXR1cm5cImFycmF5XCI7aWYoYSBpbnN0YW5jZW9mIE9iamVjdClyZXR1cm4gYjt2YXIgYz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSk7aWYoXCJbb2JqZWN0IFdpbmRvd11cIj09YylyZXR1cm5cIm9iamVjdFwiO2lmKFwiW29iamVjdCBBcnJheV1cIj09Y3x8XCJudW1iZXJcIj09dHlwZW9mIGEubGVuZ3RoJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5zcGxpY2UmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnByb3BlcnR5SXNFbnVtZXJhYmxlJiYhYS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcInNwbGljZVwiKSlyZXR1cm5cImFycmF5XCI7aWYoXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT1jfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5jYWxsJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5wcm9wZXJ0eUlzRW51bWVyYWJsZSYmIWEucHJvcGVydHlJc0VudW1lcmFibGUoXCJjYWxsXCIpKXJldHVyblwiZnVuY3Rpb25cIn1lbHNlIHJldHVyblwibnVsbFwiO1xuZWxzZSBpZihcImZ1bmN0aW9uXCI9PWImJlwidW5kZWZpbmVkXCI9PXR5cGVvZiBhLmNhbGwpcmV0dXJuXCJvYmplY3RcIjtyZXR1cm4gYn1mdW5jdGlvbiBuKGEpe3JldHVyblwiYXJyYXlcIj09YmEoYSl9ZnVuY3Rpb24gY2EoYSl7dmFyIGI9YmEoYSk7cmV0dXJuXCJhcnJheVwiPT1ifHxcIm9iamVjdFwiPT1iJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGh9ZnVuY3Rpb24gcShhKXtyZXR1cm5cImZ1bmN0aW9uXCI9PWJhKGEpfWZ1bmN0aW9uIHIoYSl7dmFyIGI9dHlwZW9mIGE7cmV0dXJuXCJvYmplY3RcIj09YiYmbnVsbCE9YXx8XCJmdW5jdGlvblwiPT1ifXZhciB0PVwiY2xvc3VyZV91aWRfXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCksZGE9MDtmdW5jdGlvbiBlYShhLGIsYyl7cmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIGZhKGEsYixjKXtpZighYSl0aHJvdyBFcnJvcigpO2lmKDI8YXJndW1lbnRzLmxlbmd0aCl7dmFyIGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7QXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoYyxkKTtyZXR1cm4gYS5hcHBseShiLGMpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShiLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHUoYSxiLGMpe3U9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQmJi0xIT1GdW5jdGlvbi5wcm90b3R5cGUuYmluZC50b1N0cmluZygpLmluZGV4T2YoXCJuYXRpdmUgY29kZVwiKT9lYTpmYTtyZXR1cm4gdS5hcHBseShudWxsLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiB2KGEsYil7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBmdW5jdGlvbigpe3ZhciBiPWMuc2xpY2UoKTtiLnB1c2guYXBwbHkoYixhcmd1bWVudHMpO3JldHVybiBhLmFwcGx5KHRoaXMsYil9fXZhciB3PURhdGUubm93fHxmdW5jdGlvbigpe3JldHVybituZXcgRGF0ZX07ZnVuY3Rpb24geChhLGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9Yi5wcm90b3R5cGU7YS5MPWIucHJvdG90eXBlO2EucHJvdG90eXBlPW5ldyBjO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5zaD1mdW5jdGlvbihhLGMsZyl7Zm9yKHZhciBkPUFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMiksZj0yO2Y8YXJndW1lbnRzLmxlbmd0aDtmKyspZFtmLTJdPWFyZ3VtZW50c1tmXTtyZXR1cm4gYi5wcm90b3R5cGVbY10uYXBwbHkoYSxkKX07fWZ1bmN0aW9uIHkoYSl7aWYoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyx5KTtlbHNle3ZhciBiPUVycm9yKCkuc3RhY2s7YiYmKHRoaXMuc3RhY2s9Yik7fWEmJih0aGlzLm1lc3NhZ2U9U3RyaW5nKGEpKTt9eCh5LEVycm9yKTt5LnByb3RvdHlwZS5uYW1lPVwiQ3VzdG9tRXJyb3JcIjtmdW5jdGlvbiBoYShhLGIpe2E9YS5zcGxpdChcIiVzXCIpO2Zvcih2YXIgYz1cIlwiLGQ9YS5sZW5ndGgtMSxmPTA7ZjxkO2YrKyljKz1hW2ZdKyhmPGIubGVuZ3RoP2JbZl06XCIlc1wiKTt5LmNhbGwodGhpcyxjK2FbZF0pO314KGhhLHkpO2hhLnByb3RvdHlwZS5uYW1lPVwiQXNzZXJ0aW9uRXJyb3JcIjtmdW5jdGlvbiBpYShhLGIpe3Rocm93IG5ldyBoYShcIkZhaWx1cmVcIisoYT9cIjogXCIrYTpcIlwiKSxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpO31mdW5jdGlvbiB6KCl7MCE9amEmJihrYVt0aGlzW3RdfHwodGhpc1t0XT0rK2RhKV09dGhpcyk7dGhpcy5LYT10aGlzLkthO3RoaXMuUWE9dGhpcy5RYTt9dmFyIGphPTAsa2E9e307ei5wcm90b3R5cGUuS2E9ITE7ei5wcm90b3R5cGUuY2I9ZnVuY3Rpb24oKXtpZighdGhpcy5LYSYmKHRoaXMuS2E9ITAsIHRoaXMuRigpLCAwIT1qYSkpe3ZhciBhPXRoaXNbdF18fCh0aGlzW3RdPSsrZGEpO2lmKDAhPWphJiZ0aGlzLlFhJiYwPHRoaXMuUWEubGVuZ3RoKXRocm93IEVycm9yKHRoaXMrXCIgZGlkIG5vdCBlbXB0eSBpdHMgb25EaXNwb3NlQ2FsbGJhY2tzIHF1ZXVlLiBUaGlzIHByb2JhYmx5IG1lYW5zIGl0IG92ZXJyb2RlIGRpc3Bvc2UoKSBvciBkaXNwb3NlSW50ZXJuYWwoKSB3aXRob3V0IGNhbGxpbmcgdGhlIHN1cGVyY2xhc3MnIG1ldGhvZC5cIik7ZGVsZXRlIGthW2FdO319O3oucHJvdG90eXBlLkY9ZnVuY3Rpb24oKXtpZih0aGlzLlFhKWZvcig7dGhpcy5RYS5sZW5ndGg7KXRoaXMuUWEuc2hpZnQoKSgpO307dmFyIGxhPUFycmF5LnByb3RvdHlwZS5pbmRleE9mP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7aWYobChhKSlyZXR1cm4gbChiKSYmMT09Yi5sZW5ndGg/YS5pbmRleE9mKGIsMCk6LTE7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYyBpbiBhJiZhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0sbWE9QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGEsYixhLmxlbmd0aC0xKX06ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmxlbmd0aC0xOzA+YyYmKGM9TWF0aC5tYXgoMCxhLmxlbmd0aCtjKSk7aWYobChhKSlyZXR1cm4gbChiKSYmMT09Yi5sZW5ndGg/YS5sYXN0SW5kZXhPZihiLGMpOi0xO2Zvcig7MDw9YztjLS0paWYoYyBpbiBhJiZhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0sbmE9XG5BcnJheS5wcm90b3R5cGUuZm9yRWFjaD9mdW5jdGlvbihhLGIsYyl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsYyk7fTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGY9bChhKT9hLnNwbGl0KFwiXCIpOmEsZz0wO2c8ZDtnKyspZyBpbiBmJiZiLmNhbGwoYyxmW2ddLGcsYSk7fSxvYT1BcnJheS5wcm90b3R5cGUuc29tZT9mdW5jdGlvbihhLGIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGEsYix2b2lkIDApfTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPWwoYSk/YS5zcGxpdChcIlwiKTphLGY9MDtmPGM7ZisrKWlmKGYgaW4gZCYmYi5jYWxsKHZvaWQgMCxkW2ZdLGYsYSkpcmV0dXJuITA7cmV0dXJuITF9O1xuZnVuY3Rpb24gcGEoYSl7YTp7dmFyIGI9cWE7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9bChhKT9hLnNwbGl0KFwiXCIpOmEsZj0wO2Y8YztmKyspaWYoZiBpbiBkJiZiLmNhbGwodm9pZCAwLGRbZl0sZixhKSl7Yj1mO2JyZWFrIGF9Yj0tMTt9cmV0dXJuIDA+Yj9udWxsOmwoYSk/YS5jaGFyQXQoYik6YVtiXX1mdW5jdGlvbiByYShhKXtpZighbihhKSlmb3IodmFyIGI9YS5sZW5ndGgtMTswPD1iO2ItLSlkZWxldGUgYVtiXTthLmxlbmd0aD0wO31mdW5jdGlvbiBzYShhLGIpe2I9bGEoYSxiKTt2YXIgYzsoYz0wPD1iKSYmQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGEsYiwxKTtyZXR1cm4gY31mdW5jdGlvbiB0YShhKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSxhcmd1bWVudHMpfWZ1bmN0aW9uIHVhKGEpe3ZhciBiPWEubGVuZ3RoO2lmKDA8Yil7Zm9yKHZhciBjPUFycmF5KGIpLGQ9MDtkPGI7ZCsrKWNbZF09YVtkXTtyZXR1cm4gY31yZXR1cm5bXX1mdW5jdGlvbiB2YShhKXtyZXR1cm4vXltcXHNcXHhhMF0qJC8udGVzdChhKX12YXIgd2E9U3RyaW5nLnByb3RvdHlwZS50cmltP2Z1bmN0aW9uKGEpe3JldHVybiBhLnRyaW0oKX06ZnVuY3Rpb24oYSl7cmV0dXJuL15bXFxzXFx4YTBdKihbXFxzXFxTXSo/KVtcXHNcXHhhMF0qJC8uZXhlYyhhKVsxXX07ZnVuY3Rpb24geGEoYSxiKXtyZXR1cm4gYTxiPy0xOmE+Yj8xOjB9dmFyIEE7YTp7dmFyIHlhPWgubmF2aWdhdG9yO2lmKHlhKXt2YXIgemE9eWEudXNlckFnZW50O2lmKHphKXtBPXphO2JyZWFrIGF9fUE9XCJcIjt9ZnVuY3Rpb24gQihhKXtyZXR1cm4tMSE9QS5pbmRleE9mKGEpfWZ1bmN0aW9uIEFhKGEsYixjKXtmb3IodmFyIGQgaW4gYSliLmNhbGwoYyxhW2RdLGQsYSk7fWZ1bmN0aW9uIEJhKGEpe3ZhciBiPVtdLGM9MCxkO2ZvcihkIGluIGEpYltjKytdPWFbZF07cmV0dXJuIGJ9ZnVuY3Rpb24gQ2EoYSl7dmFyIGI9W10sYz0wLGQ7Zm9yKGQgaW4gYSliW2MrK109ZDtyZXR1cm4gYn1mdW5jdGlvbiBEYShhKXt2YXIgYj17fSxjO2ZvcihjIGluIGEpYltjXT1hW2NdO3JldHVybiBifXZhciBFYT1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIEZhKGEsYil7Zm9yKHZhciBjLGQsZj0xO2Y8YXJndW1lbnRzLmxlbmd0aDtmKyspe2Q9YXJndW1lbnRzW2ZdO2ZvcihjIGluIGQpYVtjXT1kW2NdO2Zvcih2YXIgZz0wO2c8RWEubGVuZ3RoO2crKyljPUVhW2ddLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZCxjKSYmKGFbY109ZFtjXSk7fX1mdW5jdGlvbiBHYShhKXtHYVtcIiBcIl0oYSk7cmV0dXJuIGF9R2FbXCIgXCJdPWFhO2Z1bmN0aW9uIEhhKGEsYil7dmFyIGM9SWE7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjLGEpP2NbYV06Y1thXT1iKGEpfXZhciBKYT1CKFwiT3BlcmFcIiksQz1CKFwiVHJpZGVudFwiKXx8QihcIk1TSUVcIiksS2E9QihcIkVkZ2VcIiksTGE9S2F8fEMsTWE9QihcIkdlY2tvXCIpJiYhKC0xIT1BLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIndlYmtpdFwiKSYmIUIoXCJFZGdlXCIpKSYmIShCKFwiVHJpZGVudFwiKXx8QihcIk1TSUVcIikpJiYhQihcIkVkZ2VcIiksTmE9LTEhPUEudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwid2Via2l0XCIpJiYhQihcIkVkZ2VcIik7ZnVuY3Rpb24gT2EoKXt2YXIgYT1oLmRvY3VtZW50O3JldHVybiBhP2EuZG9jdW1lbnRNb2RlOnZvaWQgMH12YXIgUGE7XG5hOnt2YXIgUWE9XCJcIixSYT1mdW5jdGlvbigpe3ZhciBhPUE7aWYoTWEpcmV0dXJuL3J2OihbXlxcKTtdKykoXFwpfDspLy5leGVjKGEpO2lmKEthKXJldHVybi9FZGdlXFwvKFtcXGRcXC5dKykvLmV4ZWMoYSk7aWYoQylyZXR1cm4vXFxiKD86TVNJRXxydilbOiBdKFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoTmEpcmV0dXJuL1dlYktpdFxcLyhcXFMrKS8uZXhlYyhhKTtpZihKYSlyZXR1cm4vKD86VmVyc2lvbilbIFxcL10/KFxcUyspLy5leGVjKGEpfSgpO1JhJiYoUWE9UmE/UmFbMV06XCJcIik7aWYoQyl7dmFyIFNhPU9hKCk7aWYobnVsbCE9U2EmJlNhPnBhcnNlRmxvYXQoUWEpKXtQYT1TdHJpbmcoU2EpO2JyZWFrIGF9fVBhPVFhO312YXIgSWE9e307XG5mdW5jdGlvbiBUYShhKXtyZXR1cm4gSGEoYSxmdW5jdGlvbigpe2Zvcih2YXIgYj0wLGM9d2EoU3RyaW5nKFBhKSkuc3BsaXQoXCIuXCIpLGQ9d2EoU3RyaW5nKGEpKS5zcGxpdChcIi5cIiksZj1NYXRoLm1heChjLmxlbmd0aCxkLmxlbmd0aCksZz0wOzA9PWImJmc8ZjtnKyspe3ZhciBrPWNbZ118fFwiXCIscD1kW2ddfHxcIlwiO2Rve2s9LyhcXGQqKShcXEQqKSguKikvLmV4ZWMoayl8fFtcIlwiLFwiXCIsXCJcIixcIlwiXTtwPS8oXFxkKikoXFxEKikoLiopLy5leGVjKHApfHxbXCJcIixcIlwiLFwiXCIsXCJcIl07aWYoMD09a1swXS5sZW5ndGgmJjA9PXBbMF0ubGVuZ3RoKWJyZWFrO2I9eGEoMD09a1sxXS5sZW5ndGg/MDpwYXJzZUludChrWzFdLDEwKSwwPT1wWzFdLmxlbmd0aD8wOnBhcnNlSW50KHBbMV0sMTApKXx8eGEoMD09a1syXS5sZW5ndGgsMD09cFsyXS5sZW5ndGgpfHx4YShrWzJdLHBbMl0pO2s9a1szXTtwPXBbM107fXdoaWxlKDA9PWIpfXJldHVybiAwPD1ifSl9dmFyIFVhO3ZhciBWYT1oLmRvY3VtZW50O1xuVWE9VmEmJkM/T2EoKXx8KFwiQ1NTMUNvbXBhdFwiPT1WYS5jb21wYXRNb2RlP3BhcnNlSW50KFBhLDEwKTo1KTp2b2lkIDA7dmFyIFdhPU9iamVjdC5mcmVlemV8fGZ1bmN0aW9uKGEpe3JldHVybiBhfTt2YXIgWGE9IUN8fDk8PU51bWJlcihVYSksWWE9QyYmIVRhKFwiOVwiKSxaYT1mdW5jdGlvbigpe2lmKCFoLmFkZEV2ZW50TGlzdGVuZXJ8fCFPYmplY3QuZGVmaW5lUHJvcGVydHkpcmV0dXJuITE7dmFyIGE9ITEsYj1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe2E9ITA7fX0pO3RyeXtoLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsYWEsYiksIGgucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixhYSxiKTt9Y2F0Y2goYyl7fXJldHVybiBhfSgpO2Z1bmN0aW9uIEQoYSxiKXt0aGlzLnR5cGU9YTt0aGlzLmN1cnJlbnRUYXJnZXQ9dGhpcy50YXJnZXQ9Yjt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9dGhpcy5FYT0hMTt0aGlzLkVlPSEwO31ELnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb249ZnVuY3Rpb24oKXt0aGlzLkVhPSEwO307RC5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dGhpcy5FZT0hMTt9O2Z1bmN0aW9uIEUoYSxiKXtELmNhbGwodGhpcyxhP2EudHlwZTpcIlwiKTt0aGlzLnJlbGF0ZWRUYXJnZXQ9dGhpcy5jdXJyZW50VGFyZ2V0PXRoaXMudGFyZ2V0PW51bGw7dGhpcy5idXR0b249dGhpcy5zY3JlZW5ZPXRoaXMuc2NyZWVuWD10aGlzLmNsaWVudFk9dGhpcy5jbGllbnRYPXRoaXMub2Zmc2V0WT10aGlzLm9mZnNldFg9MDt0aGlzLmtleT1cIlwiO3RoaXMuY2hhckNvZGU9dGhpcy5rZXlDb2RlPTA7dGhpcy5tZXRhS2V5PXRoaXMuc2hpZnRLZXk9dGhpcy5hbHRLZXk9dGhpcy5jdHJsS2V5PSExO3RoaXMuc3RhdGU9bnVsbDt0aGlzLnBvaW50ZXJJZD0wO3RoaXMucG9pbnRlclR5cGU9XCJcIjt0aGlzLmdiPW51bGw7YSYmdGhpcy5PZihhLGIpO314KEUsRCk7dmFyICRhPVdhKHsyOlwidG91Y2hcIiwzOlwicGVuXCIsNDpcIm1vdXNlXCJ9KTtcbkUucHJvdG90eXBlLk9mPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy50eXBlPWEudHlwZSxkPWEuY2hhbmdlZFRvdWNoZXM/YS5jaGFuZ2VkVG91Y2hlc1swXTpudWxsO3RoaXMudGFyZ2V0PWEudGFyZ2V0fHxhLnNyY0VsZW1lbnQ7dGhpcy5jdXJyZW50VGFyZ2V0PWI7aWYoYj1hLnJlbGF0ZWRUYXJnZXQpe2lmKE1hKXthOnt0cnl7R2EoYi5ub2RlTmFtZSk7dmFyIGY9ITA7YnJlYWsgYX1jYXRjaChnKXt9Zj0hMTt9Znx8KGI9bnVsbCk7fX1lbHNlXCJtb3VzZW92ZXJcIj09Yz9iPWEuZnJvbUVsZW1lbnQ6XCJtb3VzZW91dFwiPT1jJiYoYj1hLnRvRWxlbWVudCk7dGhpcy5yZWxhdGVkVGFyZ2V0PWI7bnVsbD09PWQ/KHRoaXMub2Zmc2V0WD1OYXx8dm9pZCAwIT09YS5vZmZzZXRYP2Eub2Zmc2V0WDphLmxheWVyWCwgdGhpcy5vZmZzZXRZPU5hfHx2b2lkIDAhPT1hLm9mZnNldFk/YS5vZmZzZXRZOmEubGF5ZXJZLCB0aGlzLmNsaWVudFg9dm9pZCAwIT09YS5jbGllbnRYP2EuY2xpZW50WDphLnBhZ2VYLCB0aGlzLmNsaWVudFk9dm9pZCAwIT09YS5jbGllbnRZP2EuY2xpZW50WTphLnBhZ2VZLCB0aGlzLnNjcmVlblg9YS5zY3JlZW5YfHwwLCB0aGlzLnNjcmVlblk9YS5zY3JlZW5ZfHwwKToodGhpcy5jbGllbnRYPXZvaWQgMCE9PWQuY2xpZW50WD9kLmNsaWVudFg6ZC5wYWdlWCwgdGhpcy5jbGllbnRZPXZvaWQgMCE9PWQuY2xpZW50WT9kLmNsaWVudFk6ZC5wYWdlWSwgdGhpcy5zY3JlZW5YPWQuc2NyZWVuWHx8MCwgdGhpcy5zY3JlZW5ZPWQuc2NyZWVuWXx8MCk7dGhpcy5idXR0b249YS5idXR0b247dGhpcy5rZXlDb2RlPWEua2V5Q29kZXx8MDt0aGlzLmtleT1hLmtleXx8XCJcIjt0aGlzLmNoYXJDb2RlPWEuY2hhckNvZGV8fChcImtleXByZXNzXCI9PWM/YS5rZXlDb2RlOjApO3RoaXMuY3RybEtleT1hLmN0cmxLZXk7dGhpcy5hbHRLZXk9YS5hbHRLZXk7dGhpcy5zaGlmdEtleT1hLnNoaWZ0S2V5O3RoaXMubWV0YUtleT1hLm1ldGFLZXk7dGhpcy5wb2ludGVySWQ9YS5wb2ludGVySWR8fDA7dGhpcy5wb2ludGVyVHlwZT1cbmwoYS5wb2ludGVyVHlwZSk/YS5wb2ludGVyVHlwZTokYVthLnBvaW50ZXJUeXBlXXx8XCJcIjt0aGlzLnN0YXRlPWEuc3RhdGU7dGhpcy5nYj1hO2EuZGVmYXVsdFByZXZlbnRlZCYmdGhpcy5wcmV2ZW50RGVmYXVsdCgpO307RS5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uPWZ1bmN0aW9uKCl7RS5MLnN0b3BQcm9wYWdhdGlvbi5jYWxsKHRoaXMpO3RoaXMuZ2Iuc3RvcFByb3BhZ2F0aW9uP3RoaXMuZ2Iuc3RvcFByb3BhZ2F0aW9uKCk6dGhpcy5nYi5jYW5jZWxCdWJibGU9ITA7fTtFLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbigpe0UuTC5wcmV2ZW50RGVmYXVsdC5jYWxsKHRoaXMpO3ZhciBhPXRoaXMuZ2I7aWYoYS5wcmV2ZW50RGVmYXVsdClhLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBpZihhLnJldHVyblZhbHVlPSExLCBZYSl0cnl7aWYoYS5jdHJsS2V5fHwxMTI8PWEua2V5Q29kZSYmMTIzPj1hLmtleUNvZGUpYS5rZXlDb2RlPS0xO31jYXRjaChiKXt9fTt2YXIgYWI9XCJjbG9zdXJlX2xpc3RlbmFibGVfXCIrKDFFNipNYXRoLnJhbmRvbSgpfDApO2Z1bmN0aW9uIEYoYSl7cmV0dXJuISghYXx8IWFbYWJdKX12YXIgYmI9MDtmdW5jdGlvbiBjYihhLGIsYyxkLGYpe3RoaXMubGlzdGVuZXI9YTt0aGlzLnByb3h5PW51bGw7dGhpcy5zcmM9Yjt0aGlzLnR5cGU9Yzt0aGlzLmNhcHR1cmU9ISFkO3RoaXMuUGI9Zjt0aGlzLmtleT0rK2JiO3RoaXMuU2E9dGhpcy5GYj0hMTt9Y2IucHJvdG90eXBlLldiPWZ1bmN0aW9uKCl7dGhpcy5TYT0hMDt0aGlzLlBiPXRoaXMuc3JjPXRoaXMucHJveHk9dGhpcy5saXN0ZW5lcj1udWxsO307ZnVuY3Rpb24gZGIoYSl7dGhpcy5zcmM9YTt0aGlzLko9e307dGhpcy55Yj0wO31lPWRiLnByb3RvdHlwZTtlLmFkZD1mdW5jdGlvbihhLGIsYyxkLGYpe3ZhciBnPWEudG9TdHJpbmcoKTthPXRoaXMuSltnXTthfHwoYT10aGlzLkpbZ109W10sIHRoaXMueWIrKyk7dmFyIGs9ZWIoYSxiLGQsZik7LTE8az8oYj1hW2tdLCBjfHwoYi5GYj0hMSkpOihiPW5ldyBjYihiLHRoaXMuc3JjLGcsISFkLGYpLCBiLkZiPWMsIGEucHVzaChiKSk7cmV0dXJuIGJ9O2UucmVtb3ZlPWZ1bmN0aW9uKGEsYixjLGQpe2E9YS50b1N0cmluZygpO2lmKCEoYSBpbiB0aGlzLkopKXJldHVybiExO3ZhciBmPXRoaXMuSlthXTtiPWViKGYsYixjLGQpO3JldHVybi0xPGI/KGZbYl0uV2IoKSwgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGYsYiwxKSwgMD09Zi5sZW5ndGgmJihkZWxldGUgdGhpcy5KW2FdLCB0aGlzLnliLS0pLCAhMCk6ITF9O1xuZS5CZT1mdW5jdGlvbihhKXt2YXIgYj1hLnR5cGU7YiBpbiB0aGlzLkomJnNhKHRoaXMuSltiXSxhKSYmKGEuV2IoKSwgMD09dGhpcy5KW2JdLmxlbmd0aCYmKGRlbGV0ZSB0aGlzLkpbYl0sIHRoaXMueWItLSkpO307ZS5xYj1mdW5jdGlvbihhKXthPWEmJmEudG9TdHJpbmcoKTt2YXIgYztmb3IoYyBpbiB0aGlzLkopaWYoIWF8fGM9PWEpe2Zvcih2YXIgZD10aGlzLkpbY10sZj0wO2Y8ZC5sZW5ndGg7ZisrKWRbZl0uV2IoKTtkZWxldGUgdGhpcy5KW2NdO3RoaXMueWItLTt9fTtlLmtiPWZ1bmN0aW9uKGEsYixjLGQpe2E9dGhpcy5KW2EudG9TdHJpbmcoKV07dmFyIGY9LTE7YSYmKGY9ZWIoYSxiLGMsZCkpO3JldHVybi0xPGY/YVtmXTpudWxsfTtmdW5jdGlvbiBlYihhLGIsYyxkKXtmb3IodmFyIGY9MDtmPGEubGVuZ3RoOysrZil7dmFyIGc9YVtmXTtpZighZy5TYSYmZy5saXN0ZW5lcj09YiYmZy5jYXB0dXJlPT0hIWMmJmcuUGI9PWQpcmV0dXJuIGZ9cmV0dXJuLTF9dmFyIGZiPVwiY2xvc3VyZV9sbV9cIisoMUU2Kk1hdGgucmFuZG9tKCl8MCksZ2I9e307ZnVuY3Rpb24gaWIoYSxiLGMsZCxmKXtpZihkJiZkLm9uY2UpcmV0dXJuIGpiKGEsYixjLGQsZik7aWYobihiKSl7Zm9yKHZhciBnPTA7ZzxiLmxlbmd0aDtnKyspaWIoYSxiW2ddLGMsZCxmKTtyZXR1cm4gbnVsbH1jPWtiKGMpO3JldHVybiBGKGEpP2Eub2IoYixjLHIoZCk/ISFkLmNhcHR1cmU6ISFkLGYpOmxiKGEsYixjLCExLGQsZil9XG5mdW5jdGlvbiBsYihhLGIsYyxkLGYsZyl7aWYoIWIpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGV2ZW50IHR5cGVcIik7dmFyIGs9cihmKT8hIWYuY2FwdHVyZTohIWYscD1HKGEpO3B8fChhW2ZiXT1wPW5ldyBkYihhKSk7Yz1wLmFkZChiLGMsZCxrLGcpO2lmKGMucHJveHkpcmV0dXJuIGM7ZD1tYigpO2MucHJveHk9ZDtkLnNyYz1hO2QubGlzdGVuZXI9YztpZihhLmFkZEV2ZW50TGlzdGVuZXIpWmF8fChmPWspLCB2b2lkIDA9PT1mJiYoZj0hMSksIGEuYWRkRXZlbnRMaXN0ZW5lcihiLnRvU3RyaW5nKCksZCxmKTtlbHNlIGlmKGEuYXR0YWNoRXZlbnQpYS5hdHRhY2hFdmVudChuYihiLnRvU3RyaW5nKCkpLGQpO2Vsc2UgaWYoYS5hZGRMaXN0ZW5lciYmYS5yZW1vdmVMaXN0ZW5lcilhLmFkZExpc3RlbmVyKGQpO2Vsc2UgdGhyb3cgRXJyb3IoXCJhZGRFdmVudExpc3RlbmVyIGFuZCBhdHRhY2hFdmVudCBhcmUgdW5hdmFpbGFibGUuXCIpO3JldHVybiBjfVxuZnVuY3Rpb24gbWIoKXt2YXIgYT1vYixiPVhhP2Z1bmN0aW9uKGMpe3JldHVybiBhLmNhbGwoYi5zcmMsYi5saXN0ZW5lcixjKX06ZnVuY3Rpb24oYyl7Yz1hLmNhbGwoYi5zcmMsYi5saXN0ZW5lcixjKTtpZighYylyZXR1cm4gY307cmV0dXJuIGJ9ZnVuY3Rpb24gamIoYSxiLGMsZCxmKXtpZihuKGIpKXtmb3IodmFyIGc9MDtnPGIubGVuZ3RoO2crKylqYihhLGJbZ10sYyxkLGYpO3JldHVybiBudWxsfWM9a2IoYyk7cmV0dXJuIEYoYSk/YS5RYyhiLGMscihkKT8hIWQuY2FwdHVyZTohIWQsZik6bGIoYSxiLGMsITAsZCxmKX1mdW5jdGlvbiBwYihhLGIsYyxkLGYpe2lmKG4oYikpZm9yKHZhciBnPTA7ZzxiLmxlbmd0aDtnKyspcGIoYSxiW2ddLGMsZCxmKTtlbHNlIGQ9cihkKT8hIWQuY2FwdHVyZTohIWQsIGM9a2IoYyksIEYoYSk/YS5oZChiLGMsZCxmKTphJiYoYT1HKGEpKSYmKGI9YS5rYihiLGMsZCxmKSkmJnFiKGIpO31cbmZ1bmN0aW9uIHFiKGEpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBhJiZhJiYhYS5TYSl7dmFyIGI9YS5zcmM7aWYoRihiKSliLlBlKGEpO2Vsc2V7dmFyIGM9YS50eXBlLGQ9YS5wcm94eTtiLnJlbW92ZUV2ZW50TGlzdGVuZXI/Yi5yZW1vdmVFdmVudExpc3RlbmVyKGMsZCxhLmNhcHR1cmUpOmIuZGV0YWNoRXZlbnQ/Yi5kZXRhY2hFdmVudChuYihjKSxkKTpiLmFkZExpc3RlbmVyJiZiLnJlbW92ZUxpc3RlbmVyJiZiLnJlbW92ZUxpc3RlbmVyKGQpOyhjPUcoYikpPyhjLkJlKGEpLCAwPT1jLnliJiYoYy5zcmM9bnVsbCwgYltmYl09bnVsbCkpOmEuV2IoKTt9fX1mdW5jdGlvbiBuYihhKXtyZXR1cm4gYSBpbiBnYj9nYlthXTpnYlthXT1cIm9uXCIrYX1cbmZ1bmN0aW9uIHJiKGEsYixjLGQpe3ZhciBmPSEwO2lmKGE9RyhhKSlpZihiPWEuSltiLnRvU3RyaW5nKCldKWZvcihiPWIuY29uY2F0KCksIGE9MDthPGIubGVuZ3RoO2ErKyl7dmFyIGc9YlthXTtnJiZnLmNhcHR1cmU9PWMmJiFnLlNhJiYoZz1zYihnLGQpLCBmPWYmJiExIT09Zyk7fXJldHVybiBmfWZ1bmN0aW9uIHNiKGEsYil7dmFyIGM9YS5saXN0ZW5lcixkPWEuUGJ8fGEuc3JjO2EuRmImJnFiKGEpO3JldHVybiBjLmNhbGwoZCxiKX1cbmZ1bmN0aW9uIG9iKGEsYil7aWYoYS5TYSlyZXR1cm4hMDtpZighWGEpe3ZhciBjPWJ8fG0oXCJ3aW5kb3cuZXZlbnRcIik7Yj1uZXcgRShjLHRoaXMpO3ZhciBkPSEwO2lmKCEoMD5jLmtleUNvZGV8fHZvaWQgMCE9Yy5yZXR1cm5WYWx1ZSkpe2E6e3ZhciBmPSExO2lmKDA9PWMua2V5Q29kZSl0cnl7Yy5rZXlDb2RlPS0xO2JyZWFrIGF9Y2F0Y2goayl7Zj0hMDt9aWYoZnx8dm9pZCAwPT1jLnJldHVyblZhbHVlKWMucmV0dXJuVmFsdWU9ITA7fWM9W107Zm9yKGY9Yi5jdXJyZW50VGFyZ2V0O2Y7Zj1mLnBhcmVudE5vZGUpYy5wdXNoKGYpO2E9YS50eXBlO2ZvcihmPWMubGVuZ3RoLTE7IWIuRWEmJjA8PWY7Zi0tKXtiLmN1cnJlbnRUYXJnZXQ9Y1tmXTt2YXIgZz1yYihjW2ZdLGEsITAsYik7ZD1kJiZnO31mb3IoZj0wOyFiLkVhJiZmPGMubGVuZ3RoO2YrKyliLmN1cnJlbnRUYXJnZXQ9Y1tmXSwgZz1yYihjW2ZdLGEsITEsYiksIGQ9ZCYmZzt9cmV0dXJuIGR9cmV0dXJuIHNiKGEsbmV3IEUoYix0aGlzKSl9XG5mdW5jdGlvbiBHKGEpe2E9YVtmYl07cmV0dXJuIGEgaW5zdGFuY2VvZiBkYj9hOm51bGx9dmFyIHRiPVwiX19jbG9zdXJlX2V2ZW50c19mbl9cIisoMUU5Kk1hdGgucmFuZG9tKCk+Pj4wKTtmdW5jdGlvbiBrYihhKXtpZihxKGEpKXJldHVybiBhO2FbdGJdfHwoYVt0Yl09ZnVuY3Rpb24oYil7cmV0dXJuIGEuaGFuZGxlRXZlbnQoYil9KTtyZXR1cm4gYVt0Yl19ZnVuY3Rpb24gSCgpe3ouY2FsbCh0aGlzKTt0aGlzLmthPW5ldyBkYih0aGlzKTt0aGlzLlRlPXRoaXM7dGhpcy5XYz1udWxsO314KEgseik7SC5wcm90b3R5cGVbYWJdPSEwO2U9SC5wcm90b3R5cGU7ZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2liKHRoaXMsYSxiLGMsZCk7fTtlLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMsZCl7cGIodGhpcyxhLGIsYyxkKTt9O1xuZS5kaXNwYXRjaEV2ZW50PWZ1bmN0aW9uKGEpe3ZhciBiLGM9dGhpcy5XYztpZihjKWZvcihiPVtdO2M7Yz1jLldjKWIucHVzaChjKTtjPXRoaXMuVGU7dmFyIGQ9YS50eXBlfHxhO2lmKGwoYSkpYT1uZXcgRChhLGMpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIEQpYS50YXJnZXQ9YS50YXJnZXR8fGM7ZWxzZXt2YXIgZj1hO2E9bmV3IEQoZCxjKTtGYShhLGYpO31mPSEwO2lmKGIpZm9yKHZhciBnPWIubGVuZ3RoLTE7IWEuRWEmJjA8PWc7Zy0tKXt2YXIgaz1hLmN1cnJlbnRUYXJnZXQ9YltnXTtmPWsuTWIoZCwhMCxhKSYmZjt9YS5FYXx8KGs9YS5jdXJyZW50VGFyZ2V0PWMsIGY9ay5NYihkLCEwLGEpJiZmLCBhLkVhfHwoZj1rLk1iKGQsITEsYSkmJmYpKTtpZihiKWZvcihnPTA7IWEuRWEmJmc8Yi5sZW5ndGg7ZysrKWs9YS5jdXJyZW50VGFyZ2V0PWJbZ10sIGY9ay5NYihkLCExLGEpJiZmO3JldHVybiBmfTtcbmUuRj1mdW5jdGlvbigpe0guTC5GLmNhbGwodGhpcyk7dGhpcy50ZygpO3RoaXMuV2M9bnVsbDt9O2Uub2I9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMua2EuYWRkKFN0cmluZyhhKSxiLCExLGMsZCl9O2UuUWM9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMua2EuYWRkKFN0cmluZyhhKSxiLCEwLGMsZCl9O2UuaGQ9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5rYS5yZW1vdmUoU3RyaW5nKGEpLGIsYyxkKTt9O2UuUGU9ZnVuY3Rpb24oYSl7dGhpcy5rYS5CZShhKTt9O2UudGc9ZnVuY3Rpb24oKXt0aGlzLmthJiZ0aGlzLmthLnFiKHZvaWQgMCk7fTtcbmUuTWI9ZnVuY3Rpb24oYSxiLGMpe2E9dGhpcy5rYS5KW1N0cmluZyhhKV07aWYoIWEpcmV0dXJuITA7YT1hLmNvbmNhdCgpO2Zvcih2YXIgZD0hMCxmPTA7ZjxhLmxlbmd0aDsrK2Ype3ZhciBnPWFbZl07aWYoZyYmIWcuU2EmJmcuY2FwdHVyZT09Yil7dmFyIGs9Zy5saXN0ZW5lcixwPWcuUGJ8fGcuc3JjO2cuRmImJnRoaXMuUGUoZyk7ZD0hMSE9PWsuY2FsbChwLGMpJiZkO319cmV0dXJuIGQmJjAhPWMuRWV9O2Uua2I9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMua2Eua2IoU3RyaW5nKGEpLGIsYyxkKX07ZnVuY3Rpb24gdWIoYSl7cmV0dXJuL15cXHMqJC8udGVzdChhKT8hMTovXltcXF0sOnt9XFxzXFx1MjAyOFxcdTIwMjldKiQvLnRlc3QoYS5yZXBsYWNlKC9cXFxcW1wiXFxcXFxcL2JmbnJ0dV0vZyxcIkBcIikucmVwbGFjZSgvKD86XCJbXlwiXFxcXFxcblxcclxcdTIwMjhcXHUyMDI5XFx4MDAtXFx4MDhcXHgwYS1cXHgxZl0qXCJ8dHJ1ZXxmYWxzZXxudWxsfC0/XFxkKyg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/KVtcXHNcXHUyMDI4XFx1MjAyOV0qKD89OnwsfF18fXwkKS9nLFwiXVwiKS5yZXBsYWNlKC8oPzpefDp8LCkoPzpbXFxzXFx1MjAyOFxcdTIwMjldKlxcWykrL2csXCJcIikpfWZ1bmN0aW9uIHZiKGEpe2E9U3RyaW5nKGEpO2lmKHViKGEpKXRyeXtyZXR1cm4gZXZhbChcIihcIithK1wiKVwiKX1jYXRjaChiKXt9dGhyb3cgRXJyb3IoXCJJbnZhbGlkIEpTT04gc3RyaW5nOiBcIithKTt9ZnVuY3Rpb24gSSgpe3RoaXMuVGE9dm9pZCAwO31JLnByb3RvdHlwZS5lYz1mdW5jdGlvbihhKXt2YXIgYj1bXTt0aGlzLmJkKGEsYik7cmV0dXJuIGIuam9pbihcIlwiKX07XG5JLnByb3RvdHlwZS5iZD1mdW5jdGlvbihhLGIpe2lmKG51bGw9PWEpYi5wdXNoKFwibnVsbFwiKTtlbHNle2lmKFwib2JqZWN0XCI9PXR5cGVvZiBhKXtpZihuKGEpKXt0aGlzLkRnKGEsYik7cmV0dXJufWlmKGEgaW5zdGFuY2VvZiBTdHJpbmd8fGEgaW5zdGFuY2VvZiBOdW1iZXJ8fGEgaW5zdGFuY2VvZiBCb29sZWFuKWE9YS52YWx1ZU9mKCk7ZWxzZXt0aGlzLkZnKGEsYik7cmV0dXJufX1zd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJzdHJpbmdcIjp0aGlzLkdlKGEsYik7YnJlYWs7Y2FzZSBcIm51bWJlclwiOnRoaXMuRWcoYSxiKTticmVhaztjYXNlIFwiYm9vbGVhblwiOmIucHVzaChTdHJpbmcoYSkpO2JyZWFrO2Nhc2UgXCJmdW5jdGlvblwiOmIucHVzaChcIm51bGxcIik7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVua25vd24gdHlwZTogXCIrdHlwZW9mIGEpO319fTtcbnZhciB3Yj17J1wiJzonXFxcXFwiJyxcIlxcXFxcIjpcIlxcXFxcXFxcXCIsXCIvXCI6XCJcXFxcL1wiLFwiXFxiXCI6XCJcXFxcYlwiLFwiXFxmXCI6XCJcXFxcZlwiLFwiXFxuXCI6XCJcXFxcblwiLFwiXFxyXCI6XCJcXFxcclwiLFwiXFx0XCI6XCJcXFxcdFwiLFwiXFx4MEJcIjpcIlxcXFx1MDAwYlwifSx4Yj0vXFx1ZmZmZi8udGVzdChcIlxcdWZmZmZcIik/L1tcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxcdWZmZmZdL2c6L1tcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxceGZmXS9nO0kucHJvdG90eXBlLkdlPWZ1bmN0aW9uKGEsYil7Yi5wdXNoKCdcIicsYS5yZXBsYWNlKHhiLGZ1bmN0aW9uKGEpe3ZhciBiPXdiW2FdO2J8fChiPVwiXFxcXHVcIisoYS5jaGFyQ29kZUF0KDApfDY1NTM2KS50b1N0cmluZygxNikuc3Vic3RyKDEpLCB3YlthXT1iKTtyZXR1cm4gYn0pLCdcIicpO307SS5wcm90b3R5cGUuRWc9ZnVuY3Rpb24oYSxiKXtiLnB1c2goaXNGaW5pdGUoYSkmJiFpc05hTihhKT9TdHJpbmcoYSk6XCJudWxsXCIpO307XG5JLnByb3RvdHlwZS5EZz1mdW5jdGlvbihhLGIpe3ZhciBjPWEubGVuZ3RoO2IucHVzaChcIltcIik7Zm9yKHZhciBkPVwiXCIsZj0wO2Y8YztmKyspYi5wdXNoKGQpLCBkPWFbZl0sIHRoaXMuYmQodGhpcy5UYT90aGlzLlRhLmNhbGwoYSxTdHJpbmcoZiksZCk6ZCxiKSwgZD1cIixcIjtiLnB1c2goXCJdXCIpO307SS5wcm90b3R5cGUuRmc9ZnVuY3Rpb24oYSxiKXtiLnB1c2goXCJ7XCIpO3ZhciBjPVwiXCIsZDtmb3IoZCBpbiBhKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGQpKXt2YXIgZj1hW2RdO1wiZnVuY3Rpb25cIiE9dHlwZW9mIGYmJihiLnB1c2goYyksIHRoaXMuR2UoZCxiKSwgYi5wdXNoKFwiOlwiKSwgdGhpcy5iZCh0aGlzLlRhP3RoaXMuVGEuY2FsbChhLGQsZik6ZixiKSwgYz1cIixcIik7fWIucHVzaChcIn1cIik7fTtmdW5jdGlvbiB5YihhLGIpe3RoaXMuV2Y9MTAwO3RoaXMuamY9YTt0aGlzLnhnPWI7dGhpcy4kYj0wO3RoaXMuUWI9bnVsbDt9eWIucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe2lmKDA8dGhpcy4kYil7dGhpcy4kYi0tO3ZhciBhPXRoaXMuUWI7dGhpcy5RYj1hLm5leHQ7YS5uZXh0PW51bGw7fWVsc2UgYT10aGlzLmpmKCk7cmV0dXJuIGF9O3liLnByb3RvdHlwZS5wdXQ9ZnVuY3Rpb24oYSl7dGhpcy54ZyhhKTt0aGlzLiRiPHRoaXMuV2YmJih0aGlzLiRiKyssIGEubmV4dD10aGlzLlFiLCB0aGlzLlFiPWEpO307ZnVuY3Rpb24gSigpe3RoaXMubmM9dGhpcy5XYT1udWxsO312YXIgQWI9bmV3IHliKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB6Yn0sZnVuY3Rpb24oYSl7YS5yZXNldCgpO30pO0oucHJvdG90eXBlLmFkZD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuRWYoKTtjLnNldChhLGIpO3RoaXMubmM/dGhpcy5uYy5uZXh0PWM6dGhpcy5XYT1jO3RoaXMubmM9Yzt9O0oucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3ZhciBhPW51bGw7dGhpcy5XYSYmKGE9dGhpcy5XYSwgdGhpcy5XYT10aGlzLldhLm5leHQsIHRoaXMuV2F8fCh0aGlzLm5jPW51bGwpLCBhLm5leHQ9bnVsbCk7cmV0dXJuIGF9O0oucHJvdG90eXBlLnpnPWZ1bmN0aW9uKGEpe0FiLnB1dChhKTt9O0oucHJvdG90eXBlLkVmPWZ1bmN0aW9uKCl7cmV0dXJuIEFiLmdldCgpfTtmdW5jdGlvbiB6Yigpe3RoaXMubmV4dD10aGlzLnNjb3BlPXRoaXMuSWM9bnVsbDt9XG56Yi5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGEsYil7dGhpcy5JYz1hO3RoaXMuc2NvcGU9Yjt0aGlzLm5leHQ9bnVsbDt9O3piLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMubmV4dD10aGlzLnNjb3BlPXRoaXMuSWM9bnVsbDt9O2Z1bmN0aW9uIEJiKGEpe2guc2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSwwKTt9dmFyIENiO1xuZnVuY3Rpb24gRGIoKXt2YXIgYT1oLk1lc3NhZ2VDaGFubmVsO1widW5kZWZpbmVkXCI9PT10eXBlb2YgYSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5wb3N0TWVzc2FnZSYmd2luZG93LmFkZEV2ZW50TGlzdGVuZXImJiFCKFwiUHJlc3RvXCIpJiYoYT1mdW5jdGlvbigpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJJRlJBTUVcIik7YS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Euc3JjPVwiXCI7ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGEpO3ZhciBiPWEuY29udGVudFdpbmRvdzthPWIuZG9jdW1lbnQ7YS5vcGVuKCk7YS53cml0ZShcIlwiKTthLmNsb3NlKCk7dmFyIGM9XCJjYWxsSW1tZWRpYXRlXCIrTWF0aC5yYW5kb20oKSxkPVwiZmlsZTpcIj09Yi5sb2NhdGlvbi5wcm90b2NvbD9cIipcIjpiLmxvY2F0aW9uLnByb3RvY29sK1wiLy9cIitiLmxvY2F0aW9uLmhvc3Q7YT11KGZ1bmN0aW9uKGEpe2lmKChcIipcIj09ZHx8YS5vcmlnaW49PWQpJiZhLmRhdGE9PVxuYyl0aGlzLnBvcnQxLm9ubWVzc2FnZSgpO30sdGhpcyk7Yi5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGEsITEpO3RoaXMucG9ydDE9e307dGhpcy5wb3J0Mj17cG9zdE1lc3NhZ2U6ZnVuY3Rpb24oKXtiLnBvc3RNZXNzYWdlKGMsZCk7fX07fSk7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhJiYhQihcIlRyaWRlbnRcIikmJiFCKFwiTVNJRVwiKSl7dmFyIGI9bmV3IGEsYz17fSxkPWM7Yi5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1jLm5leHQpe2M9Yy5uZXh0O3ZhciBhPWMudWQ7Yy51ZD1udWxsO2EoKTt9fTtyZXR1cm4gZnVuY3Rpb24oYSl7ZC5uZXh0PXt1ZDphfTtkPWQubmV4dDtiLnBvcnQyLnBvc3RNZXNzYWdlKDApO319cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudCYmXCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJTQ1JJUFRcIik/ZnVuY3Rpb24oYSl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIlNDUklQVFwiKTtcbmIub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7Yi5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbDtiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik7Yj1udWxsO2EoKTthPW51bGw7fTtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoYik7fTpmdW5jdGlvbihhKXtoLnNldFRpbWVvdXQoYSwwKTt9fXZhciBFYjtmdW5jdGlvbiBGYigpe2lmKGguUHJvbWlzZSYmaC5Qcm9taXNlLnJlc29sdmUpe3ZhciBhPWguUHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7RWI9ZnVuY3Rpb24oKXthLnRoZW4oR2IpO307fWVsc2UgRWI9ZnVuY3Rpb24oKXt2YXIgYT1HYjshcShoLnNldEltbWVkaWF0ZSl8fGguV2luZG93JiZoLldpbmRvdy5wcm90b3R5cGUmJiFCKFwiRWRnZVwiKSYmaC5XaW5kb3cucHJvdG90eXBlLnNldEltbWVkaWF0ZT09aC5zZXRJbW1lZGlhdGU/KENifHwoQ2I9RGIoKSksIENiKGEpKTpoLnNldEltbWVkaWF0ZShhKTt9O312YXIgSGI9ITEsSWI9bmV3IEo7ZnVuY3Rpb24gR2IoKXtmb3IodmFyIGE7YT1JYi5yZW1vdmUoKTspe3RyeXthLkljLmNhbGwoYS5zY29wZSk7fWNhdGNoKGIpe0JiKGIpO31JYi56ZyhhKTt9SGI9ITE7fWZ1bmN0aW9uIEpiKGEsYil7SC5jYWxsKHRoaXMpO3RoaXMuTmE9YXx8MTt0aGlzLnhiPWJ8fGg7dGhpcy5xZD11KHRoaXMuWGcsdGhpcyk7dGhpcy5sZT13KCk7fXgoSmIsSCk7ZT1KYi5wcm90b3R5cGU7ZS5lbmFibGVkPSExO2UuQj1udWxsO2Uuc2V0SW50ZXJ2YWw9ZnVuY3Rpb24oYSl7dGhpcy5OYT1hO3RoaXMuQiYmdGhpcy5lbmFibGVkPyh0aGlzLnN0b3AoKSwgdGhpcy5zdGFydCgpKTp0aGlzLkImJnRoaXMuc3RvcCgpO307ZS5YZz1mdW5jdGlvbigpe2lmKHRoaXMuZW5hYmxlZCl7dmFyIGE9dygpLXRoaXMubGU7MDxhJiZhPC44KnRoaXMuTmE/dGhpcy5CPXRoaXMueGIuc2V0VGltZW91dCh0aGlzLnFkLHRoaXMuTmEtYSk6KHRoaXMuQiYmKHRoaXMueGIuY2xlYXJUaW1lb3V0KHRoaXMuQiksIHRoaXMuQj1udWxsKSwgdGhpcy5rZigpLCB0aGlzLmVuYWJsZWQmJih0aGlzLnN0b3AoKSwgdGhpcy5zdGFydCgpKSk7fX07ZS5rZj1mdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudChcInRpY2tcIik7fTtcbmUuc3RhcnQ9ZnVuY3Rpb24oKXt0aGlzLmVuYWJsZWQ9ITA7dGhpcy5CfHwodGhpcy5CPXRoaXMueGIuc2V0VGltZW91dCh0aGlzLnFkLHRoaXMuTmEpLCB0aGlzLmxlPXcoKSk7fTtlLnN0b3A9ZnVuY3Rpb24oKXt0aGlzLmVuYWJsZWQ9ITE7dGhpcy5CJiYodGhpcy54Yi5jbGVhclRpbWVvdXQodGhpcy5CKSwgdGhpcy5CPW51bGwpO307ZS5GPWZ1bmN0aW9uKCl7SmIuTC5GLmNhbGwodGhpcyk7dGhpcy5zdG9wKCk7ZGVsZXRlIHRoaXMueGI7fTtmdW5jdGlvbiBLYihhLGIsYyl7aWYocShhKSljJiYoYT11KGEsYykpO2Vsc2UgaWYoYSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5oYW5kbGVFdmVudClhPXUoYS5oYW5kbGVFdmVudCxhKTtlbHNlIHRocm93IEVycm9yKFwiSW52YWxpZCBsaXN0ZW5lciBhcmd1bWVudFwiKTtyZXR1cm4gMjE0NzQ4MzY0NzxOdW1iZXIoYik/LTE6aC5zZXRUaW1lb3V0KGEsYnx8MCl9ZnVuY3Rpb24gTGIoYSxiLGMpe3ouY2FsbCh0aGlzKTt0aGlzLllmPW51bGwhPWM/dShhLGMpOmE7dGhpcy5OYT1iO3RoaXMuYWY9dSh0aGlzLmpnLHRoaXMpO3RoaXMuc2M9W107fXgoTGIseik7ZT1MYi5wcm90b3R5cGU7ZS5VYT0hMTtlLnBiPTA7ZS5CPW51bGw7ZS5yZj1mdW5jdGlvbihhKXt0aGlzLnNjPWFyZ3VtZW50czt0aGlzLkJ8fHRoaXMucGI/dGhpcy5VYT0hMDp0aGlzLkVjKCk7fTtlLnN0b3A9ZnVuY3Rpb24oKXt0aGlzLkImJihoLmNsZWFyVGltZW91dCh0aGlzLkIpLCB0aGlzLkI9bnVsbCwgdGhpcy5VYT0hMSwgdGhpcy5zYz1bXSk7fTtlLnBhdXNlPWZ1bmN0aW9uKCl7dGhpcy5wYisrO307ZS5yZXN1bWU9ZnVuY3Rpb24oKXt0aGlzLnBiLS07dGhpcy5wYnx8IXRoaXMuVWF8fHRoaXMuQnx8KHRoaXMuVWE9ITEsIHRoaXMuRWMoKSk7fTtlLkY9ZnVuY3Rpb24oKXtMYi5MLkYuY2FsbCh0aGlzKTt0aGlzLnN0b3AoKTt9O1xuZS5qZz1mdW5jdGlvbigpe3RoaXMuQj1udWxsO3RoaXMuVWEmJiF0aGlzLnBiJiYodGhpcy5VYT0hMSwgdGhpcy5FYygpKTt9O2UuRWM9ZnVuY3Rpb24oKXt0aGlzLkI9S2IodGhpcy5hZix0aGlzLk5hKTt0aGlzLllmLmFwcGx5KG51bGwsdGhpcy5zYyk7fTtmdW5jdGlvbiBNYihhKXt6LmNhbGwodGhpcyk7dGhpcy5pPWE7dGhpcy5vPXt9O314KE1iLHopO3ZhciBOYj1bXTtlPU1iLnByb3RvdHlwZTtlLm9iPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLlhmKGEsYixjLGQpfTtlLlhmPWZ1bmN0aW9uKGEsYixjLGQpe24oYil8fChiJiYoTmJbMF09Yi50b1N0cmluZygpKSwgYj1OYik7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspe3ZhciBnPWliKGEsYltmXSxjfHx0aGlzLmhhbmRsZUV2ZW50LGR8fCExLHRoaXMuaXx8dGhpcyk7aWYoIWcpYnJlYWs7dGhpcy5vW2cua2V5XT1nO31yZXR1cm4gdGhpc307ZS5RYz1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5tZShhLGIsYyxkKX07XG5lLm1lPWZ1bmN0aW9uKGEsYixjLGQsZil7aWYobihiKSlmb3IodmFyIGc9MDtnPGIubGVuZ3RoO2crKyl0aGlzLm1lKGEsYltnXSxjLGQsZik7ZWxzZXthPWpiKGEsYixjfHx0aGlzLmhhbmRsZUV2ZW50LGQsZnx8dGhpcy5pfHx0aGlzKTtpZighYSlyZXR1cm4gdGhpczt0aGlzLm9bYS5rZXldPWE7fXJldHVybiB0aGlzfTtlLmhkPWZ1bmN0aW9uKGEsYixjLGQsZil7aWYobihiKSlmb3IodmFyIGc9MDtnPGIubGVuZ3RoO2crKyl0aGlzLmhkKGEsYltnXSxjLGQsZik7ZWxzZSBjPWN8fHRoaXMuaGFuZGxlRXZlbnQsIGQ9cihkKT8hIWQuY2FwdHVyZTohIWQsIGY9Znx8dGhpcy5pfHx0aGlzLCBjPWtiKGMpLCBkPSEhZCwgYj1GKGEpP2Eua2IoYixjLGQsZik6YT8oYT1HKGEpKT9hLmtiKGIsYyxkLGYpOm51bGw6bnVsbCwgYiYmKHFiKGIpLCBkZWxldGUgdGhpcy5vW2Iua2V5XSk7fTtcbmUucWI9ZnVuY3Rpb24oKXtBYSh0aGlzLm8sZnVuY3Rpb24oYSxiKXt0aGlzLm8uaGFzT3duUHJvcGVydHkoYikmJnFiKGEpO30sdGhpcyk7dGhpcy5vPXt9O307ZS5GPWZ1bmN0aW9uKCl7TWIuTC5GLmNhbGwodGhpcyk7dGhpcy5xYigpO307ZS5oYW5kbGVFdmVudD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiRXZlbnRIYW5kbGVyLmhhbmRsZUV2ZW50IG5vdCBpbXBsZW1lbnRlZFwiKTt9O2Z1bmN0aW9uIEsoYSxiLGMpe3RoaXMucmVzZXQoYSxiLGMsdm9pZCAwLHZvaWQgMCk7fUsucHJvdG90eXBlLlBkPW51bGw7Sy5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oYSxiLGMsZCxmKXt0aGlzLm5iPWE7ZGVsZXRlIHRoaXMuUGQ7fTtLLnByb3RvdHlwZS5IZz1mdW5jdGlvbihhKXt0aGlzLlBkPWE7fTtLLnByb3RvdHlwZS5LZT1mdW5jdGlvbihhKXt0aGlzLm5iPWE7fTtmdW5jdGlvbiBQYihhKXt0aGlzLnNlPWE7dGhpcy5iZT10aGlzLndjPXRoaXMubmI9dGhpcy5hYz1udWxsO31mdW5jdGlvbiBMKGEsYil7dGhpcy5uYW1lPWE7dGhpcy52YWx1ZT1iO31MLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWV9O3ZhciBRYj1uZXcgTChcIlNFVkVSRVwiLDFFMyksUmI9bmV3IEwoXCJXQVJOSU5HXCIsOTAwKSxTYj1uZXcgTChcIklORk9cIiw4MDApLFRiPW5ldyBMKFwiQ09ORklHXCIsNzAwKSxVYj1uZXcgTChcIkZJTkVcIiw1MDApO2U9UGIucHJvdG90eXBlO2UuZ2V0TmFtZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNlfTtlLmdldFBhcmVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFjfTtlLnRmPWZ1bmN0aW9uKCl7dGhpcy53Y3x8KHRoaXMud2M9e30pO3JldHVybiB0aGlzLndjfTtlLktlPWZ1bmN0aW9uKGEpe3RoaXMubmI9YTt9O1xuZS5UZD1mdW5jdGlvbigpe2lmKHRoaXMubmIpcmV0dXJuIHRoaXMubmI7aWYodGhpcy5hYylyZXR1cm4gdGhpcy5hYy5UZCgpO2lhKFwiUm9vdCBsb2dnZXIgaGFzIG5vIGxldmVsIHNldC5cIik7cmV0dXJuIG51bGx9O2UuVGY9ZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWU+PXRoaXMuVGQoKS52YWx1ZX07ZS5sb2c9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuVGYoYSkmJihxKGIpJiYoYj1iKCkpLCB0aGlzLmxmKHRoaXMueWYoYSxiLGMpKSk7fTtlLnlmPWZ1bmN0aW9uKGEsYixjKXthPW5ldyBLKGEsU3RyaW5nKGIpLHRoaXMuc2UpO2MmJmEuSGcoYyk7cmV0dXJuIGF9O2UuY2E9ZnVuY3Rpb24oYSxiKXt0aGlzLmxvZyhRYixhLGIpO307ZS5UPWZ1bmN0aW9uKGEsYil7dGhpcy5sb2coUmIsYSxiKTt9O2UuaW5mbz1mdW5jdGlvbihhLGIpe3RoaXMubG9nKFNiLGEsYik7fTtlLnFmPWZ1bmN0aW9uKGEpe3RoaXMubG9nKFViLGEsdm9pZCAwKTt9O1xuZS5sZj1mdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcztiOyliLiRlKGEpLCBiPWIuZ2V0UGFyZW50KCk7fTtlLiRlPWZ1bmN0aW9uKGEpe2lmKHRoaXMuYmUpZm9yKHZhciBiPTAsYztjPXRoaXMuYmVbYl07YisrKWMoYSk7fTtlLkxnPWZ1bmN0aW9uKGEpe3RoaXMuYWM9YTt9O2UuVWU9ZnVuY3Rpb24oYSxiKXt0aGlzLnRmKClbYV09Yjt9O3ZhciBXYj17fSxYYj1udWxsO2Z1bmN0aW9uIFliKGEpe1hifHwoWGI9bmV3IFBiKFwiXCIpLCBXYltcIlwiXT1YYiwgWGIuS2UoVGIpKTt2YXIgYjtpZighKGI9V2JbYV0pKXtiPW5ldyBQYihhKTt2YXIgYz1hLmxhc3RJbmRleE9mKFwiLlwiKSxkPWEuc3Vic3RyKGMrMSk7Yz1ZYihhLnN1YnN0cigwLGMpKTtjLlVlKGQsYik7Yi5MZyhjKTtXYlthXT1iO31yZXR1cm4gYn1mdW5jdGlvbiBaYihhLGIpe2EmJmEuaW5mbyhiLHZvaWQgMCk7fWZ1bmN0aW9uIE0oYSxiKXthJiZhLnFmKGIpO31mdW5jdGlvbiAkYigpe3RoaXMucz1ZYihcImdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsRGVidWdcIik7dGhpcy5ZYz0hMDt9ZT0kYi5wcm90b3R5cGU7ZS5MZD1mdW5jdGlvbigpe3RoaXMuWWM9ITE7fTtlLlpnPWZ1bmN0aW9uKGEsYixjLGQsZil7dmFyIGc9dGhpczt0aGlzLmluZm8oZnVuY3Rpb24oKXtyZXR1cm5cIlhNTEhUVFAgUkVRIChcIitjK1wiKSBbYXR0ZW1wdCBcIitkK1wiXTogXCIrYStcIlxcblwiK2IrXCJcXG5cIitnLmFnKGYpfSk7fTtlLiRnPWZ1bmN0aW9uKGEsYixjLGQsZixnKXt0aGlzLmluZm8oZnVuY3Rpb24oKXtyZXR1cm5cIlhNTEhUVFAgUkVTUCAoXCIrYytcIikgWyBhdHRlbXB0IFwiK2QrXCJdOiBcIithK1wiXFxuXCIrYitcIlxcblwiK2YrXCIgXCIrZ30pO307ZS5YYT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpczt0aGlzLmluZm8oZnVuY3Rpb24oKXtyZXR1cm5cIlhNTEhUVFAgVEVYVCAoXCIrYStcIik6IFwiK2QucmcoYikrKGM/XCIgXCIrYzpcIlwiKX0pO307XG5lLllnPWZ1bmN0aW9uKGEpe3RoaXMuaW5mbyhmdW5jdGlvbigpe3JldHVyblwiVElNRU9VVDogXCIrYX0pO307ZS5kZWJ1Zz1mdW5jdGlvbihhKXtNKHRoaXMucyxhKTt9O2UuZWI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLnM7YyYmYy5jYShifHxcIkV4Y2VwdGlvblwiLGEpO307ZS5pbmZvPWZ1bmN0aW9uKGEpe1piKHRoaXMucyxhKTt9O2UuVD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLnM7YiYmYi5UKGEsdm9pZCAwKTt9O2UuY2E9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5zO2ImJmIuY2EoYSx2b2lkIDApO307XG5lLnJnPWZ1bmN0aW9uKGEpe2lmKCF0aGlzLlljKXJldHVybiBhO2lmKCFhKXJldHVybiBudWxsO3RyeXt2YXIgYj1KU09OLnBhcnNlKGEpO2lmKGIpZm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspbihiW2NdKSYmdGhpcy4kZihiW2NdKTtyZXR1cm4obmV3IEkpLmVjKGIpfWNhdGNoKGQpe3JldHVybiB0aGlzLmRlYnVnKFwiRXhjZXB0aW9uIHBhcnNpbmcgZXhwZWN0ZWQgSlMgYXJyYXkgLSBwcm9iYWJseSB3YXMgbm90IEpTXCIpLCBhfX07ZS4kZj1mdW5jdGlvbihhKXtpZighKDI+YS5sZW5ndGh8fChhPWFbMV0sICFuKGEpfHwxPmEubGVuZ3RoKSkpe3ZhciBiPWFbMF07aWYoXCJub29wXCIhPWImJlwic3RvcFwiIT1iJiZcImNsb3NlXCIhPWIpZm9yKGI9MTtiPGEubGVuZ3RoO2IrKylhW2JdPVwiXCI7fX07XG5lLmFnPWZ1bmN0aW9uKGEpe2lmKCF0aGlzLlljKXJldHVybiBhO2lmKCFhKXJldHVybiBudWxsO3ZhciBiPVwiXCI7YT1hLnNwbGl0KFwiJlwiKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXS5zcGxpdChcIj1cIik7aWYoMTxkLmxlbmd0aCl7dmFyIGY9ZFswXTtkPWRbMV07dmFyIGc9Zi5zcGxpdChcIl9cIik7Yj0yPD1nLmxlbmd0aCYmXCJ0eXBlXCI9PWdbMV0/YisoZitcIj1cIitkK1wiJlwiKTpiKyhmK1wiPXJlZGFjdGVkJlwiKTt9fXJldHVybiBifTt2YXIgTj1uZXcgSDtmdW5jdGlvbiBhYyhhKXtELmNhbGwodGhpcyxcInNlcnZlcnJlYWNoYWJpbGl0eVwiLGEpO314KGFjLEQpO2Z1bmN0aW9uIE8oYSl7Ti5kaXNwYXRjaEV2ZW50KG5ldyBhYyhOLGEpKTt9ZnVuY3Rpb24gYmMoYSxiKXtELmNhbGwodGhpcyxcInN0YXRldmVudFwiLGEpO3RoaXMuc3RhdD1iO314KGJjLEQpO2Z1bmN0aW9uIFAoYSl7Ti5kaXNwYXRjaEV2ZW50KG5ldyBiYyhOLGEpKTt9ZnVuY3Rpb24gY2MoYSxiLGMpe0QuY2FsbCh0aGlzLFwidGltaW5nZXZlbnRcIixhKTt0aGlzLnNpemU9Yjt0aGlzLnJ0dD1jO314KGNjLEQpO2Z1bmN0aW9uIGRjKGEsYixjKXtOLmRpc3BhdGNoRXZlbnQobmV3IGNjKE4sYSxiLGMpKTt9ZnVuY3Rpb24gUShhLGIpe2lmKCFxKGEpKXRocm93IEVycm9yKFwiRm4gbXVzdCBub3QgYmUgbnVsbCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO3JldHVybiBoLnNldFRpbWVvdXQoZnVuY3Rpb24oKXthKCk7fSxiKX12YXIgZWM9e05PX0VSUk9SOjAsYWg6MSxpaDoyLGhoOjMsZWg6NCxnaDo1LGpoOjYsUmU6NyxUSU1FT1VUOjgsbWg6OX07dmFyIGZjPXtkaDpcImNvbXBsZXRlXCIscWg6XCJzdWNjZXNzXCIsU2U6XCJlcnJvclwiLFJlOlwiYWJvcnRcIixvaDpcInJlYWR5XCIscGg6XCJyZWFkeXN0YXRlY2hhbmdlXCIsVElNRU9VVDpcInRpbWVvdXRcIixraDpcImluY3JlbWVudGFsZGF0YVwiLG5oOlwicHJvZ3Jlc3NcIixmaDpcImRvd25sb2FkcHJvZ3Jlc3NcIixyaDpcInVwbG9hZHByb2dyZXNzXCJ9O2Z1bmN0aW9uIGdjKCl7fWdjLnByb3RvdHlwZS5zZD1udWxsO2djLnByb3RvdHlwZS5ZZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNkfHwodGhpcy5zZD10aGlzLlFmKCkpfTtmdW5jdGlvbiBoYygpe312YXIgaWM9e09QRU46XCJhXCIsYmg6XCJiXCIsU2U6XCJjXCIsbGg6XCJkXCJ9O2Z1bmN0aW9uIGpjKCl7RC5jYWxsKHRoaXMsXCJkXCIpO314KGpjLEQpO2Z1bmN0aW9uIGtjKCl7RC5jYWxsKHRoaXMsXCJjXCIpO314KGtjLEQpO3ZhciBsYztmdW5jdGlvbiBtYygpe314KG1jLGdjKTttYy5wcm90b3R5cGUuR2Q9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLlpkKCk7cmV0dXJuIGE/bmV3IEFjdGl2ZVhPYmplY3QoYSk6bmV3IFhNTEh0dHBSZXF1ZXN0fTttYy5wcm90b3R5cGUuUWY9ZnVuY3Rpb24oKXt2YXIgYT17fTt0aGlzLlpkKCkmJihhWzBdPSEwLCBhWzFdPSEwKTtyZXR1cm4gYX07XG5tYy5wcm90b3R5cGUuWmQ9ZnVuY3Rpb24oKXtpZighdGhpcy5lZSYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIFhNTEh0dHBSZXF1ZXN0JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgQWN0aXZlWE9iamVjdCl7Zm9yKHZhciBhPVtcIk1TWE1MMi5YTUxIVFRQLjYuMFwiLFwiTVNYTUwyLlhNTEhUVFAuMy4wXCIsXCJNU1hNTDIuWE1MSFRUUFwiLFwiTWljcm9zb2Z0LlhNTEhUVFBcIl0sYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtyZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoYyksIHRoaXMuZWU9Y31jYXRjaChkKXt9fXRocm93IEVycm9yKFwiQ291bGQgbm90IGNyZWF0ZSBBY3RpdmVYT2JqZWN0LiBBY3RpdmVYIG1pZ2h0IGJlIGRpc2FibGVkLCBvciBNU1hNTCBtaWdodCBub3QgYmUgaW5zdGFsbGVkXCIpO31yZXR1cm4gdGhpcy5lZX07bGM9bmV3IG1jO2Z1bmN0aW9uIFIoYSxiLGMsZCxmKXt0aGlzLmI9YTt0aGlzLmE9Yjt0aGlzLnJhPWM7dGhpcy5SPWQ7dGhpcy5aYz1mfHwxO3RoaXMuSGM9bmV3IE1iKHRoaXMpO3RoaXMuVmE9bmM7YT1MYT8xMjU6dm9pZCAwO3RoaXMuWGM9bmV3IEpiKGEpO3RoaXMuQT1udWxsO3RoaXMuUz0hMTt0aGlzLkRhPXRoaXMucGE9dGhpcy51YT10aGlzLmtjPXRoaXMucmI9dGhpcy5sZD10aGlzLkdhPW51bGw7dGhpcy5iYT1bXTt0aGlzLmg9bnVsbDt0aGlzLkNiPTA7dGhpcy5JPXRoaXMuRmE9bnVsbDt0aGlzLnc9LTE7dGhpcy4kYT0hMTt0aGlzLlJhPTA7dGhpcy5iYz1udWxsO3RoaXMubWI9dGhpcy5IZD10aGlzLkFjPSExO312YXIgbmM9NDVFMztcbmZ1bmN0aW9uIG9jKGEsYil7c3dpdGNoKGEpe2Nhc2UgMDpyZXR1cm5cIk5vbi0yMDAgcmV0dXJuIGNvZGUgKFwiK2IrXCIpXCI7Y2FzZSAxOnJldHVyblwiWE1MSFRUUCBmYWlsdXJlIChubyBkYXRhKVwiO2Nhc2UgMjpyZXR1cm5cIkh0dHBDb25uZWN0aW9uIHRpbWVvdXRcIjtkZWZhdWx0OnJldHVyblwiVW5rbm93biBlcnJvclwifX12YXIgcGM9e30scWM9e307ZT1SLnByb3RvdHlwZTtlLmdhPWZ1bmN0aW9uKGEpe3RoaXMuQT1hO307ZS5zZXRUaW1lb3V0PWZ1bmN0aW9uKGEpe3RoaXMuVmE9YTt9O2UuTGU9ZnVuY3Rpb24oYSl7dGhpcy5SYT1hO307ZS5NZz1mdW5jdGlvbihhKXt0aGlzLmJhPWE7fTtlLmxhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYmF9O2UubmQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmtjPTE7dGhpcy51YT1hLmNsb25lKCkuVmIoKTt0aGlzLkRhPWI7dGhpcy5BYz0hMDt0aGlzLkZlKG51bGwpO307XG5lLm1kPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmtjPTE7dGhpcy51YT1hLmNsb25lKCkuVmIoKTt0aGlzLkRhPW51bGw7dGhpcy5BYz1iO3RoaXMuRmUoYyk7fTtcbmUuRmU9ZnVuY3Rpb24oYSl7dGhpcy5yYj13KCk7dGhpcy5mYigpO3RoaXMucGE9dGhpcy51YS5jbG9uZSgpO3RoaXMucGEuZmMoXCJ0XCIsdGhpcy5aYyk7dGhpcy5DYj0wO3RoaXMuaD10aGlzLmIuS2IodGhpcy5iLmhjKCk/YTpudWxsKTswPHRoaXMuUmEmJih0aGlzLmJjPW5ldyBMYih1KHRoaXMuUWUsdGhpcyx0aGlzLmgpLHRoaXMuUmEpKTt0aGlzLkhjLm9iKHRoaXMuaCxcInJlYWR5c3RhdGVjaGFuZ2VcIix0aGlzLnFnKTthPXRoaXMuQT9EYSh0aGlzLkEpOnt9O3RoaXMuRGE/KHRoaXMuRmF8fCh0aGlzLkZhPVwiUE9TVFwiKSwgYVtcIkNvbnRlbnQtVHlwZVwiXT1cImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCB0aGlzLmguc2VuZCh0aGlzLnBhLHRoaXMuRmEsdGhpcy5EYSxhKSk6KHRoaXMuRmE9XCJHRVRcIiwgdGhpcy5oLnNlbmQodGhpcy5wYSx0aGlzLkZhLG51bGwsYSkpO08oMSk7dGhpcy5hLlpnKHRoaXMuRmEsdGhpcy5wYSx0aGlzLlIsdGhpcy5aYyx0aGlzLkRhKTt9O1xuZS5xZz1mdW5jdGlvbihhKXthPWEudGFyZ2V0O3ZhciBiPXRoaXMuYmM7YiYmMz09YS5tYSgpPyh0aGlzLmEuZGVidWcoXCJUaHJvdHRsaW5nIHJlYWR5c3RhdGVjaGFuZ2UuXCIpLCBiLnJmKCkpOnRoaXMuUWUoYSk7fTtlLlFlPWZ1bmN0aW9uKGEpe3RyeXthPT10aGlzLmg/dGhpcy5sZygpOnRoaXMuYS5UKFwiQ2FsbGVkIGJhY2sgd2l0aCBhbiB1bmV4cGVjdGVkIHhtbGh0dHBcIik7fWNhdGNoKGMpe2lmKHRoaXMuYS5kZWJ1ZyhcIkZhaWxlZCBjYWxsIHRvIE9uWG1sSHR0cFJlYWR5U3RhdGVDaGFuZ2VkX1wiKSwgdGhpcy5oJiZ0aGlzLmgueWEoKSl7dmFyIGI9dGhpczt0aGlzLmEuZWIoYyxmdW5jdGlvbigpe3JldHVyblwiUmVzcG9uc2VUZXh0OiBcIitiLmgueWEoKX0pO31lbHNlIHRoaXMuYS5lYihjLFwiTm8gcmVzcG9uc2UgdGV4dFwiKTt9ZmluYWxseXt9fTtcbmUubGc9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmgubWEoKSxiPXRoaXMuaC5YZCgpLGM9dGhpcy5oLnphKCk7aWYoISgzPmF8fDM9PWEmJiFMYSYmIXRoaXMuaC55YSgpKSl7dGhpcy4kYXx8NCE9YXx8Nz09Ynx8KDg9PWJ8fDA+PWM/TygzKTpPKDIpKTt0aGlzLkdiKCk7dmFyIGQ9dGhpcy5oLnphKCk7dGhpcy53PWQ7Yj10aGlzLmgueWEoKTtpZighYil7dmFyIGY9dGhpczt0aGlzLmEuZGVidWcoZnVuY3Rpb24oKXtyZXR1cm5cIk5vIHJlc3BvbnNlIHRleHQgZm9yIHVyaSBcIitmLnBhK1wiIHN0YXR1cyBcIitkfSk7fXRoaXMuUz0yMDA9PWQ7dGhpcy5hLiRnKHRoaXMuRmEsdGhpcy5wYSx0aGlzLlIsdGhpcy5aYyxhLGQpO2lmKHRoaXMuUyl7aWYodGhpcy5PZygpKWlmKGM9dGhpcy53ZigpKXRoaXMuYS5YYSh0aGlzLlIsYyxcIkluaXRpYWwgaGFuZHNoYWtlIHJlc3BvbnNlIHZpYSBYLUhUVFAtSW5pdGlhbC1SZXNwb25zZVwiKSwgdGhpcy5tYj0hMCwgdGhpcy4kYyhjKTtlbHNle3RoaXMuUz0hMTtcbnRoaXMuST0zO1AoMTIpO3RoaXMuYS5UKFwiWE1MSFRUUCBNaXNzaW5nIFhfSFRUUF9JTklUSUFMX1JFU1BPTlNFIChcIit0aGlzLlIrXCIpXCIpO3RoaXMuSWEoKTt0aGlzLkxiKCk7cmV0dXJufXRoaXMuQWM/KHRoaXMuSWQoYSxiKSwgTGEmJnRoaXMuUyYmMz09YSYmdGhpcy5UZygpKToodGhpcy5hLlhhKHRoaXMuUixiLG51bGwpLCB0aGlzLiRjKGIpKTs0PT1hJiZ0aGlzLklhKCk7dGhpcy5TJiYhdGhpcy4kYSYmKDQ9PWE/dGhpcy5iLlZjKHRoaXMpOih0aGlzLlM9ITEsIHRoaXMuZmIoKSkpO31lbHNlIDQwMD09ZCYmMDxiLmluZGV4T2YoXCJVbmtub3duIFNJRFwiKT8odGhpcy5JPTMsIFAoMTIpLCB0aGlzLmEuVChcIlhNTEhUVFAgVW5rbm93biBTSUQgKFwiK3RoaXMuUitcIilcIikpOih0aGlzLkk9MCwgUCgxMyksIHRoaXMuYS5UKFwiWE1MSFRUUCBCYWQgc3RhdHVzIFwiK2QrXCIgKFwiK3RoaXMuUitcIilcIikpLCB0aGlzLklhKCksIHRoaXMuTGIoKTt9fTtlLk9nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuSGQmJiF0aGlzLm1ifTtcbmUud2Y9ZnVuY3Rpb24oKXtpZih0aGlzLmgpe3ZhciBhPXRoaXMuaC5sYihcIlgtSFRUUC1Jbml0aWFsLVJlc3BvbnNlXCIpO2lmKGEmJiF2YShhKSlyZXR1cm4gYX1yZXR1cm4gbnVsbH07ZS5HZz1mdW5jdGlvbigpe3RoaXMuSGQ9ITA7fTtcbmUuSWQ9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9ITA7IXRoaXMuJGEmJnRoaXMuQ2I8Yi5sZW5ndGg7KXt2YXIgZD10aGlzLnpmKGIpO2lmKGQ9PXFjKXs0PT1hJiYodGhpcy5JPTQsIFAoMTQpLCBjPSExKTt0aGlzLmEuWGEodGhpcy5SLG51bGwsXCJbSW5jb21wbGV0ZSBSZXNwb25zZV1cIik7YnJlYWt9ZWxzZSBpZihkPT1wYyl7dGhpcy5JPTQ7UCgxNSk7dGhpcy5hLlhhKHRoaXMuUixiLFwiW0ludmFsaWQgQ2h1bmtdXCIpO2M9ITE7YnJlYWt9ZWxzZSB0aGlzLmEuWGEodGhpcy5SLGQsbnVsbCksIHRoaXMuJGMoZCk7fTQ9PWEmJjA9PWIubGVuZ3RoJiYodGhpcy5JPTEsIFAoMTYpLCBjPSExKTt0aGlzLlM9dGhpcy5TJiZjO2N8fCh0aGlzLmEuWGEodGhpcy5SLGIsXCJbSW52YWxpZCBDaHVua2VkIFJlc3BvbnNlXVwiKSwgdGhpcy5JYSgpLCB0aGlzLkxiKCkpO307XG5lLm9nPWZ1bmN0aW9uKCl7aWYodGhpcy5oKXt2YXIgYT10aGlzLmgubWEoKSxiPXRoaXMuaC55YSgpO3RoaXMuQ2I8Yi5sZW5ndGgmJih0aGlzLkdiKCksIHRoaXMuSWQoYSxiKSwgdGhpcy5TJiY0IT1hJiZ0aGlzLmZiKCkpO319O2UuVGc9ZnVuY3Rpb24oKXt0aGlzLkhjLm9iKHRoaXMuWGMsXCJ0aWNrXCIsdGhpcy5vZyk7dGhpcy5YYy5zdGFydCgpO307ZS56Zj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLkNiLGM9YS5pbmRleE9mKFwiXFxuXCIsYik7aWYoLTE9PWMpcmV0dXJuIHFjO2I9TnVtYmVyKGEuc3Vic3RyaW5nKGIsYykpO2lmKGlzTmFOKGIpKXJldHVybiBwYztjKz0xO2lmKGMrYj5hLmxlbmd0aClyZXR1cm4gcWM7YT1hLnN1YnN0cihjLGIpO3RoaXMuQ2I9YytiO3JldHVybiBhfTtcbmUuQmc9ZnVuY3Rpb24oYSl7dGhpcy5rYz0yO3RoaXMudWE9YS5jbG9uZSgpLlZiKCk7YT0hMTtoLm5hdmlnYXRvciYmaC5uYXZpZ2F0b3Iuc2VuZEJlYWNvbiYmKGE9aC5uYXZpZ2F0b3Iuc2VuZEJlYWNvbih0aGlzLnVhLnRvU3RyaW5nKCksXCJcIikpOyFhJiZoLkltYWdlJiYoKG5ldyBJbWFnZSkuc3JjPXRoaXMudWEsIGE9ITApO2F8fCh0aGlzLmg9dGhpcy5iLktiKG51bGwpLCB0aGlzLmguc2VuZCh0aGlzLnVhKSk7dGhpcy5yYj13KCk7dGhpcy5mYigpO307ZS5jYW5jZWw9ZnVuY3Rpb24oKXt0aGlzLiRhPSEwO3RoaXMuSWEoKTt9O2Uud2c9ZnVuY3Rpb24oYSl7YSYmdGhpcy5zZXRUaW1lb3V0KGEpO3RoaXMuR2EmJih0aGlzLkdiKCksIHRoaXMuZmIoKSk7fTtlLmZiPWZ1bmN0aW9uKCl7dGhpcy5sZD13KCkrdGhpcy5WYTt0aGlzLk9lKHRoaXMuVmEpO307XG5lLk9lPWZ1bmN0aW9uKGEpe2lmKG51bGwhPXRoaXMuR2EpdGhyb3cgRXJyb3IoXCJXYXRjaERvZyB0aW1lciBub3QgbnVsbFwiKTt0aGlzLkdhPVEodSh0aGlzLmtnLHRoaXMpLGEpO307ZS5HYj1mdW5jdGlvbigpe3RoaXMuR2EmJihoLmNsZWFyVGltZW91dCh0aGlzLkdhKSwgdGhpcy5HYT1udWxsKTt9O2Uua2c9ZnVuY3Rpb24oKXt0aGlzLkdhPW51bGw7dmFyIGE9dygpOzA8PWEtdGhpcy5sZD90aGlzLkhmKCk6KHRoaXMuYS5UKFwiV2F0Y2hEb2cgdGltZXIgY2FsbGVkIHRvbyBlYXJseVwiKSwgdGhpcy5PZSh0aGlzLmxkLWEpKTt9O2UuSGY9ZnVuY3Rpb24oKXt0aGlzLlMmJnRoaXMuYS5jYShcIlJlY2VpdmVkIHdhdGNoZG9nIHRpbWVvdXQgZXZlbiB0aG91Z2ggcmVxdWVzdCBsb2FkZWQgc3VjY2Vzc2Z1bGx5XCIpO3RoaXMuYS5ZZyh0aGlzLnBhKTsyIT10aGlzLmtjJiYoTygzKSwgUCgxNykpO3RoaXMuSWEoKTt0aGlzLkk9Mjt0aGlzLkxiKCk7fTtcbmUuTGI9ZnVuY3Rpb24oKXt0aGlzLmIuZ2UoKXx8dGhpcy4kYXx8dGhpcy5iLlZjKHRoaXMpO307ZS5JYT1mdW5jdGlvbigpe3RoaXMuR2IoKTt2YXIgYT10aGlzLmJjO2EmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuY2ImJmEuY2IoKTt0aGlzLmJjPW51bGw7dGhpcy5YYy5zdG9wKCk7dGhpcy5IYy5xYigpO3RoaXMuaCYmKGE9dGhpcy5oLCB0aGlzLmg9bnVsbCwgYS5hYm9ydCgpLCBhLmNiKCkpO307ZS5KYz1mdW5jdGlvbigpe3JldHVybiB0aGlzLkl9O2UuJGM9ZnVuY3Rpb24oYSl7dHJ5e3RoaXMuYi54ZSh0aGlzLGEpLCBPKDQpO31jYXRjaChiKXt0aGlzLmEuZWIoYixcIkVycm9yIGluIGh0dHByZXF1ZXN0IGNhbGxiYWNrXCIpO319O2Z1bmN0aW9uIHJjKGEpe2lmKGEuSCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5IKXJldHVybiBhLkgoKTtpZihsKGEpKXJldHVybiBhLnNwbGl0KFwiXCIpO2lmKGNhKGEpKXtmb3IodmFyIGI9W10sYz1hLmxlbmd0aCxkPTA7ZDxjO2QrKyliLnB1c2goYVtkXSk7cmV0dXJuIGJ9cmV0dXJuIEJhKGEpfVxuZnVuY3Rpb24gc2MoYSxiLGMpe2lmKGEuZm9yRWFjaCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5mb3JFYWNoKWEuZm9yRWFjaChiLGMpO2Vsc2UgaWYoY2EoYSl8fGwoYSkpbmEoYSxiLGMpO2Vsc2V7aWYoYS5XJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLlcpdmFyIGQ9YS5XKCk7ZWxzZSBpZihhLkgmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuSClkPXZvaWQgMDtlbHNlIGlmKGNhKGEpfHxsKGEpKXtkPVtdO2Zvcih2YXIgZj1hLmxlbmd0aCxnPTA7ZzxmO2crKylkLnB1c2goZyk7fWVsc2UgZD1DYShhKTtmPXJjKGEpO2c9Zi5sZW5ndGg7Zm9yKHZhciBrPTA7azxnO2srKyliLmNhbGwoYyxmW2tdLGQmJmRba10sYSk7fX1mdW5jdGlvbiBTKGEsYil7dGhpcy5EPXt9O3RoaXMubz1bXTt0aGlzLmo9MDt2YXIgYz1hcmd1bWVudHMubGVuZ3RoO2lmKDE8Yyl7aWYoYyUyKXRocm93IEVycm9yKFwiVW5ldmVuIG51bWJlciBvZiBhcmd1bWVudHNcIik7Zm9yKHZhciBkPTA7ZDxjO2QrPTIpdGhpcy5zZXQoYXJndW1lbnRzW2RdLGFyZ3VtZW50c1tkKzFdKTt9ZWxzZSBhJiZ0aGlzLmFkZEFsbChhKTt9ZT1TLnByb3RvdHlwZTtlLkM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5qfTtlLkg9ZnVuY3Rpb24oKXt0aGlzLnljKCk7Zm9yKHZhciBhPVtdLGI9MDtiPHRoaXMuby5sZW5ndGg7YisrKWEucHVzaCh0aGlzLkRbdGhpcy5vW2JdXSk7cmV0dXJuIGF9O2UuVz1mdW5jdGlvbigpe3RoaXMueWMoKTtyZXR1cm4gdGhpcy5vLmNvbmNhdCgpfTtlLnZhPWZ1bmN0aW9uKGEpe3JldHVybiBUKHRoaXMuRCxhKX07ZS5YPWZ1bmN0aW9uKCl7cmV0dXJuIDA9PXRoaXMuan07XG5lLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5EPXt9O3RoaXMuaj10aGlzLm8ubGVuZ3RoPTA7fTtlLnJlbW92ZT1mdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLkQsYSk/KGRlbGV0ZSB0aGlzLkRbYV0sIHRoaXMuai0tLCB0aGlzLm8ubGVuZ3RoPjIqdGhpcy5qJiZ0aGlzLnljKCksICEwKTohMX07ZS55Yz1mdW5jdGlvbigpe2lmKHRoaXMuaiE9dGhpcy5vLmxlbmd0aCl7Zm9yKHZhciBhPTAsYj0wO2E8dGhpcy5vLmxlbmd0aDspe3ZhciBjPXRoaXMub1thXTtUKHRoaXMuRCxjKSYmKHRoaXMub1tiKytdPWMpO2ErKzt9dGhpcy5vLmxlbmd0aD1iO31pZih0aGlzLmohPXRoaXMuby5sZW5ndGgpe3ZhciBkPXt9O2ZvcihiPWE9MDthPHRoaXMuby5sZW5ndGg7KWM9dGhpcy5vW2FdLCBUKGQsYyl8fCh0aGlzLm9bYisrXT1jLCBkW2NdPTEpLCBhKys7dGhpcy5vLmxlbmd0aD1iO319O2UuZ2V0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFQodGhpcy5ELGEpP3RoaXMuRFthXTpifTtcbmUuc2V0PWZ1bmN0aW9uKGEsYil7VCh0aGlzLkQsYSl8fCh0aGlzLmorKywgdGhpcy5vLnB1c2goYSkpO3RoaXMuRFthXT1iO307ZS5hZGRBbGw9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIFMpZm9yKHZhciBiPWEuVygpLGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLnNldChiW2NdLGEuZ2V0KGJbY10pKTtlbHNlIGZvcihiIGluIGEpdGhpcy5zZXQoYixhW2JdKTt9O2UuZm9yRWFjaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLlcoKSxkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBmPWNbZF0sZz10aGlzLmdldChmKTthLmNhbGwoYixnLGYsdGhpcyk7fX07ZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgUyh0aGlzKX07ZnVuY3Rpb24gVChhLGIpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxiKX12YXIgdGM9L14oPzooW146Lz8jLl0rKTopPyg/OlxcL1xcLyg/OihbXi8/I10qKUApPyhbXi8jP10qPykoPzo6KFswLTldKykpPyg/PVsvIz9dfCQpKT8oW14/I10rKT8oPzpcXD8oW14jXSopKT8oPzojKFtcXHNcXFNdKikpPyQvO2Z1bmN0aW9uIHVjKGEsYil7aWYoYSl7YT1hLnNwbGl0KFwiJlwiKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXS5pbmRleE9mKFwiPVwiKSxmPW51bGw7aWYoMDw9ZCl7dmFyIGc9YVtjXS5zdWJzdHJpbmcoMCxkKTtmPWFbY10uc3Vic3RyaW5nKGQrMSk7fWVsc2UgZz1hW2NdO2IoZyxmP2RlY29kZVVSSUNvbXBvbmVudChmLnJlcGxhY2UoL1xcKy9nLFwiIFwiKSk6XCJcIik7fX19ZnVuY3Rpb24gVShhLGIpe3RoaXMueGE9dGhpcy5BYj10aGlzLnFhPVwiXCI7dGhpcy5DYT1udWxsO3RoaXMuamI9dGhpcy5LPVwiXCI7dGhpcy5PPXRoaXMuVWY9ITE7dmFyIGM7YSBpbnN0YW5jZW9mIFU/KHRoaXMuTz12b2lkIDAhPT1iP2I6YS5PLCB0aGlzLnViKGEucWEpLCB0aGlzLmZkKGEuQWIpLCB0aGlzLnNiKGEueGEpLCB0aGlzLnRiKGEuQ2EpLCB0aGlzLmdjKGEuSyksIHRoaXMuZWQoYS5QLmNsb25lKCkpLCB0aGlzLmNkKGEuamIpKTphJiYoYz1TdHJpbmcoYSkubWF0Y2godGMpKT8odGhpcy5PPSEhYiwgdGhpcy51YihjWzFdfHxcIlwiLCEwKSwgdGhpcy5mZChjWzJdfHxcIlwiLCEwKSwgdGhpcy5zYihjWzNdfHxcIlwiLCEwKSwgdGhpcy50YihjWzRdKSwgdGhpcy5nYyhjWzVdfHxcIlwiLCEwKSwgdGhpcy5lZChjWzZdfHxcIlwiLCEwKSwgdGhpcy5jZChjWzddfHxcIlwiLCEwKSk6KHRoaXMuTz0hIWIsIHRoaXMuUD1uZXcgdmMobnVsbCx0aGlzLk8pKTt9ZT1VLnByb3RvdHlwZTtcbmUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPXRoaXMucWE7YiYmYS5wdXNoKHdjKGIseWMsITApLFwiOlwiKTt2YXIgYz10aGlzLnhhO2lmKGN8fFwiZmlsZVwiPT1iKWEucHVzaChcIi8vXCIpLCAoYj10aGlzLkFiKSYmYS5wdXNoKHdjKGIseWMsITApLFwiQFwiKSwgYS5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYykpLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZyxcIiUkMVwiKSksIGM9dGhpcy5DYSwgbnVsbCE9YyYmYS5wdXNoKFwiOlwiLFN0cmluZyhjKSk7aWYoYz10aGlzLkspdGhpcy5LYygpJiZcIi9cIiE9Yy5jaGFyQXQoMCkmJmEucHVzaChcIi9cIiksIGEucHVzaCh3YyhjLFwiL1wiPT1jLmNoYXJBdCgwKT96YzpBYywhMCkpOyhjPXRoaXMuVWQoKSkmJmEucHVzaChcIj9cIixjKTsoYz10aGlzLmpiKSYmYS5wdXNoKFwiI1wiLHdjKGMsQmMpKTtyZXR1cm4gYS5qb2luKFwiXCIpfTtcbmUucmVzb2x2ZT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmNsb25lKCksYz1hLkxmKCk7Yz9iLnViKGEucWEpOmM9YS5NZigpO2M/Yi5mZChhLkFiKTpjPWEuS2MoKTtjP2Iuc2IoYS54YSk6Yz1hLkpmKCk7dmFyIGQ9YS5LO2lmKGMpYi50YihhLkNhKTtlbHNlIGlmKGM9YS5kZSgpKXtpZihcIi9cIiE9ZC5jaGFyQXQoMCkpaWYodGhpcy5LYygpJiYhdGhpcy5kZSgpKWQ9XCIvXCIrZDtlbHNle3ZhciBmPWIuSy5sYXN0SW5kZXhPZihcIi9cIik7LTEhPWYmJihkPWIuSy5zdWJzdHIoMCxmKzEpK2QpO31mPWQ7aWYoXCIuLlwiPT1mfHxcIi5cIj09ZilkPVwiXCI7ZWxzZSBpZigtMSE9Zi5pbmRleE9mKFwiLi9cIil8fC0xIT1mLmluZGV4T2YoXCIvLlwiKSl7ZD0wPT1mLmxhc3RJbmRleE9mKFwiL1wiLDApO2Y9Zi5zcGxpdChcIi9cIik7Zm9yKHZhciBnPVtdLGs9MDtrPGYubGVuZ3RoOyl7dmFyIHA9ZltrKytdO1wiLlwiPT1wP2QmJms9PWYubGVuZ3RoJiZnLnB1c2goXCJcIik6XCIuLlwiPT1wPygoMTxnLmxlbmd0aHx8MT09Zy5sZW5ndGgmJlxuXCJcIiE9Z1swXSkmJmcucG9wKCksIGQmJms9PWYubGVuZ3RoJiZnLnB1c2goXCJcIikpOihnLnB1c2gocCksIGQ9ITApO31kPWcuam9pbihcIi9cIik7fWVsc2UgZD1mO31jP2IuZ2MoZCk6Yz1hLktmKCk7Yz9iLmVkKGEuUC5jbG9uZSgpKTpjPWEuSWYoKTtjJiZiLmNkKGEuamIpO3JldHVybiBifTtlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBVKHRoaXMpfTtlLnViPWZ1bmN0aW9uKGEsYil7dGhpcy5VKCk7aWYodGhpcy5xYT1iP0NjKGEsITApOmEpdGhpcy5xYT10aGlzLnFhLnJlcGxhY2UoLzokLyxcIlwiKTt9O2UuTGY9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMucWF9O2UuZmQ9ZnVuY3Rpb24oYSxiKXt0aGlzLlUoKTt0aGlzLkFiPWI/Q2MoYSk6YTt9O2UuTWY9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuQWJ9O2Uuc2I9ZnVuY3Rpb24oYSxiKXt0aGlzLlUoKTt0aGlzLnhhPWI/Q2MoYSwhMCk6YTt9O2UuS2M9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMueGF9O1xuZS50Yj1mdW5jdGlvbihhKXt0aGlzLlUoKTtpZihhKXthPU51bWJlcihhKTtpZihpc05hTihhKXx8MD5hKXRocm93IEVycm9yKFwiQmFkIHBvcnQgbnVtYmVyIFwiK2EpO3RoaXMuQ2E9YTt9ZWxzZSB0aGlzLkNhPW51bGw7fTtlLkpmPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXRoaXMuQ2F9O2UuZ2M9ZnVuY3Rpb24oYSxiKXt0aGlzLlUoKTt0aGlzLks9Yj9DYyhhLCEwKTphO307ZS5kZT1mdW5jdGlvbigpe3JldHVybiEhdGhpcy5LfTtlLktmPWZ1bmN0aW9uKCl7cmV0dXJuXCJcIiE9PXRoaXMuUC50b1N0cmluZygpfTtlLmVkPWZ1bmN0aW9uKGEsYil7dGhpcy5VKCk7YSBpbnN0YW5jZW9mIHZjPyh0aGlzLlA9YSwgdGhpcy5QLmRkKHRoaXMuTykpOihifHwoYT13YyhhLERjKSksIHRoaXMuUD1uZXcgdmMoYSx0aGlzLk8pKTt9O2UuVWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5QLnRvU3RyaW5nKCl9O2UuZ2V0UXVlcnk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5VZCgpfTtcbmUubD1mdW5jdGlvbihhLGIpe3RoaXMuVSgpO3RoaXMuUC5zZXQoYSxiKTt9O2UuZmM9ZnVuY3Rpb24oYSxiKXt0aGlzLlUoKTtuKGIpfHwoYj1bU3RyaW5nKGIpXSk7dGhpcy5QLk1lKGEsYik7fTtlLmNkPWZ1bmN0aW9uKGEsYil7dGhpcy5VKCk7dGhpcy5qYj1iP0NjKGEpOmE7fTtlLklmPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmpifTtlLlZiPWZ1bmN0aW9uKCl7dGhpcy5VKCk7dGhpcy5sKFwienhcIixNYXRoLmZsb29yKDIxNDc0ODM2NDgqTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMzYpK01hdGguYWJzKE1hdGguZmxvb3IoMjE0NzQ4MzY0OCpNYXRoLnJhbmRvbSgpKV53KCkpLnRvU3RyaW5nKDM2KSk7cmV0dXJuIHRoaXN9O2UucmVtb3ZlUGFyYW1ldGVyPWZ1bmN0aW9uKGEpe3RoaXMuVSgpO3RoaXMuUC5yZW1vdmUoYSk7cmV0dXJuIHRoaXN9O2UuVT1mdW5jdGlvbigpe2lmKHRoaXMuVWYpdGhyb3cgRXJyb3IoXCJUcmllZCB0byBtb2RpZnkgYSByZWFkLW9ubHkgVXJpXCIpO307XG5lLmRkPWZ1bmN0aW9uKGEpe3RoaXMuTz1hO3RoaXMuUCYmdGhpcy5QLmRkKGEpO307ZnVuY3Rpb24gRWMoYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBVP2EuY2xvbmUoKTpuZXcgVShhLHZvaWQgMCl9ZnVuY3Rpb24gRmMoYSxiLGMsZCl7dmFyIGY9bmV3IFUobnVsbCx2b2lkIDApO2EmJmYudWIoYSk7YiYmZi5zYihiKTtjJiZmLnRiKGMpO2QmJmYuZ2MoZCk7cmV0dXJuIGZ9ZnVuY3Rpb24gQ2MoYSxiKXtyZXR1cm4gYT9iP2RlY29kZVVSSShhLnJlcGxhY2UoLyUyNS9nLFwiJTI1MjVcIikpOmRlY29kZVVSSUNvbXBvbmVudChhKTpcIlwifWZ1bmN0aW9uIHdjKGEsYixjKXtyZXR1cm4gbChhKT8oYT1lbmNvZGVVUkkoYSkucmVwbGFjZShiLEdjKSwgYyYmKGE9YS5yZXBsYWNlKC8lMjUoWzAtOWEtZkEtRl17Mn0pL2csXCIlJDFcIikpLCBhKTpudWxsfVxuZnVuY3Rpb24gR2MoYSl7YT1hLmNoYXJDb2RlQXQoMCk7cmV0dXJuXCIlXCIrKGE+PjQmMTUpLnRvU3RyaW5nKDE2KSsoYSYxNSkudG9TdHJpbmcoMTYpfXZhciB5Yz0vWyNcXC9cXD9AXS9nLEFjPS9bI1xcPzpdL2csemM9L1sjXFw/XS9nLERjPS9bI1xcP0BdL2csQmM9LyMvZztmdW5jdGlvbiB2YyhhLGIpe3RoaXMuaj10aGlzLm09bnVsbDt0aGlzLmphPWF8fG51bGw7dGhpcy5PPSEhYjt9ZT12Yy5wcm90b3R5cGU7ZS4kPWZ1bmN0aW9uKCl7aWYoIXRoaXMubSYmKHRoaXMubT1uZXcgUywgdGhpcy5qPTAsIHRoaXMuamEpKXt2YXIgYT10aGlzO3VjKHRoaXMuamEsZnVuY3Rpb24oYixjKXthLmFkZChkZWNvZGVVUklDb21wb25lbnQoYi5yZXBsYWNlKC9cXCsvZyxcIiBcIikpLGMpO30pO319O2UuQz1mdW5jdGlvbigpe3RoaXMuJCgpO3JldHVybiB0aGlzLmp9O1xuZS5hZGQ9ZnVuY3Rpb24oYSxiKXt0aGlzLiQoKTt0aGlzLk9hKCk7YT10aGlzLk1hKGEpO3ZhciBjPXRoaXMubS5nZXQoYSk7Y3x8dGhpcy5tLnNldChhLGM9W10pO2MucHVzaChiKTt0aGlzLmorPTE7cmV0dXJuIHRoaXN9O2UucmVtb3ZlPWZ1bmN0aW9uKGEpe3RoaXMuJCgpO2E9dGhpcy5NYShhKTtyZXR1cm4gdGhpcy5tLnZhKGEpPyh0aGlzLk9hKCksIHRoaXMuai09dGhpcy5tLmdldChhKS5sZW5ndGgsIHRoaXMubS5yZW1vdmUoYSkpOiExfTtlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5PYSgpO3RoaXMubT1udWxsO3RoaXMuaj0wO307ZS5YPWZ1bmN0aW9uKCl7dGhpcy4kKCk7cmV0dXJuIDA9PXRoaXMuan07ZS52YT1mdW5jdGlvbihhKXt0aGlzLiQoKTthPXRoaXMuTWEoYSk7cmV0dXJuIHRoaXMubS52YShhKX07XG5lLmZvckVhY2g9ZnVuY3Rpb24oYSxiKXt0aGlzLiQoKTt0aGlzLm0uZm9yRWFjaChmdW5jdGlvbihjLGQpe25hKGMsZnVuY3Rpb24oYyl7YS5jYWxsKGIsYyxkLHRoaXMpO30sdGhpcyk7fSx0aGlzKTt9O2UuVz1mdW5jdGlvbigpe3RoaXMuJCgpO2Zvcih2YXIgYT10aGlzLm0uSCgpLGI9dGhpcy5tLlcoKSxjPVtdLGQ9MDtkPGIubGVuZ3RoO2QrKylmb3IodmFyIGY9YVtkXSxnPTA7ZzxmLmxlbmd0aDtnKyspYy5wdXNoKGJbZF0pO3JldHVybiBjfTtlLkg9ZnVuY3Rpb24oYSl7dGhpcy4kKCk7dmFyIGI9W107aWYobChhKSl0aGlzLnZhKGEpJiYoYj10YShiLHRoaXMubS5nZXQodGhpcy5NYShhKSkpKTtlbHNle2E9dGhpcy5tLkgoKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyliPXRhKGIsYVtjXSk7fXJldHVybiBifTtcbmUuc2V0PWZ1bmN0aW9uKGEsYil7dGhpcy4kKCk7dGhpcy5PYSgpO2E9dGhpcy5NYShhKTt0aGlzLnZhKGEpJiYodGhpcy5qLT10aGlzLm0uZ2V0KGEpLmxlbmd0aCk7dGhpcy5tLnNldChhLFtiXSk7dGhpcy5qKz0xO3JldHVybiB0aGlzfTtlLmdldD1mdW5jdGlvbihhLGIpe2lmKCFhKXJldHVybiBiO2E9dGhpcy5IKGEpO3JldHVybiAwPGEubGVuZ3RoP1N0cmluZyhhWzBdKTpifTtlLk1lPWZ1bmN0aW9uKGEsYil7dGhpcy5yZW1vdmUoYSk7MDxiLmxlbmd0aCYmKHRoaXMuT2EoKSwgdGhpcy5tLnNldCh0aGlzLk1hKGEpLHVhKGIpKSwgdGhpcy5qKz1iLmxlbmd0aCk7fTtcbmUudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZih0aGlzLmphKXJldHVybiB0aGlzLmphO2lmKCF0aGlzLm0pcmV0dXJuXCJcIjtmb3IodmFyIGE9W10sYj10aGlzLm0uVygpLGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YltjXSxmPWVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZCkpO2Q9dGhpcy5IKGQpO2Zvcih2YXIgZz0wO2c8ZC5sZW5ndGg7ZysrKXt2YXIgaz1mO1wiXCIhPT1kW2ddJiYoays9XCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhkW2ddKSkpO2EucHVzaChrKTt9fXJldHVybiB0aGlzLmphPWEuam9pbihcIiZcIil9O2UuT2E9ZnVuY3Rpb24oKXt0aGlzLmphPW51bGw7fTtlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHZjO2EuamE9dGhpcy5qYTt0aGlzLm0mJihhLm09dGhpcy5tLmNsb25lKCksIGEuaj10aGlzLmopO3JldHVybiBhfTtlLk1hPWZ1bmN0aW9uKGEpe2E9U3RyaW5nKGEpO3RoaXMuTyYmKGE9YS50b0xvd2VyQ2FzZSgpKTtyZXR1cm4gYX07XG5lLmRkPWZ1bmN0aW9uKGEpe2EmJiF0aGlzLk8mJih0aGlzLiQoKSwgdGhpcy5PYSgpLCB0aGlzLm0uZm9yRWFjaChmdW5jdGlvbihhLGMpe3ZhciBiPWMudG9Mb3dlckNhc2UoKTtjIT1iJiYodGhpcy5yZW1vdmUoYyksIHRoaXMuTWUoYixhKSk7fSx0aGlzKSk7dGhpcy5PPWE7fTtlLmV4dGVuZD1mdW5jdGlvbihhKXtmb3IodmFyIGI9MDtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKXNjKGFyZ3VtZW50c1tiXSxmdW5jdGlvbihhLGIpe3RoaXMuYWRkKGIsYSk7fSx0aGlzKTt9O2Z1bmN0aW9uIEpjKCl7fWZ1bmN0aW9uIEtjKCl7fXgoS2MsSmMpO2Z1bmN0aW9uIExjKGEsYil7dGhpcy5iPWE7dGhpcy5hPWI7dGhpcy5mPXRoaXMuQT1udWxsO3RoaXMuY2M9ITE7dGhpcy5LPW51bGw7dGhpcy53PS0xO3RoaXMuRGQ9dGhpcy5uYT1udWxsO31lPUxjLnByb3RvdHlwZTtlLmc9bnVsbDtlLmdhPWZ1bmN0aW9uKGEpe3RoaXMuQT1hO307ZS5jb25uZWN0PWZ1bmN0aW9uKGEpe3RoaXMuSz1hO2E9dGhpcy5iLlZkKHRoaXMuSyk7UCgzKTt2YXIgYj10aGlzLmIuSmIuY2U7bnVsbCE9Yj8odGhpcy5uYT10aGlzLmIuYWIoYlswXSksIHRoaXMuZz0xLCB0aGlzLkFkKCkpOihhLmZjKFwiTU9ERVwiLFwiaW5pdFwiKSwgIXRoaXMuYi50YSYmdGhpcy5iLmFhJiZhLmZjKFwiWC1IVFRQLVNlc3Npb24tSWRcIix0aGlzLmIuYWEpLCB0aGlzLmY9bmV3IFIodGhpcyx0aGlzLmEsdm9pZCAwLHZvaWQgMCx2b2lkIDApLCB0aGlzLmYuZ2EodGhpcy5BKSwgdGhpcy5mLm1kKGEsITEsbnVsbCksIHRoaXMuZz0wKTt9O1xuZS5BZD1mdW5jdGlvbigpe3RoaXMuYS5kZWJ1ZyhcIlRlc3RDb25uZWN0aW9uOiBzdGFydGluZyBzdGFnZSAyXCIpO3ZhciBhPXRoaXMuYi5KYi5yZDtpZihudWxsIT1hKXRoaXMuYS5kZWJ1ZyhmdW5jdGlvbigpe3JldHVyblwiVGVzdENvbm5lY3Rpb246IHNraXBwaW5nIHN0YWdlIDIsIHByZWNvbXB1dGVkIHJlc3VsdCBpcyBcIithP1wiQnVmZmVyZWRcIjpcIlVuYnVmZmVyZWRcIn0pLCBQKDQpLCBhPyhQKDEwKSwgdGhpcy5iLnZiKHRoaXMsITEpKTooUCgxMSksIHRoaXMuYi52Yih0aGlzLCEwKSk7ZWxzZXt0aGlzLmY9bmV3IFIodGhpcyx0aGlzLmEsdm9pZCAwLHZvaWQgMCx2b2lkIDApO3RoaXMuZi5nYSh0aGlzLkEpO3ZhciBiPXRoaXMuYi5TZCh0aGlzLm5hLHRoaXMuSyk7UCg0KTtiLmZjKFwiVFlQRVwiLFwieG1saHR0cFwiKTt2YXIgYz10aGlzLmIuYWEsZD10aGlzLmIuTWM7YyYmZCYmYi5sKGMsZCk7dGhpcy5mLm1kKGIsITEsdGhpcy5uYSk7fX07ZS5LYj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5iLktiKGEpfTtcbmUuYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLmYmJih0aGlzLmYuY2FuY2VsKCksIHRoaXMuZj1udWxsKTt0aGlzLnc9LTE7fTtlLmdlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O1xuZS54ZT1mdW5jdGlvbihhLGIpe3RoaXMudz1hLnc7aWYoMD09dGhpcy5nKWlmKHRoaXMuYS5kZWJ1ZyhcIlRlc3RDb25uZWN0aW9uOiBHb3QgZGF0YSBmb3Igc3RhZ2UgMVwiKSwgdGhpcy5yYyhhKSwgYil7dHJ5e3ZhciBjPXRoaXMuYi5tYy5CYyhiKTt9Y2F0Y2goZCl7dGhpcy5hLmViKGQpO3RoaXMuYi5nZCh0aGlzKTtyZXR1cm59dGhpcy5uYT10aGlzLmIuYWIoY1swXSk7fWVsc2UgdGhpcy5hLmRlYnVnKFwiVGVzdENvbm5lY3Rpb246IE51bGwgcmVzcG9uc2VUZXh0XCIpLCB0aGlzLmIuZ2QodGhpcyk7ZWxzZSAxPT10aGlzLmcmJih0aGlzLmNjP1AoNik6XCIxMTExMVwiPT1iPyhQKDUpLCB0aGlzLmNjPSEwLCB0aGlzLmNmKCkmJih0aGlzLnc9MjAwLCB0aGlzLmYuY2FuY2VsKCksIHRoaXMuYS5kZWJ1ZyhcIlRlc3QgY29ubmVjdGlvbiBzdWNjZWVkZWQ7IHVzaW5nIHN0cmVhbWluZyBjb25uZWN0aW9uXCIpLCBQKDExKSwgdGhpcy5iLnZiKHRoaXMsITApKSk6KFAoNyksIHRoaXMuY2M9ITEpKTt9O1xuZS5WYz1mdW5jdGlvbigpe3RoaXMudz10aGlzLmYudzt0aGlzLmYuUz8wPT10aGlzLmc/KHRoaXMuZz0xLCB0aGlzLmEuZGVidWcoXCJUZXN0Q29ubmVjdGlvbjogcmVxdWVzdCBjb21wbGV0ZSBmb3IgaW5pdGlhbCBjaGVja1wiKSwgdGhpcy5BZCgpKToxPT10aGlzLmcmJih0aGlzLmEuZGVidWcoXCJUZXN0Q29ubmVjdGlvbjogcmVxdWVzdCBjb21wbGV0ZSBmb3Igc3RhZ2UgMlwiKSwgdGhpcy5jYz8odGhpcy5hLmRlYnVnKFwiVGVzdCBjb25uZWN0aW9uIHN1Y2NlZWRlZDsgdXNpbmcgc3RyZWFtaW5nIGNvbm5lY3Rpb25cIiksIFAoMTEpLCB0aGlzLmIudmIodGhpcywhMCkpOih0aGlzLmEuZGVidWcoXCJUZXN0IGNvbm5lY3Rpb24gZmFpbGVkOyBub3QgdXNpbmcgc3RyZWFtaW5nXCIpLCBQKDEwKSwgdGhpcy5iLnZiKHRoaXMsITEpKSk6KHRoaXMuYS5kZWJ1ZyhcIlRlc3RDb25uZWN0aW9uOiByZXF1ZXN0IGZhaWxlZCwgaW4gc3RhdGUgXCIrdGhpcy5nKSwgMD09dGhpcy5nP1AoOCk6MT09dGhpcy5nJiZQKDkpLCB0aGlzLmIuZ2QodGhpcykpO307ZS5yYz1mdW5jdGlvbihhKXtpZighdGhpcy5iLnRhJiYoYT1hLmgpKXt2YXIgYj1hLmxiKFwiWC1DbGllbnQtV2lyZS1Qcm90b2NvbFwiKTt0aGlzLkRkPWI/YjpudWxsO3RoaXMuYi5hYSYmKChhPWEubGIoXCJYLUhUVFAtU2Vzc2lvbi1JZFwiKSk/dGhpcy5iLkplKGEpOnRoaXMuYS5UKFwiTWlzc2luZyBYX0hUVFBfU0VTU0lPTl9JRCBpbiB0aGUgaGFuZHNoYWtlIHJlc3BvbnNlXCIpKTt9fTtlLmhjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYi5oYygpfTtlLkJhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYi5CYSgpfTtlLmNmPWZ1bmN0aW9uKCl7cmV0dXJuIUN8fDEwPD1OdW1iZXIoVWEpfTtmdW5jdGlvbiBNYygpe3RoaXMucmQ9dGhpcy5jZT1udWxsO31mdW5jdGlvbiBOYyhhKXt0aGlzLkQ9bmV3IFM7YSYmdGhpcy5hZGRBbGwoYSk7fWZ1bmN0aW9uIE9jKGEpe3ZhciBiPXR5cGVvZiBhO3JldHVyblwib2JqZWN0XCI9PWImJmF8fFwiZnVuY3Rpb25cIj09Yj9cIm9cIisoYVt0XXx8KGFbdF09KytkYSkpOmIuc3Vic3RyKDAsMSkrYX1lPU5jLnByb3RvdHlwZTtlLkM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ELkMoKX07ZS5hZGQ9ZnVuY3Rpb24oYSl7dGhpcy5ELnNldChPYyhhKSxhKTt9O2UuYWRkQWxsPWZ1bmN0aW9uKGEpe2E9cmMoYSk7Zm9yKHZhciBiPWEubGVuZ3RoLGM9MDtjPGI7YysrKXRoaXMuYWRkKGFbY10pO307ZS5xYj1mdW5jdGlvbihhKXthPXJjKGEpO2Zvcih2YXIgYj1hLmxlbmd0aCxjPTA7YzxiO2MrKyl0aGlzLnJlbW92ZShhW2NdKTt9O2UucmVtb3ZlPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLkQucmVtb3ZlKE9jKGEpKX07ZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuRC5jbGVhcigpO307ZS5YPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuRC5YKCl9O1xuZS5jb250YWlucz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5ELnZhKE9jKGEpKX07ZS5IPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuRC5IKCl9O2UuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IE5jKHRoaXMpfTtmdW5jdGlvbiBQYyhhLGIpe3RoaXMuUmM9YTt0aGlzLm1hcD1iO3RoaXMuY29udGV4dD1udWxsO31mdW5jdGlvbiBRYyhhKXt0aGlzLnBlPWF8fFJjO2guUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nPyhhPWgucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZShcIm5hdmlnYXRpb25cIiksIGE9MDxhLmxlbmd0aCYmKFwiaHFcIj09YVswXS5uZXh0SG9wUHJvdG9jb2x8fFwiaDJcIj09YVswXS5uZXh0SG9wUHJvdG9jb2wpKTphPSEhKGgueGMmJmgueGMubmUmJmgueGMubmUoKSYmaC54Yy5uZSgpLnRoKTt0aGlzLlliPWE/dGhpcy5wZToxO3RoaXMudj1udWxsOzE8dGhpcy5ZYiYmKHRoaXMudj1uZXcgTmMpO3RoaXMuZj1udWxsO3RoaXMuYmE9W107fXZhciBSYz0xMDtlPVFjLnByb3RvdHlwZTtlLm9kPWZ1bmN0aW9uKGEpe3RoaXMudnx8LTE9PWEuaW5kZXhPZihcInNwZHlcIikmJi0xPT1hLmluZGV4T2YoXCJxdWljXCIpJiYtMT09YS5pbmRleE9mKFwiaDJcIil8fCh0aGlzLlliPXRoaXMucGUsIHRoaXMudj1uZXcgTmMsIHRoaXMuZiYmKHRoaXMucWModGhpcy5mKSwgdGhpcy5mPW51bGwpKTt9O1xuZS5oZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmY/ITA6dGhpcy52P3RoaXMudi5DKCk+PXRoaXMuWWI6ITF9O2UuQmY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mPzE6dGhpcy52P3RoaXMudi5DKCk6MH07ZS5MYz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5mP3RoaXMuZj09YTp0aGlzLnY/dGhpcy52LmNvbnRhaW5zKGEpOiExfTtlLnFjPWZ1bmN0aW9uKGEpe3RoaXMudj90aGlzLnYuYWRkKGEpOnRoaXMuZj1hO307ZS5DZT1mdW5jdGlvbihhKXt0aGlzLmYmJnRoaXMuZj09YT90aGlzLmY9bnVsbDp0aGlzLnYmJnRoaXMudi5jb250YWlucyhhKSYmdGhpcy52LnJlbW92ZShhKTt9O2UuY2FuY2VsPWZ1bmN0aW9uKCl7dGhpcy5iYT10aGlzLmxhKCk7dGhpcy5mPyh0aGlzLmYuY2FuY2VsKCksIHRoaXMuZj1udWxsKTp0aGlzLnYmJiF0aGlzLnYuWCgpJiYobmEodGhpcy52LkgoKSxmdW5jdGlvbihhKXthLmNhbmNlbCgpO30pLCB0aGlzLnYuY2xlYXIoKSk7fTtcbmUubGE9ZnVuY3Rpb24oKXtpZihudWxsIT10aGlzLmYpcmV0dXJuIHRoaXMuYmEuY29uY2F0KHRoaXMuZi5sYSgpKTtpZihudWxsIT10aGlzLnYmJiF0aGlzLnYuWCgpKXt2YXIgYT10aGlzLmJhO25hKHRoaXMudi5IKCksZnVuY3Rpb24oYil7YT1hLmNvbmNhdChiLmxhKCkpO30pO3JldHVybiBhfXJldHVybiB1YSh0aGlzLmJhKX07ZS5WZT1mdW5jdGlvbihhKXt0aGlzLmJhPXRoaXMuYmEuY29uY2F0KGEpO307ZS5kZj1mdW5jdGlvbigpe3RoaXMuYmEubGVuZ3RoPTA7fTtmdW5jdGlvbiBTYygpe3RoaXMuQWc9dGhpcy5UYT12b2lkIDA7fVNjLnByb3RvdHlwZS5zdHJpbmdpZnk9ZnVuY3Rpb24oYSl7cmV0dXJuIGguSlNPTi5zdHJpbmdpZnkoYSx0aGlzLlRhKX07U2MucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGEpe3JldHVybiBoLkpTT04ucGFyc2UoYSx0aGlzLkFnKX07ZnVuY3Rpb24gVGMoKXt0aGlzLm5nPW5ldyBTYzt9VGMucHJvdG90eXBlLm1mPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jfHxcIlwiO3RyeXtzYyhhLGZ1bmN0aW9uKGEsYyl7dmFyIGY9YTtyKGEpJiYoZj0obmV3IEkpLmVjKGEpKTtiLnB1c2goZCtjK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChmKSk7fSk7fWNhdGNoKGYpe3Rocm93IGIucHVzaChkK1widHlwZT1cIitlbmNvZGVVUklDb21wb25lbnQoXCJfYmFkbWFwXCIpKSwgZjt9fTtcblRjLnByb3RvdHlwZS5uZj1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPS0xOzspe3ZhciBmPVtcImNvdW50PVwiK2JdOy0xPT1kPzA8Yj8oZD1hWzBdLlJjLCBmLnB1c2goXCJvZnM9XCIrZCkpOmQ9MDpmLnB1c2goXCJvZnM9XCIrZCk7Zm9yKHZhciBnPSEwLGs9MDtrPGI7aysrKXt2YXIgcD1hW2tdLlJjLFZiPWFba10ubWFwO3AtPWQ7aWYoMD5wKWQ9TWF0aC5tYXgoMCxhW2tdLlJjLTEwMCksIGc9ITE7ZWxzZSB0cnl7dGhpcy5tZihWYixmLFwicmVxXCIrcCtcIl9cIik7fWNhdGNoKHBkKXtjJiZjKFZiKTt9fWlmKGcpcmV0dXJuIGYuam9pbihcIiZcIil9fTtUYy5wcm90b3R5cGUuQmM9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubmcucGFyc2UoYSl9O2Z1bmN0aW9uIFVjKGEsYil7dmFyIGM9bmV3ICRiO2MuZGVidWcoXCJUZXN0TG9hZEltYWdlOiBsb2FkaW5nIFwiK2EpO3ZhciBkPW5ldyBJbWFnZTtkLm9ubG9hZD12KFZjLGMsZCxcIlRlc3RMb2FkSW1hZ2U6IGxvYWRlZFwiLCEwLGIpO2Qub25lcnJvcj12KFZjLGMsZCxcIlRlc3RMb2FkSW1hZ2U6IGVycm9yXCIsITEsYik7ZC5vbmFib3J0PXYoVmMsYyxkLFwiVGVzdExvYWRJbWFnZTogYWJvcnRcIiwhMSxiKTtkLm9udGltZW91dD12KFZjLGMsZCxcIlRlc3RMb2FkSW1hZ2U6IHRpbWVvdXRcIiwhMSxiKTtoLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZihkLm9udGltZW91dClkLm9udGltZW91dCgpO30sMUU0KTtkLnNyYz1hO31mdW5jdGlvbiBWYyhhLGIsYyxkLGYpe3RyeXthLmRlYnVnKGMpLCBiLm9ubG9hZD1udWxsLCBiLm9uZXJyb3I9bnVsbCwgYi5vbmFib3J0PW51bGwsIGIub250aW1lb3V0PW51bGwsIGYoZCk7fWNhdGNoKGcpe2EuZWIoZyk7fX1mdW5jdGlvbiBWKGEpe0guY2FsbCh0aGlzKTt0aGlzLmhlYWRlcnM9bmV3IFM7dGhpcy5ZYT1hfHxudWxsO3RoaXMuaGE9ITE7dGhpcy5vYz10aGlzLmM9bnVsbDt0aGlzLmplPXRoaXMuVWI9XCJcIjt0aGlzLlBhPTA7dGhpcy5JPVwiXCI7dGhpcy5BYT10aGlzLk5jPXRoaXMuUmI9dGhpcy5HYz0hMTt0aGlzLndiPTA7dGhpcy5qYz1udWxsO3RoaXMuRGU9V2M7dGhpcy5sYz10aGlzLnBnPXRoaXMuQmI9ITE7fXgoVixIKTt2YXIgV2M9XCJcIjtWLnByb3RvdHlwZS5zPVliKFwiZ29vZy5uZXQuWGhySW9cIik7dmFyIFhjPS9eaHR0cHM/JC9pLFljPVtcIlBPU1RcIixcIlBVVFwiXTtlPVYucHJvdG90eXBlO2UuTmU9ZnVuY3Rpb24oYSl7dGhpcy5CYj1hO307XG5lLnNlbmQ9ZnVuY3Rpb24oYSxiLGMsZCl7aWYodGhpcy5jKXRocm93IEVycm9yKFwiW2dvb2cubmV0LlhocklvXSBPYmplY3QgaXMgYWN0aXZlIHdpdGggYW5vdGhlciByZXF1ZXN0PVwiK3RoaXMuVWIrXCI7IG5ld1VyaT1cIithKTtiPWI/Yi50b1VwcGVyQ2FzZSgpOlwiR0VUXCI7dGhpcy5VYj1hO3RoaXMuST1cIlwiO3RoaXMuUGE9MDt0aGlzLmplPWI7dGhpcy5HYz0hMTt0aGlzLmhhPSEwO3RoaXMuYz10aGlzLmhmKCk7dGhpcy5vYz10aGlzLllhP3RoaXMuWWEuWWQoKTpsYy5ZZCgpO3RoaXMuYy5vbnJlYWR5c3RhdGVjaGFuZ2U9dSh0aGlzLndlLHRoaXMpO3RoaXMucGcmJlwib25wcm9ncmVzc1wiaW4gdGhpcy5jJiYodGhpcy5jLm9ucHJvZ3Jlc3M9dShmdW5jdGlvbihhKXt0aGlzLnVlKGEsITApO30sdGhpcyksIHRoaXMuYy51cGxvYWQmJih0aGlzLmMudXBsb2FkLm9ucHJvZ3Jlc3M9dSh0aGlzLnVlLHRoaXMpKSk7dHJ5e00odGhpcy5zLHRoaXMuZGEoXCJPcGVuaW5nIFhoclwiKSksIHRoaXMuTmM9XG4hMCwgdGhpcy5jLm9wZW4oYixTdHJpbmcoYSksITApLCB0aGlzLk5jPSExO31jYXRjaChnKXtNKHRoaXMucyx0aGlzLmRhKFwiRXJyb3Igb3BlbmluZyBYaHI6IFwiK2cubWVzc2FnZSkpO3RoaXMuT2QoZyk7cmV0dXJufWE9Y3x8XCJcIjt2YXIgZj10aGlzLmhlYWRlcnMuY2xvbmUoKTtkJiZzYyhkLGZ1bmN0aW9uKGEsYil7Zi5zZXQoYixhKTt9KTtkPXBhKGYuVygpKTtjPWguRm9ybURhdGEmJmEgaW5zdGFuY2VvZiBoLkZvcm1EYXRhOyEoMDw9bGEoWWMsYikpfHxkfHxjfHxmLnNldChcIkNvbnRlbnQtVHlwZVwiLFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLThcIik7Zi5mb3JFYWNoKGZ1bmN0aW9uKGEsYil7dGhpcy5jLnNldFJlcXVlc3RIZWFkZXIoYixhKTt9LHRoaXMpO3RoaXMuRGUmJih0aGlzLmMucmVzcG9uc2VUeXBlPXRoaXMuRGUpO1wid2l0aENyZWRlbnRpYWxzXCJpbiB0aGlzLmMmJnRoaXMuYy53aXRoQ3JlZGVudGlhbHMhPT10aGlzLkJiJiYodGhpcy5jLndpdGhDcmVkZW50aWFscz1cbnRoaXMuQmIpO3RyeXt0aGlzLkJkKCksIDA8dGhpcy53YiYmKHRoaXMubGM9WmModGhpcy5jKSwgTSh0aGlzLnMsdGhpcy5kYShcIldpbGwgYWJvcnQgYWZ0ZXIgXCIrdGhpcy53YitcIm1zIGlmIGluY29tcGxldGUsIHhocjIgXCIrdGhpcy5sYykpLCB0aGlzLmxjPyh0aGlzLmMudGltZW91dD10aGlzLndiLCB0aGlzLmMub250aW1lb3V0PXUodGhpcy5WYSx0aGlzKSk6dGhpcy5qYz1LYih0aGlzLlZhLHRoaXMud2IsdGhpcykpLCBNKHRoaXMucyx0aGlzLmRhKFwiU2VuZGluZyByZXF1ZXN0XCIpKSwgdGhpcy5SYj0hMCwgdGhpcy5jLnNlbmQoYSksIHRoaXMuUmI9ITE7fWNhdGNoKGcpe00odGhpcy5zLHRoaXMuZGEoXCJTZW5kIGVycm9yOiBcIitnLm1lc3NhZ2UpKSwgdGhpcy5PZChnKTt9fTtmdW5jdGlvbiBaYyhhKXtyZXR1cm4gQyYmVGEoOSkmJlwibnVtYmVyXCI9PXR5cGVvZiBhLnRpbWVvdXQmJnZvaWQgMCE9PWEub250aW1lb3V0fVxuZnVuY3Rpb24gcWEoYSl7cmV0dXJuXCJjb250ZW50LXR5cGVcIj09YS50b0xvd2VyQ2FzZSgpfWUuaGY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ZYT90aGlzLllhLkdkKCk6bGMuR2QoKX07ZS5WYT1mdW5jdGlvbigpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBnb29nJiZ0aGlzLmMmJih0aGlzLkk9XCJUaW1lZCBvdXQgYWZ0ZXIgXCIrdGhpcy53YitcIm1zLCBhYm9ydGluZ1wiLCB0aGlzLlBhPTgsIE0odGhpcy5zLHRoaXMuZGEodGhpcy5JKSksIHRoaXMuZGlzcGF0Y2hFdmVudChcInRpbWVvdXRcIiksIHRoaXMuYWJvcnQoOCkpO307ZS5PZD1mdW5jdGlvbihhKXt0aGlzLmhhPSExO3RoaXMuYyYmKHRoaXMuQWE9ITAsIHRoaXMuYy5hYm9ydCgpLCB0aGlzLkFhPSExKTt0aGlzLkk9YTt0aGlzLlBhPTU7dGhpcy5NZCgpO3RoaXMuSGIoKTt9O2UuTWQ9ZnVuY3Rpb24oKXt0aGlzLkdjfHwodGhpcy5HYz0hMCwgdGhpcy5kaXNwYXRjaEV2ZW50KFwiY29tcGxldGVcIiksIHRoaXMuZGlzcGF0Y2hFdmVudChcImVycm9yXCIpKTt9O1xuZS5hYm9ydD1mdW5jdGlvbihhKXt0aGlzLmMmJnRoaXMuaGEmJihNKHRoaXMucyx0aGlzLmRhKFwiQWJvcnRpbmdcIikpLCB0aGlzLmhhPSExLCB0aGlzLkFhPSEwLCB0aGlzLmMuYWJvcnQoKSwgdGhpcy5BYT0hMSwgdGhpcy5QYT1hfHw3LCB0aGlzLmRpc3BhdGNoRXZlbnQoXCJjb21wbGV0ZVwiKSwgdGhpcy5kaXNwYXRjaEV2ZW50KFwiYWJvcnRcIiksIHRoaXMuSGIoKSk7fTtlLkY9ZnVuY3Rpb24oKXt0aGlzLmMmJih0aGlzLmhhJiYodGhpcy5oYT0hMSwgdGhpcy5BYT0hMCwgdGhpcy5jLmFib3J0KCksIHRoaXMuQWE9ITEpLCB0aGlzLkhiKCEwKSk7Vi5MLkYuY2FsbCh0aGlzKTt9O2Uud2U9ZnVuY3Rpb24oKXt0aGlzLkthfHwodGhpcy5OY3x8dGhpcy5SYnx8dGhpcy5BYT90aGlzLnZlKCk6dGhpcy5pZygpKTt9O2UuaWc9ZnVuY3Rpb24oKXt0aGlzLnZlKCk7fTtcbmUudmU9ZnVuY3Rpb24oKXtpZih0aGlzLmhhJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZ29vZylpZih0aGlzLm9jWzFdJiY0PT10aGlzLm1hKCkmJjI9PXRoaXMuemEoKSlNKHRoaXMucyx0aGlzLmRhKFwiTG9jYWwgcmVxdWVzdCBlcnJvciBkZXRlY3RlZCBhbmQgaWdub3JlZFwiKSk7ZWxzZSBpZih0aGlzLlJiJiY0PT10aGlzLm1hKCkpS2IodGhpcy53ZSwwLHRoaXMpO2Vsc2UgaWYodGhpcy5kaXNwYXRjaEV2ZW50KFwicmVhZHlzdGF0ZWNoYW5nZVwiKSwgdGhpcy5PYygpKXtNKHRoaXMucyx0aGlzLmRhKFwiUmVxdWVzdCBjb21wbGV0ZVwiKSk7dGhpcy5oYT0hMTt0cnl7dGhpcy5WZigpPyh0aGlzLmRpc3BhdGNoRXZlbnQoXCJjb21wbGV0ZVwiKSwgdGhpcy5kaXNwYXRjaEV2ZW50KFwic3VjY2Vzc1wiKSk6KHRoaXMuUGE9NiwgdGhpcy5JPXRoaXMuYWUoKStcIiBbXCIrdGhpcy56YSgpK1wiXVwiLCB0aGlzLk1kKCkpO31maW5hbGx5e3RoaXMuSGIoKTt9fX07XG5lLnVlPWZ1bmN0aW9uKGEsYil7dGhpcy5kaXNwYXRjaEV2ZW50KCRjKGEsXCJwcm9ncmVzc1wiKSk7dGhpcy5kaXNwYXRjaEV2ZW50KCRjKGEsYj9cImRvd25sb2FkcHJvZ3Jlc3NcIjpcInVwbG9hZHByb2dyZXNzXCIpKTt9O2Z1bmN0aW9uICRjKGEsYil7cmV0dXJue3R5cGU6YixsZW5ndGhDb21wdXRhYmxlOmEubGVuZ3RoQ29tcHV0YWJsZSxsb2FkZWQ6YS5sb2FkZWQsdG90YWw6YS50b3RhbH19ZS5IYj1mdW5jdGlvbihhKXtpZih0aGlzLmMpe3RoaXMuQmQoKTt2YXIgYj10aGlzLmMsYz10aGlzLm9jWzBdP2FhOm51bGw7dGhpcy5vYz10aGlzLmM9bnVsbDthfHx0aGlzLmRpc3BhdGNoRXZlbnQoXCJyZWFkeVwiKTt0cnl7Yi5vbnJlYWR5c3RhdGVjaGFuZ2U9Yzt9Y2F0Y2goZCl7KGE9dGhpcy5zKSYmYS5jYShcIlByb2JsZW0gZW5jb3VudGVyZWQgcmVzZXR0aW5nIG9ucmVhZHlzdGF0ZWNoYW5nZTogXCIrZC5tZXNzYWdlLHZvaWQgMCk7fX19O1xuZS5CZD1mdW5jdGlvbigpe3RoaXMuYyYmdGhpcy5sYyYmKHRoaXMuYy5vbnRpbWVvdXQ9bnVsbCk7dGhpcy5qYyYmKGguY2xlYXJUaW1lb3V0KHRoaXMuamMpLCB0aGlzLmpjPW51bGwpO307ZS5CYT1mdW5jdGlvbigpe3JldHVybiEhdGhpcy5jfTtlLk9jPWZ1bmN0aW9uKCl7cmV0dXJuIDQ9PXRoaXMubWEoKX07ZS5WZj1mdW5jdGlvbigpe3ZhciBhPXRoaXMuemEoKTthOnN3aXRjaChhKXtjYXNlIDIwMDpjYXNlIDIwMTpjYXNlIDIwMjpjYXNlIDIwNDpjYXNlIDIwNjpjYXNlIDMwNDpjYXNlIDEyMjM6dmFyIGI9ITA7YnJlYWsgYTtkZWZhdWx0OmI9ITE7fXJldHVybiBifHwwPT09YSYmIXRoaXMuU2YoKX07XG5lLlNmPWZ1bmN0aW9uKCl7dmFyIGE9U3RyaW5nKHRoaXMuVWIpLm1hdGNoKHRjKVsxXXx8bnVsbDshYSYmaC5zZWxmJiZoLnNlbGYubG9jYXRpb24mJihhPWguc2VsZi5sb2NhdGlvbi5wcm90b2NvbCwgYT1hLnN1YnN0cigwLGEubGVuZ3RoLTEpKTtyZXR1cm4gWGMudGVzdChhP2EudG9Mb3dlckNhc2UoKTpcIlwiKX07ZS5tYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmM/dGhpcy5jLnJlYWR5U3RhdGU6MH07ZS56YT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gMjx0aGlzLm1hKCk/dGhpcy5jLnN0YXR1czotMX1jYXRjaChhKXtyZXR1cm4tMX19O2UuYWU9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIDI8dGhpcy5tYSgpP3RoaXMuYy5zdGF0dXNUZXh0OlwiXCJ9Y2F0Y2goYSl7cmV0dXJuIE0odGhpcy5zLFwiQ2FuIG5vdCBnZXQgc3RhdHVzOiBcIithLm1lc3NhZ2UpLCBcIlwifX07XG5lLnlhPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiB0aGlzLmM/dGhpcy5jLnJlc3BvbnNlVGV4dDpcIlwifWNhdGNoKGEpe3JldHVybiBNKHRoaXMucyxcIkNhbiBub3QgZ2V0IHJlc3BvbnNlVGV4dDogXCIrYS5tZXNzYWdlKSwgXCJcIn19O2UuQ2Y9ZnVuY3Rpb24oYSl7aWYodGhpcy5jKXt2YXIgYj10aGlzLmMucmVzcG9uc2VUZXh0O2EmJjA9PWIuaW5kZXhPZihhKSYmKGI9Yi5zdWJzdHJpbmcoYS5sZW5ndGgpKTthOnthPWI7aWYoaC5KU09OKXRyeXt2YXIgYz1oLkpTT04ucGFyc2UoYSk7YnJlYWsgYX1jYXRjaChkKXt9Yz12YihhKTt9cmV0dXJuIGN9fTtlLmdldFJlc3BvbnNlSGVhZGVyPWZ1bmN0aW9uKGEpe2lmKHRoaXMuYyYmdGhpcy5PYygpKXJldHVybiBhPXRoaXMuYy5nZXRSZXNwb25zZUhlYWRlcihhKSwgbnVsbD09PWE/dm9pZCAwOmF9O1xuZS5nZXRBbGxSZXNwb25zZUhlYWRlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jJiZ0aGlzLk9jKCk/dGhpcy5jLmdldEFsbFJlc3BvbnNlSGVhZGVycygpfHxcIlwiOlwiXCJ9O2UubGI9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYz90aGlzLmMuZ2V0UmVzcG9uc2VIZWFkZXIoYSk6bnVsbH07ZS5YZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLlBhfTtlLkpjPWZ1bmN0aW9uKCl7cmV0dXJuIGwodGhpcy5JKT90aGlzLkk6U3RyaW5nKHRoaXMuSSl9O2UuZGE9ZnVuY3Rpb24oYSl7cmV0dXJuIGErXCIgW1wiK3RoaXMuamUrXCIgXCIrdGhpcy5VYitcIiBcIit0aGlzLnphKCkrXCJdXCJ9O2Z1bmN0aW9uIGFkKGEpe3ZhciBiPVwiXCI7QWEoYSxmdW5jdGlvbihhLGQpe2IrPWQ7Yis9XCI6XCI7Yis9YTtiKz1cIlxcclxcblwiO30pO3JldHVybiBifWZ1bmN0aW9uIGJkKGEsYixjKXthOntmb3IoZCBpbiBjKXt2YXIgZD0hMTticmVhayBhfWQ9ITA7fWlmKGQpcmV0dXJuIGE7Yz1hZChjKTtpZihsKGEpKXtiPWVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYikpO2M9bnVsbCE9Yz9cIj1cIitlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGMpKTpcIlwiO2lmKGIrPWMpe2M9YS5pbmRleE9mKFwiI1wiKTswPmMmJihjPWEubGVuZ3RoKTtkPWEuaW5kZXhPZihcIj9cIik7aWYoMD5kfHxkPmMpe2Q9Yzt2YXIgZj1cIlwiO31lbHNlIGY9YS5zdWJzdHJpbmcoZCsxLGMpO2E9W2Euc3Vic3RyKDAsZCksZixhLnN1YnN0cihjKV07Yz1hWzFdO2FbMV09Yj9jP2MrXCImXCIrYjpiOmM7YT1hWzBdKyhhWzFdP1wiP1wiK2FbMV06XCJcIikrYVsyXTt9cmV0dXJuIGF9YS5sKGIsYyk7cmV0dXJuIGF9ZnVuY3Rpb24gY2QoYSl7dGhpcy5FZD0yMjt0aGlzLkhlPTA7dGhpcy5NPVtdO3RoaXMuYT1uZXcgJGI7dGhpcy5KYj1uZXcgTWM7dGhpcy5uYT10aGlzLnBkPXRoaXMuaWI9dGhpcy5LPXRoaXMudT10aGlzLk1jPXRoaXMuYWE9dGhpcy5oYj10aGlzLk49dGhpcy5TYj10aGlzLkE9bnVsbDt0aGlzLlhlPSEwO3RoaXMuZWc9dGhpcy5aYj0wO3RoaXMucGY9ISFtKFwiaW50ZXJuYWxDaGFubmVsUGFyYW1zLmZhaWxGYXN0XCIsYSk7dGhpcy5qZD10aGlzLkphPXRoaXMud2E9dGhpcy5pYT10aGlzLmVhPXRoaXMuaT1udWxsO3RoaXMuV2U9ITA7dGhpcy53PXRoaXMua2U9dGhpcy5UYj0tMTt0aGlzLnRjPXRoaXMuSGE9dGhpcy5MYT0wO3RoaXMuWmU9bShcImludGVybmFsQ2hhbm5lbFBhcmFtcy5iYXNlUmV0cnlEZWxheU1zXCIsYSl8fDVFMzt0aGlzLnlnPW0oXCJpbnRlcm5hbENoYW5uZWxQYXJhbXMucmV0cnlEZWxheVNlZWRNc1wiLGEpfHwxRTQ7dGhpcy5zZj1tKFwiaW50ZXJuYWxDaGFubmVsUGFyYW1zLmZvcndhcmRDaGFubmVsTWF4UmV0cmllc1wiLFxuYSl8fDI7dGhpcy5SZD1tKFwiaW50ZXJuYWxDaGFubmVsUGFyYW1zLmZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNc1wiLGEpfHwyRTQ7dGhpcy5ZYT1hJiZhLnVofHx2b2lkIDA7dGhpcy5FYj12b2lkIDA7dGhpcy5SYT0wO3RoaXMuaWM9YSYmYS5zdXBwb3J0c0Nyb3NzRG9tYWluWGhyfHwhMTt0aGlzLnJhPVwiXCI7dGhpcy5HPW5ldyBRYyhhJiZhLmNvbmN1cnJlbnRSZXF1ZXN0TGltaXQpO3RoaXMubWM9bmV3IFRjO3RoaXMudGE9YSYmdm9pZCAwIT09YS5iYWNrZ3JvdW5kQ2hhbm5lbFRlc3Q/YS5iYWNrZ3JvdW5kQ2hhbm5lbFRlc3Q6ITA7KHRoaXMuUWQ9YSYmYS5mYXN0SGFuZHNoYWtlfHwhMSkmJiF0aGlzLnRhJiYodGhpcy5hLlQoXCJGb3JjZSBiYWNrZ3JvdW5kQ2hhbm5lbFRlc3Qgd2hlbiBmYXN0SGFuZHNoYWtlIGlzIGVuYWJsZWQuXCIpLCB0aGlzLnRhPSEwKTthJiZhLkxkJiZ0aGlzLmEuTGQoKTt9ZT1jZC5wcm90b3R5cGU7ZS52Yz04O2UuZz0xO1xuZS5jb25uZWN0PWZ1bmN0aW9uKGEsYixjLGQsZil7dGhpcy5hLmRlYnVnKFwiY29ubmVjdCgpXCIpO1AoMCk7dGhpcy5LPWI7dGhpcy5oYj1jfHx7fTtkJiZ2b2lkIDAhPT1mJiYodGhpcy5oYi5PU0lEPWQsIHRoaXMuaGIuT0FJRD1mKTt0aGlzLnRhJiYodGhpcy5hLmRlYnVnKFwiY29ubmVjdCgpIGJ5cGFzc2VkIGNoYW5uZWwtdGVzdC5cIiksIHRoaXMuSmIuY2U9W10sIHRoaXMuSmIucmQ9ITEpO3RoaXMuZmYoYSk7fTtlLmRpc2Nvbm5lY3Q9ZnVuY3Rpb24oKXt0aGlzLmEuZGVidWcoXCJkaXNjb25uZWN0KClcIik7dGhpcy50ZCgpO2lmKDM9PXRoaXMuZyl7dmFyIGE9dGhpcy5aYisrLGI9dGhpcy5pYi5jbG9uZSgpO2IubChcIlNJRFwiLHRoaXMucmEpO2IubChcIlJJRFwiLGEpO2IubChcIlRZUEVcIixcInRlcm1pbmF0ZVwiKTt0aGlzLlphKGIpOyhuZXcgUih0aGlzLHRoaXMuYSx0aGlzLnJhLGEsdm9pZCAwKSkuQmcoYik7fXRoaXMudGUoKTt9O1xuZS5mZj1mdW5jdGlvbihhKXt0aGlzLmEuZGVidWcoXCJjb25uZWN0VGVzdF8oKVwiKTt0aGlzLkphPW5ldyBMYyh0aGlzLHRoaXMuYSk7bnVsbD09PXRoaXMuTiYmdGhpcy5KYS5nYSh0aGlzLkEpO3ZhciBiPWE7dGhpcy5OJiZ0aGlzLkEmJihiPWJkKGEsdGhpcy5OLHRoaXMuQSkpO3RoaXMuSmEuY29ubmVjdChiKTt9O2UuZWY9ZnVuY3Rpb24oKXt0aGlzLmEuZGVidWcoXCJjb25uZWN0Q2hhbm5lbF8oKVwiKTt0aGlzLmliPXRoaXMuVmQodGhpcy5LKTt0aGlzLkZjKCk7fTtlLnRkPWZ1bmN0aW9uKCl7dGhpcy5KYSYmKHRoaXMuSmEuYWJvcnQoKSwgdGhpcy5KYT1udWxsKTt0aGlzLnUmJih0aGlzLnUuY2FuY2VsKCksIHRoaXMudT1udWxsKTt0aGlzLmlhJiYoaC5jbGVhclRpbWVvdXQodGhpcy5pYSksIHRoaXMuaWE9bnVsbCk7dGhpcy5JYigpO3RoaXMuRy5jYW5jZWwoKTt0aGlzLmVhJiYoaC5jbGVhclRpbWVvdXQodGhpcy5lYSksIHRoaXMuZWE9bnVsbCk7fTtcbmUuZ2E9ZnVuY3Rpb24oYSl7dGhpcy5BPWE7fTtlLktnPWZ1bmN0aW9uKGEpe3RoaXMuU2I9YTt9O2UuSWc9ZnVuY3Rpb24oYSl7dGhpcy5OPWE7fTtlLkpnPWZ1bmN0aW9uKGEpe3RoaXMuYWE9YTt9O2UuSmU9ZnVuY3Rpb24oYSl7dGhpcy5NYz1hO307ZS5MZT1mdW5jdGlvbihhKXt0aGlzLlJhPWE7fTtlLk5nPWZ1bmN0aW9uKCl7dGhpcy5pYz0hMDt9O2UuSWU9ZnVuY3Rpb24oYSl7dGhpcy5pPWE7fTtlLlJmPWZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuamR9O2UuYWQ9ZnVuY3Rpb24oYSl7MUUzPT10aGlzLk0ubGVuZ3RoJiZ0aGlzLmEuY2EoZnVuY3Rpb24oKXtyZXR1cm5cIkFscmVhZHkgaGF2ZSAxMDAwIHF1ZXVlZCBtYXBzIHVwb24gcXVldWVpbmcgXCIrKG5ldyBJKS5lYyhhKX0pO3RoaXMuTS5wdXNoKG5ldyBQYyh0aGlzLmVnKyssYSkpOzM9PXRoaXMuZyYmdGhpcy5GYygpO307ZS51Zj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBmPzA6dGhpcy5zZn07XG5lLmdlPWZ1bmN0aW9uKCl7cmV0dXJuIDA9PXRoaXMuZ307ZS5nZXRTdGF0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmd9O2UuRmM9ZnVuY3Rpb24oKXt0aGlzLkcuaGUoKXx8dGhpcy5lYXx8KHRoaXMuZWE9USh1KHRoaXMuemUsdGhpcyksMCksIHRoaXMuTGE9MCk7fTtcbmUuYmc9ZnVuY3Rpb24oYSl7aWYodGhpcy5HLkJmKCk+PXRoaXMuRy5ZYi0odGhpcy5lYT8xOjApKXJldHVybiB0aGlzLmEuY2EoXCJVbmV4cGVjdGVkIHJldHJ5IHJlcXVlc3QgaXMgc2NoZWR1bGVkLlwiKSwgITE7aWYodGhpcy5lYSlyZXR1cm4gdGhpcy5hLmRlYnVnKFwiVXNlIHRoZSByZXRyeSByZXF1ZXN0IHRoYXQgaXMgYWxyZWFkeSBzY2hlZHVsZWQuXCIpLCB0aGlzLk09YS5sYSgpLmNvbmNhdCh0aGlzLk0pLCAhMDtpZigxPT10aGlzLmd8fDI9PXRoaXMuZ3x8dGhpcy5MYT49dGhpcy51ZigpKXJldHVybiExO3RoaXMuYS5kZWJ1ZyhcIkdvaW5nIHRvIHJldHJ5IFBPU1RcIik7dGhpcy5lYT1RKHUodGhpcy56ZSx0aGlzLGEpLHRoaXMuJGQodGhpcy5MYSkpO3RoaXMuTGErKztyZXR1cm4hMH07ZS56ZT1mdW5jdGlvbihhKXt0aGlzLmVhPW51bGw7dGhpcy5TZyhhKTt9O1xuZS5TZz1mdW5jdGlvbihhKXt0aGlzLmEuZGVidWcoXCJzdGFydEZvcndhcmRDaGFubmVsX1wiKTsxPT10aGlzLmc/YT90aGlzLmEuY2EoXCJOb3Qgc3VwcG9zZWQgdG8gcmV0cnkgdGhlIG9wZW5cIik6KHRoaXMubWcoKSwgdGhpcy5nPTIpOjM9PXRoaXMuZyYmKGE/dGhpcy5vZShhKTowPT10aGlzLk0ubGVuZ3RoP3RoaXMuYS5kZWJ1ZyhcInN0YXJ0Rm9yd2FyZENoYW5uZWxfIHJldHVybmVkOiBub3RoaW5nIHRvIHNlbmRcIik6dGhpcy5HLmhlKCk/dGhpcy5hLmNhKFwic3RhcnRGb3J3YXJkQ2hhbm5lbF8gcmV0dXJuZWQ6IGNvbm5lY3Rpb24gYWxyZWFkeSBpbiBwcm9ncmVzc1wiKToodGhpcy5vZSgpLCB0aGlzLmEuZGVidWcoXCJzdGFydEZvcndhcmRDaGFubmVsXyBmaW5pc2hlZCwgc2VudCByZXF1ZXN0XCIpKSk7fTtcbmUubWc9ZnVuY3Rpb24oKXt0aGlzLmEuZGVidWcoXCJvcGVuXygpXCIpO3RoaXMuWmI9TWF0aC5mbG9vcigxRTUqTWF0aC5yYW5kb20oKSk7dmFyIGE9dGhpcy5aYisrLGI9bmV3IFIodGhpcyx0aGlzLmEsXCJcIixhLHZvaWQgMCksYz10aGlzLkE7dGhpcy5TYiYmKGM/KGM9RGEoYyksIEZhKGMsdGhpcy5TYikpOmM9dGhpcy5TYik7bnVsbD09PXRoaXMuTiYmYi5nYShjKTt2YXIgZD10aGlzLktkKGIpLGY9dGhpcy5pYi5jbG9uZSgpO2YubChcIlJJRFwiLGEpOzA8dGhpcy5FZCYmZi5sKFwiQ1ZFUlwiLHRoaXMuRWQpO3RoaXMudGEmJnRoaXMuYWEmJmYubChcIlgtSFRUUC1TZXNzaW9uLUlkXCIsdGhpcy5hYSk7dGhpcy5aYShmKTt0aGlzLk4mJmMmJmJkKGYsdGhpcy5OLGMpO3RoaXMuRy5xYyhiKTt0aGlzLlFkPyhmLmwoXCIkcmVxXCIsZCksIGYubChcIlNJRFwiLFwibnVsbFwiKSwgYi5HZygpLCBiLm5kKGYsbnVsbCkpOmIubmQoZixkKTt9O1xuZS5vZT1mdW5jdGlvbihhKXt2YXIgYj1hP2EuUjp0aGlzLlpiKys7dmFyIGM9dGhpcy5pYi5jbG9uZSgpO2MubChcIlNJRFwiLHRoaXMucmEpO2MubChcIlJJRFwiLGIpO2MubChcIkFJRFwiLHRoaXMuVGIpO3RoaXMuWmEoYyk7dGhpcy5OJiZ0aGlzLkEmJmJkKGMsdGhpcy5OLHRoaXMuQSk7Yj1uZXcgUih0aGlzLHRoaXMuYSx0aGlzLnJhLGIsdGhpcy5MYSsxKTtudWxsPT09dGhpcy5OJiZiLmdhKHRoaXMuQSk7YSYmdGhpcy52ZyhhKTthPXRoaXMuS2QoYik7Yi5zZXRUaW1lb3V0KE1hdGgucm91bmQoLjUqdGhpcy5SZCkrTWF0aC5yb3VuZCguNSp0aGlzLlJkKk1hdGgucmFuZG9tKCkpKTt0aGlzLkcucWMoYik7Yi5uZChjLGEpO307ZS5aYT1mdW5jdGlvbihhKXt0aGlzLmkmJnNjKHt9LGZ1bmN0aW9uKGIsYyl7YS5sKGMsYik7fSk7fTtcbmUuS2Q9ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5taW4odGhpcy5NLmxlbmd0aCwxRTMpLGM9dGhpcy5pP3UodGhpcy5pLlllLHRoaXMuaSx0aGlzKTpudWxsO2M9dGhpcy5tYy5uZih0aGlzLk0sYixjKTthLk1nKHRoaXMuTS5zcGxpY2UoMCxiKSk7cmV0dXJuIGN9O2Uudmc9ZnVuY3Rpb24oYSl7dGhpcy5NPWEubGEoKS5jb25jYXQodGhpcy5NKTt9O2UuTmQ9ZnVuY3Rpb24oKXtpZighdGhpcy51JiYhdGhpcy5pYSl7dGhpcy50Yz0xO3ZhciBhPXRoaXMueWU7RWJ8fEZiKCk7SGJ8fChFYigpLCBIYj0hMCk7SWIuYWRkKGEsdGhpcyk7dGhpcy5IYT0wO319O1xuZS5TYz1mdW5jdGlvbigpe2lmKHRoaXMudXx8dGhpcy5pYSlyZXR1cm4gdGhpcy5hLmNhKFwiUmVxdWVzdCBhbHJlYWR5IGluIHByb2dyZXNzXCIpLCAhMTtpZigzPD10aGlzLkhhKXJldHVybiExO3RoaXMuYS5kZWJ1ZyhcIkdvaW5nIHRvIHJldHJ5IEdFVFwiKTt0aGlzLnRjKys7dGhpcy5pYT1RKHUodGhpcy55ZSx0aGlzKSx0aGlzLiRkKHRoaXMuSGEpKTt0aGlzLkhhKys7cmV0dXJuITB9O2UueWU9ZnVuY3Rpb24oKXt0aGlzLmlhPW51bGw7dGhpcy5RZygpO307XG5lLlFnPWZ1bmN0aW9uKCl7dGhpcy5hLmRlYnVnKFwiQ3JlYXRpbmcgbmV3IEh0dHBSZXF1ZXN0XCIpO3RoaXMudT1uZXcgUih0aGlzLHRoaXMuYSx0aGlzLnJhLFwicnBjXCIsdGhpcy50Yyk7bnVsbD09PXRoaXMuTiYmdGhpcy51LmdhKHRoaXMuQSk7dGhpcy51LkxlKHRoaXMuUmEpO3ZhciBhPXRoaXMucGQuY2xvbmUoKTthLmwoXCJSSURcIixcInJwY1wiKTthLmwoXCJTSURcIix0aGlzLnJhKTthLmwoXCJDSVwiLHRoaXMuamQ/XCIwXCI6XCIxXCIpO2EubChcIkFJRFwiLHRoaXMuVGIpO3RoaXMuWmEoYSk7YS5sKFwiVFlQRVwiLFwieG1saHR0cFwiKTt0aGlzLk4mJnRoaXMuQSYmYmQoYSx0aGlzLk4sdGhpcy5BKTt0aGlzLkViJiZ0aGlzLnUuc2V0VGltZW91dCh0aGlzLkViKTt0aGlzLnUubWQoYSwhMCx0aGlzLm5hKTt0aGlzLmEuZGVidWcoXCJOZXcgUmVxdWVzdCBjcmVhdGVkXCIpO307XG5lLnZiPWZ1bmN0aW9uKGEsYil7dGhpcy5hLmRlYnVnKFwiVGVzdCBDb25uZWN0aW9uIEZpbmlzaGVkXCIpO3ZhciBjPWEuRGQ7YyYmdGhpcy5HLm9kKGMpO3RoaXMuamQ9dGhpcy5XZSYmYjt0aGlzLnc9YS53O3RoaXMuZWYoKTt9O2UuZ2Q9ZnVuY3Rpb24oYSl7dGhpcy5hLmRlYnVnKFwiVGVzdCBDb25uZWN0aW9uIEZhaWxlZFwiKTt0aGlzLnc9YS53O3RoaXMuc2EoMik7fTtcbmUueGU9ZnVuY3Rpb24oYSxiKXtpZigwIT10aGlzLmcmJih0aGlzLnU9PWF8fHRoaXMuRy5MYyhhKSkpaWYodGhpcy53PWEudywgIWEubWImJnRoaXMuRy5MYyhhKSYmMz09dGhpcy5nKXt0cnl7dmFyIGM9dGhpcy5tYy5CYyhiKTt9Y2F0Y2goZCl7Yz1udWxsO31uKGMpJiYzPT1jLmxlbmd0aD90aGlzLkdmKGMsYSk6KHRoaXMuYS5kZWJ1ZyhcIkJhZCBQT1NUIHJlc3BvbnNlIGRhdGEgcmV0dXJuZWRcIiksIHRoaXMuc2EoMTEpKTt9ZWxzZShhLm1ifHx0aGlzLnU9PWEpJiZ0aGlzLkliKCksIHZhKGIpfHwoYz10aGlzLm1jLkJjKGIpLCB0aGlzLmhnKGMsYSkpO307XG5lLkdmPWZ1bmN0aW9uKGEsYil7MD09YVswXT90aGlzLkZmKGIpOih0aGlzLmtlPWFbMV0sIGI9dGhpcy5rZS10aGlzLlRiLCAwPGImJihhPWFbMl0sIHRoaXMuYS5kZWJ1ZyhhK1wiIGJ5dGVzIChpbiBcIitiK1wiIGFycmF5cykgYXJlIG91dHN0YW5kaW5nIG9uIHRoZSBCYWNrQ2hhbm5lbFwiKSwgdGhpcy5QZyhhKSYmIXRoaXMud2EmJih0aGlzLndhPVEodSh0aGlzLmZnLHRoaXMpLDZFMykpKSk7fTtcbmUuRmY9ZnVuY3Rpb24oYSl7dGhpcy5hLmRlYnVnKFwiU2VydmVyIGNsYWltcyBvdXIgYmFja2NoYW5uZWwgaXMgbWlzc2luZy5cIik7aWYodGhpcy5pYSl0aGlzLmEuZGVidWcoXCJCdXQgd2UgYXJlIGN1cnJlbnRseSBzdGFydGluZyB0aGUgcmVxdWVzdC5cIik7ZWxzZXtpZih0aGlzLnUpaWYodGhpcy51LnJiKzNFMzxhLnJiKXRoaXMuSWIoKSwgdGhpcy51LmNhbmNlbCgpLCB0aGlzLnU9bnVsbDtlbHNlIHJldHVybjtlbHNlIHRoaXMuYS5UKFwiV2UgZG8gbm90IGhhdmUgYSBCYWNrQ2hhbm5lbCBlc3RhYmxpc2hlZFwiKTt0aGlzLlNjKCk7UCgxOCk7fX07ZS5QZz1mdW5jdGlvbihhKXtyZXR1cm4gMzc1MDA+YSYmIXRoaXMuUmYoKSYmMD09dGhpcy5IYX07ZS5hYj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5YZT90aGlzLmk/dGhpcy5pLmFiKGEpOmE6bnVsbH07XG5lLmZnPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy53YSYmKHRoaXMud2E9bnVsbCwgdGhpcy51LmNhbmNlbCgpLCB0aGlzLnU9bnVsbCwgdGhpcy5TYygpLCBQKDE5KSk7fTtlLkliPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy53YSYmKGguY2xlYXJUaW1lb3V0KHRoaXMud2EpLCB0aGlzLndhPW51bGwpO307XG5lLlZjPWZ1bmN0aW9uKGEpe3RoaXMuYS5kZWJ1ZyhcIlJlcXVlc3QgY29tcGxldGVcIik7dmFyIGI9bnVsbDtpZih0aGlzLnU9PWEpe3RoaXMuSWIoKTt0aGlzLnU9bnVsbDt2YXIgYz0yO31lbHNlIGlmKHRoaXMuRy5MYyhhKSliPWEubGEoKSwgdGhpcy5HLkNlKGEpLCBjPTE7ZWxzZSByZXR1cm47dGhpcy53PWEudztpZigwIT10aGlzLmcpaWYoYS5TKTE9PWM/KGRjKGEuRGE/YS5EYS5sZW5ndGg6MCx3KCktYS5yYix0aGlzLkxhKSwgdGhpcy5GYygpKTp0aGlzLk5kKCk7ZWxzZXt2YXIgZD1hLkpjKCk7aWYoMz09ZHx8MD09ZCYmMDx0aGlzLncpdGhpcy5hLmRlYnVnKFwiTm90IHJldHJ5aW5nIGR1ZSB0byBlcnJvciB0eXBlXCIpO2Vsc2V7dmFyIGY9dGhpczt0aGlzLmEuZGVidWcoZnVuY3Rpb24oKXtyZXR1cm5cIk1heWJlIHJldHJ5aW5nLCBsYXN0IGVycm9yOiBcIitvYyhkLGYudyl9KTtpZigxPT1jJiZ0aGlzLmJnKGEpfHwyPT1jJiZ0aGlzLlNjKCkpcmV0dXJuO3RoaXMuYS5kZWJ1ZyhcIkV4Y2VlZGVkIG1heCBudW1iZXIgb2YgcmV0cmllc1wiKTt9YiYmXG4wPGIubGVuZ3RoJiZ0aGlzLkcuVmUoYik7dGhpcy5hLmRlYnVnKFwiRXJyb3I6IEhUVFAgcmVxdWVzdCBmYWlsZWRcIik7c3dpdGNoKGQpe2Nhc2UgMTp0aGlzLnNhKDUpO2JyZWFrO2Nhc2UgNDp0aGlzLnNhKDEwKTticmVhaztjYXNlIDM6dGhpcy5zYSg2KTticmVhaztkZWZhdWx0OnRoaXMuc2EoMik7fX19O2UuJGQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5aZStNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqdGhpcy55Zyk7dGhpcy5CYSgpfHwodGhpcy5hLmRlYnVnKFwiSW5hY3RpdmUgY2hhbm5lbFwiKSwgYio9Mik7cmV0dXJuIGIqYX07ZS5yYz1mdW5jdGlvbihhKXtpZih0aGlzLnRhJiYoYT1hLmgpKXt2YXIgYj1hLmxiKFwiWC1DbGllbnQtV2lyZS1Qcm90b2NvbFwiKTtiJiZ0aGlzLkcub2QoYik7dGhpcy5hYSYmKChhPWEubGIoXCJYLUhUVFAtU2Vzc2lvbi1JZFwiKSk/KHRoaXMuSmUoYSksIHRoaXMuaWIubCh0aGlzLmFhLGEpKTp0aGlzLmEuVChcIk1pc3NpbmcgWF9IVFRQX1NFU1NJT05fSUQgaW4gdGhlIGhhbmRzaGFrZSByZXNwb25zZVwiKSk7fX07XG5lLmhnPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMuaSYmdGhpcy5pLnVjP1tdOm51bGwsZD0wO2Q8YS5sZW5ndGg7ZCsrKXt2YXIgZj1hW2RdO3RoaXMuVGI9ZlswXTtmPWZbMV07aWYoMj09dGhpcy5nKWlmKFwiY1wiPT1mWzBdKXt0aGlzLnJhPWZbMV07dGhpcy5uYT10aGlzLmFiKGZbMl0pO3ZhciBnPWZbM107bnVsbCE9ZyYmKHRoaXMudmM9ZywgdGhpcy5hLmluZm8oXCJWRVI9XCIrdGhpcy52YykpO2c9Zls0XTtudWxsIT1nJiYodGhpcy5IZT1nLCB0aGlzLmEuaW5mbyhcIlNWRVI9XCIrdGhpcy5IZSkpO2Y9Zls1XTtudWxsIT1mJiZcIm51bWJlclwiPT10eXBlb2YgZiYmMDxmJiYodGhpcy5FYj1mKj0xLjUsIHRoaXMuYS5pbmZvKFwiYmFja0NoYW5uZWxSZXF1ZXN0VGltZW91dE1zXz1cIitmKSk7dGhpcy5yYyhiKTt0aGlzLmc9Mzt0aGlzLmkmJnRoaXMuaS56ZCgpO3RoaXMuUmcoYik7fWVsc2VcInN0b3BcIiE9ZlswXSYmXCJjbG9zZVwiIT1mWzBdfHx0aGlzLnNhKDcpO2Vsc2UgMz09dGhpcy5nJiZcbihcInN0b3BcIj09ZlswXXx8XCJjbG9zZVwiPT1mWzBdPyhjJiYwIT1jLmxlbmd0aCYmKHRoaXMuaS51Yyh0aGlzLGMpLCBjLmxlbmd0aD0wKSwgXCJzdG9wXCI9PWZbMF0/dGhpcy5zYSg3KTp0aGlzLmRpc2Nvbm5lY3QoKSk6XCJub29wXCIhPWZbMF0mJihjP2MucHVzaChmKTp0aGlzLmkmJnRoaXMuaS54ZChmKSksIHRoaXMuSGE9MCk7fWMmJjAhPWMubGVuZ3RoJiZ0aGlzLmkudWModGhpcyxjKTt9O2UuUmc9ZnVuY3Rpb24oYSl7dGhpcy5wZD10aGlzLlNkKHRoaXMubmEsdGhpcy5LKTthLm1iPyh0aGlzLmEuZGVidWcoXCJVcGdyYWRlIHRoZSBoYW5kc2hha2UgcmVxdWVzdCB0byBhIGJhY2tjaGFubmVsLlwiKSwgdGhpcy5HLkNlKGEpLCBhLndnKHRoaXMuRWIpLCB0aGlzLnU9YSk6dGhpcy5OZCgpO307XG5lLnNhPWZ1bmN0aW9uKGEpe3RoaXMuYS5pbmZvKFwiRXJyb3IgY29kZSBcIithKTtpZigyPT1hKXt2YXIgYj1udWxsO3RoaXMuaSYmKGI9bnVsbCk7dmFyIGM9dSh0aGlzLlZnLHRoaXMpO2J8fChiPW5ldyBVKFwiLy93d3cuZ29vZ2xlLmNvbS9pbWFnZXMvY2xlYXJkb3QuZ2lmXCIpLCBoLmxvY2F0aW9uJiZcImh0dHBcIj09aC5sb2NhdGlvbi5wcm90b2NvbHx8Yi51YihcImh0dHBzXCIpLCBiLlZiKCkpO1VjKGIudG9TdHJpbmcoKSxjKTt9ZWxzZSBQKDIpO3RoaXMuZ2coYSk7fTtlLlZnPWZ1bmN0aW9uKGEpe2E/KHRoaXMuYS5pbmZvKFwiU3VjY2Vzc2Z1bGx5IHBpbmdlZCBnb29nbGUuY29tXCIpLCBQKDIpKToodGhpcy5hLmluZm8oXCJGYWlsZWQgdG8gcGluZyBnb29nbGUuY29tXCIpLCBQKDEpKTt9O2UuZ2c9ZnVuY3Rpb24oYSl7dGhpcy5hLmRlYnVnKFwiSHR0cENoYW5uZWw6IGVycm9yIC0gXCIrYSk7dGhpcy5nPTA7dGhpcy5pJiZ0aGlzLmkud2QoYSk7dGhpcy50ZSgpO3RoaXMudGQoKTt9O1xuZS50ZT1mdW5jdGlvbigpe3RoaXMuZz0wO3RoaXMudz0tMTtpZih0aGlzLmkpe3ZhciBhPXRoaXMuRy5sYSgpO2lmKDAhPWEubGVuZ3RofHwwIT10aGlzLk0ubGVuZ3RoKXt2YXIgYj10aGlzO3RoaXMuYS5kZWJ1ZyhmdW5jdGlvbigpe3JldHVyblwiTnVtYmVyIG9mIHVuZGVsaXZlcmVkIG1hcHMsIHBlbmRpbmc6IFwiK2EubGVuZ3RoK1wiLCBvdXRnb2luZzogXCIrYi5NLmxlbmd0aH0pO3RoaXMuRy5kZigpO3VhKHRoaXMuTSk7dGhpcy5NLmxlbmd0aD0wO310aGlzLmkudmQoKTt9fTtlLlZkPWZ1bmN0aW9uKGEpe2E9dGhpcy5GZChudWxsLGEpO3RoaXMuYS5kZWJ1ZyhcIkdldEZvcndhcmRDaGFubmVsVXJpOiBcIithKTtyZXR1cm4gYX07ZS5TZD1mdW5jdGlvbihhLGIpe2E9dGhpcy5GZCh0aGlzLmhjKCk/YTpudWxsLGIpO3RoaXMuYS5kZWJ1ZyhcIkdldEJhY2tDaGFubmVsVXJpOiBcIithKTtyZXR1cm4gYX07XG5lLkZkPWZ1bmN0aW9uKGEsYil7dmFyIGM9RWMoYik7aWYoXCJcIiE9Yy54YSlhJiZjLnNiKGErXCIuXCIrYy54YSksIGMudGIoYy5DYSk7ZWxzZXt2YXIgZD1oLmxvY2F0aW9uO2M9RmMoZC5wcm90b2NvbCxhP2ErXCIuXCIrZC5ob3N0bmFtZTpkLmhvc3RuYW1lLCtkLnBvcnQsYik7fXRoaXMuaGImJkFhKHRoaXMuaGIsZnVuY3Rpb24oYSxiKXtjLmwoYixhKTt9KTthPXRoaXMuYWE7Yj10aGlzLk1jO2EmJmImJmMubChhLGIpO2MubChcIlZFUlwiLHRoaXMudmMpO3RoaXMuWmEoYyk7cmV0dXJuIGN9O2UuS2I9ZnVuY3Rpb24oYSl7aWYoYSYmIXRoaXMuaWMpdGhyb3cgRXJyb3IoXCJDYW4ndCBjcmVhdGUgc2Vjb25kYXJ5IGRvbWFpbiBjYXBhYmxlIFhocklvIG9iamVjdC5cIik7YT1uZXcgVih0aGlzLllhKTthLk5lKHRoaXMuaWMpO3JldHVybiBhfTtlLkJhPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmkmJnRoaXMuaS5CYSgpfTtlLmhjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaWN9O2Z1bmN0aW9uIGRkKCl7fWU9ZGQucHJvdG90eXBlO2UudWM9bnVsbDtlLnpkPWZ1bmN0aW9uKCl7fTtlLnhkPWZ1bmN0aW9uKCl7fTtlLndkPWZ1bmN0aW9uKCl7fTtlLnZkPWZ1bmN0aW9uKCl7fTtlLkJhPWZ1bmN0aW9uKCl7cmV0dXJuITB9O2UuWWU9ZnVuY3Rpb24oKXt9O2UuYWI9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9O2Z1bmN0aW9uIGVkKGEpe2Zvcih2YXIgYj1hcmd1bWVudHNbMF0sYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspe3ZhciBkPWFyZ3VtZW50c1tjXTtpZigwPT1kLmxhc3RJbmRleE9mKFwiL1wiLDApKWI9ZDtlbHNle3ZhciBmOyhmPVwiXCI9PWIpfHwoZj1iLmxlbmd0aC0xLCBmPTA8PWYmJmIuaW5kZXhPZihcIi9cIixmKT09Zik7Yj1mP2IrZDpiKyhcIi9cIitkKTt9fXJldHVybiBifWZ1bmN0aW9uIGZkKCl7aWYoQyYmISgxMDw9TnVtYmVyKFVhKSkpdGhyb3cgRXJyb3IoXCJFbnZpcm9ubWVudGFsIGVycm9yOiBubyBhdmFpbGFibGUgdHJhbnNwb3J0LlwiKTt9ZmQucHJvdG90eXBlLmdmPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBXKGEsYil9O1xuZnVuY3Rpb24gVyhhLGIpe0guY2FsbCh0aGlzKTt0aGlzLmI9bmV3IGNkKGIpO3RoaXMuemI9YTt0aGlzLldnPWImJmIudGVzdFVybD9iLnRlc3RVcmw6ZWQodGhpcy56YixcInRlc3RcIik7dGhpcy5zPVliKFwiZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0XCIpO3RoaXMuVGM9YiYmYi5tZXNzYWdlVXJsUGFyYW1zfHxudWxsO2E9YiYmYi5tZXNzYWdlSGVhZGVyc3x8bnVsbDtiJiZiLmNsaWVudFByb3RvY29sSGVhZGVyUmVxdWlyZWQmJihhP2FbXCJYLUNsaWVudC1Qcm90b2NvbFwiXT1cIndlYmNoYW5uZWxcIjphPXtcIlgtQ2xpZW50LVByb3RvY29sXCI6XCJ3ZWJjaGFubmVsXCJ9KTt0aGlzLmIuZ2EoYSk7YT1iJiZiLmluaXRNZXNzYWdlSGVhZGVyc3x8bnVsbDtiJiZiLm1lc3NhZ2VDb250ZW50VHlwZSYmKGE/YVtcIlgtV2ViQ2hhbm5lbC1Db250ZW50LVR5cGVcIl09Yi5tZXNzYWdlQ29udGVudFR5cGU6YT17XCJYLVdlYkNoYW5uZWwtQ29udGVudC1UeXBlXCI6Yi5tZXNzYWdlQ29udGVudFR5cGV9KTtcbmImJmIuQ2QmJihhP2FbXCJYLVdlYkNoYW5uZWwtQ2xpZW50LVByb2ZpbGVcIl09Yi5DZDphPXtcIlgtV2ViQ2hhbm5lbC1DbGllbnQtUHJvZmlsZVwiOmIuQ2R9KTt0aGlzLmIuS2coYSk7KGE9YiYmYi5odHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtKSYmIXZhKGEpJiZ0aGlzLmIuSWcoYSk7dGhpcy5VZz1iJiZiLnN1cHBvcnRzQ3Jvc3NEb21haW5YaHJ8fCExO3RoaXMuQ2c9YiYmYi5zZW5kUmF3SnNvbnx8ITE7KGI9YiYmYi5odHRwU2Vzc2lvbklkUGFyYW0pJiYhdmEoYikmJih0aGlzLmIuSmcoYiksIGE9dGhpcy5UYywgbnVsbCE9PWEmJmIgaW4gYSYmKGE9dGhpcy5UYywgYiBpbiBhJiZkZWxldGUgYVtiXSwgKGE9dGhpcy5zKSYmYS5UKFwiSWdub3JlIGh0dHBTZXNzaW9uSWRQYXJhbSBhbHNvIHNwZWNpZmllZCB3aXRoIG1lc3NhZ2VVcmxQYXJhbXM6IFwiK2Isdm9pZCAwKSkpO3RoaXMueWQ9bmV3IFgodGhpcyk7fXgoVyxIKTtlPVcucHJvdG90eXBlO1xuZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjLGQpe1cuTC5hZGRFdmVudExpc3RlbmVyLmNhbGwodGhpcyxhLGIsYyxkKTt9O2UucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyxkKXtXLkwucmVtb3ZlRXZlbnRMaXN0ZW5lci5jYWxsKHRoaXMsYSxiLGMsZCk7fTtlLm9wZW49ZnVuY3Rpb24oKXt0aGlzLmIuSWUodGhpcy55ZCk7dGhpcy5VZyYmdGhpcy5iLk5nKCk7dGhpcy5iLmNvbm5lY3QodGhpcy5XZyx0aGlzLnpiLHRoaXMuVGN8fHZvaWQgMCk7fTtlLmNsb3NlPWZ1bmN0aW9uKCl7dGhpcy5iLmRpc2Nvbm5lY3QoKTt9O2Uuc2VuZD1mdW5jdGlvbihhKXtpZihsKGEpKXt2YXIgYj17fTtiLl9fZGF0YV9fPWE7dGhpcy5iLmFkKGIpO31lbHNlIHRoaXMuQ2c/KGI9e30sIGIuX19kYXRhX189KG5ldyBJKS5lYyhhKSwgdGhpcy5iLmFkKGIpKTp0aGlzLmIuYWQoYSk7fTtcbmUuRj1mdW5jdGlvbigpe3RoaXMuYi5JZShudWxsKTtkZWxldGUgdGhpcy55ZDt0aGlzLmIuZGlzY29ubmVjdCgpO2RlbGV0ZSB0aGlzLmI7Vy5MLkYuY2FsbCh0aGlzKTt9O2Z1bmN0aW9uIGdkKGEpe2pjLmNhbGwodGhpcyk7dmFyIGI9YS5fX3NtX187aWYoYil7YTp7Zm9yKHZhciBjIGluIGIpe2E9YzticmVhayBhfWE9dm9pZCAwO31pZih0aGlzLnFlPWEpYT10aGlzLnFlLCBiPW51bGwhPT1iJiZhIGluIGI/YlthXTp2b2lkIDA7dGhpcy5kYXRhPWI7fWVsc2UgdGhpcy5kYXRhPWE7fXgoZ2QsamMpO2Z1bmN0aW9uIGhkKGEpe2tjLmNhbGwodGhpcyk7dGhpcy5zdGF0dXM9MTt0aGlzLmVycm9yQ29kZT1hO314KGhkLGtjKTtmdW5jdGlvbiBYKGEpe3RoaXMuYj1hO314KFgsZGQpO1gucHJvdG90eXBlLnpkPWZ1bmN0aW9uKCl7WmIodGhpcy5iLnMsXCJXZWJDaGFubmVsIG9wZW5lZCBvbiBcIit0aGlzLmIuemIpO3RoaXMuYi5kaXNwYXRjaEV2ZW50KFwiYVwiKTt9O1gucHJvdG90eXBlLnhkPWZ1bmN0aW9uKGEpe3RoaXMuYi5kaXNwYXRjaEV2ZW50KG5ldyBnZChhKSk7fTtcblgucHJvdG90eXBlLndkPWZ1bmN0aW9uKGEpe1piKHRoaXMuYi5zLFwiV2ViQ2hhbm5lbCBhYm9ydGVkIG9uIFwiK3RoaXMuYi56YitcIiBkdWUgdG8gY2hhbm5lbCBlcnJvcjogXCIrYSk7dGhpcy5iLmRpc3BhdGNoRXZlbnQobmV3IGhkKGEpKTt9O1gucHJvdG90eXBlLnZkPWZ1bmN0aW9uKCl7WmIodGhpcy5iLnMsXCJXZWJDaGFubmVsIGNsb3NlZCBvbiBcIit0aGlzLmIuemIpO3RoaXMuYi5kaXNwYXRjaEV2ZW50KFwiYlwiKTt9O3ZhciBpZD12KGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT1hLnByb3RvdHlwZTt2YXIgZD1uZXcgYzthLmFwcGx5KGQsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKTtyZXR1cm4gZH0sZmQpO2Z1bmN0aW9uIGpkKCl7dGhpcy5WPVtdO3RoaXMuWj1bXTt9ZT1qZC5wcm90b3R5cGU7ZS5aZj1mdW5jdGlvbigpezA9PXRoaXMuVi5sZW5ndGgmJih0aGlzLlY9dGhpcy5aLCB0aGlzLlYucmV2ZXJzZSgpLCB0aGlzLlo9W10pO307ZS5lbnF1ZXVlPWZ1bmN0aW9uKGEpe3RoaXMuWi5wdXNoKGEpO307ZS5iYj1mdW5jdGlvbigpe3RoaXMuWmYoKTtyZXR1cm4gdGhpcy5WLnBvcCgpfTtlLkM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5WLmxlbmd0aCt0aGlzLloubGVuZ3RofTtlLlg9ZnVuY3Rpb24oKXtyZXR1cm4gMD09dGhpcy5WLmxlbmd0aCYmMD09dGhpcy5aLmxlbmd0aH07ZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuVj1bXTt0aGlzLlo9W107fTtlLmNvbnRhaW5zPWZ1bmN0aW9uKGEpe3JldHVybiAwPD1sYSh0aGlzLlYsYSl8fDA8PWxhKHRoaXMuWixhKX07XG5lLnJlbW92ZT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLlY7dmFyIGM9bWEoYixhKTswPD1jPyhBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYixjLDEpLCBiPSEwKTpiPSExO3JldHVybiBifHxzYSh0aGlzLlosYSl9O2UuSD1mdW5jdGlvbigpe2Zvcih2YXIgYT1bXSxiPXRoaXMuVi5sZW5ndGgtMTswPD1iOy0tYilhLnB1c2godGhpcy5WW2JdKTt2YXIgYz10aGlzLloubGVuZ3RoO2ZvcihiPTA7YjxjOysrYilhLnB1c2godGhpcy5aW2JdKTtyZXR1cm4gYX07ZnVuY3Rpb24ga2QoYSxiKXt6LmNhbGwodGhpcyk7dGhpcy5yZT1hfHwwO3RoaXMuWGI9Ynx8MTA7aWYodGhpcy5yZT50aGlzLlhiKXRocm93IEVycm9yKGxkKTt0aGlzLmZhPW5ldyBqZDt0aGlzLm9hPW5ldyBOYzt0aGlzLkNjPTA7dGhpcy5QYz1udWxsO3RoaXMuRGIoKTt9eChrZCx6KTt2YXIgbGQ9XCJbZ29vZy5zdHJ1Y3RzLlBvb2xdIE1pbiBjYW4gbm90IGJlIGdyZWF0ZXIgdGhhbiBtYXhcIjtlPWtkLnByb3RvdHlwZTtlLk5iPWZ1bmN0aW9uKCl7dmFyIGE9dygpO2lmKCEobnVsbCE9dGhpcy5QYyYmYS10aGlzLlBjPHRoaXMuQ2MpKXt2YXIgYj10aGlzLnVnKCk7YiYmKHRoaXMuUGM9YSwgdGhpcy5vYS5hZGQoYikpO3JldHVybiBifX07ZS5zZz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5vYS5yZW1vdmUoYSk/KHRoaXMucGMoYSksICEwKTohMX07XG5lLnVnPWZ1bmN0aW9uKCl7Zm9yKHZhciBhOzA8dGhpcy5XZCgpJiYoYT10aGlzLmZhLmJiKCksICF0aGlzLlVjKGEpKTspdGhpcy5EYigpOyFhJiZ0aGlzLkMoKTx0aGlzLlhiJiYoYT10aGlzLnpjKCkpO3JldHVybiBhfTtlLnBjPWZ1bmN0aW9uKGEpe3RoaXMub2EucmVtb3ZlKGEpO3RoaXMuVWMoYSkmJnRoaXMuQygpPHRoaXMuWGI/dGhpcy5mYS5lbnF1ZXVlKGEpOnRoaXMuRGMoYSk7fTtlLkRiPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuZmE7dGhpcy5DKCk8dGhpcy5yZTspYS5lbnF1ZXVlKHRoaXMuemMoKSk7Zm9yKDt0aGlzLkMoKT50aGlzLlhiJiYwPHRoaXMuV2QoKTspdGhpcy5EYyhhLmJiKCkpO307ZS56Yz1mdW5jdGlvbigpe3JldHVybnt9fTtlLkRjPWZ1bmN0aW9uKGEpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGEuY2IpYS5jYigpO2Vsc2UgZm9yKHZhciBiIGluIGEpYVtiXT1udWxsO307XG5lLlVjPWZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGEuYmY/YS5iZigpOiEwfTtlLmNvbnRhaW5zPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmZhLmNvbnRhaW5zKGEpfHx0aGlzLm9hLmNvbnRhaW5zKGEpfTtlLkM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mYS5DKCkrdGhpcy5vYS5DKCl9O2UudmY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vYS5DKCl9O2UuV2Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mYS5DKCl9O2UuWD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZhLlgoKSYmdGhpcy5vYS5YKCl9O2UuRj1mdW5jdGlvbigpe2tkLkwuRi5jYWxsKHRoaXMpO2lmKDA8dGhpcy52ZigpKXRocm93IEVycm9yKFwiW2dvb2cuc3RydWN0cy5Qb29sXSBPYmplY3RzIG5vdCByZWxlYXNlZFwiKTtkZWxldGUgdGhpcy5vYTtmb3IodmFyIGE9dGhpcy5mYTshYS5YKCk7KXRoaXMuRGMoYS5iYigpKTtkZWxldGUgdGhpcy5mYTt9O2Z1bmN0aW9uIG1kKGEsYil7dGhpcy5pZT1hO3RoaXMua2Q9Yjt9bWQucHJvdG90eXBlLmdldEtleT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmllfTttZC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG1kKHRoaXMuaWUsdGhpcy5rZCl9O2Z1bmN0aW9uIG5kKGEpe3RoaXMuWT1bXTthJiZ0aGlzLlBmKGEpO31lPW5kLnByb3RvdHlwZTtlLmZlPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5ZO2MucHVzaChuZXcgbWQoYSxiKSk7dGhpcy5kZyhjLmxlbmd0aC0xKTt9O2UuUGY9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIG5kKXt2YXIgYj1hLlcoKTthPWEuSCgpO2lmKDA+PXRoaXMuQygpKXtmb3IodmFyIGM9dGhpcy5ZLGQ9MDtkPGIubGVuZ3RoO2QrKyljLnB1c2gobmV3IG1kKGJbZF0sYVtkXSkpO3JldHVybn19ZWxzZSBiPUNhKGEpLCBhPUJhKGEpO2ZvcihkPTA7ZDxiLmxlbmd0aDtkKyspdGhpcy5mZShiW2RdLGFbZF0pO307ZS5yZW1vdmU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLlksYj1hLmxlbmd0aCxjPWFbMF07aWYoISgwPj1iKSlyZXR1cm4gMT09Yj9yYShhKTooYVswXT1hLnBvcCgpLCB0aGlzLmNnKCkpLCBjLmtkfTtcbmUuY2c9ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPXRoaXMuWSxjPWIubGVuZ3RoLGQ9YlthXTthPGM+PjE7KXt2YXIgZj10aGlzLnhmKGEpLGc9dGhpcy5EZihhKTtmPWc8YyYmYltnXS5nZXRLZXkoKTxiW2ZdLmdldEtleSgpP2c6ZjtpZihiW2ZdLmdldEtleSgpPmQuZ2V0S2V5KCkpYnJlYWs7YlthXT1iW2ZdO2E9Zjt9YlthXT1kO307ZS5kZz1mdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5ZLGM9YlthXTswPGE7KXt2YXIgZD10aGlzLkFmKGEpO2lmKGJbZF0uZ2V0S2V5KCk+Yy5nZXRLZXkoKSliW2FdPWJbZF0sIGE9ZDtlbHNlIGJyZWFrfWJbYV09Yzt9O2UueGY9ZnVuY3Rpb24oYSl7cmV0dXJuIDIqYSsxfTtlLkRmPWZ1bmN0aW9uKGEpe3JldHVybiAyKmErMn07ZS5BZj1mdW5jdGlvbihhKXtyZXR1cm4gYS0xPj4xfTtlLkg9ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5ZLGI9W10sYz1hLmxlbmd0aCxkPTA7ZDxjO2QrKyliLnB1c2goYVtkXS5rZCk7cmV0dXJuIGJ9O1xuZS5XPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuWSxiPVtdLGM9YS5sZW5ndGgsZD0wO2Q8YztkKyspYi5wdXNoKGFbZF0uZ2V0S2V5KCkpO3JldHVybiBifTtlLnZhPWZ1bmN0aW9uKGEpe3JldHVybiBvYSh0aGlzLlksZnVuY3Rpb24oYil7cmV0dXJuIGIuZ2V0S2V5KCk9PWF9KX07ZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgbmQodGhpcyl9O2UuQz1mdW5jdGlvbigpe3JldHVybiB0aGlzLlkubGVuZ3RofTtlLlg9ZnVuY3Rpb24oKXtyZXR1cm4gMD09dGhpcy5ZLmxlbmd0aH07ZS5jbGVhcj1mdW5jdGlvbigpe3JhKHRoaXMuWSk7fTtmdW5jdGlvbiBvZCgpe25kLmNhbGwodGhpcyk7fXgob2QsbmQpO29kLnByb3RvdHlwZS5lbnF1ZXVlPWZ1bmN0aW9uKGEsYil7dGhpcy5mZShhLGIpO307b2QucHJvdG90eXBlLmJiPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVtb3ZlKCl9O2Z1bmN0aW9uIFkoYSxiKXt0aGlzLkpkPXZvaWQgMDt0aGlzLmRjPW5ldyBvZDtrZC5jYWxsKHRoaXMsYSxiKTt9eChZLGtkKTtlPVkucHJvdG90eXBlO2UuTmI9ZnVuY3Rpb24oYSxiKXtpZighYSlyZXR1cm4oYT1ZLkwuTmIuY2FsbCh0aGlzKSkmJnRoaXMuQ2MmJih0aGlzLkpkPWguc2V0VGltZW91dCh1KHRoaXMuT2IsdGhpcyksdGhpcy5DYykpLCBhO3RoaXMuZGMuZW5xdWV1ZSh2b2lkIDAhPT1iP2I6MTAwLGEpO3RoaXMuT2IoKTt9O2UuT2I9ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5kYzswPGEuQygpOyl7dmFyIGI9dGhpcy5OYigpO2lmKGIpYS5iYigpLmFwcGx5KHRoaXMsW2JdKTtlbHNlIGJyZWFrfX07ZS5wYz1mdW5jdGlvbihhKXtZLkwucGMuY2FsbCh0aGlzLGEpO3RoaXMuT2IoKTt9O2UuRGI9ZnVuY3Rpb24oKXtZLkwuRGIuY2FsbCh0aGlzKTt0aGlzLk9iKCk7fTtcbmUuRj1mdW5jdGlvbigpe1kuTC5GLmNhbGwodGhpcyk7aC5jbGVhclRpbWVvdXQodGhpcy5KZCk7dGhpcy5kYy5jbGVhcigpO3RoaXMuZGM9bnVsbDt9O2Z1bmN0aW9uIFooYSxiLGMsZCl7dGhpcy5OZj1hO3RoaXMuQmI9ISFkO1kuY2FsbCh0aGlzLGIsYyk7fXgoWixZKTtaLnByb3RvdHlwZS56Yz1mdW5jdGlvbigpe3ZhciBhPW5ldyBWLGI9dGhpcy5OZjtiJiZiLmZvckVhY2goZnVuY3Rpb24oYixkKXthLmhlYWRlcnMuc2V0KGQsYik7fSk7dGhpcy5CYiYmYS5OZSghMCk7cmV0dXJuIGF9O1oucHJvdG90eXBlLlVjPWZ1bmN0aW9uKGEpe3JldHVybiFhLkthJiYhYS5CYSgpfTtmZC5wcm90b3R5cGUuY3JlYXRlV2ViQ2hhbm5lbD1mZC5wcm90b3R5cGUuZ2Y7Vy5wcm90b3R5cGUuc2VuZD1XLnByb3RvdHlwZS5zZW5kO1cucHJvdG90eXBlLm9wZW49Vy5wcm90b3R5cGUub3BlbjtXLnByb3RvdHlwZS5jbG9zZT1XLnByb3RvdHlwZS5jbG9zZTtlYy5OT19FUlJPUj0wO2VjLlRJTUVPVVQ9ODtlYy5IVFRQX0VSUk9SPTY7ZmMuQ09NUExFVEU9XCJjb21wbGV0ZVwiO2hjLkV2ZW50VHlwZT1pYztpYy5PUEVOPVwiYVwiO2ljLkNMT1NFPVwiYlwiO2ljLkVSUk9SPVwiY1wiO2ljLk1FU1NBR0U9XCJkXCI7SC5wcm90b3R5cGUubGlzdGVuPUgucHJvdG90eXBlLm9iO1oucHJvdG90eXBlLmdldE9iamVjdD1aLnByb3RvdHlwZS5OYjtaLnByb3RvdHlwZS5yZWxlYXNlT2JqZWN0PVoucHJvdG90eXBlLnNnO1YucHJvdG90eXBlLmxpc3Rlbk9uY2U9Vi5wcm90b3R5cGUuUWM7Vi5wcm90b3R5cGUuZ2V0TGFzdEVycm9yPVYucHJvdG90eXBlLkpjO1xuVi5wcm90b3R5cGUuZ2V0TGFzdEVycm9yQ29kZT1WLnByb3RvdHlwZS5YZDtWLnByb3RvdHlwZS5nZXRTdGF0dXM9Vi5wcm90b3R5cGUuemE7Vi5wcm90b3R5cGUuZ2V0U3RhdHVzVGV4dD1WLnByb3RvdHlwZS5hZTtWLnByb3RvdHlwZS5nZXRSZXNwb25zZUpzb249Vi5wcm90b3R5cGUuQ2Y7Vi5wcm90b3R5cGUuZ2V0UmVzcG9uc2VUZXh0PVYucHJvdG90eXBlLnlhO1YucHJvdG90eXBlLmdldFJlc3BvbnNlVGV4dD1WLnByb3RvdHlwZS55YTtWLnByb3RvdHlwZS5zZW5kPVYucHJvdG90eXBlLnNlbmQ7dmFyIHNyYz17Y3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydDppZCxFcnJvckNvZGU6ZWMsRXZlbnRUeXBlOmZjLFdlYkNoYW5uZWw6aGMsWGhySW9Qb29sOlp9O1xudmFyIHNyY18xID0gc3JjLmNyZWF0ZVdlYkNoYW5uZWxUcmFuc3BvcnQ7XG52YXIgc3JjXzIgPSBzcmMuRXJyb3JDb2RlO1xudmFyIHNyY18zID0gc3JjLkV2ZW50VHlwZTtcbnZhciBzcmNfNCA9IHNyYy5XZWJDaGFubmVsO1xudmFyIHNyY181ID0gc3JjLlhocklvUG9vbDtcblxuZXhwb3J0IGRlZmF1bHQgc3JjO1xuZXhwb3J0IHsgc3JjXzEgYXMgY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCwgc3JjXzIgYXMgRXJyb3JDb2RlLCBzcmNfMyBhcyBFdmVudFR5cGUsIHNyY180IGFzIFdlYkNoYW5uZWwsIHNyY181IGFzIFhocklvUG9vbCB9O1xuIiwiaW1wb3J0ICogYXMgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCAnZmlyZWJhc2UvZmlyZXN0b3JlJztcbnZhciBjb25maWcgPSB7XG4gICAgYXBpS2V5OiBcIkFJemFTeURaRVlXOTR2S2J3bTBHRE9uUk8zaFRLMWhBZ19KV1o1c1wiLFxuICAgIGF1dGhEb21haW46IFwibXZwLWlvbmljLWJmODMzLmZpcmViYXNlYXBwLmNvbVwiLFxuICAgIGRhdGFiYXNlVVJMOiBcImh0dHBzOi8vbXZwLWlvbmljLWJmODMzLmZpcmViYXNlaW8uY29tXCIsXG4gICAgcHJvamVjdElkOiBcIm12cC1pb25pYy1iZjgzM1wiLFxuICAgIHN0b3JhZ2VCdWNrZXQ6IFwibXZwLWlvbmljLWJmODMzLmFwcHNwb3QuY29tXCIsXG4gICAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiMjA4MzI5OTUwODUxXCJcbn07XG5maXJlYmFzZS5pbml0aWFsaXplQXBwKGNvbmZpZyk7XG5maXJlYmFzZS5maXJlc3RvcmUoKS5zZXR0aW5ncyh7IHRpbWVzdGFtcHNJblNuYXBzaG90czogdHJ1ZSB9KTtcbiQoZnVuY3Rpb24gKCkge1xuICAgIGZpcmViYXNlLmZpcmVzdG9yZSgpLmNvbGxlY3Rpb24oXCJwcm95ZWN0b3NcIikuZ2V0KClcbiAgICAgICAgLnRoZW4oKGRvY3MpID0+IHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gZG9jcy5kb2NzO1xuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICQoXCIucm93XCIpLmFwcGVuZChgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wgbTQgczZcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ke2VsZW1lbnQuZGF0YSgpLnRpdHVsb308L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImRlc1wiPiR7ZWxlbWVudC5kYXRhKCkuZGVzY3JpcGNpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaW5rX2FjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiR7ZWxlbWVudC5kYXRhKCkudXJsfVwiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWFycm93LXJpZ2h0XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAvLyBjb25zdCBkYXRhID0gW1xuICAgIC8vICAgICB7XG4gICAgLy8gICAgICAgICB0aXR1bG86IFwiPGI+TG9yZW0gSXBzdW08L2I+XCIsXG4gICAgLy8gICAgICAgICB1cmw6IFwiaHR0cHM6Ly9mYWNlYm9vay5jb21cIixcbiAgICAvLyAgICAgICAgIGRlc2NyaXBjaW9uOiBcImlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZS5cIlxuICAgIC8vICAgICB9LFxuICAgIC8vICAgICB7XG4gICAgLy8gICAgICAgICB0aXR1bG86IFwicHJ1ZWJhXCIsXG4gICAgLy8gICAgICAgICB1cmw6IFwiXCIsXG4gICAgLy8gICAgICAgICBkZXNjcmlwY2lvbjogXCJpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLlwiXG4gICAgLy8gICAgIH0sXG4gICAgLy8gICAgIHtcbiAgICAvLyAgICAgICAgIHRpdHVsbzogXCJIb2xhXCIsXG4gICAgLy8gICAgICAgICB1cmw6IFwiXCIsXG4gICAgLy8gICAgICAgICBkZXNjcmlwY2lvbjogXCJpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLlwiXG4gICAgLy8gICAgIH0sXG4gICAgLy8gICAgIHtcbiAgICAvLyAgICAgICAgIHRpdHVsbzogXCJwcnVlYmFcIixcbiAgICAvLyAgICAgICAgIHVybDogXCJcIixcbiAgICAvLyAgICAgICAgIGRlc2NyaXBjaW9uOiBcImlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMsIHdoZW4gYW4gdW5rbm93biBwcmludGVyIHRvb2sgYSBnYWxsZXkgb2YgdHlwZSBhbmQgc2NyYW1ibGVkIGl0IHRvIG1ha2UgYSB0eXBlIHNwZWNpbWVuIGJvb2suXCJcbiAgICAvLyAgICAgfSxcbiAgICAvLyAgICAge1xuICAgIC8vICAgICAgICAgdGl0dWxvOiBcIkhvbGFcIixcbiAgICAvLyAgICAgICAgIHVybDogXCJcIixcbiAgICAvLyAgICAgICAgIGRlc2NyaXBjaW9uOiBcImlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMsIHdoZW4gYW4gdW5rbm93biBwcmludGVyIHRvb2sgYSBnYWxsZXkgb2YgdHlwZSBhbmQgc2NyYW1ibGVkIGl0IHRvIG1ha2UgYSB0eXBlIHNwZWNpbWVuIGJvb2suXCJcbiAgICAvLyAgICAgfSxcbiAgICAvLyAgICAge1xuICAgIC8vICAgICAgICAgdGl0dWxvOiBcInBydWViYVwiLFxuICAgIC8vICAgICAgICAgdXJsOiBcIlwiLFxuICAgIC8vICAgICAgICAgZGVzY3JpcGNpb246IFwiaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZiB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay5cIlxuICAgIC8vICAgICB9XG4gICAgLy8gXTsgXG59KTsiXSwic291cmNlUm9vdCI6IiJ9