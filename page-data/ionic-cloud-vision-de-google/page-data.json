{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/ionic-cloud-vision-de-google","result":{"data":{"post":{"slug":"/ionic-cloud-vision-de-google","title":"Ionic + Cloud Vision de Google","date":"10.11.2018","tags":[{"name":"IoT","slug":"io-t"},{"name":"IA","slug":"ia"},{"name":"Cloud Vision","slug":"cloud-vision"},{"name":"javascript","slug":"javascript"},{"name":"programación","slug":"programacion"},{"name":"Ionic","slug":"ionic"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Ionic + Cloud Vision de Google\",\n  \"date\": \"2018-11-10T22:53:13.000Z\",\n  \"tags\": [\"IoT\", \"IA\", \"Cloud Vision\", \"javascript\", \"programación\", \"Ionic\"],\n  \"slug\": \"/ionic-cloud-vision-de-google\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"En est\\xE1 ocasi\\xF3n estaremos viendo como crear una imitaci\\xF3n de la aplicaci\\xF3n \\\"Not hot dog app\\\" que aparece en la famosa serie silycon valley, por si acaso no sabes cual es la aplicaci\\xF3n te dejo un \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=pqTntG1RXSY\"\n  }, \"link\"), \" para que le des un vistaso.\"), mdx(\"p\", null, \"Para hacer posible la aplicaci\\xF3n utilizaremos \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ionicframework.com/\"\n  }, \"Ionic Framework\"), \" y el Api de Google \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cloud.google.com/vision/\"\n  }, \"Cloud Vision\"), \", por lo tanto lo primero que debemos hacer es instalar Ionic e iniciar un nuevo proyecto, lo conseguimos de la siguiente manera (infiero que tienes instalado \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/es/\"\n  }, \"Node.js y npm\"), \")\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ npm i ionic -g && ionic start hotDogoNo blank\\n\")), mdx(\"p\", null, \"El primer comando instalara ionic de manera global en el sistema, el segundo iniciara un nuevo proyecto de ionic llamado hotDogoNo y con la plantilla blank, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ionicframework.com/getting-started#cli\"\n  }, \"ac\\xE1\"), \" pueden ver m\\xE1s al respecto.\"), mdx(\"p\", null, \"Ahora de momento iremos a la pagina de \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cloud.google.com/vision/\"\n  }, \"Cloud Vision\"), \" y activamos la Api y guardamos el Api Key.\"), mdx(\"p\", null, \"Abrimos el proyecto de ionic en nuestro editor favorito, y nos centraremos en la carpeta /src/ y ahora especificamente en el archivo /src/app/app.modules.ts donde importaremos el modulo http de angular con el que realizaremos las peticiones y tambi\\xE9n el modulo de la c\\xE1mara para poder tomar la foto desde el celular y colocamos los m\\xF3dulos dentro del array de imports y providers respectivamente.\"), mdx(\"p\", null, \"Para instalar el modulo de la c\\xE1mara\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ ionic cordova plugin add cordova-plugin-camera\\n$ npm install --save @ionic-native/camera\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { BrowserModule } from '@angular/platform-browser';\\nimport { ErrorHandler, NgModule } from '@angular/core';\\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\\nimport { SplashScreen } from '@ionic-native/splash-screen';\\nimport { StatusBar } from '@ionic-native/status-bar';\\nimport { HttpModule } from '@angular/http'; //HttpModule\\nimport { Camera } from '@ionic-native/camera'; //Camara\\n\\nimport { MyApp } from './app.component';\\n\\n@NgModule({\\n  declarations: [\\n    MyApp\\n  ],\\n  imports: [\\n    BrowserModule,\\n    IonicModule.forRoot(MyApp),\\n    HttpModule //Array de imporst\\n  ],\\n  bootstrap: [IonicApp],\\n  entryComponents: [\\n    MyApp\\n  ],\\n  providers: [\\n    StatusBar,\\n    SplashScreen,\\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\\n    Camera // Array de providers\\n  ]\\n})\\nexport class AppModule {}\\n\\n\")), mdx(\"p\", null, \"Por el momento es todo en este archivo.\"), mdx(\"p\", null, \"Ahora vamos al archivo /src/ages/inicio/inicio.ts\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Yo he eliminado la pagina \\\"home\\\" que viene por defecto y he creado la pagina \\\"inicio\\\"\")), mdx(\"p\", null, \"En la pagina de inicio escribiremos el c\\xF3digo necesario para la l\\xF3gica de la aplicaci\\xF3n, o sea, aqu\\xED capturamos la imagen y la enviamos a Cloud Vision para luego trabajar con el resultado que nos retorna, pero veamos y analicemos el c\\xF3digo\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cloud.google.com/vision/docs/request\"\n  }, \"Aqu\\xED\"), \" pueden ver como es la estructura para enviar la petici\\xF3n a Cloud Vision\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { SplashScreen } from '@ionic-native/splash-screen';\\nimport { Component } from '@angular/core';\\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\\nimport { Http } from '@angular/http';\\nimport { LoadingController } from 'ionic-angular/components/loading/loading-controller';\\nimport { Camera, CameraOptions } from '@ionic-native/camera';\\nimport { ToastController } from 'ionic-angular/components/toast/toast-controller';\\n// imports necesarios\\n\\n@IonicPage({\\n  //Lazy loading\\n  name: \\\"inicio\\\"\\n})\\n@Component({\\n  selector: 'page-inicio',\\n  templateUrl: 'inicio.html',\\n})\\nexport class InicioPage {\\n  //Variables utilizadas en la aplicaci\\xF3n\\n\\n  //Apikey de google cloud vision\\n  googleCloudVisionAPIKey = \\\"TUAPIKEY\\\";\\n  //Para obtener las respuestas de google cloud vision\\n  labels: any[] = [];\\n  //Para dar vista previa a la imgen\\n  imagen: any = null;\\n  //Respuesta de google cloud vison\\n  resultado: any = null;\\n  //variable de control de si es o no es hotdog\\n  es: boolean = false;\\n  \\n  constructor(public navCtrl: NavController, public navParams: NavParams, public splashScreen: SplashScreen, public http: Http, public loader: LoadingController, private camera: Camera, public toast: ToastController) {\\n      //Objetos necesarios, necesarios tambien agregarlos en el app.module.ts\\n  }\\n\\n  ionViewDidLoad() {\\n    //Para ocultar el splash de ionic\\n    this.splashScreen.hide();\\n  }\\n\\n\\n  //Funcion para hacer la petici\\xF3n a google cloud vision, estructura necesaria para la petici\\xF3n segun la documentaci\\xF3n\\n  getLabels(base64) {\\n    const body = {\\n      \\\"requests\\\": [\\n        {\\n          \\\"image\\\": {\\n            \\\"content\\\": base64\\n          },\\n          \\\"features\\\": [\\n            {\\n              \\\"type\\\": \\\"LABEL_DETECTION\\\"\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n    //Retornar la respuesta\\n    return this.http.post(`https://vision.googleapis.com/v1/images:annotate?key=${this.googleCloudVisionAPIKey}`, body)\\n  }\\n\\n  //Funcion para abrir la camara y procesar la imagen\\n  tomarFoto() {\\n    //Crear loader\\n    let loader = this.loader.create({\\n      content: 'Ejecutando analisis...'\\n    });\\n    //Mostrar loader\\n    loader.present();\\n    //Opciones para abrir la camara\\n    const opciones: CameraOptions = {\\n      //Calidad de la imagen\\n      quality: 100,\\n      //Alto de la imagen\\n      targetHeight: 500,\\n      //Ancho de la imagen\\n      targetWidth: 500,\\n      //Tip de respuesta (base64 en este caso)\\n      destinationTyp-e: this.camera.DestinationType.DATA_URL,\\n      //Tipo png\\n      encodingType: this.camera.EncodingType.PNG,\\n      mediaType: this.camera.MediaType.PICTURE,\\n      //Abrir desde la camara (se puede tambien desde la galeria)\\n      sourceType: this.camera.PictureSourceType.CAMERA\\n    }\\n    //Abirmos la camara pasando las opciones antes estipuladas\\n    this.camera.getPicture(opciones).then((img) => {\\n      this.labels = [];\\n      this.es = false;\\n      //Hacemos la petici\\xF3n a google cloud vision\\n      this.getLabels(img).subscribe((resultados) => {\\n        //Hacemos la variable imagen igual a la imagen obtenida por la camara para mostrar la vista previa\\n        this.imagen = img;\\n        //Obtenemos los resultados que nos da google\\n        this.resultado = resultados.json().responses;\\n        //Recorremos las etiquetas de la respuesta con map()\\n        this.resultado[0].labelAnnotations.map(obj => {\\n          //Guardamos las etiquetas en la variable labels\\n          this.labels.push(obj.description);\\n          //Si algunas de las etiquetas es \\\"hot dog\\\" entonces es un hot dog\\n          if (obj.description == \\\"hot dog\\\") this.es = true;\\n        });\\n        //Quitamos el loader\\n        loader.dismiss();\\n      }, err => {\\n        //Por si acaso ocurre un error\\n        loader.dismiss();\\n        this.mostrarToast(err.message, 5000);\\n      });\\n    }, err => {\\n      //Por si acaso ocurre un error\\n      loader.dismiss();\\n      this.mostrarToast(err.message, 5000);\\n    });\\n  }\\n\\n  //Funcion para mostrar mensaje de error recibe mensaje de error y la duraci\\xF3n de el mensaje\\n  mostrarToast(mensaje: string, duracion: number) {\\n    this.toast.create({\\n      message: mensaje,\\n      duration: duracion\\n    }).present();\\n  }\\n\\n}\\n\\n\")), mdx(\"p\", null, \"El anterior es el c\\xF3digo de toda la l\\xF3gica de la aplicaci\\xF3n, bastante optim\\xEDzable por cierto pero por cuestiones del tutorial lo escrib\\xED as\\xED.\"), mdx(\"p\", null, \"Ahora en el archivo /src/ages/inicio/inicio.html tendremos los siguiente\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<ion-header>\\n  <!-- Color rojo de el navbar -->\\n  <ion-navbar color=\\\"danger\\\">\\n    <ion-title>\\xBFHog dog o no?</ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <ion-row margin>\\n    <ion-card>\\n      <!-- Si la imagen existe, mostramos su vista previa -->\\n      <img *ngIf=\\\"imagen\\\" [src]=\\\"'data:image/png;base64,' + imagen\\\" />\\n    </ion-card>\\n  </ion-row>\\n\\n  <!-- Si existe ya un resultado, mostraremos lo siguiente -->\\n  <ion-col *ngIf=\\\"resultado\\\">\\n\\n    <!-- Si la variable \\\"es\\\" esta en true, mostramos que es un hotdog, de lo contrario pues mostramos que no es hotdog -->\\n    <button *ngIf=\\\"es\\\" color=\\\"secondary\\\" ion-button full>\\n      \\xA1Es un Hotdog!\\n    </button>\\n\\n    <button *ngIf=\\\"!es\\\" color=\\\"danger\\\" ion-button full>\\n      \\xA1No es Hotdog!\\n    </button>\\n\\n    <!-- Si no es hotdog mostramos las etiquetas de lo que posiblemente est\\xE1 en la imagen -->\\n    <div *ngIf=\\\"!es\\\">\\n      <h3>Posiblemente sea</h3>\\n\\n      <!-- Recorremos la variable labels -->\\n      <ion-chip color=\\\"secondary\\\" *ngFor=\\\"let label of labels\\\">\\n\\n        <!-- Mostramos una por una -->\\n        <ion-label>{{ label }}</ion-label>\\n\\n      </ion-chip>\\n    </div>\\n\\n  </ion-col>\\n  <!-- Boton flotante que ejecuta la funcion tomarFoto() -->\\n  <ion-fab bottom right>\\n    <button color=\\\"danger\\\" ion-fab (click)=\\\"tomarFoto()\\\">\\n      <ion-icon name=\\\"camera\\\"></ion-icon>\\n    </button>\\n  </ion-fab>\\n</ion-content>\\n\\n\")), mdx(\"p\", null, \"Y ahora veamos un poquito la aplicaci\\xF3n funcionando\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.youtube.com/watch?v=7YL4uP7oLhg\"\n  }, mdx(\"img\", {\n    parentName: \"a\",\n    \"src\": \"http://img.youtube.com/vi/7YL4uP7oLhg/0.jpg\",\n    \"alt\": \"IMAGE ALT TEXT HERE\"\n  }))), mdx(\"p\", null, \"Mis disculpas por la alerta molestosa que sale al grabar el mi celular xD\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gitlab.com/JoralmoPro/hotDogoNo\"\n  }, \"C\\xF3digo en gitlab\")), mdx(\"p\", null, \"Cualquier duda o sugerencia estoy en las redes como @JoralmoPro\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Nos vemos en linea\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"En está ocasión estaremos viendo como crear una imitación de la aplicación \"Not hot dog app\" que aparece en la famosa serie silycon valley…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/ionic-cloud-vision-de-google","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}